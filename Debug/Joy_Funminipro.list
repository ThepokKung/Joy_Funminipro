
Joy_Funminipro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001857c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001254  08018760  08018760  00019760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080199b4  080199b4  0001b388  2**0
                  CONTENTS
  4 .ARM          00000008  080199b4  080199b4  0001a9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080199bc  080199bc  0001b388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080199bc  080199bc  0001a9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080199c8  080199c8  0001a9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000388  20000000  080199cc  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000afbc  20000388  08019d54  0001b388  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000b344  08019d54  0001c344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b388  2**0
                  CONTENTS, READONLY
 12 .debug_info   000212e1  00000000  00000000  0001b3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cbf  00000000  00000000  0003c699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001900  00000000  00000000  00041358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012fb  00000000  00000000  00042c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d804  00000000  00000000  00043f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020088  00000000  00000000  00071757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117783  00000000  00000000  000917df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001a8f62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074f0  00000000  00000000  001a8fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  001b04c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000388 	.word	0x20000388
 80001fc:	00000000 	.word	0x00000000
 8000200:	08018744 	.word	0x08018744

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000038c 	.word	0x2000038c
 800021c:	08018744 	.word	0x08018744

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_ldivmod>:
 8000668:	b97b      	cbnz	r3, 800068a <__aeabi_ldivmod+0x22>
 800066a:	b972      	cbnz	r2, 800068a <__aeabi_ldivmod+0x22>
 800066c:	2900      	cmp	r1, #0
 800066e:	bfbe      	ittt	lt
 8000670:	2000      	movlt	r0, #0
 8000672:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000676:	e006      	blt.n	8000686 <__aeabi_ldivmod+0x1e>
 8000678:	bf08      	it	eq
 800067a:	2800      	cmpeq	r0, #0
 800067c:	bf1c      	itt	ne
 800067e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000682:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000686:	f000 b9b5 	b.w	80009f4 <__aeabi_idiv0>
 800068a:	f1ad 0c08 	sub.w	ip, sp, #8
 800068e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000692:	2900      	cmp	r1, #0
 8000694:	db09      	blt.n	80006aa <__aeabi_ldivmod+0x42>
 8000696:	2b00      	cmp	r3, #0
 8000698:	db1a      	blt.n	80006d0 <__aeabi_ldivmod+0x68>
 800069a:	f000 f84d 	bl	8000738 <__udivmoddi4>
 800069e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a6:	b004      	add	sp, #16
 80006a8:	4770      	bx	lr
 80006aa:	4240      	negs	r0, r0
 80006ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db1b      	blt.n	80006ec <__aeabi_ldivmod+0x84>
 80006b4:	f000 f840 	bl	8000738 <__udivmoddi4>
 80006b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c0:	b004      	add	sp, #16
 80006c2:	4240      	negs	r0, r0
 80006c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c8:	4252      	negs	r2, r2
 80006ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ce:	4770      	bx	lr
 80006d0:	4252      	negs	r2, r2
 80006d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006d6:	f000 f82f 	bl	8000738 <__udivmoddi4>
 80006da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e2:	b004      	add	sp, #16
 80006e4:	4240      	negs	r0, r0
 80006e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ea:	4770      	bx	lr
 80006ec:	4252      	negs	r2, r2
 80006ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f2:	f000 f821 	bl	8000738 <__udivmoddi4>
 80006f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006fe:	b004      	add	sp, #16
 8000700:	4252      	negs	r2, r2
 8000702:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000706:	4770      	bx	lr

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800071c:	f000 b96a 	b.w	80009f4 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	460c      	mov	r4, r1
 8000740:	2b00      	cmp	r3, #0
 8000742:	d14e      	bne.n	80007e2 <__udivmoddi4+0xaa>
 8000744:	4694      	mov	ip, r2
 8000746:	458c      	cmp	ip, r1
 8000748:	4686      	mov	lr, r0
 800074a:	fab2 f282 	clz	r2, r2
 800074e:	d962      	bls.n	8000816 <__udivmoddi4+0xde>
 8000750:	b14a      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000752:	f1c2 0320 	rsb	r3, r2, #32
 8000756:	4091      	lsls	r1, r2
 8000758:	fa20 f303 	lsr.w	r3, r0, r3
 800075c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000760:	4319      	orrs	r1, r3
 8000762:	fa00 fe02 	lsl.w	lr, r0, r2
 8000766:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800076a:	fa1f f68c 	uxth.w	r6, ip
 800076e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000772:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000776:	fb07 1114 	mls	r1, r7, r4, r1
 800077a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077e:	fb04 f106 	mul.w	r1, r4, r6
 8000782:	4299      	cmp	r1, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x64>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800078e:	f080 8112 	bcs.w	80009b6 <__udivmoddi4+0x27e>
 8000792:	4299      	cmp	r1, r3
 8000794:	f240 810f 	bls.w	80009b6 <__udivmoddi4+0x27e>
 8000798:	3c02      	subs	r4, #2
 800079a:	4463      	add	r3, ip
 800079c:	1a59      	subs	r1, r3, r1
 800079e:	fa1f f38e 	uxth.w	r3, lr
 80007a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80007a6:	fb07 1110 	mls	r1, r7, r0, r1
 80007aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ae:	fb00 f606 	mul.w	r6, r0, r6
 80007b2:	429e      	cmp	r6, r3
 80007b4:	d90a      	bls.n	80007cc <__udivmoddi4+0x94>
 80007b6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80007be:	f080 80fc 	bcs.w	80009ba <__udivmoddi4+0x282>
 80007c2:	429e      	cmp	r6, r3
 80007c4:	f240 80f9 	bls.w	80009ba <__udivmoddi4+0x282>
 80007c8:	4463      	add	r3, ip
 80007ca:	3802      	subs	r0, #2
 80007cc:	1b9b      	subs	r3, r3, r6
 80007ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007d2:	2100      	movs	r1, #0
 80007d4:	b11d      	cbz	r5, 80007de <__udivmoddi4+0xa6>
 80007d6:	40d3      	lsrs	r3, r2
 80007d8:	2200      	movs	r2, #0
 80007da:	e9c5 3200 	strd	r3, r2, [r5]
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d905      	bls.n	80007f2 <__udivmoddi4+0xba>
 80007e6:	b10d      	cbz	r5, 80007ec <__udivmoddi4+0xb4>
 80007e8:	e9c5 0100 	strd	r0, r1, [r5]
 80007ec:	2100      	movs	r1, #0
 80007ee:	4608      	mov	r0, r1
 80007f0:	e7f5      	b.n	80007de <__udivmoddi4+0xa6>
 80007f2:	fab3 f183 	clz	r1, r3
 80007f6:	2900      	cmp	r1, #0
 80007f8:	d146      	bne.n	8000888 <__udivmoddi4+0x150>
 80007fa:	42a3      	cmp	r3, r4
 80007fc:	d302      	bcc.n	8000804 <__udivmoddi4+0xcc>
 80007fe:	4290      	cmp	r0, r2
 8000800:	f0c0 80f0 	bcc.w	80009e4 <__udivmoddi4+0x2ac>
 8000804:	1a86      	subs	r6, r0, r2
 8000806:	eb64 0303 	sbc.w	r3, r4, r3
 800080a:	2001      	movs	r0, #1
 800080c:	2d00      	cmp	r5, #0
 800080e:	d0e6      	beq.n	80007de <__udivmoddi4+0xa6>
 8000810:	e9c5 6300 	strd	r6, r3, [r5]
 8000814:	e7e3      	b.n	80007de <__udivmoddi4+0xa6>
 8000816:	2a00      	cmp	r2, #0
 8000818:	f040 8090 	bne.w	800093c <__udivmoddi4+0x204>
 800081c:	eba1 040c 	sub.w	r4, r1, ip
 8000820:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000824:	fa1f f78c 	uxth.w	r7, ip
 8000828:	2101      	movs	r1, #1
 800082a:	fbb4 f6f8 	udiv	r6, r4, r8
 800082e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000832:	fb08 4416 	mls	r4, r8, r6, r4
 8000836:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800083a:	fb07 f006 	mul.w	r0, r7, r6
 800083e:	4298      	cmp	r0, r3
 8000840:	d908      	bls.n	8000854 <__udivmoddi4+0x11c>
 8000842:	eb1c 0303 	adds.w	r3, ip, r3
 8000846:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x11a>
 800084c:	4298      	cmp	r0, r3
 800084e:	f200 80cd 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 8000852:	4626      	mov	r6, r4
 8000854:	1a1c      	subs	r4, r3, r0
 8000856:	fa1f f38e 	uxth.w	r3, lr
 800085a:	fbb4 f0f8 	udiv	r0, r4, r8
 800085e:	fb08 4410 	mls	r4, r8, r0, r4
 8000862:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000866:	fb00 f707 	mul.w	r7, r0, r7
 800086a:	429f      	cmp	r7, r3
 800086c:	d908      	bls.n	8000880 <__udivmoddi4+0x148>
 800086e:	eb1c 0303 	adds.w	r3, ip, r3
 8000872:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000876:	d202      	bcs.n	800087e <__udivmoddi4+0x146>
 8000878:	429f      	cmp	r7, r3
 800087a:	f200 80b0 	bhi.w	80009de <__udivmoddi4+0x2a6>
 800087e:	4620      	mov	r0, r4
 8000880:	1bdb      	subs	r3, r3, r7
 8000882:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000886:	e7a5      	b.n	80007d4 <__udivmoddi4+0x9c>
 8000888:	f1c1 0620 	rsb	r6, r1, #32
 800088c:	408b      	lsls	r3, r1
 800088e:	fa22 f706 	lsr.w	r7, r2, r6
 8000892:	431f      	orrs	r7, r3
 8000894:	fa20 fc06 	lsr.w	ip, r0, r6
 8000898:	fa04 f301 	lsl.w	r3, r4, r1
 800089c:	ea43 030c 	orr.w	r3, r3, ip
 80008a0:	40f4      	lsrs	r4, r6
 80008a2:	fa00 f801 	lsl.w	r8, r0, r1
 80008a6:	0c38      	lsrs	r0, r7, #16
 80008a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008ac:	fbb4 fef0 	udiv	lr, r4, r0
 80008b0:	fa1f fc87 	uxth.w	ip, r7
 80008b4:	fb00 441e 	mls	r4, r0, lr, r4
 80008b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008bc:	fb0e f90c 	mul.w	r9, lr, ip
 80008c0:	45a1      	cmp	r9, r4
 80008c2:	fa02 f201 	lsl.w	r2, r2, r1
 80008c6:	d90a      	bls.n	80008de <__udivmoddi4+0x1a6>
 80008c8:	193c      	adds	r4, r7, r4
 80008ca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80008ce:	f080 8084 	bcs.w	80009da <__udivmoddi4+0x2a2>
 80008d2:	45a1      	cmp	r9, r4
 80008d4:	f240 8081 	bls.w	80009da <__udivmoddi4+0x2a2>
 80008d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008dc:	443c      	add	r4, r7
 80008de:	eba4 0409 	sub.w	r4, r4, r9
 80008e2:	fa1f f983 	uxth.w	r9, r3
 80008e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ea:	fb00 4413 	mls	r4, r0, r3, r4
 80008ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008f6:	45a4      	cmp	ip, r4
 80008f8:	d907      	bls.n	800090a <__udivmoddi4+0x1d2>
 80008fa:	193c      	adds	r4, r7, r4
 80008fc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000900:	d267      	bcs.n	80009d2 <__udivmoddi4+0x29a>
 8000902:	45a4      	cmp	ip, r4
 8000904:	d965      	bls.n	80009d2 <__udivmoddi4+0x29a>
 8000906:	3b02      	subs	r3, #2
 8000908:	443c      	add	r4, r7
 800090a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800090e:	fba0 9302 	umull	r9, r3, r0, r2
 8000912:	eba4 040c 	sub.w	r4, r4, ip
 8000916:	429c      	cmp	r4, r3
 8000918:	46ce      	mov	lr, r9
 800091a:	469c      	mov	ip, r3
 800091c:	d351      	bcc.n	80009c2 <__udivmoddi4+0x28a>
 800091e:	d04e      	beq.n	80009be <__udivmoddi4+0x286>
 8000920:	b155      	cbz	r5, 8000938 <__udivmoddi4+0x200>
 8000922:	ebb8 030e 	subs.w	r3, r8, lr
 8000926:	eb64 040c 	sbc.w	r4, r4, ip
 800092a:	fa04 f606 	lsl.w	r6, r4, r6
 800092e:	40cb      	lsrs	r3, r1
 8000930:	431e      	orrs	r6, r3
 8000932:	40cc      	lsrs	r4, r1
 8000934:	e9c5 6400 	strd	r6, r4, [r5]
 8000938:	2100      	movs	r1, #0
 800093a:	e750      	b.n	80007de <__udivmoddi4+0xa6>
 800093c:	f1c2 0320 	rsb	r3, r2, #32
 8000940:	fa20 f103 	lsr.w	r1, r0, r3
 8000944:	fa0c fc02 	lsl.w	ip, ip, r2
 8000948:	fa24 f303 	lsr.w	r3, r4, r3
 800094c:	4094      	lsls	r4, r2
 800094e:	430c      	orrs	r4, r1
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa00 fe02 	lsl.w	lr, r0, r2
 8000958:	fa1f f78c 	uxth.w	r7, ip
 800095c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000960:	fb08 3110 	mls	r1, r8, r0, r3
 8000964:	0c23      	lsrs	r3, r4, #16
 8000966:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800096a:	fb00 f107 	mul.w	r1, r0, r7
 800096e:	4299      	cmp	r1, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x24c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800097a:	d22c      	bcs.n	80009d6 <__udivmoddi4+0x29e>
 800097c:	4299      	cmp	r1, r3
 800097e:	d92a      	bls.n	80009d6 <__udivmoddi4+0x29e>
 8000980:	3802      	subs	r0, #2
 8000982:	4463      	add	r3, ip
 8000984:	1a5b      	subs	r3, r3, r1
 8000986:	b2a4      	uxth	r4, r4
 8000988:	fbb3 f1f8 	udiv	r1, r3, r8
 800098c:	fb08 3311 	mls	r3, r8, r1, r3
 8000990:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000994:	fb01 f307 	mul.w	r3, r1, r7
 8000998:	42a3      	cmp	r3, r4
 800099a:	d908      	bls.n	80009ae <__udivmoddi4+0x276>
 800099c:	eb1c 0404 	adds.w	r4, ip, r4
 80009a0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80009a4:	d213      	bcs.n	80009ce <__udivmoddi4+0x296>
 80009a6:	42a3      	cmp	r3, r4
 80009a8:	d911      	bls.n	80009ce <__udivmoddi4+0x296>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4464      	add	r4, ip
 80009ae:	1ae4      	subs	r4, r4, r3
 80009b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009b4:	e739      	b.n	800082a <__udivmoddi4+0xf2>
 80009b6:	4604      	mov	r4, r0
 80009b8:	e6f0      	b.n	800079c <__udivmoddi4+0x64>
 80009ba:	4608      	mov	r0, r1
 80009bc:	e706      	b.n	80007cc <__udivmoddi4+0x94>
 80009be:	45c8      	cmp	r8, r9
 80009c0:	d2ae      	bcs.n	8000920 <__udivmoddi4+0x1e8>
 80009c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ca:	3801      	subs	r0, #1
 80009cc:	e7a8      	b.n	8000920 <__udivmoddi4+0x1e8>
 80009ce:	4631      	mov	r1, r6
 80009d0:	e7ed      	b.n	80009ae <__udivmoddi4+0x276>
 80009d2:	4603      	mov	r3, r0
 80009d4:	e799      	b.n	800090a <__udivmoddi4+0x1d2>
 80009d6:	4630      	mov	r0, r6
 80009d8:	e7d4      	b.n	8000984 <__udivmoddi4+0x24c>
 80009da:	46d6      	mov	lr, sl
 80009dc:	e77f      	b.n	80008de <__udivmoddi4+0x1a6>
 80009de:	4463      	add	r3, ip
 80009e0:	3802      	subs	r0, #2
 80009e2:	e74d      	b.n	8000880 <__udivmoddi4+0x148>
 80009e4:	4606      	mov	r6, r0
 80009e6:	4623      	mov	r3, r4
 80009e8:	4608      	mov	r0, r1
 80009ea:	e70f      	b.n	800080c <__udivmoddi4+0xd4>
 80009ec:	3e02      	subs	r6, #2
 80009ee:	4463      	add	r3, ip
 80009f0:	e730      	b.n	8000854 <__udivmoddi4+0x11c>
 80009f2:	bf00      	nop

080009f4 <__aeabi_idiv0>:
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	@ 0x30
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2220      	movs	r2, #32
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f016 fef9 	bl	8017808 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a16:	4b39      	ldr	r3, [pc, #228]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a1e:	4b37      	ldr	r3, [pc, #220]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a20:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a26:	4b35      	ldr	r3, [pc, #212]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a2c:	4b33      	ldr	r3, [pc, #204]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000a32:	4b32      	ldr	r3, [pc, #200]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a38:	4b30      	ldr	r3, [pc, #192]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a40:	2204      	movs	r2, #4
 8000a42:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a44:	4b2d      	ldr	r3, [pc, #180]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000a50:	4b2a      	ldr	r3, [pc, #168]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a52:	2202      	movs	r2, #2
 8000a54:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a56:	4b29      	ldr	r3, [pc, #164]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a5e:	4b27      	ldr	r3, [pc, #156]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a64:	4b25      	ldr	r3, [pc, #148]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a6a:	4b24      	ldr	r3, [pc, #144]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a72:	4b22      	ldr	r3, [pc, #136]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000a78:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a80:	481e      	ldr	r0, [pc, #120]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a82:	f001 fd59 	bl	8002538 <HAL_ADC_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000a8c:	f000 fea8 	bl	80017e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4818      	ldr	r0, [pc, #96]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a9c:	f002 fe78 	bl	8003790 <HAL_ADCEx_MultiModeConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000aa6:	f000 fe9b 	bl	80017e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000aaa:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000aac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aae:	2306      	movs	r3, #6
 8000ab0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ab6:	237f      	movs	r3, #127	@ 0x7f
 8000ab8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aba:	2304      	movs	r3, #4
 8000abc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480d      	ldr	r0, [pc, #52]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000ac8:	f001 ffe4 	bl	8002a94 <HAL_ADC_ConfigChannel>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000ad2:	f000 fe85 	bl	80017e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <MX_ADC1_Init+0x10c>)
 8000ad8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ada:	230c      	movs	r3, #12
 8000adc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4806      	ldr	r0, [pc, #24]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000ae4:	f001 ffd6 	bl	8002a94 <HAL_ADC_ConfigChannel>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000aee:	f000 fe77 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	3730      	adds	r7, #48	@ 0x30
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200003a4 	.word	0x200003a4
 8000b00:	04300002 	.word	0x04300002
 8000b04:	08600004 	.word	0x08600004

08000b08 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b09e      	sub	sp, #120	@ 0x78
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	2254      	movs	r2, #84	@ 0x54
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f016 fe6d 	bl	8017808 <memset>
  if(adcHandle->Instance==ADC1)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b36:	d15f      	bne.n	8000bf8 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b3c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b3e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000b42:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f004 fb75 	bl	8005238 <HAL_RCCEx_PeriphCLKConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b54:	f000 fe44 	bl	80017e0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b58:	4b29      	ldr	r3, [pc, #164]	@ (8000c00 <HAL_ADC_MspInit+0xf8>)
 8000b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5c:	4a28      	ldr	r2, [pc, #160]	@ (8000c00 <HAL_ADC_MspInit+0xf8>)
 8000b5e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b64:	4b26      	ldr	r3, [pc, #152]	@ (8000c00 <HAL_ADC_MspInit+0xf8>)
 8000b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	4b23      	ldr	r3, [pc, #140]	@ (8000c00 <HAL_ADC_MspInit+0xf8>)
 8000b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b74:	4a22      	ldr	r2, [pc, #136]	@ (8000c00 <HAL_ADC_MspInit+0xf8>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7c:	4b20      	ldr	r3, [pc, #128]	@ (8000c00 <HAL_ADC_MspInit+0xf8>)
 8000b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b9e:	f003 fb4d 	bl	800423c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ba2:	4b18      	ldr	r3, [pc, #96]	@ (8000c04 <HAL_ADC_MspInit+0xfc>)
 8000ba4:	4a18      	ldr	r2, [pc, #96]	@ (8000c08 <HAL_ADC_MspInit+0x100>)
 8000ba6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ba8:	4b16      	ldr	r3, [pc, #88]	@ (8000c04 <HAL_ADC_MspInit+0xfc>)
 8000baa:	2205      	movs	r2, #5
 8000bac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bae:	4b15      	ldr	r3, [pc, #84]	@ (8000c04 <HAL_ADC_MspInit+0xfc>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb4:	4b13      	ldr	r3, [pc, #76]	@ (8000c04 <HAL_ADC_MspInit+0xfc>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bba:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <HAL_ADC_MspInit+0xfc>)
 8000bbc:	2280      	movs	r2, #128	@ 0x80
 8000bbe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bc0:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <HAL_ADC_MspInit+0xfc>)
 8000bc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bc6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <HAL_ADC_MspInit+0xfc>)
 8000bca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c04 <HAL_ADC_MspInit+0xfc>)
 8000bd2:	2220      	movs	r2, #32
 8000bd4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <HAL_ADC_MspInit+0xfc>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bdc:	4809      	ldr	r0, [pc, #36]	@ (8000c04 <HAL_ADC_MspInit+0xfc>)
 8000bde:	f002 ffef 	bl	8003bc0 <HAL_DMA_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000be8:	f000 fdfa 	bl	80017e0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a05      	ldr	r2, [pc, #20]	@ (8000c04 <HAL_ADC_MspInit+0xfc>)
 8000bf0:	655a      	str	r2, [r3, #84]	@ 0x54
 8000bf2:	4a04      	ldr	r2, [pc, #16]	@ (8000c04 <HAL_ADC_MspInit+0xfc>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	3778      	adds	r7, #120	@ 0x78
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40021000 	.word	0x40021000
 8000c04:	20000410 	.word	0x20000410
 8000c08:	40020008 	.word	0x40020008

08000c0c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c10:	4a04      	ldr	r2, [pc, #16]	@ (8000c24 <MX_FREERTOS_Init+0x18>)
 8000c12:	2100      	movs	r1, #0
 8000c14:	4804      	ldr	r0, [pc, #16]	@ (8000c28 <MX_FREERTOS_Init+0x1c>)
 8000c16:	f006 fbbf 	bl	8007398 <osThreadNew>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4a03      	ldr	r2, [pc, #12]	@ (8000c2c <MX_FREERTOS_Init+0x20>)
 8000c1e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	080187f0 	.word	0x080187f0
 8000c28:	080013fd 	.word	0x080013fd
 8000c2c:	20000470 	.word	0x20000470

08000c30 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	@ 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000c3c:	f007 fc80 	bl	8008540 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000c40:	4b5a      	ldr	r3, [pc, #360]	@ (8000dac <pvPortMallocMicroROS+0x17c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d101      	bne.n	8000c4c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000c48:	f000 f986 	bl	8000f58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000c4c:	4b58      	ldr	r3, [pc, #352]	@ (8000db0 <pvPortMallocMicroROS+0x180>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4013      	ands	r3, r2
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f040 8090 	bne.w	8000d7a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d01e      	beq.n	8000c9e <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000c60:	2208      	movs	r2, #8
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d015      	beq.n	8000c9e <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f023 0307 	bic.w	r3, r3, #7
 8000c78:	3308      	adds	r3, #8
 8000c7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d00b      	beq.n	8000c9e <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c8a:	f383 8811 	msr	BASEPRI, r3
 8000c8e:	f3bf 8f6f 	isb	sy
 8000c92:	f3bf 8f4f 	dsb	sy
 8000c96:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000c98:	bf00      	nop
 8000c9a:	bf00      	nop
 8000c9c:	e7fd      	b.n	8000c9a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d06a      	beq.n	8000d7a <pvPortMallocMicroROS+0x14a>
 8000ca4:	4b43      	ldr	r3, [pc, #268]	@ (8000db4 <pvPortMallocMicroROS+0x184>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d865      	bhi.n	8000d7a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000cae:	4b42      	ldr	r3, [pc, #264]	@ (8000db8 <pvPortMallocMicroROS+0x188>)
 8000cb0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000cb2:	4b41      	ldr	r3, [pc, #260]	@ (8000db8 <pvPortMallocMicroROS+0x188>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000cb8:	e004      	b.n	8000cc4 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cbc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d903      	bls.n	8000cd6 <pvPortMallocMicroROS+0xa6>
 8000cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1f1      	bne.n	8000cba <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000cd6:	4b35      	ldr	r3, [pc, #212]	@ (8000dac <pvPortMallocMicroROS+0x17c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d04c      	beq.n	8000d7a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000ce0:	6a3b      	ldr	r3, [r7, #32]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2208      	movs	r2, #8
 8000ce6:	4413      	add	r3, r2
 8000ce8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	6a3b      	ldr	r3, [r7, #32]
 8000cf0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	1ad2      	subs	r2, r2, r3
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d920      	bls.n	8000d44 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4413      	add	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	f003 0307 	and.w	r3, r3, #7
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d00b      	beq.n	8000d2c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d18:	f383 8811 	msr	BASEPRI, r3
 8000d1c:	f3bf 8f6f 	isb	sy
 8000d20:	f3bf 8f4f 	dsb	sy
 8000d24:	613b      	str	r3, [r7, #16]
}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d2e:	685a      	ldr	r2, [r3, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	1ad2      	subs	r2, r2, r3
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000d3e:	69b8      	ldr	r0, [r7, #24]
 8000d40:	f000 f96c 	bl	800101c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <pvPortMallocMicroROS+0x184>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	4a19      	ldr	r2, [pc, #100]	@ (8000db4 <pvPortMallocMicroROS+0x184>)
 8000d50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000d52:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <pvPortMallocMicroROS+0x184>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	4b19      	ldr	r3, [pc, #100]	@ (8000dbc <pvPortMallocMicroROS+0x18c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d203      	bcs.n	8000d66 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000d5e:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <pvPortMallocMicroROS+0x184>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a16      	ldr	r2, [pc, #88]	@ (8000dbc <pvPortMallocMicroROS+0x18c>)
 8000d64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <pvPortMallocMicroROS+0x180>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000d7a:	f007 fbef 	bl	800855c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	f003 0307 	and.w	r3, r3, #7
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d00b      	beq.n	8000da0 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d8c:	f383 8811 	msr	BASEPRI, r3
 8000d90:	f3bf 8f6f 	isb	sy
 8000d94:	f3bf 8f4f 	dsb	sy
 8000d98:	60fb      	str	r3, [r7, #12]
}
 8000d9a:	bf00      	nop
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000da0:	69fb      	ldr	r3, [r7, #28]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3728      	adds	r7, #40	@ 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20003fb8 	.word	0x20003fb8
 8000db0:	20003fc4 	.word	0x20003fc4
 8000db4:	20003fbc 	.word	0x20003fbc
 8000db8:	20003fb0 	.word	0x20003fb0
 8000dbc:	20003fc0 	.word	0x20003fc0

08000dc0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d04a      	beq.n	8000e68 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000dd2:	2308      	movs	r3, #8
 8000dd4:	425b      	negs	r3, r3
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	4413      	add	r3, r2
 8000dda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	4b22      	ldr	r3, [pc, #136]	@ (8000e70 <vPortFreeMicroROS+0xb0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4013      	ands	r3, r2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10b      	bne.n	8000e06 <vPortFreeMicroROS+0x46>
	__asm volatile
 8000dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000df2:	f383 8811 	msr	BASEPRI, r3
 8000df6:	f3bf 8f6f 	isb	sy
 8000dfa:	f3bf 8f4f 	dsb	sy
 8000dfe:	60fb      	str	r3, [r7, #12]
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	e7fd      	b.n	8000e02 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d00b      	beq.n	8000e26 <vPortFreeMicroROS+0x66>
	__asm volatile
 8000e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e12:	f383 8811 	msr	BASEPRI, r3
 8000e16:	f3bf 8f6f 	isb	sy
 8000e1a:	f3bf 8f4f 	dsb	sy
 8000e1e:	60bb      	str	r3, [r7, #8]
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	e7fd      	b.n	8000e22 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	685a      	ldr	r2, [r3, #4]
 8000e2a:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <vPortFreeMicroROS+0xb0>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d019      	beq.n	8000e68 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d115      	bne.n	8000e68 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	685a      	ldr	r2, [r3, #4]
 8000e40:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <vPortFreeMicroROS+0xb0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	401a      	ands	r2, r3
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000e4c:	f007 fb78 	bl	8008540 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <vPortFreeMicroROS+0xb4>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a06      	ldr	r2, [pc, #24]	@ (8000e74 <vPortFreeMicroROS+0xb4>)
 8000e5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000e5e:	6938      	ldr	r0, [r7, #16]
 8000e60:	f000 f8dc 	bl	800101c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000e64:	f007 fb7a 	bl	800855c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000e68:	bf00      	nop
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20003fc4 	.word	0x20003fc4
 8000e74:	20003fbc 	.word	0x20003fbc

08000e78 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b087      	sub	sp, #28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000e84:	2308      	movs	r3, #8
 8000e86:	425b      	negs	r3, r3
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <getBlockSize+0x38>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60fb      	str	r3, [r7, #12]

	return count;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	371c      	adds	r7, #28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20003fc4 	.word	0x20003fc4

08000eb4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000ebe:	f007 fb3f 	bl	8008540 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000ec2:	6838      	ldr	r0, [r7, #0]
 8000ec4:	f7ff feb4 	bl	8000c30 <pvPortMallocMicroROS>
 8000ec8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d017      	beq.n	8000f00 <pvPortReallocMicroROS+0x4c>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d014      	beq.n	8000f00 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff ffce 	bl	8000e78 <getBlockSize>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2208      	movs	r2, #8
 8000ee0:	1a9b      	subs	r3, r3, r2
 8000ee2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d201      	bcs.n	8000ef0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	68b8      	ldr	r0, [r7, #8]
 8000ef6:	f016 fd50 	bl	801799a <memcpy>

		vPortFreeMicroROS(pv);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ff60 	bl	8000dc0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000f00:	f007 fb2c 	bl	800855c <xTaskResumeAll>

	return newmem;
 8000f04:	68bb      	ldr	r3, [r7, #8]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000f18:	f007 fb12 	bl	8008540 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	fb02 f303 	mul.w	r3, r2, r3
 8000f24:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000f26:	6978      	ldr	r0, [r7, #20]
 8000f28:	f7ff fe82 	bl	8000c30 <pvPortMallocMicroROS>
 8000f2c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000f32:	e004      	b.n	8000f3e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	613a      	str	r2, [r7, #16]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	1e5a      	subs	r2, r3, #1
 8000f42:	617a      	str	r2, [r7, #20]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1f5      	bne.n	8000f34 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000f48:	f007 fb08 	bl	800855c <xTaskResumeAll>
  	return mem;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000f5e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000f64:	4b27      	ldr	r3, [pc, #156]	@ (8001004 <prvHeapInit+0xac>)
 8000f66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d00c      	beq.n	8000f8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	3307      	adds	r3, #7
 8000f76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f023 0307 	bic.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	4a1f      	ldr	r2, [pc, #124]	@ (8001004 <prvHeapInit+0xac>)
 8000f88:	4413      	add	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000f90:	4a1d      	ldr	r2, [pc, #116]	@ (8001008 <prvHeapInit+0xb0>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	@ (8001008 <prvHeapInit+0xb0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000fa4:	2208      	movs	r2, #8
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	1a9b      	subs	r3, r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f023 0307 	bic.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4a15      	ldr	r2, [pc, #84]	@ (800100c <prvHeapInit+0xb4>)
 8000fb8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000fba:	4b14      	ldr	r3, [pc, #80]	@ (800100c <prvHeapInit+0xb4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000fc2:	4b12      	ldr	r3, [pc, #72]	@ (800100c <prvHeapInit+0xb4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	1ad2      	subs	r2, r2, r3
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <prvHeapInit+0xb4>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8001010 <prvHeapInit+0xb8>)
 8000fe6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	4a09      	ldr	r2, [pc, #36]	@ (8001014 <prvHeapInit+0xbc>)
 8000fee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000ff0:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <prvHeapInit+0xc0>)
 8000ff2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000ff6:	601a      	str	r2, [r3, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	200033b0 	.word	0x200033b0
 8001008:	20003fb0 	.word	0x20003fb0
 800100c:	20003fb8 	.word	0x20003fb8
 8001010:	20003fc0 	.word	0x20003fc0
 8001014:	20003fbc 	.word	0x20003fbc
 8001018:	20003fc4 	.word	0x20003fc4

0800101c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001024:	4b28      	ldr	r3, [pc, #160]	@ (80010c8 <prvInsertBlockIntoFreeList+0xac>)
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	e002      	b.n	8001030 <prvInsertBlockIntoFreeList+0x14>
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	429a      	cmp	r2, r3
 8001038:	d8f7      	bhi.n	800102a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	4413      	add	r3, r2
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	429a      	cmp	r2, r3
 800104a:	d108      	bne.n	800105e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	441a      	add	r2, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	441a      	add	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d118      	bne.n	80010a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <prvInsertBlockIntoFreeList+0xb0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	429a      	cmp	r2, r3
 800107c:	d00d      	beq.n	800109a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	441a      	add	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	e008      	b.n	80010ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800109a:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <prvInsertBlockIntoFreeList+0xb0>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e003      	b.n	80010ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d002      	beq.n	80010ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80010ba:	bf00      	nop
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20003fb0 	.word	0x20003fb0
 80010cc:	20003fb8 	.word	0x20003fb8

080010d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80010d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <MX_DMA_Init+0x70>)
 80010d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010da:	4a19      	ldr	r2, [pc, #100]	@ (8001140 <MX_DMA_Init+0x70>)
 80010dc:	f043 0304 	orr.w	r3, r3, #4
 80010e0:	6493      	str	r3, [r2, #72]	@ 0x48
 80010e2:	4b17      	ldr	r3, [pc, #92]	@ (8001140 <MX_DMA_Init+0x70>)
 80010e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ee:	4b14      	ldr	r3, [pc, #80]	@ (8001140 <MX_DMA_Init+0x70>)
 80010f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010f2:	4a13      	ldr	r2, [pc, #76]	@ (8001140 <MX_DMA_Init+0x70>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6493      	str	r3, [r2, #72]	@ 0x48
 80010fa:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <MX_DMA_Init+0x70>)
 80010fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2105      	movs	r1, #5
 800110a:	200b      	movs	r0, #11
 800110c:	f002 fd23 	bl	8003b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001110:	200b      	movs	r0, #11
 8001112:	f002 fd3a 	bl	8003b8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2105      	movs	r1, #5
 800111a:	200c      	movs	r0, #12
 800111c:	f002 fd1b 	bl	8003b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001120:	200c      	movs	r0, #12
 8001122:	f002 fd32 	bl	8003b8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2105      	movs	r1, #5
 800112a:	200d      	movs	r0, #13
 800112c:	f002 fd13 	bl	8003b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001130:	200d      	movs	r0, #13
 8001132:	f002 fd2a 	bl	8003b8a <HAL_NVIC_EnableIRQ>

}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40021000 	.word	0x40021000

08001144 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001152:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001154:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001158:	4904      	ldr	r1, [pc, #16]	@ (800116c <cubemx_transport_open+0x28>)
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f004 fb8a 	bl	8005874 <HAL_UART_Receive_DMA>
    return true;
 8001160:	2301      	movs	r3, #1
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20003fc8 	.word	0x20003fc8

08001170 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800117e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f004 fbc3 	bl	800590c <HAL_UART_DMAStop>
    return true;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80011a4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ac:	2b20      	cmp	r3, #32
 80011ae:	d11b      	bne.n	80011e8 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	461a      	mov	r2, r3
 80011b6:	68b9      	ldr	r1, [r7, #8]
 80011b8:	6978      	ldr	r0, [r7, #20]
 80011ba:	f004 fadb 	bl	8005774 <HAL_UART_Transmit_DMA>
 80011be:	4603      	mov	r3, r0
 80011c0:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80011c2:	e002      	b.n	80011ca <cubemx_transport_write+0x3a>
            osDelay(1);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f006 f979 	bl	80074bc <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80011ca:	7cfb      	ldrb	r3, [r7, #19]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d104      	bne.n	80011da <cubemx_transport_write+0x4a>
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011d6:	2b20      	cmp	r3, #32
 80011d8:	d1f4      	bne.n	80011c4 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 80011da:	7cfb      	ldrb	r3, [r7, #19]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <cubemx_transport_write+0x54>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	e002      	b.n	80011ea <cubemx_transport_write+0x5a>
 80011e4:	2300      	movs	r3, #0
 80011e6:	e000      	b.n	80011ea <cubemx_transport_write+0x5a>
    }else{
        return 0;
 80011e8:	2300      	movs	r3, #0
    }
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001208:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800120e:	b672      	cpsid	i
}
 8001210:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001220:	4a1b      	ldr	r2, [pc, #108]	@ (8001290 <cubemx_transport_read+0x9c>)
 8001222:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001224:	b662      	cpsie	i
}
 8001226:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	3301      	adds	r3, #1
 800122c:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 800122e:	2001      	movs	r0, #1
 8001230:	f006 f944 	bl	80074bc <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001234:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <cubemx_transport_read+0xa0>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <cubemx_transport_read+0x9c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	d103      	bne.n	8001248 <cubemx_transport_read+0x54>
 8001240:	69fa      	ldr	r2, [r7, #28]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	dbe2      	blt.n	800120e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800124c:	e011      	b.n	8001272 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 800124e:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <cubemx_transport_read+0xa0>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	68b9      	ldr	r1, [r7, #8]
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	440b      	add	r3, r1
 8001258:	490f      	ldr	r1, [pc, #60]	@ (8001298 <cubemx_transport_read+0xa4>)
 800125a:	5c8a      	ldrb	r2, [r1, r2]
 800125c:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800125e:	4b0d      	ldr	r3, [pc, #52]	@ (8001294 <cubemx_transport_read+0xa0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	3301      	adds	r3, #1
 8001264:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001268:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <cubemx_transport_read+0xa0>)
 800126a:	6013      	str	r3, [r2, #0]
        wrote++;
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	3301      	adds	r3, #1
 8001270:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001272:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <cubemx_transport_read+0xa0>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <cubemx_transport_read+0x9c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d003      	beq.n	8001286 <cubemx_transport_read+0x92>
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	429a      	cmp	r2, r3
 8001284:	d3e3      	bcc.n	800124e <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8001286:	69bb      	ldr	r3, [r7, #24]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3720      	adds	r7, #32
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200047cc 	.word	0x200047cc
 8001294:	200047c8 	.word	0x200047c8
 8001298:	20003fc8 	.word	0x20003fc8

0800129c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	@ 0x28
 80012a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b2:	4b36      	ldr	r3, [pc, #216]	@ (800138c <MX_GPIO_Init+0xf0>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b6:	4a35      	ldr	r2, [pc, #212]	@ (800138c <MX_GPIO_Init+0xf0>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012be:	4b33      	ldr	r3, [pc, #204]	@ (800138c <MX_GPIO_Init+0xf0>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ca:	4b30      	ldr	r3, [pc, #192]	@ (800138c <MX_GPIO_Init+0xf0>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ce:	4a2f      	ldr	r2, [pc, #188]	@ (800138c <MX_GPIO_Init+0xf0>)
 80012d0:	f043 0320 	orr.w	r3, r3, #32
 80012d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d6:	4b2d      	ldr	r3, [pc, #180]	@ (800138c <MX_GPIO_Init+0xf0>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012da:	f003 0320 	and.w	r3, r3, #32
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	4b2a      	ldr	r3, [pc, #168]	@ (800138c <MX_GPIO_Init+0xf0>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e6:	4a29      	ldr	r2, [pc, #164]	@ (800138c <MX_GPIO_Init+0xf0>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ee:	4b27      	ldr	r3, [pc, #156]	@ (800138c <MX_GPIO_Init+0xf0>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	4b24      	ldr	r3, [pc, #144]	@ (800138c <MX_GPIO_Init+0xf0>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	4a23      	ldr	r2, [pc, #140]	@ (800138c <MX_GPIO_Init+0xf0>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001306:	4b21      	ldr	r3, [pc, #132]	@ (800138c <MX_GPIO_Init+0xf0>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	2120      	movs	r1, #32
 8001316:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800131a:	f003 f911 	bl	8004540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800131e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001324:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	4816      	ldr	r0, [pc, #88]	@ (8001390 <MX_GPIO_Init+0xf4>)
 8001336:	f002 ff81 	bl	800423c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800133a:	2320      	movs	r3, #32
 800133c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133e:	2301      	movs	r3, #1
 8001340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	4619      	mov	r1, r3
 8001350:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001354:	f002 ff72 	bl	800423c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001358:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800135c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001362:	2301      	movs	r3, #1
 8001364:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001370:	f002 ff64 	bl	800423c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2105      	movs	r1, #5
 8001378:	2028      	movs	r0, #40	@ 0x28
 800137a:	f002 fbec 	bl	8003b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800137e:	2028      	movs	r0, #40	@ 0x28
 8001380:	f002 fc03 	bl	8003b8a <HAL_NVIC_EnableIRQ>

}
 8001384:	bf00      	nop
 8001386:	3728      	adds	r7, #40	@ 0x28
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40021000 	.word	0x40021000
 8001390:	48000800 	.word	0x48000800

08001394 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001398:	4b0b      	ldr	r3, [pc, #44]	@ (80013c8 <MX_IWDG_Init+0x34>)
 800139a:	4a0c      	ldr	r2, [pc, #48]	@ (80013cc <MX_IWDG_Init+0x38>)
 800139c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800139e:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <MX_IWDG_Init+0x34>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80013a4:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <MX_IWDG_Init+0x34>)
 80013a6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80013aa:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 80013ac:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <MX_IWDG_Init+0x34>)
 80013ae:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80013b2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80013b4:	4804      	ldr	r0, [pc, #16]	@ (80013c8 <MX_IWDG_Init+0x34>)
 80013b6:	f003 f8fe 	bl	80045b6 <HAL_IWDG_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80013c0:	f000 fa0e 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200047d0 	.word	0x200047d0
 80013cc:	40003000 	.word	0x40003000

080013d0 <timer_callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void timer_callback(rcl_timer_t *timer, int64_t last_call_time) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d006      	beq.n	80013f0 <timer_callback+0x20>
		/* Code here*/
		ReadADC_AVERAGE();
 80013e2:	f000 f943 	bl	800166c <ReadADC_AVERAGE>
		SentCMDVEL();
 80013e6:	f000 f98d 	bl	8001704 <SentCMDVEL>

		HAL_IWDG_Refresh(&hiwdg);
 80013ea:	4803      	ldr	r0, [pc, #12]	@ (80013f8 <timer_callback+0x28>)
 80013ec:	f003 f932 	bl	8004654 <HAL_IWDG_Refresh>
	}
}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200047d0 	.word	0x200047d0

080013fc <StartDefaultTask>:

void StartDefaultTask(void *argument)
{
 80013fc:	b5b0      	push	{r4, r5, r7, lr}
 80013fe:	b0b2      	sub	sp, #200	@ 0xc8
 8001400:	af02      	add	r7, sp, #8
 8001402:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  /* USER CODE BEGIN 5 */

  // micro-ROS configuration

  rmw_uros_set_custom_transport(
 8001406:	4b47      	ldr	r3, [pc, #284]	@ (8001524 <StartDefaultTask+0x128>)
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	4b47      	ldr	r3, [pc, #284]	@ (8001528 <StartDefaultTask+0x12c>)
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	4b47      	ldr	r3, [pc, #284]	@ (800152c <StartDefaultTask+0x130>)
 8001410:	4a47      	ldr	r2, [pc, #284]	@ (8001530 <StartDefaultTask+0x134>)
 8001412:	4948      	ldr	r1, [pc, #288]	@ (8001534 <StartDefaultTask+0x138>)
 8001414:	2001      	movs	r0, #1
 8001416:	f00c fb53 	bl	800dac0 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800141a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800141e:	4618      	mov	r0, r3
 8001420:	f00b fdea 	bl	800cff8 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8001424:	4b44      	ldr	r3, [pc, #272]	@ (8001538 <StartDefaultTask+0x13c>)
 8001426:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  freeRTOS_allocator.deallocate = microros_deallocate;
 800142a:	4b44      	ldr	r3, [pc, #272]	@ (800153c <StartDefaultTask+0x140>)
 800142c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001430:	4b43      	ldr	r3, [pc, #268]	@ (8001540 <StartDefaultTask+0x144>)
 8001432:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001436:	4b43      	ldr	r3, [pc, #268]	@ (8001544 <StartDefaultTask+0x148>)
 8001438:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800143c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001440:	4618      	mov	r0, r3
 8001442:	f00b fde7 	bl	800d014 <rcutils_set_default_allocator>
 8001446:	4603      	mov	r3, r0
 8001448:	f083 0301 	eor.w	r3, r3, #1
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <StartDefaultTask+0x5e>
      printf("Error on default allocators (line %d)\n", __LINE__);
 8001452:	219a      	movs	r1, #154	@ 0x9a
 8001454:	483c      	ldr	r0, [pc, #240]	@ (8001548 <StartDefaultTask+0x14c>)
 8001456:	f016 f8eb 	bl	8017630 <iprintf>
  }

  // micro-ROS app
  allocator = rcl_get_default_allocator();
 800145a:	4c3c      	ldr	r4, [pc, #240]	@ (800154c <StartDefaultTask+0x150>)
 800145c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001460:	4618      	mov	r0, r3
 8001462:	f00b fdf5 	bl	800d050 <rcutils_get_default_allocator>
 8001466:	4625      	mov	r5, r4
 8001468:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 800146c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800146e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001470:	6823      	ldr	r3, [r4, #0]
 8001472:	602b      	str	r3, [r5, #0]

  //create init_options
  init_options = rcl_get_zero_initialized_init_options();
 8001474:	f00a fa32 	bl	800b8dc <rcl_get_zero_initialized_init_options>
 8001478:	4603      	mov	r3, r0
 800147a:	4a35      	ldr	r2, [pc, #212]	@ (8001550 <StartDefaultTask+0x154>)
 800147c:	6013      	str	r3, [r2, #0]
  RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 800147e:	4b33      	ldr	r3, [pc, #204]	@ (800154c <StartDefaultTask+0x150>)
 8001480:	466c      	mov	r4, sp
 8001482:	f103 020c 	add.w	r2, r3, #12
 8001486:	e892 0003 	ldmia.w	r2, {r0, r1}
 800148a:	e884 0003 	stmia.w	r4, {r0, r1}
 800148e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001490:	482f      	ldr	r0, [pc, #188]	@ (8001550 <StartDefaultTask+0x154>)
 8001492:	f00a fa25 	bl	800b8e0 <rcl_init_options_init>
  RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 50)); //Set Domain ID
 8001496:	2132      	movs	r1, #50	@ 0x32
 8001498:	482d      	ldr	r0, [pc, #180]	@ (8001550 <StartDefaultTask+0x154>)
 800149a:	f00a fb1d 	bl	800bad8 <rcl_init_options_set_domain_id>

  //create init_options
  rclc_support_init_with_options(
 800149e:	4b2b      	ldr	r3, [pc, #172]	@ (800154c <StartDefaultTask+0x150>)
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001550 <StartDefaultTask+0x154>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	2100      	movs	r1, #0
 80014a8:	482a      	ldr	r0, [pc, #168]	@ (8001554 <StartDefaultTask+0x158>)
 80014aa:	f00b fcc9 	bl	800ce40 <rclc_support_init_with_options>
  			&init_options,
  			&allocator
  	);

  // create node
  	rclc_node_init_default(
 80014ae:	4b29      	ldr	r3, [pc, #164]	@ (8001554 <StartDefaultTask+0x158>)
 80014b0:	4a29      	ldr	r2, [pc, #164]	@ (8001558 <StartDefaultTask+0x15c>)
 80014b2:	492a      	ldr	r1, [pc, #168]	@ (800155c <StartDefaultTask+0x160>)
 80014b4:	482a      	ldr	r0, [pc, #168]	@ (8001560 <StartDefaultTask+0x164>)
 80014b6:	f00b fcf7 	bl	800cea8 <rclc_node_init_default>
  			"ling",
  			&support
  	); //Node name

  	// create cmd_vel publisher
  	rclc_publisher_init_default(
 80014ba:	f008 fdad 	bl	800a018 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 80014be:	4602      	mov	r2, r0
 80014c0:	4b28      	ldr	r3, [pc, #160]	@ (8001564 <StartDefaultTask+0x168>)
 80014c2:	4927      	ldr	r1, [pc, #156]	@ (8001560 <StartDefaultTask+0x164>)
 80014c4:	4828      	ldr	r0, [pc, #160]	@ (8001568 <StartDefaultTask+0x16c>)
 80014c6:	f00b fd2b 	bl	800cf20 <rclc_publisher_init_default>
  			&node,
  			ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
  			"cmd_vel"
  		);

  	rclc_client_init_default(
 80014ca:	f008 fcd1 	bl	8009e70 <rosidl_typesupport_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall>
 80014ce:	4602      	mov	r2, r0
 80014d0:	4b26      	ldr	r3, [pc, #152]	@ (800156c <StartDefaultTask+0x170>)
 80014d2:	4923      	ldr	r1, [pc, #140]	@ (8001560 <StartDefaultTask+0x164>)
 80014d4:	4826      	ldr	r0, [pc, #152]	@ (8001570 <StartDefaultTask+0x174>)
 80014d6:	f00a fe63 	bl	800c1a0 <rclc_client_init_default>
  			ROSIDL_GET_SRV_TYPE_SUPPORT(fun5mini_interfaces, srv, EatCall),
  			"call_eat"
  		);

  	// create Timer
  	rclc_timer_init_default(
 80014da:	4b26      	ldr	r3, [pc, #152]	@ (8001574 <StartDefaultTask+0x178>)
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	4a26      	ldr	r2, [pc, #152]	@ (8001578 <StartDefaultTask+0x17c>)
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	491b      	ldr	r1, [pc, #108]	@ (8001554 <StartDefaultTask+0x158>)
 80014e6:	4825      	ldr	r0, [pc, #148]	@ (800157c <StartDefaultTask+0x180>)
 80014e8:	f00b fd4e 	bl	800cf88 <rclc_timer_init_default>
  			RCL_MS_TO_NS(10),
  			timer_callback
  		);

  	// create executer
  	executor = rclc_executor_get_zero_initialized_executor();
 80014ec:	4c24      	ldr	r4, [pc, #144]	@ (8001580 <StartDefaultTask+0x184>)
 80014ee:	463b      	mov	r3, r7
 80014f0:	4618      	mov	r0, r3
 80014f2:	f00b f9d1 	bl	800c898 <rclc_executor_get_zero_initialized_executor>
 80014f6:	4620      	mov	r0, r4
 80014f8:	463b      	mov	r3, r7
 80014fa:	2288      	movs	r2, #136	@ 0x88
 80014fc:	4619      	mov	r1, r3
 80014fe:	f016 fa4c 	bl	801799a <memcpy>
  	rclc_executor_init(&executor, &support.context, 1, &allocator);
 8001502:	4b12      	ldr	r3, [pc, #72]	@ (800154c <StartDefaultTask+0x150>)
 8001504:	2201      	movs	r2, #1
 8001506:	4913      	ldr	r1, [pc, #76]	@ (8001554 <StartDefaultTask+0x158>)
 8001508:	481d      	ldr	r0, [pc, #116]	@ (8001580 <StartDefaultTask+0x184>)
 800150a:	f00b f9d1 	bl	800c8b0 <rclc_executor_init>
  	rclc_executor_add_timer(&executor, &timer);
 800150e:	491b      	ldr	r1, [pc, #108]	@ (800157c <StartDefaultTask+0x180>)
 8001510:	481b      	ldr	r0, [pc, #108]	@ (8001580 <StartDefaultTask+0x184>)
 8001512:	f00b fa3d 	bl	800c990 <rclc_executor_add_timer>
  	rclc_executor_spin(&executor); //ต้องเรียกก่อนถึงจะเริ่มทำงาน
 8001516:	481a      	ldr	r0, [pc, #104]	@ (8001580 <StartDefaultTask+0x184>)
 8001518:	f00b fc50 	bl	800cdbc <rclc_executor_spin>

  for(;;)
  {
    osDelay(10);
 800151c:	200a      	movs	r0, #10
 800151e:	f005 ffcd 	bl	80074bc <osDelay>
 8001522:	e7fb      	b.n	800151c <StartDefaultTask+0x120>
 8001524:	080011f5 	.word	0x080011f5
 8001528:	08001191 	.word	0x08001191
 800152c:	08001171 	.word	0x08001171
 8001530:	08001145 	.word	0x08001145
 8001534:	20004aa4 	.word	0x20004aa4
 8001538:	080017ed 	.word	0x080017ed
 800153c:	08001831 	.word	0x08001831
 8001540:	08001869 	.word	0x08001869
 8001544:	080018d5 	.word	0x080018d5
 8001548:	0801876c 	.word	0x0801876c
 800154c:	20004818 	.word	0x20004818
 8001550:	200047e0 	.word	0x200047e0
 8001554:	200047e4 	.word	0x200047e4
 8001558:	08018794 	.word	0x08018794
 800155c:	0801879c 	.word	0x0801879c
 8001560:	2000482c 	.word	0x2000482c
 8001564:	080187a8 	.word	0x080187a8
 8001568:	200048c4 	.word	0x200048c4
 800156c:	080187b0 	.word	0x080187b0
 8001570:	200048c0 	.word	0x200048c0
 8001574:	080013d1 	.word	0x080013d1
 8001578:	00989680 	.word	0x00989680
 800157c:	20004834 	.word	0x20004834
 8001580:	20004838 	.word	0x20004838

08001584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001588:	f000 fd21 	bl	8001fce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800158c:	f000 f820 	bl	80015d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001590:	f7ff fe84 	bl	800129c <MX_GPIO_Init>
  MX_DMA_Init();
 8001594:	f7ff fd9c 	bl	80010d0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001598:	f000 fbe8 	bl	8001d6c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800159c:	f7ff fa2c 	bl	80009f8 <MX_ADC1_Init>
  MX_IWDG_Init();
 80015a0:	f7ff fef8 	bl	8001394 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80015a4:	217f      	movs	r1, #127	@ 0x7f
 80015a6:	4808      	ldr	r0, [pc, #32]	@ (80015c8 <main+0x44>)
 80015a8:	f002 f890 	bl	80036cc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 200);
 80015ac:	22c8      	movs	r2, #200	@ 0xc8
 80015ae:	4907      	ldr	r1, [pc, #28]	@ (80015cc <main+0x48>)
 80015b0:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <main+0x44>)
 80015b2:	f001 f97d 	bl	80028b0 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015b6:	f005 fea5 	bl	8007304 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80015ba:	f7ff fb27 	bl	8000c0c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80015be:	f005 fec5 	bl	800734c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015c2:	bf00      	nop
 80015c4:	e7fd      	b.n	80015c2 <main+0x3e>
 80015c6:	bf00      	nop
 80015c8:	200003a4 	.word	0x200003a4
 80015cc:	200048f8 	.word	0x200048f8

080015d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b094      	sub	sp, #80	@ 0x50
 80015d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d6:	f107 0318 	add.w	r3, r7, #24
 80015da:	2238      	movs	r2, #56	@ 0x38
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f016 f912 	bl	8017808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80015f2:	2000      	movs	r0, #0
 80015f4:	f003 f83e 	bl	8004674 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80015f8:	230a      	movs	r3, #10
 80015fa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001602:	2340      	movs	r3, #64	@ 0x40
 8001604:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001606:	2301      	movs	r3, #1
 8001608:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160a:	2302      	movs	r3, #2
 800160c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800160e:	2302      	movs	r3, #2
 8001610:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001612:	2304      	movs	r3, #4
 8001614:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001616:	2355      	movs	r3, #85	@ 0x55
 8001618:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800161a:	2302      	movs	r3, #2
 800161c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800161e:	2302      	movs	r3, #2
 8001620:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001622:	2302      	movs	r3, #2
 8001624:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001626:	f107 0318 	add.w	r3, r7, #24
 800162a:	4618      	mov	r0, r3
 800162c:	f003 f8d6 	bl	80047dc <HAL_RCC_OscConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001636:	f000 f8d3 	bl	80017e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800163a:	230f      	movs	r3, #15
 800163c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800163e:	2303      	movs	r3, #3
 8001640:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2104      	movs	r1, #4
 8001652:	4618      	mov	r0, r3
 8001654:	f003 fbd4 	bl	8004e00 <HAL_RCC_ClockConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800165e:	f000 f8bf 	bl	80017e0 <Error_Handler>
  }
}
 8001662:	bf00      	nop
 8001664:	3750      	adds	r7, #80	@ 0x50
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <ReadADC_AVERAGE>:

/* USER CODE BEGIN 4 */

void ReadADC_AVERAGE() {
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
	uint32_t temp_1 = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
	uint32_t temp_2 = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 200; i++) {
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	e020      	b.n	80016c2 <ReadADC_AVERAGE+0x56>
		if (i % 2 == 0) {
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d108      	bne.n	800169c <ReadADC_AVERAGE+0x30>
			temp_1 += ADC_RawRead[i];
 800168a:	4a1a      	ldr	r2, [pc, #104]	@ (80016f4 <ReadADC_AVERAGE+0x88>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001692:	461a      	mov	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4413      	add	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	e00f      	b.n	80016bc <ReadADC_AVERAGE+0x50>
		} else if (i % 2 == 1) {
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	bfb8      	it	lt
 80016a6:	425b      	neglt	r3, r3
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d107      	bne.n	80016bc <ReadADC_AVERAGE+0x50>
			temp_2 += ADC_RawRead[i];
 80016ac:	4a11      	ldr	r2, [pc, #68]	@ (80016f4 <ReadADC_AVERAGE+0x88>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016b4:	461a      	mov	r2, r3
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	4413      	add	r3, r2
 80016ba:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 200; i++) {
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3301      	adds	r3, #1
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80016c6:	dddb      	ble.n	8001680 <ReadADC_AVERAGE+0x14>
		}
	}
	x_axis = (temp_1 / 100);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4a0b      	ldr	r2, [pc, #44]	@ (80016f8 <ReadADC_AVERAGE+0x8c>)
 80016cc:	fba2 2303 	umull	r2, r3, r2, r3
 80016d0:	095b      	lsrs	r3, r3, #5
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	4b09      	ldr	r3, [pc, #36]	@ (80016fc <ReadADC_AVERAGE+0x90>)
 80016d6:	801a      	strh	r2, [r3, #0]
	y_axis = (temp_2 / 100);
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	4a07      	ldr	r2, [pc, #28]	@ (80016f8 <ReadADC_AVERAGE+0x8c>)
 80016dc:	fba2 2303 	umull	r2, r3, r2, r3
 80016e0:	095b      	lsrs	r3, r3, #5
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <ReadADC_AVERAGE+0x94>)
 80016e6:	801a      	strh	r2, [r3, #0]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	200048f8 	.word	0x200048f8
 80016f8:	51eb851f 	.word	0x51eb851f
 80016fc:	20004a88 	.word	0x20004a88
 8001700:	20004a8a 	.word	0x20004a8a

08001704 <SentCMDVEL>:


void SentCMDVEL(){
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	/* Call Velocity */
	linear_velocity =  (y_axis - 2048) / 2048.0f;  // Normalize -1.0 to 1.0
 8001708:	4b2d      	ldr	r3, [pc, #180]	@ (80017c0 <SentCMDVEL+0xbc>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001718:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80017c4 <SentCMDVEL+0xc0>
 800171c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001720:	4b29      	ldr	r3, [pc, #164]	@ (80017c8 <SentCMDVEL+0xc4>)
 8001722:	edc3 7a00 	vstr	s15, [r3]
	angular_velocity = -1.0f * (x_axis - 2048) / 2048.0f; // Normalize -1.0 to 1.0
 8001726:	4b29      	ldr	r3, [pc, #164]	@ (80017cc <SentCMDVEL+0xc8>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800172e:	ee07 3a90 	vmov	s15, r3
 8001732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001736:	eeb1 7a67 	vneg.f32	s14, s15
 800173a:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80017c4 <SentCMDVEL+0xc0>
 800173e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001742:	4b23      	ldr	r3, [pc, #140]	@ (80017d0 <SentCMDVEL+0xcc>)
 8001744:	edc3 7a00 	vstr	s15, [r3]

	/* Check DEADZONE*/
	if (fabs(linear_velocity) < 0.015f) {
 8001748:	4b1f      	ldr	r3, [pc, #124]	@ (80017c8 <SentCMDVEL+0xc4>)
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	eef0 7ae7 	vabs.f32	s15, s15
 8001752:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80017d4 <SentCMDVEL+0xd0>
 8001756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800175a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175e:	d503      	bpl.n	8001768 <SentCMDVEL+0x64>
		linear_velocity = 0.0f;
 8001760:	4b19      	ldr	r3, [pc, #100]	@ (80017c8 <SentCMDVEL+0xc4>)
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
	}

	if (fabs(angular_velocity) < 0.015f) {
 8001768:	4b19      	ldr	r3, [pc, #100]	@ (80017d0 <SentCMDVEL+0xcc>)
 800176a:	edd3 7a00 	vldr	s15, [r3]
 800176e:	eef0 7ae7 	vabs.f32	s15, s15
 8001772:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80017d4 <SentCMDVEL+0xd0>
 8001776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800177a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177e:	d503      	bpl.n	8001788 <SentCMDVEL+0x84>
		angular_velocity = 0.0f;
 8001780:	4b13      	ldr	r3, [pc, #76]	@ (80017d0 <SentCMDVEL+0xcc>)
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
	}

	twist_msg.linear.x = linear_velocity;
 8001788:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <SentCMDVEL+0xc4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe ff13 	bl	80005b8 <__aeabi_f2d>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4910      	ldr	r1, [pc, #64]	@ (80017d8 <SentCMDVEL+0xd4>)
 8001798:	e9c1 2300 	strd	r2, r3, [r1]
	twist_msg.angular.z = angular_velocity;
 800179c:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <SentCMDVEL+0xcc>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe ff09 	bl	80005b8 <__aeabi_f2d>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	490b      	ldr	r1, [pc, #44]	@ (80017d8 <SentCMDVEL+0xd4>)
 80017ac:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	RCSOFTCHECK(rcl_publish(&cmdvel_publisher, &twist_msg, NULL));
 80017b0:	2200      	movs	r2, #0
 80017b2:	4909      	ldr	r1, [pc, #36]	@ (80017d8 <SentCMDVEL+0xd4>)
 80017b4:	4809      	ldr	r0, [pc, #36]	@ (80017dc <SentCMDVEL+0xd8>)
 80017b6:	f00a fcad 	bl	800c114 <rcl_publish>
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20004a8a 	.word	0x20004a8a
 80017c4:	45000000 	.word	0x45000000
 80017c8:	20004a8c 	.word	0x20004a8c
 80017cc:	20004a88 	.word	0x20004a88
 80017d0:	20004a90 	.word	0x20004a90
 80017d4:	3c75c28f 	.word	0x3c75c28f
 80017d8:	200048c8 	.word	0x200048c8
 80017dc:	200048c4 	.word	0x200048c4

080017e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017e4:	b672      	cpsid	i
}
 80017e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <Error_Handler+0x8>

080017ec <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80017f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <microros_allocate+0x3c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4413      	add	r3, r2
 8001800:	461a      	mov	r2, r3
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <microros_allocate+0x3c>)
 8001804:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001806:	4b09      	ldr	r3, [pc, #36]	@ (800182c <microros_allocate+0x40>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4413      	add	r3, r2
 8001810:	461a      	mov	r2, r3
 8001812:	4b06      	ldr	r3, [pc, #24]	@ (800182c <microros_allocate+0x40>)
 8001814:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff fa0a 	bl	8000c30 <pvPortMallocMicroROS>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20004a94 	.word	0x20004a94
 800182c:	20004a98 	.word	0x20004a98

08001830 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00c      	beq.n	800185a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff fb19 	bl	8000e78 <getBlockSize>
 8001846:	4603      	mov	r3, r0
 8001848:	4a06      	ldr	r2, [pc, #24]	@ (8001864 <microros_deallocate+0x34>)
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	461a      	mov	r2, r3
 8001850:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <microros_deallocate+0x34>)
 8001852:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff fab3 	bl	8000dc0 <vPortFreeMicroROS>
  }
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20004a98 	.word	0x20004a98

08001868 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001874:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <microros_reallocate+0x64>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	4413      	add	r3, r2
 800187e:	461a      	mov	r2, r3
 8001880:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <microros_reallocate+0x64>)
 8001882:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <microros_reallocate+0x68>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	4413      	add	r3, r2
 800188e:	461a      	mov	r2, r3
 8001890:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <microros_reallocate+0x68>)
 8001892:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d104      	bne.n	80018a4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800189a:	68b8      	ldr	r0, [r7, #8]
 800189c:	f7ff f9c8 	bl	8000c30 <pvPortMallocMicroROS>
 80018a0:	4603      	mov	r3, r0
 80018a2:	e00e      	b.n	80018c2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f7ff fae7 	bl	8000e78 <getBlockSize>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4a08      	ldr	r2, [pc, #32]	@ (80018d0 <microros_reallocate+0x68>)
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <microros_reallocate+0x68>)
 80018b6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f7ff fafa 	bl	8000eb4 <pvPortReallocMicroROS>
 80018c0:	4603      	mov	r3, r0
  }
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20004a94 	.word	0x20004a94
 80018d0:	20004a98 	.word	0x20004a98

080018d4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	fb02 f303 	mul.w	r3, r2, r3
 80018e8:	4a0c      	ldr	r2, [pc, #48]	@ (800191c <microros_zero_allocate+0x48>)
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	4413      	add	r3, r2
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <microros_zero_allocate+0x48>)
 80018f2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	fb02 f303 	mul.w	r3, r2, r3
 80018fc:	4a08      	ldr	r2, [pc, #32]	@ (8001920 <microros_zero_allocate+0x4c>)
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	4413      	add	r3, r2
 8001902:	461a      	mov	r2, r3
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <microros_zero_allocate+0x4c>)
 8001906:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001908:	68b9      	ldr	r1, [r7, #8]
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f7ff faff 	bl	8000f0e <pvPortCallocMicroROS>
 8001910:	4603      	mov	r3, r0
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20004a94 	.word	0x20004a94
 8001920:	20004a98 	.word	0x20004a98
 8001924:	00000000 	.word	0x00000000

08001928 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001928:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800193a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800193e:	a320      	add	r3, pc, #128	@ (adr r3, 80019c0 <UTILS_NanosecondsToTimespec+0x98>)
 8001940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001944:	f7fe fe90 	bl	8000668 <__aeabi_ldivmod>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001952:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001956:	a31a      	add	r3, pc, #104	@ (adr r3, 80019c0 <UTILS_NanosecondsToTimespec+0x98>)
 8001958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195c:	f7fe fe84 	bl	8000668 <__aeabi_ldivmod>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b00      	cmp	r3, #0
 800196a:	da20      	bge.n	80019ae <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	4a11      	ldr	r2, [pc, #68]	@ (80019b8 <UTILS_NanosecondsToTimespec+0x90>)
 8001972:	fb82 1203 	smull	r1, r2, r2, r3
 8001976:	1712      	asrs	r2, r2, #28
 8001978:	17db      	asrs	r3, r3, #31
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	3301      	adds	r3, #1
 800197e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001986:	6979      	ldr	r1, [r7, #20]
 8001988:	17c8      	asrs	r0, r1, #31
 800198a:	460c      	mov	r4, r1
 800198c:	4605      	mov	r5, r0
 800198e:	ebb2 0804 	subs.w	r8, r2, r4
 8001992:	eb63 0905 	sbc.w	r9, r3, r5
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	4906      	ldr	r1, [pc, #24]	@ (80019bc <UTILS_NanosecondsToTimespec+0x94>)
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	441a      	add	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	609a      	str	r2, [r3, #8]
    }
}
 80019ae:	bf00      	nop
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019b8:	44b82fa1 	.word	0x44b82fa1
 80019bc:	3b9aca00 	.word	0x3b9aca00
 80019c0:	3b9aca00 	.word	0x3b9aca00
 80019c4:	00000000 	.word	0x00000000

080019c8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80019c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019cc:	b08e      	sub	sp, #56	@ 0x38
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80019d2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80019d4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80019d8:	2300      	movs	r3, #0
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80019ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019ee:	4618      	mov	r0, r3
 80019f0:	f007 f830 	bl	8008a54 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80019f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019f6:	17da      	asrs	r2, r3, #31
 80019f8:	61bb      	str	r3, [r7, #24]
 80019fa:	61fa      	str	r2, [r7, #28]
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	69b9      	ldr	r1, [r7, #24]
 8001a06:	000b      	movs	r3, r1
 8001a08:	2200      	movs	r2, #0
 8001a0a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a10:	2200      	movs	r2, #0
 8001a12:	461c      	mov	r4, r3
 8001a14:	4615      	mov	r5, r2
 8001a16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a1a:	1911      	adds	r1, r2, r4
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	416b      	adcs	r3, r5
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001a26:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001a2a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	f04f 0400 	mov.w	r4, #0
 8001a36:	f04f 0500 	mov.w	r5, #0
 8001a3a:	015d      	lsls	r5, r3, #5
 8001a3c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001a40:	0154      	lsls	r4, r2, #5
 8001a42:	4622      	mov	r2, r4
 8001a44:	462b      	mov	r3, r5
 8001a46:	ebb2 0800 	subs.w	r8, r2, r0
 8001a4a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001a5a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001a5e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001a62:	4690      	mov	r8, r2
 8001a64:	4699      	mov	r9, r3
 8001a66:	eb18 0a00 	adds.w	sl, r8, r0
 8001a6a:	eb49 0b01 	adc.w	fp, r9, r1
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a7a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a7e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a82:	ebb2 040a 	subs.w	r4, r2, sl
 8001a86:	603c      	str	r4, [r7, #0]
 8001a88:	eb63 030b 	sbc.w	r3, r3, fp
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a92:	4623      	mov	r3, r4
 8001a94:	181b      	adds	r3, r3, r0
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	462b      	mov	r3, r5
 8001a9a:	eb41 0303 	adc.w	r3, r1, r3
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	6a3a      	ldr	r2, [r7, #32]
 8001aa2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001aa6:	f7ff ff3f 	bl	8001928 <UTILS_NanosecondsToTimespec>

    return 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	4618      	mov	r0, r3
 8001aae:	3738      	adds	r7, #56	@ 0x38
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abe:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <HAL_MspInit+0x50>)
 8001ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac2:	4a11      	ldr	r2, [pc, #68]	@ (8001b08 <HAL_MspInit+0x50>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aca:	4b0f      	ldr	r3, [pc, #60]	@ (8001b08 <HAL_MspInit+0x50>)
 8001acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b08 <HAL_MspInit+0x50>)
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ada:	4a0b      	ldr	r2, [pc, #44]	@ (8001b08 <HAL_MspInit+0x50>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ae0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ae2:	4b09      	ldr	r3, [pc, #36]	@ (8001b08 <HAL_MspInit+0x50>)
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	210f      	movs	r1, #15
 8001af2:	f06f 0001 	mvn.w	r0, #1
 8001af6:	f002 f82e 	bl	8003b56 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001afa:	f002 fe5f 	bl	80047bc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000

08001b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <NMI_Handler+0x4>

08001b14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <HardFault_Handler+0x4>

08001b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <MemManage_Handler+0x4>

08001b24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <BusFault_Handler+0x4>

08001b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <UsageFault_Handler+0x4>

08001b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b46:	f000 fa95 	bl	8002074 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b4a:	f007 f907 	bl	8008d5c <xTaskGetSchedulerState>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d001      	beq.n	8001b58 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001b54:	f007 ff00 	bl	8009958 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b60:	4802      	ldr	r0, [pc, #8]	@ (8001b6c <DMA1_Channel1_IRQHandler+0x10>)
 8001b62:	f002 fa10 	bl	8003f86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000410 	.word	0x20000410

08001b70 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001b74:	4802      	ldr	r0, [pc, #8]	@ (8001b80 <DMA1_Channel2_IRQHandler+0x10>)
 8001b76:	f002 fa06 	bl	8003f86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20004b38 	.word	0x20004b38

08001b84 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001b88:	4802      	ldr	r0, [pc, #8]	@ (8001b94 <DMA1_Channel3_IRQHandler+0x10>)
 8001b8a:	f002 f9fc 	bl	8003f86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20004b98 	.word	0x20004b98

08001b98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001b9c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ba0:	f002 fce6 	bl	8004570 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001bac:	4802      	ldr	r0, [pc, #8]	@ (8001bb8 <LPUART1_IRQHandler+0x10>)
 8001bae:	f003 ff43 	bl	8005a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20004aa4 	.word	0x20004aa4

08001bbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return 1;
 8001bc0:	2301      	movs	r3, #1
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <_kill>:

int _kill(int pid, int sig)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bd6:	f015 feab 	bl	8017930 <__errno>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2216      	movs	r2, #22
 8001bde:	601a      	str	r2, [r3, #0]
  return -1;
 8001be0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <_exit>:

void _exit (int status)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bf4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ffe7 	bl	8001bcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bfe:	bf00      	nop
 8001c00:	e7fd      	b.n	8001bfe <_exit+0x12>

08001c02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	e00a      	b.n	8001c2a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c14:	f3af 8000 	nop.w
 8001c18:	4601      	mov	r1, r0
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	60ba      	str	r2, [r7, #8]
 8001c20:	b2ca      	uxtb	r2, r1
 8001c22:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	3301      	adds	r3, #1
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	dbf0      	blt.n	8001c14 <_read+0x12>
  }

  return len;
 8001c32:	687b      	ldr	r3, [r7, #4]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	e009      	b.n	8001c62 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	60ba      	str	r2, [r7, #8]
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	dbf1      	blt.n	8001c4e <_write+0x12>
  }
  return len;
 8001c6a:	687b      	ldr	r3, [r7, #4]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <_close>:

int _close(int file)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c9c:	605a      	str	r2, [r3, #4]
  return 0;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <_isatty>:

int _isatty(int file)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cb4:	2301      	movs	r3, #1
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b085      	sub	sp, #20
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce4:	4a14      	ldr	r2, [pc, #80]	@ (8001d38 <_sbrk+0x5c>)
 8001ce6:	4b15      	ldr	r3, [pc, #84]	@ (8001d3c <_sbrk+0x60>)
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf0:	4b13      	ldr	r3, [pc, #76]	@ (8001d40 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <_sbrk+0x64>)
 8001cfa:	4a12      	ldr	r2, [pc, #72]	@ (8001d44 <_sbrk+0x68>)
 8001cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cfe:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <_sbrk+0x64>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d207      	bcs.n	8001d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d0c:	f015 fe10 	bl	8017930 <__errno>
 8001d10:	4603      	mov	r3, r0
 8001d12:	220c      	movs	r2, #12
 8001d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d1a:	e009      	b.n	8001d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d1c:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <_sbrk+0x64>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d22:	4b07      	ldr	r3, [pc, #28]	@ (8001d40 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	4a05      	ldr	r2, [pc, #20]	@ (8001d40 <_sbrk+0x64>)
 8001d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20020000 	.word	0x20020000
 8001d3c:	00000400 	.word	0x00000400
 8001d40:	20004aa0 	.word	0x20004aa0
 8001d44:	2000b348 	.word	0x2000b348

08001d48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d4c:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <SystemInit+0x20>)
 8001d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d52:	4a05      	ldr	r2, [pc, #20]	@ (8001d68 <SystemInit+0x20>)
 8001d54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001d70:	4b21      	ldr	r3, [pc, #132]	@ (8001df8 <MX_LPUART1_UART_Init+0x8c>)
 8001d72:	4a22      	ldr	r2, [pc, #136]	@ (8001dfc <MX_LPUART1_UART_Init+0x90>)
 8001d74:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001d76:	4b20      	ldr	r3, [pc, #128]	@ (8001df8 <MX_LPUART1_UART_Init+0x8c>)
 8001d78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d7c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001df8 <MX_LPUART1_UART_Init+0x8c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001d84:	4b1c      	ldr	r3, [pc, #112]	@ (8001df8 <MX_LPUART1_UART_Init+0x8c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001df8 <MX_LPUART1_UART_Init+0x8c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001d90:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <MX_LPUART1_UART_Init+0x8c>)
 8001d92:	220c      	movs	r2, #12
 8001d94:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d96:	4b18      	ldr	r3, [pc, #96]	@ (8001df8 <MX_LPUART1_UART_Init+0x8c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d9c:	4b16      	ldr	r3, [pc, #88]	@ (8001df8 <MX_LPUART1_UART_Init+0x8c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001da2:	4b15      	ldr	r3, [pc, #84]	@ (8001df8 <MX_LPUART1_UART_Init+0x8c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001da8:	4b13      	ldr	r3, [pc, #76]	@ (8001df8 <MX_LPUART1_UART_Init+0x8c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001dae:	4812      	ldr	r0, [pc, #72]	@ (8001df8 <MX_LPUART1_UART_Init+0x8c>)
 8001db0:	f003 fc90 	bl	80056d4 <HAL_UART_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001dba:	f7ff fd11 	bl	80017e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	480d      	ldr	r0, [pc, #52]	@ (8001df8 <MX_LPUART1_UART_Init+0x8c>)
 8001dc2:	f005 f9a0 	bl	8007106 <HAL_UARTEx_SetTxFifoThreshold>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001dcc:	f7ff fd08 	bl	80017e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4809      	ldr	r0, [pc, #36]	@ (8001df8 <MX_LPUART1_UART_Init+0x8c>)
 8001dd4:	f005 f9d5 	bl	8007182 <HAL_UARTEx_SetRxFifoThreshold>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001dde:	f7ff fcff 	bl	80017e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001de2:	4805      	ldr	r0, [pc, #20]	@ (8001df8 <MX_LPUART1_UART_Init+0x8c>)
 8001de4:	f005 f956 	bl	8007094 <HAL_UARTEx_DisableFifoMode>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001dee:	f7ff fcf7 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20004aa4 	.word	0x20004aa4
 8001dfc:	40008000 	.word	0x40008000

08001e00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b09e      	sub	sp, #120	@ 0x78
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e18:	f107 0310 	add.w	r3, r7, #16
 8001e1c:	2254      	movs	r2, #84	@ 0x54
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f015 fcf1 	bl	8017808 <memset>
  if(uartHandle->Instance==LPUART1)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a4e      	ldr	r2, [pc, #312]	@ (8001f64 <HAL_UART_MspInit+0x164>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	f040 8094 	bne.w	8001f5a <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001e32:	2320      	movs	r3, #32
 8001e34:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001e36:	2300      	movs	r3, #0
 8001e38:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 f9fa 	bl	8005238 <HAL_RCCEx_PeriphCLKConfig>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e4a:	f7ff fcc9 	bl	80017e0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001e4e:	4b46      	ldr	r3, [pc, #280]	@ (8001f68 <HAL_UART_MspInit+0x168>)
 8001e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e52:	4a45      	ldr	r2, [pc, #276]	@ (8001f68 <HAL_UART_MspInit+0x168>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001e5a:	4b43      	ldr	r3, [pc, #268]	@ (8001f68 <HAL_UART_MspInit+0x168>)
 8001e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e66:	4b40      	ldr	r3, [pc, #256]	@ (8001f68 <HAL_UART_MspInit+0x168>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f68 <HAL_UART_MspInit+0x168>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e72:	4b3d      	ldr	r3, [pc, #244]	@ (8001f68 <HAL_UART_MspInit+0x168>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e7e:	230c      	movs	r3, #12
 8001e80:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001e8e:	230c      	movs	r3, #12
 8001e90:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e92:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e96:	4619      	mov	r1, r3
 8001e98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e9c:	f002 f9ce 	bl	800423c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8001ea0:	4b32      	ldr	r3, [pc, #200]	@ (8001f6c <HAL_UART_MspInit+0x16c>)
 8001ea2:	4a33      	ldr	r2, [pc, #204]	@ (8001f70 <HAL_UART_MspInit+0x170>)
 8001ea4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001ea6:	4b31      	ldr	r3, [pc, #196]	@ (8001f6c <HAL_UART_MspInit+0x16c>)
 8001ea8:	2222      	movs	r2, #34	@ 0x22
 8001eaa:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eac:	4b2f      	ldr	r3, [pc, #188]	@ (8001f6c <HAL_UART_MspInit+0x16c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eb2:	4b2e      	ldr	r3, [pc, #184]	@ (8001f6c <HAL_UART_MspInit+0x16c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001eb8:	4b2c      	ldr	r3, [pc, #176]	@ (8001f6c <HAL_UART_MspInit+0x16c>)
 8001eba:	2280      	movs	r2, #128	@ 0x80
 8001ebc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ebe:	4b2b      	ldr	r3, [pc, #172]	@ (8001f6c <HAL_UART_MspInit+0x16c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ec4:	4b29      	ldr	r3, [pc, #164]	@ (8001f6c <HAL_UART_MspInit+0x16c>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001eca:	4b28      	ldr	r3, [pc, #160]	@ (8001f6c <HAL_UART_MspInit+0x16c>)
 8001ecc:	2220      	movs	r2, #32
 8001ece:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ed0:	4b26      	ldr	r3, [pc, #152]	@ (8001f6c <HAL_UART_MspInit+0x16c>)
 8001ed2:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001ed6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001ed8:	4824      	ldr	r0, [pc, #144]	@ (8001f6c <HAL_UART_MspInit+0x16c>)
 8001eda:	f001 fe71 	bl	8003bc0 <HAL_DMA_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8001ee4:	f7ff fc7c 	bl	80017e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a20      	ldr	r2, [pc, #128]	@ (8001f6c <HAL_UART_MspInit+0x16c>)
 8001eec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001ef0:	4a1e      	ldr	r2, [pc, #120]	@ (8001f6c <HAL_UART_MspInit+0x16c>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel3;
 8001ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f74 <HAL_UART_MspInit+0x174>)
 8001ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8001f78 <HAL_UART_MspInit+0x178>)
 8001efa:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001efc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f74 <HAL_UART_MspInit+0x174>)
 8001efe:	2223      	movs	r2, #35	@ 0x23
 8001f00:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f02:	4b1c      	ldr	r3, [pc, #112]	@ (8001f74 <HAL_UART_MspInit+0x174>)
 8001f04:	2210      	movs	r2, #16
 8001f06:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f08:	4b1a      	ldr	r3, [pc, #104]	@ (8001f74 <HAL_UART_MspInit+0x174>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f0e:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <HAL_UART_MspInit+0x174>)
 8001f10:	2280      	movs	r2, #128	@ 0x80
 8001f12:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f14:	4b17      	ldr	r3, [pc, #92]	@ (8001f74 <HAL_UART_MspInit+0x174>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f1a:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <HAL_UART_MspInit+0x174>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001f20:	4b14      	ldr	r3, [pc, #80]	@ (8001f74 <HAL_UART_MspInit+0x174>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001f26:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <HAL_UART_MspInit+0x174>)
 8001f28:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001f2c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001f2e:	4811      	ldr	r0, [pc, #68]	@ (8001f74 <HAL_UART_MspInit+0x174>)
 8001f30:	f001 fe46 	bl	8003bc0 <HAL_DMA_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8001f3a:	f7ff fc51 	bl	80017e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a0c      	ldr	r2, [pc, #48]	@ (8001f74 <HAL_UART_MspInit+0x174>)
 8001f42:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001f44:	4a0b      	ldr	r2, [pc, #44]	@ (8001f74 <HAL_UART_MspInit+0x174>)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2105      	movs	r1, #5
 8001f4e:	205b      	movs	r0, #91	@ 0x5b
 8001f50:	f001 fe01 	bl	8003b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001f54:	205b      	movs	r0, #91	@ 0x5b
 8001f56:	f001 fe18 	bl	8003b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	3778      	adds	r7, #120	@ 0x78
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40008000 	.word	0x40008000
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	20004b38 	.word	0x20004b38
 8001f70:	4002001c 	.word	0x4002001c
 8001f74:	20004b98 	.word	0x20004b98
 8001f78:	40020030 	.word	0x40020030

08001f7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f7c:	480d      	ldr	r0, [pc, #52]	@ (8001fb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f7e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f80:	f7ff fee2 	bl	8001d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f84:	480c      	ldr	r0, [pc, #48]	@ (8001fb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f86:	490d      	ldr	r1, [pc, #52]	@ (8001fbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f88:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc0 <LoopForever+0xe>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f8c:	e002      	b.n	8001f94 <LoopCopyDataInit>

08001f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f92:	3304      	adds	r3, #4

08001f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f98:	d3f9      	bcc.n	8001f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f9c:	4c0a      	ldr	r4, [pc, #40]	@ (8001fc8 <LoopForever+0x16>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa0:	e001      	b.n	8001fa6 <LoopFillZerobss>

08001fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa4:	3204      	adds	r2, #4

08001fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa8:	d3fb      	bcc.n	8001fa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001faa:	f015 fcc7 	bl	801793c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fae:	f7ff fae9 	bl	8001584 <main>

08001fb2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fb2:	e7fe      	b.n	8001fb2 <LoopForever>
  ldr   r0, =_estack
 8001fb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fbc:	20000388 	.word	0x20000388
  ldr r2, =_sidata
 8001fc0:	080199cc 	.word	0x080199cc
  ldr r2, =_sbss
 8001fc4:	20000388 	.word	0x20000388
  ldr r4, =_ebss
 8001fc8:	2000b344 	.word	0x2000b344

08001fcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fcc:	e7fe      	b.n	8001fcc <ADC1_2_IRQHandler>

08001fce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd8:	2003      	movs	r0, #3
 8001fda:	f001 fdb1 	bl	8003b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fde:	200f      	movs	r0, #15
 8001fe0:	f000 f80e 	bl	8002000 <HAL_InitTick>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	71fb      	strb	r3, [r7, #7]
 8001fee:	e001      	b.n	8001ff4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ff0:	f7ff fd62 	bl	8001ab8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ff4:	79fb      	ldrb	r3, [r7, #7]

}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800200c:	4b16      	ldr	r3, [pc, #88]	@ (8002068 <HAL_InitTick+0x68>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d022      	beq.n	800205a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002014:	4b15      	ldr	r3, [pc, #84]	@ (800206c <HAL_InitTick+0x6c>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b13      	ldr	r3, [pc, #76]	@ (8002068 <HAL_InitTick+0x68>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002020:	fbb1 f3f3 	udiv	r3, r1, r3
 8002024:	fbb2 f3f3 	udiv	r3, r2, r3
 8002028:	4618      	mov	r0, r3
 800202a:	f001 fdbc 	bl	8003ba6 <HAL_SYSTICK_Config>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10f      	bne.n	8002054 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b0f      	cmp	r3, #15
 8002038:	d809      	bhi.n	800204e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800203a:	2200      	movs	r2, #0
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002042:	f001 fd88 	bl	8003b56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002046:	4a0a      	ldr	r2, [pc, #40]	@ (8002070 <HAL_InitTick+0x70>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	e007      	b.n	800205e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
 8002052:	e004      	b.n	800205e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
 8002058:	e001      	b.n	800205e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800205e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	2000000c 	.word	0x2000000c
 800206c:	20000004 	.word	0x20000004
 8002070:	20000008 	.word	0x20000008

08002074 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002078:	4b05      	ldr	r3, [pc, #20]	@ (8002090 <HAL_IncTick+0x1c>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b05      	ldr	r3, [pc, #20]	@ (8002094 <HAL_IncTick+0x20>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4413      	add	r3, r2
 8002082:	4a03      	ldr	r2, [pc, #12]	@ (8002090 <HAL_IncTick+0x1c>)
 8002084:	6013      	str	r3, [r2, #0]
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	20004bf8 	.word	0x20004bf8
 8002094:	2000000c 	.word	0x2000000c

08002098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return uwTick;
 800209c:	4b03      	ldr	r3, [pc, #12]	@ (80020ac <HAL_GetTick+0x14>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20004bf8 	.word	0x20004bf8

080020b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	609a      	str	r2, [r3, #8]
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	609a      	str	r2, [r3, #8]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002118:	b480      	push	{r7}
 800211a:	b087      	sub	sp, #28
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	3360      	adds	r3, #96	@ 0x60
 800212a:	461a      	mov	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b08      	ldr	r3, [pc, #32]	@ (800215c <LL_ADC_SetOffset+0x44>)
 800213a:	4013      	ands	r3, r2
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	4313      	orrs	r3, r2
 8002148:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002150:	bf00      	nop
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	03fff000 	.word	0x03fff000

08002160 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3360      	adds	r3, #96	@ 0x60
 800216e:	461a      	mov	r2, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3360      	adds	r3, #96	@ 0x60
 800219c:	461a      	mov	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021b6:	bf00      	nop
 80021b8:	371c      	adds	r7, #28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b087      	sub	sp, #28
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	3360      	adds	r3, #96	@ 0x60
 80021d2:	461a      	mov	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80021ec:	bf00      	nop
 80021ee:	371c      	adds	r7, #28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3360      	adds	r3, #96	@ 0x60
 8002208:	461a      	mov	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	431a      	orrs	r2, r3
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002222:	bf00      	nop
 8002224:	371c      	adds	r7, #28
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	615a      	str	r2, [r3, #20]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800227a:	b480      	push	{r7}
 800227c:	b087      	sub	sp, #28
 800227e:	af00      	add	r7, sp, #0
 8002280:	60f8      	str	r0, [r7, #12]
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	3330      	adds	r3, #48	@ 0x30
 800228a:	461a      	mov	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	0a1b      	lsrs	r3, r3, #8
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	4413      	add	r3, r2
 8002298:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	211f      	movs	r1, #31
 80022a6:	fa01 f303 	lsl.w	r3, r1, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	401a      	ands	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	0e9b      	lsrs	r3, r3, #26
 80022b2:	f003 011f 	and.w	r1, r3, #31
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	fa01 f303 	lsl.w	r3, r1, r3
 80022c0:	431a      	orrs	r2, r3
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022c6:	bf00      	nop
 80022c8:	371c      	adds	r7, #28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b087      	sub	sp, #28
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	3314      	adds	r3, #20
 80022e2:	461a      	mov	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	0e5b      	lsrs	r3, r3, #25
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	4413      	add	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	0d1b      	lsrs	r3, r3, #20
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	2107      	movs	r1, #7
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	401a      	ands	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	0d1b      	lsrs	r3, r3, #20
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	431a      	orrs	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800231c:	bf00      	nop
 800231e:	371c      	adds	r7, #28
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002340:	43db      	mvns	r3, r3
 8002342:	401a      	ands	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f003 0318 	and.w	r3, r3, #24
 800234a:	4908      	ldr	r1, [pc, #32]	@ (800236c <LL_ADC_SetChannelSingleDiff+0x44>)
 800234c:	40d9      	lsrs	r1, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	400b      	ands	r3, r1
 8002352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002356:	431a      	orrs	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	0007ffff 	.word	0x0007ffff

08002370 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 031f 	and.w	r3, r3, #31
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800239c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6093      	str	r3, [r2, #8]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023c4:	d101      	bne.n	80023ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80023e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002410:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002414:	d101      	bne.n	800241a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002438:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800243c:	f043 0201 	orr.w	r2, r3, #1
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002460:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002464:	f043 0202 	orr.w	r2, r3, #2
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <LL_ADC_IsEnabled+0x18>
 800248c:	2301      	movs	r3, #1
 800248e:	e000      	b.n	8002492 <LL_ADC_IsEnabled+0x1a>
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d101      	bne.n	80024b6 <LL_ADC_IsDisableOngoing+0x18>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <LL_ADC_IsDisableOngoing+0x1a>
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024d8:	f043 0204 	orr.w	r2, r3, #4
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d101      	bne.n	8002504 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b08      	cmp	r3, #8
 8002524:	d101      	bne.n	800252a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b089      	sub	sp, #36	@ 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e1a9      	b.n	80028a6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800255c:	2b00      	cmp	r3, #0
 800255e:	d109      	bne.n	8002574 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7fe fad1 	bl	8000b08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff19 	bl	80023b0 <LL_ADC_IsDeepPowerDownEnabled>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d004      	beq.n	800258e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff feff 	bl	800238c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff ff34 	bl	8002400 <LL_ADC_IsInternalRegulatorEnabled>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d115      	bne.n	80025ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff ff18 	bl	80023d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025a8:	4b9c      	ldr	r3, [pc, #624]	@ (800281c <HAL_ADC_Init+0x2e4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	099b      	lsrs	r3, r3, #6
 80025ae:	4a9c      	ldr	r2, [pc, #624]	@ (8002820 <HAL_ADC_Init+0x2e8>)
 80025b0:	fba2 2303 	umull	r2, r3, r2, r3
 80025b4:	099b      	lsrs	r3, r3, #6
 80025b6:	3301      	adds	r3, #1
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025bc:	e002      	b.n	80025c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f9      	bne.n	80025be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff ff16 	bl	8002400 <LL_ADC_IsInternalRegulatorEnabled>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10d      	bne.n	80025f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025de:	f043 0210 	orr.w	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ea:	f043 0201 	orr.w	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff ff76 	bl	80024ec <LL_ADC_REG_IsConversionOngoing>
 8002600:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	2b00      	cmp	r3, #0
 800260c:	f040 8142 	bne.w	8002894 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2b00      	cmp	r3, #0
 8002614:	f040 813e 	bne.w	8002894 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800261c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002620:	f043 0202 	orr.w	r2, r3, #2
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff23 	bl	8002478 <LL_ADC_IsEnabled>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d141      	bne.n	80026bc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002640:	d004      	beq.n	800264c <HAL_ADC_Init+0x114>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a77      	ldr	r2, [pc, #476]	@ (8002824 <HAL_ADC_Init+0x2ec>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d10f      	bne.n	800266c <HAL_ADC_Init+0x134>
 800264c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002650:	f7ff ff12 	bl	8002478 <LL_ADC_IsEnabled>
 8002654:	4604      	mov	r4, r0
 8002656:	4873      	ldr	r0, [pc, #460]	@ (8002824 <HAL_ADC_Init+0x2ec>)
 8002658:	f7ff ff0e 	bl	8002478 <LL_ADC_IsEnabled>
 800265c:	4603      	mov	r3, r0
 800265e:	4323      	orrs	r3, r4
 8002660:	2b00      	cmp	r3, #0
 8002662:	bf0c      	ite	eq
 8002664:	2301      	moveq	r3, #1
 8002666:	2300      	movne	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	e012      	b.n	8002692 <HAL_ADC_Init+0x15a>
 800266c:	486e      	ldr	r0, [pc, #440]	@ (8002828 <HAL_ADC_Init+0x2f0>)
 800266e:	f7ff ff03 	bl	8002478 <LL_ADC_IsEnabled>
 8002672:	4604      	mov	r4, r0
 8002674:	486d      	ldr	r0, [pc, #436]	@ (800282c <HAL_ADC_Init+0x2f4>)
 8002676:	f7ff feff 	bl	8002478 <LL_ADC_IsEnabled>
 800267a:	4603      	mov	r3, r0
 800267c:	431c      	orrs	r4, r3
 800267e:	486c      	ldr	r0, [pc, #432]	@ (8002830 <HAL_ADC_Init+0x2f8>)
 8002680:	f7ff fefa 	bl	8002478 <LL_ADC_IsEnabled>
 8002684:	4603      	mov	r3, r0
 8002686:	4323      	orrs	r3, r4
 8002688:	2b00      	cmp	r3, #0
 800268a:	bf0c      	ite	eq
 800268c:	2301      	moveq	r3, #1
 800268e:	2300      	movne	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d012      	beq.n	80026bc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800269e:	d004      	beq.n	80026aa <HAL_ADC_Init+0x172>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a5f      	ldr	r2, [pc, #380]	@ (8002824 <HAL_ADC_Init+0x2ec>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_Init+0x176>
 80026aa:	4a62      	ldr	r2, [pc, #392]	@ (8002834 <HAL_ADC_Init+0x2fc>)
 80026ac:	e000      	b.n	80026b0 <HAL_ADC_Init+0x178>
 80026ae:	4a62      	ldr	r2, [pc, #392]	@ (8002838 <HAL_ADC_Init+0x300>)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4619      	mov	r1, r3
 80026b6:	4610      	mov	r0, r2
 80026b8:	f7ff fcfa 	bl	80020b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	7f5b      	ldrb	r3, [r3, #29]
 80026c0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026c6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80026cc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80026d2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026da:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d106      	bne.n	80026f8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ee:	3b01      	subs	r3, #1
 80026f0:	045b      	lsls	r3, r3, #17
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d009      	beq.n	8002714 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002704:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	4b48      	ldr	r3, [pc, #288]	@ (800283c <HAL_ADC_Init+0x304>)
 800271c:	4013      	ands	r3, r2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	69b9      	ldr	r1, [r7, #24]
 8002724:	430b      	orrs	r3, r1
 8002726:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fee5 	bl	8002512 <LL_ADC_INJ_IsConversionOngoing>
 8002748:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d17f      	bne.n	8002850 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d17c      	bne.n	8002850 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800275a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002762:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002772:	f023 0302 	bic.w	r3, r3, #2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6812      	ldr	r2, [r2, #0]
 800277a:	69b9      	ldr	r1, [r7, #24]
 800277c:	430b      	orrs	r3, r1
 800277e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d017      	beq.n	80027b8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002796:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80027a0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6911      	ldr	r1, [r2, #16]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6812      	ldr	r2, [r2, #0]
 80027b0:	430b      	orrs	r3, r1
 80027b2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80027b6:	e013      	b.n	80027e0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691a      	ldr	r2, [r3, #16]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80027c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027dc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d12a      	bne.n	8002840 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80027f4:	f023 0304 	bic.w	r3, r3, #4
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002800:	4311      	orrs	r1, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002806:	4311      	orrs	r1, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800280c:	430a      	orrs	r2, r1
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0201 	orr.w	r2, r2, #1
 8002818:	611a      	str	r2, [r3, #16]
 800281a:	e019      	b.n	8002850 <HAL_ADC_Init+0x318>
 800281c:	20000004 	.word	0x20000004
 8002820:	053e2d63 	.word	0x053e2d63
 8002824:	50000100 	.word	0x50000100
 8002828:	50000400 	.word	0x50000400
 800282c:	50000500 	.word	0x50000500
 8002830:	50000600 	.word	0x50000600
 8002834:	50000300 	.word	0x50000300
 8002838:	50000700 	.word	0x50000700
 800283c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691a      	ldr	r2, [r3, #16]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0201 	bic.w	r2, r2, #1
 800284e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d10c      	bne.n	8002872 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	f023 010f 	bic.w	r1, r3, #15
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	1e5a      	subs	r2, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002870:	e007      	b.n	8002882 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 020f 	bic.w	r2, r2, #15
 8002880:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002886:	f023 0303 	bic.w	r3, r3, #3
 800288a:	f043 0201 	orr.w	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002892:	e007      	b.n	80028a4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002898:	f043 0210 	orr.w	r2, r3, #16
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3724      	adds	r7, #36	@ 0x24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd90      	pop	{r4, r7, pc}
 80028ae:	bf00      	nop

080028b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028c4:	d004      	beq.n	80028d0 <HAL_ADC_Start_DMA+0x20>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a5a      	ldr	r2, [pc, #360]	@ (8002a34 <HAL_ADC_Start_DMA+0x184>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d101      	bne.n	80028d4 <HAL_ADC_Start_DMA+0x24>
 80028d0:	4b59      	ldr	r3, [pc, #356]	@ (8002a38 <HAL_ADC_Start_DMA+0x188>)
 80028d2:	e000      	b.n	80028d6 <HAL_ADC_Start_DMA+0x26>
 80028d4:	4b59      	ldr	r3, [pc, #356]	@ (8002a3c <HAL_ADC_Start_DMA+0x18c>)
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fd4a 	bl	8002370 <LL_ADC_GetMultimode>
 80028dc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fe02 	bl	80024ec <LL_ADC_REG_IsConversionOngoing>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f040 809b 	bne.w	8002a26 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d101      	bne.n	80028fe <HAL_ADC_Start_DMA+0x4e>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e096      	b.n	8002a2c <HAL_ADC_Start_DMA+0x17c>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a4d      	ldr	r2, [pc, #308]	@ (8002a40 <HAL_ADC_Start_DMA+0x190>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d008      	beq.n	8002922 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b05      	cmp	r3, #5
 800291a:	d002      	beq.n	8002922 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	2b09      	cmp	r3, #9
 8002920:	d17a      	bne.n	8002a18 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 fcf6 	bl	8003314 <ADC_Enable>
 8002928:	4603      	mov	r3, r0
 800292a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800292c:	7dfb      	ldrb	r3, [r7, #23]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d16d      	bne.n	8002a0e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002936:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a3a      	ldr	r2, [pc, #232]	@ (8002a34 <HAL_ADC_Start_DMA+0x184>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d009      	beq.n	8002964 <HAL_ADC_Start_DMA+0xb4>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a3b      	ldr	r2, [pc, #236]	@ (8002a44 <HAL_ADC_Start_DMA+0x194>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d002      	beq.n	8002960 <HAL_ADC_Start_DMA+0xb0>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	e003      	b.n	8002968 <HAL_ADC_Start_DMA+0xb8>
 8002960:	4b39      	ldr	r3, [pc, #228]	@ (8002a48 <HAL_ADC_Start_DMA+0x198>)
 8002962:	e001      	b.n	8002968 <HAL_ADC_Start_DMA+0xb8>
 8002964:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	4293      	cmp	r3, r2
 800296e:	d002      	beq.n	8002976 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d105      	bne.n	8002982 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002986:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d006      	beq.n	800299c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002992:	f023 0206 	bic.w	r2, r3, #6
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	661a      	str	r2, [r3, #96]	@ 0x60
 800299a:	e002      	b.n	80029a2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a6:	4a29      	ldr	r2, [pc, #164]	@ (8002a4c <HAL_ADC_Start_DMA+0x19c>)
 80029a8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ae:	4a28      	ldr	r2, [pc, #160]	@ (8002a50 <HAL_ADC_Start_DMA+0x1a0>)
 80029b0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b6:	4a27      	ldr	r2, [pc, #156]	@ (8002a54 <HAL_ADC_Start_DMA+0x1a4>)
 80029b8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	221c      	movs	r2, #28
 80029c0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0210 	orr.w	r2, r2, #16
 80029d8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0201 	orr.w	r2, r2, #1
 80029e8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3340      	adds	r3, #64	@ 0x40
 80029f4:	4619      	mov	r1, r3
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f001 f989 	bl	8003d10 <HAL_DMA_Start_IT>
 80029fe:	4603      	mov	r3, r0
 8002a00:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fd5c 	bl	80024c4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002a0c:	e00d      	b.n	8002a2a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002a16:	e008      	b.n	8002a2a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002a24:	e001      	b.n	8002a2a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a26:	2302      	movs	r3, #2
 8002a28:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	50000100 	.word	0x50000100
 8002a38:	50000300 	.word	0x50000300
 8002a3c:	50000700 	.word	0x50000700
 8002a40:	50000600 	.word	0x50000600
 8002a44:	50000500 	.word	0x50000500
 8002a48:	50000400 	.word	0x50000400
 8002a4c:	080034ff 	.word	0x080034ff
 8002a50:	080035d7 	.word	0x080035d7
 8002a54:	080035f3 	.word	0x080035f3

08002a58 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b0b6      	sub	sp, #216	@ 0xd8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d102      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x24>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	f000 bc13 	b.w	80032de <HAL_ADC_ConfigChannel+0x84a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff fd11 	bl	80024ec <LL_ADC_REG_IsConversionOngoing>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f040 83f3 	bne.w	80032b8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6818      	ldr	r0, [r3, #0]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	6859      	ldr	r1, [r3, #4]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f7ff fbcb 	bl	800227a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fcff 	bl	80024ec <LL_ADC_REG_IsConversionOngoing>
 8002aee:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff fd0b 	bl	8002512 <LL_ADC_INJ_IsConversionOngoing>
 8002afc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f040 81d9 	bne.w	8002ebc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f040 81d4 	bne.w	8002ebc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b1c:	d10f      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2200      	movs	r2, #0
 8002b28:	4619      	mov	r1, r3
 8002b2a:	f7ff fbd2 	bl	80022d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fb79 	bl	800222e <LL_ADC_SetSamplingTimeCommonConfig>
 8002b3c:	e00e      	b.n	8002b5c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6819      	ldr	r1, [r3, #0]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f7ff fbc1 	bl	80022d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2100      	movs	r1, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff fb69 	bl	800222e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	08db      	lsrs	r3, r3, #3
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d022      	beq.n	8002bc4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	6919      	ldr	r1, [r3, #16]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b8e:	f7ff fac3 	bl	8002118 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	6919      	ldr	r1, [r3, #16]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	f7ff fb0f 	bl	80021c2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d102      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x126>
 8002bb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bb8:	e000      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x128>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	f7ff fb1b 	bl	80021f8 <LL_ADC_SetOffsetSaturation>
 8002bc2:	e17b      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fac8 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10a      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x15c>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2100      	movs	r1, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fabd 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002be6:	4603      	mov	r3, r0
 8002be8:	0e9b      	lsrs	r3, r3, #26
 8002bea:	f003 021f 	and.w	r2, r3, #31
 8002bee:	e01e      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x19a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fab2 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002c1e:	2320      	movs	r3, #32
 8002c20:	e004      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002c22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d105      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x1b2>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	0e9b      	lsrs	r3, r3, #26
 8002c40:	f003 031f 	and.w	r3, r3, #31
 8002c44:	e018      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x1e4>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c52:	fa93 f3a3 	rbit	r3, r3
 8002c56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002c62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002c6a:	2320      	movs	r3, #32
 8002c6c:	e004      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002c6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d106      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2200      	movs	r2, #0
 8002c82:	2100      	movs	r1, #0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff fa81 	bl	800218c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2101      	movs	r1, #1
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fa65 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10a      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x222>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fa5a 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002cac:	4603      	mov	r3, r0
 8002cae:	0e9b      	lsrs	r3, r3, #26
 8002cb0:	f003 021f 	and.w	r2, r3, #31
 8002cb4:	e01e      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x260>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fa4f 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002cd4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002cdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002ce4:	2320      	movs	r3, #32
 8002ce6:	e004      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002ce8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cec:	fab3 f383 	clz	r3, r3
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d105      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x278>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0e9b      	lsrs	r3, r3, #26
 8002d06:	f003 031f 	and.w	r3, r3, #31
 8002d0a:	e018      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x2aa>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002d20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002d30:	2320      	movs	r3, #32
 8002d32:	e004      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002d34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d106      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2200      	movs	r2, #0
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fa1e 	bl	800218c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2102      	movs	r1, #2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fa02 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10a      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x2e8>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff f9f7 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002d72:	4603      	mov	r3, r0
 8002d74:	0e9b      	lsrs	r3, r3, #26
 8002d76:	f003 021f 	and.w	r2, r3, #31
 8002d7a:	e01e      	b.n	8002dba <HAL_ADC_ConfigChannel+0x326>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2102      	movs	r1, #2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff f9ec 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002d9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002da2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002daa:	2320      	movs	r3, #32
 8002dac:	e004      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002dae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d105      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x33e>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	0e9b      	lsrs	r3, r3, #26
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	e016      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x36c>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002de4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002de6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002dea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002df2:	2320      	movs	r3, #32
 8002df4:	e004      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002df6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002dfa:	fab3 f383 	clz	r3, r3
 8002dfe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d106      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2102      	movs	r1, #2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff f9bd 	bl	800218c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2103      	movs	r1, #3
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff f9a1 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10a      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x3aa>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2103      	movs	r1, #3
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff f996 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002e34:	4603      	mov	r3, r0
 8002e36:	0e9b      	lsrs	r3, r3, #26
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	e017      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x3da>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2103      	movs	r1, #3
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff f98b 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002e56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e58:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002e5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002e60:	2320      	movs	r3, #32
 8002e62:	e003      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002e64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d105      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x3f2>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	0e9b      	lsrs	r3, r3, #26
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	e011      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x416>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002e94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e96:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002e98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	e003      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002ea2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ea4:	fab3 f383 	clz	r3, r3
 8002ea8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d106      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2103      	movs	r1, #3
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff f968 	bl	800218c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff fad9 	bl	8002478 <LL_ADC_IsEnabled>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f040 813d 	bne.w	8003148 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6819      	ldr	r1, [r3, #0]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	461a      	mov	r2, r3
 8002edc:	f7ff fa24 	bl	8002328 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4aa2      	ldr	r2, [pc, #648]	@ (8003170 <HAL_ADC_ConfigChannel+0x6dc>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	f040 812e 	bne.w	8003148 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10b      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x480>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	0e9b      	lsrs	r3, r3, #26
 8002f02:	3301      	adds	r3, #1
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	2b09      	cmp	r3, #9
 8002f0a:	bf94      	ite	ls
 8002f0c:	2301      	movls	r3, #1
 8002f0e:	2300      	movhi	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	e019      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x4b4>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f1c:	fa93 f3a3 	rbit	r3, r3
 8002f20:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002f22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f24:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002f26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002f2c:	2320      	movs	r3, #32
 8002f2e:	e003      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002f30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f32:	fab3 f383 	clz	r3, r3
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	3301      	adds	r3, #1
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	2b09      	cmp	r3, #9
 8002f40:	bf94      	ite	ls
 8002f42:	2301      	movls	r3, #1
 8002f44:	2300      	movhi	r3, #0
 8002f46:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d079      	beq.n	8003040 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d107      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x4d4>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	0e9b      	lsrs	r3, r3, #26
 8002f5e:	3301      	adds	r3, #1
 8002f60:	069b      	lsls	r3, r3, #26
 8002f62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f66:	e015      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x500>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f70:	fa93 f3a3 	rbit	r3, r3
 8002f74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f78:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002f80:	2320      	movs	r3, #32
 8002f82:	e003      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f86:	fab3 f383 	clz	r3, r3
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	069b      	lsls	r3, r3, #26
 8002f90:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d109      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x520>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	0e9b      	lsrs	r3, r3, #26
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	f003 031f 	and.w	r3, r3, #31
 8002fac:	2101      	movs	r1, #1
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	e017      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x550>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fbc:	fa93 f3a3 	rbit	r3, r3
 8002fc0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002fcc:	2320      	movs	r3, #32
 8002fce:	e003      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002fd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	3301      	adds	r3, #1
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	2101      	movs	r1, #1
 8002fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe4:	ea42 0103 	orr.w	r1, r2, r3
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10a      	bne.n	800300a <HAL_ADC_ConfigChannel+0x576>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	0e9b      	lsrs	r3, r3, #26
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f003 021f 	and.w	r2, r3, #31
 8003000:	4613      	mov	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4413      	add	r3, r2
 8003006:	051b      	lsls	r3, r3, #20
 8003008:	e018      	b.n	800303c <HAL_ADC_ConfigChannel+0x5a8>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003012:	fa93 f3a3 	rbit	r3, r3
 8003016:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800301a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800301c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003022:	2320      	movs	r3, #32
 8003024:	e003      	b.n	800302e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003028:	fab3 f383 	clz	r3, r3
 800302c:	b2db      	uxtb	r3, r3
 800302e:	3301      	adds	r3, #1
 8003030:	f003 021f 	and.w	r2, r3, #31
 8003034:	4613      	mov	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4413      	add	r3, r2
 800303a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800303c:	430b      	orrs	r3, r1
 800303e:	e07e      	b.n	800313e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003048:	2b00      	cmp	r3, #0
 800304a:	d107      	bne.n	800305c <HAL_ADC_ConfigChannel+0x5c8>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	0e9b      	lsrs	r3, r3, #26
 8003052:	3301      	adds	r3, #1
 8003054:	069b      	lsls	r3, r3, #26
 8003056:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800305a:	e015      	b.n	8003088 <HAL_ADC_ConfigChannel+0x5f4>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003064:	fa93 f3a3 	rbit	r3, r3
 8003068:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800306a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800306c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800306e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003074:	2320      	movs	r3, #32
 8003076:	e003      	b.n	8003080 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	3301      	adds	r3, #1
 8003082:	069b      	lsls	r3, r3, #26
 8003084:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003090:	2b00      	cmp	r3, #0
 8003092:	d109      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x614>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	0e9b      	lsrs	r3, r3, #26
 800309a:	3301      	adds	r3, #1
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	2101      	movs	r1, #1
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	e017      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x644>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	fa93 f3a3 	rbit	r3, r3
 80030b4:	61fb      	str	r3, [r7, #28]
  return result;
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80030ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80030c0:	2320      	movs	r3, #32
 80030c2:	e003      	b.n	80030cc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80030c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c6:	fab3 f383 	clz	r3, r3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	3301      	adds	r3, #1
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	2101      	movs	r1, #1
 80030d4:	fa01 f303 	lsl.w	r3, r1, r3
 80030d8:	ea42 0103 	orr.w	r1, r2, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10d      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x670>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	0e9b      	lsrs	r3, r3, #26
 80030ee:	3301      	adds	r3, #1
 80030f0:	f003 021f 	and.w	r2, r3, #31
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	3b1e      	subs	r3, #30
 80030fc:	051b      	lsls	r3, r3, #20
 80030fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003102:	e01b      	b.n	800313c <HAL_ADC_ConfigChannel+0x6a8>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	fa93 f3a3 	rbit	r3, r3
 8003110:	613b      	str	r3, [r7, #16]
  return result;
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800311c:	2320      	movs	r3, #32
 800311e:	e003      	b.n	8003128 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	fab3 f383 	clz	r3, r3
 8003126:	b2db      	uxtb	r3, r3
 8003128:	3301      	adds	r3, #1
 800312a:	f003 021f 	and.w	r2, r3, #31
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	3b1e      	subs	r3, #30
 8003136:	051b      	lsls	r3, r3, #20
 8003138:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800313c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003142:	4619      	mov	r1, r3
 8003144:	f7ff f8c5 	bl	80022d2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b09      	ldr	r3, [pc, #36]	@ (8003174 <HAL_ADC_ConfigChannel+0x6e0>)
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80be 	beq.w	80032d2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800315e:	d004      	beq.n	800316a <HAL_ADC_ConfigChannel+0x6d6>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a04      	ldr	r2, [pc, #16]	@ (8003178 <HAL_ADC_ConfigChannel+0x6e4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d10a      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x6ec>
 800316a:	4b04      	ldr	r3, [pc, #16]	@ (800317c <HAL_ADC_ConfigChannel+0x6e8>)
 800316c:	e009      	b.n	8003182 <HAL_ADC_ConfigChannel+0x6ee>
 800316e:	bf00      	nop
 8003170:	407f0000 	.word	0x407f0000
 8003174:	80080000 	.word	0x80080000
 8003178:	50000100 	.word	0x50000100
 800317c:	50000300 	.word	0x50000300
 8003180:	4b59      	ldr	r3, [pc, #356]	@ (80032e8 <HAL_ADC_ConfigChannel+0x854>)
 8003182:	4618      	mov	r0, r3
 8003184:	f7fe ffba 	bl	80020fc <LL_ADC_GetCommonPathInternalCh>
 8003188:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a56      	ldr	r2, [pc, #344]	@ (80032ec <HAL_ADC_ConfigChannel+0x858>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d004      	beq.n	80031a0 <HAL_ADC_ConfigChannel+0x70c>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a55      	ldr	r2, [pc, #340]	@ (80032f0 <HAL_ADC_ConfigChannel+0x85c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d13a      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d134      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031b4:	d005      	beq.n	80031c2 <HAL_ADC_ConfigChannel+0x72e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a4e      	ldr	r2, [pc, #312]	@ (80032f4 <HAL_ADC_ConfigChannel+0x860>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	f040 8085 	bne.w	80032cc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031ca:	d004      	beq.n	80031d6 <HAL_ADC_ConfigChannel+0x742>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a49      	ldr	r2, [pc, #292]	@ (80032f8 <HAL_ADC_ConfigChannel+0x864>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d101      	bne.n	80031da <HAL_ADC_ConfigChannel+0x746>
 80031d6:	4a49      	ldr	r2, [pc, #292]	@ (80032fc <HAL_ADC_ConfigChannel+0x868>)
 80031d8:	e000      	b.n	80031dc <HAL_ADC_ConfigChannel+0x748>
 80031da:	4a43      	ldr	r2, [pc, #268]	@ (80032e8 <HAL_ADC_ConfigChannel+0x854>)
 80031dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031e4:	4619      	mov	r1, r3
 80031e6:	4610      	mov	r0, r2
 80031e8:	f7fe ff75 	bl	80020d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031ec:	4b44      	ldr	r3, [pc, #272]	@ (8003300 <HAL_ADC_ConfigChannel+0x86c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	099b      	lsrs	r3, r3, #6
 80031f2:	4a44      	ldr	r2, [pc, #272]	@ (8003304 <HAL_ADC_ConfigChannel+0x870>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	099b      	lsrs	r3, r3, #6
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	4613      	mov	r3, r2
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003206:	e002      	b.n	800320e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	3b01      	subs	r3, #1
 800320c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1f9      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003214:	e05a      	b.n	80032cc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a3b      	ldr	r2, [pc, #236]	@ (8003308 <HAL_ADC_ConfigChannel+0x874>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d125      	bne.n	800326c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003220:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003224:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d11f      	bne.n	800326c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a31      	ldr	r2, [pc, #196]	@ (80032f8 <HAL_ADC_ConfigChannel+0x864>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d104      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x7ac>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a34      	ldr	r2, [pc, #208]	@ (800330c <HAL_ADC_ConfigChannel+0x878>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d047      	beq.n	80032d0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003248:	d004      	beq.n	8003254 <HAL_ADC_ConfigChannel+0x7c0>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a2a      	ldr	r2, [pc, #168]	@ (80032f8 <HAL_ADC_ConfigChannel+0x864>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d101      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x7c4>
 8003254:	4a29      	ldr	r2, [pc, #164]	@ (80032fc <HAL_ADC_ConfigChannel+0x868>)
 8003256:	e000      	b.n	800325a <HAL_ADC_ConfigChannel+0x7c6>
 8003258:	4a23      	ldr	r2, [pc, #140]	@ (80032e8 <HAL_ADC_ConfigChannel+0x854>)
 800325a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800325e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003262:	4619      	mov	r1, r3
 8003264:	4610      	mov	r0, r2
 8003266:	f7fe ff36 	bl	80020d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800326a:	e031      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a27      	ldr	r2, [pc, #156]	@ (8003310 <HAL_ADC_ConfigChannel+0x87c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d12d      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003276:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800327a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d127      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1c      	ldr	r2, [pc, #112]	@ (80032f8 <HAL_ADC_ConfigChannel+0x864>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d022      	beq.n	80032d2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003294:	d004      	beq.n	80032a0 <HAL_ADC_ConfigChannel+0x80c>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a17      	ldr	r2, [pc, #92]	@ (80032f8 <HAL_ADC_ConfigChannel+0x864>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d101      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x810>
 80032a0:	4a16      	ldr	r2, [pc, #88]	@ (80032fc <HAL_ADC_ConfigChannel+0x868>)
 80032a2:	e000      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x812>
 80032a4:	4a10      	ldr	r2, [pc, #64]	@ (80032e8 <HAL_ADC_ConfigChannel+0x854>)
 80032a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032ae:	4619      	mov	r1, r3
 80032b0:	4610      	mov	r0, r2
 80032b2:	f7fe ff10 	bl	80020d6 <LL_ADC_SetCommonPathInternalCh>
 80032b6:	e00c      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032bc:	f043 0220 	orr.w	r2, r3, #32
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80032ca:	e002      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032cc:	bf00      	nop
 80032ce:	e000      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80032da:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80032de:	4618      	mov	r0, r3
 80032e0:	37d8      	adds	r7, #216	@ 0xd8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	50000700 	.word	0x50000700
 80032ec:	c3210000 	.word	0xc3210000
 80032f0:	90c00010 	.word	0x90c00010
 80032f4:	50000600 	.word	0x50000600
 80032f8:	50000100 	.word	0x50000100
 80032fc:	50000300 	.word	0x50000300
 8003300:	20000004 	.word	0x20000004
 8003304:	053e2d63 	.word	0x053e2d63
 8003308:	c7520000 	.word	0xc7520000
 800330c:	50000500 	.word	0x50000500
 8003310:	cb840000 	.word	0xcb840000

08003314 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800331c:	2300      	movs	r3, #0
 800331e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff f8a7 	bl	8002478 <LL_ADC_IsEnabled>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d176      	bne.n	800341e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	4b3c      	ldr	r3, [pc, #240]	@ (8003428 <ADC_Enable+0x114>)
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00d      	beq.n	800335a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003342:	f043 0210 	orr.w	r2, r3, #16
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800334e:	f043 0201 	orr.w	r2, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e062      	b.n	8003420 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff f862 	bl	8002428 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800336c:	d004      	beq.n	8003378 <ADC_Enable+0x64>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a2e      	ldr	r2, [pc, #184]	@ (800342c <ADC_Enable+0x118>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d101      	bne.n	800337c <ADC_Enable+0x68>
 8003378:	4b2d      	ldr	r3, [pc, #180]	@ (8003430 <ADC_Enable+0x11c>)
 800337a:	e000      	b.n	800337e <ADC_Enable+0x6a>
 800337c:	4b2d      	ldr	r3, [pc, #180]	@ (8003434 <ADC_Enable+0x120>)
 800337e:	4618      	mov	r0, r3
 8003380:	f7fe febc 	bl	80020fc <LL_ADC_GetCommonPathInternalCh>
 8003384:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003386:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800338a:	2b00      	cmp	r3, #0
 800338c:	d013      	beq.n	80033b6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800338e:	4b2a      	ldr	r3, [pc, #168]	@ (8003438 <ADC_Enable+0x124>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	099b      	lsrs	r3, r3, #6
 8003394:	4a29      	ldr	r2, [pc, #164]	@ (800343c <ADC_Enable+0x128>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	099b      	lsrs	r3, r3, #6
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	4613      	mov	r3, r2
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033a8:	e002      	b.n	80033b0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f9      	bne.n	80033aa <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80033b6:	f7fe fe6f 	bl	8002098 <HAL_GetTick>
 80033ba:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033bc:	e028      	b.n	8003410 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff f858 	bl	8002478 <LL_ADC_IsEnabled>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d104      	bne.n	80033d8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff f828 	bl	8002428 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033d8:	f7fe fe5e 	bl	8002098 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d914      	bls.n	8003410 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d00d      	beq.n	8003410 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f8:	f043 0210 	orr.w	r2, r3, #16
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003404:	f043 0201 	orr.w	r2, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e007      	b.n	8003420 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b01      	cmp	r3, #1
 800341c:	d1cf      	bne.n	80033be <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	8000003f 	.word	0x8000003f
 800342c:	50000100 	.word	0x50000100
 8003430:	50000300 	.word	0x50000300
 8003434:	50000700 	.word	0x50000700
 8003438:	20000004 	.word	0x20000004
 800343c:	053e2d63 	.word	0x053e2d63

08003440 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff f826 	bl	800249e <LL_ADC_IsDisableOngoing>
 8003452:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff f80d 	bl	8002478 <LL_ADC_IsEnabled>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d047      	beq.n	80034f4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d144      	bne.n	80034f4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 030d 	and.w	r3, r3, #13
 8003474:	2b01      	cmp	r3, #1
 8003476:	d10c      	bne.n	8003492 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f7fe ffe7 	bl	8002450 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2203      	movs	r2, #3
 8003488:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800348a:	f7fe fe05 	bl	8002098 <HAL_GetTick>
 800348e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003490:	e029      	b.n	80034e6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003496:	f043 0210 	orr.w	r2, r3, #16
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034a2:	f043 0201 	orr.w	r2, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e023      	b.n	80034f6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034ae:	f7fe fdf3 	bl	8002098 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d914      	bls.n	80034e6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00d      	beq.n	80034e6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ce:	f043 0210 	orr.w	r2, r3, #16
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034da:	f043 0201 	orr.w	r2, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e007      	b.n	80034f6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1dc      	bne.n	80034ae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003510:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003514:	2b00      	cmp	r3, #0
 8003516:	d14b      	bne.n	80035b0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d021      	beq.n	8003576 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fe fe8c 	bl	8002254 <LL_ADC_REG_IsTriggerSourceSWStart>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d032      	beq.n	80035a8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d12b      	bne.n	80035a8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003554:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003560:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d11f      	bne.n	80035a8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800356c:	f043 0201 	orr.w	r2, r3, #1
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003574:	e018      	b.n	80035a8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d111      	bne.n	80035a8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003588:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003594:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d105      	bne.n	80035a8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a0:	f043 0201 	orr.w	r2, r3, #1
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f7ff fa55 	bl	8002a58 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80035ae:	e00e      	b.n	80035ce <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7ff fa5f 	bl	8002a80 <HAL_ADC_ErrorCallback>
}
 80035c2:	e004      	b.n	80035ce <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	4798      	blx	r3
}
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f7ff fa41 	bl	8002a6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003604:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003610:	f043 0204 	orr.w	r2, r3, #4
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f7ff fa31 	bl	8002a80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800361e:	bf00      	nop
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <LL_ADC_IsEnabled>:
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <LL_ADC_IsEnabled+0x18>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <LL_ADC_IsEnabled+0x1a>
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <LL_ADC_StartCalibration>:
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800365e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003668:	4313      	orrs	r3, r2
 800366a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	609a      	str	r2, [r3, #8]
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <LL_ADC_IsCalibrationOnGoing>:
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800368e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003692:	d101      	bne.n	8003698 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003694:	2301      	movs	r3, #1
 8003696:	e000      	b.n	800369a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d101      	bne.n	80036be <LL_ADC_REG_IsConversionOngoing+0x18>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_ADCEx_Calibration_Start+0x1c>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e04d      	b.n	8003784 <HAL_ADCEx_Calibration_Start+0xb8>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff fea5 	bl	8003440 <ADC_Disable>
 80036f6:	4603      	mov	r3, r0
 80036f8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d136      	bne.n	800376e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003704:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003708:	f023 0302 	bic.w	r3, r3, #2
 800370c:	f043 0202 	orr.w	r2, r3, #2
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6839      	ldr	r1, [r7, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff ff96 	bl	800364c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003720:	e014      	b.n	800374c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	3301      	adds	r3, #1
 8003726:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4a18      	ldr	r2, [pc, #96]	@ (800378c <HAL_ADCEx_Calibration_Start+0xc0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d90d      	bls.n	800374c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003734:	f023 0312 	bic.w	r3, r3, #18
 8003738:	f043 0210 	orr.w	r2, r3, #16
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e01b      	b.n	8003784 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff ff94 	bl	800367e <LL_ADC_IsCalibrationOnGoing>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1e2      	bne.n	8003722 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003760:	f023 0303 	bic.w	r3, r3, #3
 8003764:	f043 0201 	orr.w	r2, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800376c:	e005      	b.n	800377a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003772:	f043 0210 	orr.w	r2, r3, #16
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003782:	7bfb      	ldrb	r3, [r7, #15]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	0004de01 	.word	0x0004de01

08003790 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003790:	b590      	push	{r4, r7, lr}
 8003792:	b0a1      	sub	sp, #132	@ 0x84
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e0e7      	b.n	800397e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80037b6:	2300      	movs	r3, #0
 80037b8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80037ba:	2300      	movs	r3, #0
 80037bc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037c6:	d102      	bne.n	80037ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80037c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003988 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	e009      	b.n	80037e2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a6e      	ldr	r2, [pc, #440]	@ (800398c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d102      	bne.n	80037de <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80037d8:	4b6d      	ldr	r3, [pc, #436]	@ (8003990 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	e001      	b.n	80037e2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80037de:	2300      	movs	r3, #0
 80037e0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10b      	bne.n	8003800 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ec:	f043 0220 	orr.w	r2, r3, #32
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0be      	b.n	800397e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff ff4f 	bl	80036a6 <LL_ADC_REG_IsConversionOngoing>
 8003808:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff ff49 	bl	80036a6 <LL_ADC_REG_IsConversionOngoing>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	f040 80a0 	bne.w	800395c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800381c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800381e:	2b00      	cmp	r3, #0
 8003820:	f040 809c 	bne.w	800395c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800382c:	d004      	beq.n	8003838 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a55      	ldr	r2, [pc, #340]	@ (8003988 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d101      	bne.n	800383c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003838:	4b56      	ldr	r3, [pc, #344]	@ (8003994 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800383a:	e000      	b.n	800383e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800383c:	4b56      	ldr	r3, [pc, #344]	@ (8003998 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800383e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d04b      	beq.n	80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003848:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	6859      	ldr	r1, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800385a:	035b      	lsls	r3, r3, #13
 800385c:	430b      	orrs	r3, r1
 800385e:	431a      	orrs	r2, r3
 8003860:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003862:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800386c:	d004      	beq.n	8003878 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a45      	ldr	r2, [pc, #276]	@ (8003988 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d10f      	bne.n	8003898 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003878:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800387c:	f7ff fed3 	bl	8003626 <LL_ADC_IsEnabled>
 8003880:	4604      	mov	r4, r0
 8003882:	4841      	ldr	r0, [pc, #260]	@ (8003988 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003884:	f7ff fecf 	bl	8003626 <LL_ADC_IsEnabled>
 8003888:	4603      	mov	r3, r0
 800388a:	4323      	orrs	r3, r4
 800388c:	2b00      	cmp	r3, #0
 800388e:	bf0c      	ite	eq
 8003890:	2301      	moveq	r3, #1
 8003892:	2300      	movne	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	e012      	b.n	80038be <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003898:	483c      	ldr	r0, [pc, #240]	@ (800398c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800389a:	f7ff fec4 	bl	8003626 <LL_ADC_IsEnabled>
 800389e:	4604      	mov	r4, r0
 80038a0:	483b      	ldr	r0, [pc, #236]	@ (8003990 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80038a2:	f7ff fec0 	bl	8003626 <LL_ADC_IsEnabled>
 80038a6:	4603      	mov	r3, r0
 80038a8:	431c      	orrs	r4, r3
 80038aa:	483c      	ldr	r0, [pc, #240]	@ (800399c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80038ac:	f7ff febb 	bl	8003626 <LL_ADC_IsEnabled>
 80038b0:	4603      	mov	r3, r0
 80038b2:	4323      	orrs	r3, r4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d056      	beq.n	8003970 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80038c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80038ca:	f023 030f 	bic.w	r3, r3, #15
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	6811      	ldr	r1, [r2, #0]
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	6892      	ldr	r2, [r2, #8]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	431a      	orrs	r2, r3
 80038da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038dc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038de:	e047      	b.n	8003970 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80038e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038ea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038f4:	d004      	beq.n	8003900 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a23      	ldr	r2, [pc, #140]	@ (8003988 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d10f      	bne.n	8003920 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003900:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003904:	f7ff fe8f 	bl	8003626 <LL_ADC_IsEnabled>
 8003908:	4604      	mov	r4, r0
 800390a:	481f      	ldr	r0, [pc, #124]	@ (8003988 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800390c:	f7ff fe8b 	bl	8003626 <LL_ADC_IsEnabled>
 8003910:	4603      	mov	r3, r0
 8003912:	4323      	orrs	r3, r4
 8003914:	2b00      	cmp	r3, #0
 8003916:	bf0c      	ite	eq
 8003918:	2301      	moveq	r3, #1
 800391a:	2300      	movne	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	e012      	b.n	8003946 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003920:	481a      	ldr	r0, [pc, #104]	@ (800398c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003922:	f7ff fe80 	bl	8003626 <LL_ADC_IsEnabled>
 8003926:	4604      	mov	r4, r0
 8003928:	4819      	ldr	r0, [pc, #100]	@ (8003990 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800392a:	f7ff fe7c 	bl	8003626 <LL_ADC_IsEnabled>
 800392e:	4603      	mov	r3, r0
 8003930:	431c      	orrs	r4, r3
 8003932:	481a      	ldr	r0, [pc, #104]	@ (800399c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003934:	f7ff fe77 	bl	8003626 <LL_ADC_IsEnabled>
 8003938:	4603      	mov	r3, r0
 800393a:	4323      	orrs	r3, r4
 800393c:	2b00      	cmp	r3, #0
 800393e:	bf0c      	ite	eq
 8003940:	2301      	moveq	r3, #1
 8003942:	2300      	movne	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d012      	beq.n	8003970 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800394a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003952:	f023 030f 	bic.w	r3, r3, #15
 8003956:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003958:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800395a:	e009      	b.n	8003970 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003960:	f043 0220 	orr.w	r2, r3, #32
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800396e:	e000      	b.n	8003972 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003970:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800397a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800397e:	4618      	mov	r0, r3
 8003980:	3784      	adds	r7, #132	@ 0x84
 8003982:	46bd      	mov	sp, r7
 8003984:	bd90      	pop	{r4, r7, pc}
 8003986:	bf00      	nop
 8003988:	50000100 	.word	0x50000100
 800398c:	50000400 	.word	0x50000400
 8003990:	50000500 	.word	0x50000500
 8003994:	50000300 	.word	0x50000300
 8003998:	50000700 	.word	0x50000700
 800399c:	50000600 	.word	0x50000600

080039a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039b0:	4b0c      	ldr	r3, [pc, #48]	@ (80039e4 <__NVIC_SetPriorityGrouping+0x44>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039bc:	4013      	ands	r3, r2
 80039be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039d2:	4a04      	ldr	r2, [pc, #16]	@ (80039e4 <__NVIC_SetPriorityGrouping+0x44>)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	60d3      	str	r3, [r2, #12]
}
 80039d8:	bf00      	nop
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039ec:	4b04      	ldr	r3, [pc, #16]	@ (8003a00 <__NVIC_GetPriorityGrouping+0x18>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	0a1b      	lsrs	r3, r3, #8
 80039f2:	f003 0307 	and.w	r3, r3, #7
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	e000ed00 	.word	0xe000ed00

08003a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	db0b      	blt.n	8003a2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	f003 021f 	and.w	r2, r3, #31
 8003a1c:	4907      	ldr	r1, [pc, #28]	@ (8003a3c <__NVIC_EnableIRQ+0x38>)
 8003a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	2001      	movs	r0, #1
 8003a26:	fa00 f202 	lsl.w	r2, r0, r2
 8003a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	e000e100 	.word	0xe000e100

08003a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	6039      	str	r1, [r7, #0]
 8003a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	db0a      	blt.n	8003a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	490c      	ldr	r1, [pc, #48]	@ (8003a8c <__NVIC_SetPriority+0x4c>)
 8003a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5e:	0112      	lsls	r2, r2, #4
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	440b      	add	r3, r1
 8003a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a68:	e00a      	b.n	8003a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	4908      	ldr	r1, [pc, #32]	@ (8003a90 <__NVIC_SetPriority+0x50>)
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	3b04      	subs	r3, #4
 8003a78:	0112      	lsls	r2, r2, #4
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	761a      	strb	r2, [r3, #24]
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	e000e100 	.word	0xe000e100
 8003a90:	e000ed00 	.word	0xe000ed00

08003a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b089      	sub	sp, #36	@ 0x24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f1c3 0307 	rsb	r3, r3, #7
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	bf28      	it	cs
 8003ab2:	2304      	movcs	r3, #4
 8003ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	2b06      	cmp	r3, #6
 8003abc:	d902      	bls.n	8003ac4 <NVIC_EncodePriority+0x30>
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	3b03      	subs	r3, #3
 8003ac2:	e000      	b.n	8003ac6 <NVIC_EncodePriority+0x32>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43da      	mvns	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	401a      	ands	r2, r3
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003adc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae6:	43d9      	mvns	r1, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aec:	4313      	orrs	r3, r2
         );
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3724      	adds	r7, #36	@ 0x24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b0c:	d301      	bcc.n	8003b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e00f      	b.n	8003b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b12:	4a0a      	ldr	r2, [pc, #40]	@ (8003b3c <SysTick_Config+0x40>)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b1a:	210f      	movs	r1, #15
 8003b1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b20:	f7ff ff8e 	bl	8003a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b24:	4b05      	ldr	r3, [pc, #20]	@ (8003b3c <SysTick_Config+0x40>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b2a:	4b04      	ldr	r3, [pc, #16]	@ (8003b3c <SysTick_Config+0x40>)
 8003b2c:	2207      	movs	r2, #7
 8003b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	e000e010 	.word	0xe000e010

08003b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff ff29 	bl	80039a0 <__NVIC_SetPriorityGrouping>
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b086      	sub	sp, #24
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
 8003b62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b64:	f7ff ff40 	bl	80039e8 <__NVIC_GetPriorityGrouping>
 8003b68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	68b9      	ldr	r1, [r7, #8]
 8003b6e:	6978      	ldr	r0, [r7, #20]
 8003b70:	f7ff ff90 	bl	8003a94 <NVIC_EncodePriority>
 8003b74:	4602      	mov	r2, r0
 8003b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff ff5f 	bl	8003a40 <__NVIC_SetPriority>
}
 8003b82:	bf00      	nop
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	4603      	mov	r3, r0
 8003b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff ff33 	bl	8003a04 <__NVIC_EnableIRQ>
}
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff ffa4 	bl	8003afc <SysTick_Config>
 8003bb4:	4603      	mov	r3, r0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e08d      	b.n	8003cee <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	4b47      	ldr	r3, [pc, #284]	@ (8003cf8 <HAL_DMA_Init+0x138>)
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d80f      	bhi.n	8003bfe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	4b45      	ldr	r3, [pc, #276]	@ (8003cfc <HAL_DMA_Init+0x13c>)
 8003be6:	4413      	add	r3, r2
 8003be8:	4a45      	ldr	r2, [pc, #276]	@ (8003d00 <HAL_DMA_Init+0x140>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	091b      	lsrs	r3, r3, #4
 8003bf0:	009a      	lsls	r2, r3, #2
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a42      	ldr	r2, [pc, #264]	@ (8003d04 <HAL_DMA_Init+0x144>)
 8003bfa:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bfc:	e00e      	b.n	8003c1c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	4b40      	ldr	r3, [pc, #256]	@ (8003d08 <HAL_DMA_Init+0x148>)
 8003c06:	4413      	add	r3, r2
 8003c08:	4a3d      	ldr	r2, [pc, #244]	@ (8003d00 <HAL_DMA_Init+0x140>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	091b      	lsrs	r3, r3, #4
 8003c10:	009a      	lsls	r2, r3, #2
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a3c      	ldr	r2, [pc, #240]	@ (8003d0c <HAL_DMA_Init+0x14c>)
 8003c1a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fa82 	bl	8004178 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c7c:	d102      	bne.n	8003c84 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c98:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d010      	beq.n	8003cc4 <HAL_DMA_Init+0x104>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d80c      	bhi.n	8003cc4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 faa2 	bl	80041f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	e008      	b.n	8003cd6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40020407 	.word	0x40020407
 8003cfc:	bffdfff8 	.word	0xbffdfff8
 8003d00:	cccccccd 	.word	0xcccccccd
 8003d04:	40020000 	.word	0x40020000
 8003d08:	bffdfbf8 	.word	0xbffdfbf8
 8003d0c:	40020400 	.word	0x40020400

08003d10 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_DMA_Start_IT+0x20>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e066      	b.n	8003dfe <HAL_DMA_Start_IT+0xee>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d155      	bne.n	8003df0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0201 	bic.w	r2, r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	68b9      	ldr	r1, [r7, #8]
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f9c7 	bl	80040fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d008      	beq.n	8003d88 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 020e 	orr.w	r2, r2, #14
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	e00f      	b.n	8003da8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0204 	bic.w	r2, r2, #4
 8003d96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 020a 	orr.w	r2, r2, #10
 8003da6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d007      	beq.n	8003dc6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dc4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d007      	beq.n	8003dde <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ddc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0201 	orr.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	e005      	b.n	8003dfc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b085      	sub	sp, #20
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d005      	beq.n	8003e2a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2204      	movs	r2, #4
 8003e22:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	73fb      	strb	r3, [r7, #15]
 8003e28:	e037      	b.n	8003e9a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 020e 	bic.w	r2, r2, #14
 8003e38:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e48:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0201 	bic.w	r2, r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5e:	f003 021f 	and.w	r2, r3, #31
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	2101      	movs	r1, #1
 8003e68:	fa01 f202 	lsl.w	r2, r1, r2
 8003e6c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e76:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00c      	beq.n	8003e9a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e8e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e98:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d00d      	beq.n	8003eec <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2204      	movs	r2, #4
 8003ed4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
 8003eea:	e047      	b.n	8003f7c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 020e 	bic.w	r2, r2, #14
 8003efa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0201 	bic.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f20:	f003 021f 	and.w	r2, r3, #31
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f28:	2101      	movs	r1, #1
 8003f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f2e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f38:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00c      	beq.n	8003f5c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f50:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f5a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	4798      	blx	r3
    }
  }
  return status;
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b084      	sub	sp, #16
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa2:	f003 031f 	and.w	r3, r3, #31
 8003fa6:	2204      	movs	r2, #4
 8003fa8:	409a      	lsls	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d026      	beq.n	8004000 <HAL_DMA_IRQHandler+0x7a>
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d021      	beq.n	8004000 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d107      	bne.n	8003fda <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0204 	bic.w	r2, r2, #4
 8003fd8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fde:	f003 021f 	and.w	r2, r3, #31
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	2104      	movs	r1, #4
 8003fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d071      	beq.n	80040da <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003ffe:	e06c      	b.n	80040da <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	2202      	movs	r2, #2
 800400a:	409a      	lsls	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4013      	ands	r3, r2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d02e      	beq.n	8004072 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d029      	beq.n	8004072 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10b      	bne.n	8004044 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 020a 	bic.w	r2, r2, #10
 800403a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004048:	f003 021f 	and.w	r2, r3, #31
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004050:	2102      	movs	r1, #2
 8004052:	fa01 f202 	lsl.w	r2, r1, r2
 8004056:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004064:	2b00      	cmp	r3, #0
 8004066:	d038      	beq.n	80040da <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004070:	e033      	b.n	80040da <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004076:	f003 031f 	and.w	r3, r3, #31
 800407a:	2208      	movs	r2, #8
 800407c:	409a      	lsls	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4013      	ands	r3, r2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d02a      	beq.n	80040dc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	2b00      	cmp	r3, #0
 800408e:	d025      	beq.n	80040dc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 020e 	bic.w	r2, r2, #14
 800409e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a4:	f003 021f 	and.w	r2, r3, #31
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ac:	2101      	movs	r1, #1
 80040ae:	fa01 f202 	lsl.w	r2, r1, r2
 80040b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d004      	beq.n	80040dc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80040da:	bf00      	nop
 80040dc:	bf00      	nop
}
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
 8004108:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004112:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004118:	2b00      	cmp	r3, #0
 800411a:	d004      	beq.n	8004126 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004124:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412a:	f003 021f 	and.w	r2, r3, #31
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004132:	2101      	movs	r1, #1
 8004134:	fa01 f202 	lsl.w	r2, r1, r2
 8004138:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b10      	cmp	r3, #16
 8004148:	d108      	bne.n	800415c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800415a:	e007      	b.n	800416c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	60da      	str	r2, [r3, #12]
}
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	461a      	mov	r2, r3
 8004186:	4b16      	ldr	r3, [pc, #88]	@ (80041e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004188:	429a      	cmp	r2, r3
 800418a:	d802      	bhi.n	8004192 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800418c:	4b15      	ldr	r3, [pc, #84]	@ (80041e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	e001      	b.n	8004196 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004192:	4b15      	ldr	r3, [pc, #84]	@ (80041e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004194:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	3b08      	subs	r3, #8
 80041a2:	4a12      	ldr	r2, [pc, #72]	@ (80041ec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80041a4:	fba2 2303 	umull	r2, r3, r2, r3
 80041a8:	091b      	lsrs	r3, r3, #4
 80041aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b0:	089b      	lsrs	r3, r3, #2
 80041b2:	009a      	lsls	r2, r3, #2
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	4413      	add	r3, r2
 80041b8:	461a      	mov	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a0b      	ldr	r2, [pc, #44]	@ (80041f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80041c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f003 031f 	and.w	r3, r3, #31
 80041ca:	2201      	movs	r2, #1
 80041cc:	409a      	lsls	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80041d2:	bf00      	nop
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40020407 	.word	0x40020407
 80041e4:	40020800 	.word	0x40020800
 80041e8:	40020820 	.word	0x40020820
 80041ec:	cccccccd 	.word	0xcccccccd
 80041f0:	40020880 	.word	0x40020880

080041f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4b0b      	ldr	r3, [pc, #44]	@ (8004234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004208:	4413      	add	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	461a      	mov	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a08      	ldr	r2, [pc, #32]	@ (8004238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004216:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	3b01      	subs	r3, #1
 800421c:	f003 031f 	and.w	r3, r3, #31
 8004220:	2201      	movs	r2, #1
 8004222:	409a      	lsls	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004228:	bf00      	nop
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	1000823f 	.word	0x1000823f
 8004238:	40020940 	.word	0x40020940

0800423c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800424a:	e15a      	b.n	8004502 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	2101      	movs	r1, #1
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	fa01 f303 	lsl.w	r3, r1, r3
 8004258:	4013      	ands	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 814c 	beq.w	80044fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f003 0303 	and.w	r3, r3, #3
 800426c:	2b01      	cmp	r3, #1
 800426e:	d005      	beq.n	800427c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004278:	2b02      	cmp	r3, #2
 800427a:	d130      	bne.n	80042de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	2203      	movs	r2, #3
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	43db      	mvns	r3, r3
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4013      	ands	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042b2:	2201      	movs	r2, #1
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	43db      	mvns	r3, r3
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4013      	ands	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	091b      	lsrs	r3, r3, #4
 80042c8:	f003 0201 	and.w	r2, r3, #1
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	2b03      	cmp	r3, #3
 80042e8:	d017      	beq.n	800431a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	2203      	movs	r2, #3
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	43db      	mvns	r3, r3
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	4013      	ands	r3, r2
 8004300:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d123      	bne.n	800436e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	08da      	lsrs	r2, r3, #3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3208      	adds	r2, #8
 800432e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004332:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	220f      	movs	r2, #15
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	43db      	mvns	r3, r3
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4013      	ands	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	08da      	lsrs	r2, r3, #3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3208      	adds	r2, #8
 8004368:	6939      	ldr	r1, [r7, #16]
 800436a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	2203      	movs	r2, #3
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	43db      	mvns	r3, r3
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	4013      	ands	r3, r2
 8004384:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f003 0203 	and.w	r2, r3, #3
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	4313      	orrs	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 80a6 	beq.w	80044fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043b0:	4b5b      	ldr	r3, [pc, #364]	@ (8004520 <HAL_GPIO_Init+0x2e4>)
 80043b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043b4:	4a5a      	ldr	r2, [pc, #360]	@ (8004520 <HAL_GPIO_Init+0x2e4>)
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	6613      	str	r3, [r2, #96]	@ 0x60
 80043bc:	4b58      	ldr	r3, [pc, #352]	@ (8004520 <HAL_GPIO_Init+0x2e4>)
 80043be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	60bb      	str	r3, [r7, #8]
 80043c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043c8:	4a56      	ldr	r2, [pc, #344]	@ (8004524 <HAL_GPIO_Init+0x2e8>)
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	089b      	lsrs	r3, r3, #2
 80043ce:	3302      	adds	r3, #2
 80043d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	220f      	movs	r2, #15
 80043e0:	fa02 f303 	lsl.w	r3, r2, r3
 80043e4:	43db      	mvns	r3, r3
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4013      	ands	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80043f2:	d01f      	beq.n	8004434 <HAL_GPIO_Init+0x1f8>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a4c      	ldr	r2, [pc, #304]	@ (8004528 <HAL_GPIO_Init+0x2ec>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d019      	beq.n	8004430 <HAL_GPIO_Init+0x1f4>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a4b      	ldr	r2, [pc, #300]	@ (800452c <HAL_GPIO_Init+0x2f0>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d013      	beq.n	800442c <HAL_GPIO_Init+0x1f0>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a4a      	ldr	r2, [pc, #296]	@ (8004530 <HAL_GPIO_Init+0x2f4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00d      	beq.n	8004428 <HAL_GPIO_Init+0x1ec>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a49      	ldr	r2, [pc, #292]	@ (8004534 <HAL_GPIO_Init+0x2f8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d007      	beq.n	8004424 <HAL_GPIO_Init+0x1e8>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a48      	ldr	r2, [pc, #288]	@ (8004538 <HAL_GPIO_Init+0x2fc>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d101      	bne.n	8004420 <HAL_GPIO_Init+0x1e4>
 800441c:	2305      	movs	r3, #5
 800441e:	e00a      	b.n	8004436 <HAL_GPIO_Init+0x1fa>
 8004420:	2306      	movs	r3, #6
 8004422:	e008      	b.n	8004436 <HAL_GPIO_Init+0x1fa>
 8004424:	2304      	movs	r3, #4
 8004426:	e006      	b.n	8004436 <HAL_GPIO_Init+0x1fa>
 8004428:	2303      	movs	r3, #3
 800442a:	e004      	b.n	8004436 <HAL_GPIO_Init+0x1fa>
 800442c:	2302      	movs	r3, #2
 800442e:	e002      	b.n	8004436 <HAL_GPIO_Init+0x1fa>
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <HAL_GPIO_Init+0x1fa>
 8004434:	2300      	movs	r3, #0
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	f002 0203 	and.w	r2, r2, #3
 800443c:	0092      	lsls	r2, r2, #2
 800443e:	4093      	lsls	r3, r2
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004446:	4937      	ldr	r1, [pc, #220]	@ (8004524 <HAL_GPIO_Init+0x2e8>)
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	089b      	lsrs	r3, r3, #2
 800444c:	3302      	adds	r3, #2
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004454:	4b39      	ldr	r3, [pc, #228]	@ (800453c <HAL_GPIO_Init+0x300>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	43db      	mvns	r3, r3
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4013      	ands	r3, r2
 8004462:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004478:	4a30      	ldr	r2, [pc, #192]	@ (800453c <HAL_GPIO_Init+0x300>)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800447e:	4b2f      	ldr	r3, [pc, #188]	@ (800453c <HAL_GPIO_Init+0x300>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	43db      	mvns	r3, r3
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4013      	ands	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044a2:	4a26      	ldr	r2, [pc, #152]	@ (800453c <HAL_GPIO_Init+0x300>)
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80044a8:	4b24      	ldr	r3, [pc, #144]	@ (800453c <HAL_GPIO_Init+0x300>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	43db      	mvns	r3, r3
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4013      	ands	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80044cc:	4a1b      	ldr	r2, [pc, #108]	@ (800453c <HAL_GPIO_Init+0x300>)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80044d2:	4b1a      	ldr	r3, [pc, #104]	@ (800453c <HAL_GPIO_Init+0x300>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	43db      	mvns	r3, r3
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4013      	ands	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044f6:	4a11      	ldr	r2, [pc, #68]	@ (800453c <HAL_GPIO_Init+0x300>)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	3301      	adds	r3, #1
 8004500:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	fa22 f303 	lsr.w	r3, r2, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	f47f ae9d 	bne.w	800424c <HAL_GPIO_Init+0x10>
  }
}
 8004512:	bf00      	nop
 8004514:	bf00      	nop
 8004516:	371c      	adds	r7, #28
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	40021000 	.word	0x40021000
 8004524:	40010000 	.word	0x40010000
 8004528:	48000400 	.word	0x48000400
 800452c:	48000800 	.word	0x48000800
 8004530:	48000c00 	.word	0x48000c00
 8004534:	48001000 	.word	0x48001000
 8004538:	48001400 	.word	0x48001400
 800453c:	40010400 	.word	0x40010400

08004540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	807b      	strh	r3, [r7, #2]
 800454c:	4613      	mov	r3, r2
 800454e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004550:	787b      	ldrb	r3, [r7, #1]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004556:	887a      	ldrh	r2, [r7, #2]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800455c:	e002      	b.n	8004564 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800455e:	887a      	ldrh	r2, [r7, #2]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800457a:	4b08      	ldr	r3, [pc, #32]	@ (800459c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800457c:	695a      	ldr	r2, [r3, #20]
 800457e:	88fb      	ldrh	r3, [r7, #6]
 8004580:	4013      	ands	r3, r2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d006      	beq.n	8004594 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004586:	4a05      	ldr	r2, [pc, #20]	@ (800459c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004588:	88fb      	ldrh	r3, [r7, #6]
 800458a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800458c:	88fb      	ldrh	r3, [r7, #6]
 800458e:	4618      	mov	r0, r3
 8004590:	f000 f806 	bl	80045a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004594:	bf00      	nop
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40010400 	.word	0x40010400

080045a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e041      	b.n	800464c <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80045d0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f245 5255 	movw	r2, #21845	@ 0x5555
 80045da:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6852      	ldr	r2, [r2, #4]
 80045e4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6892      	ldr	r2, [r2, #8]
 80045ee:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80045f0:	f7fd fd52 	bl	8002098 <HAL_GetTick>
 80045f4:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80045f6:	e00f      	b.n	8004618 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80045f8:	f7fd fd4e 	bl	8002098 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b31      	cmp	r3, #49	@ 0x31
 8004604:	d908      	bls.n	8004618 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e019      	b.n	800464c <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e8      	bne.n	80045f8 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	429a      	cmp	r2, r3
 8004632:	d005      	beq.n	8004640 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	68d2      	ldr	r2, [r2, #12]
 800463c:	611a      	str	r2, [r3, #16]
 800463e:	e004      	b.n	800464a <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004648:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004664:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d141      	bne.n	8004706 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004682:	4b4b      	ldr	r3, [pc, #300]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800468a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800468e:	d131      	bne.n	80046f4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004690:	4b47      	ldr	r3, [pc, #284]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004696:	4a46      	ldr	r2, [pc, #280]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800469c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046a0:	4b43      	ldr	r3, [pc, #268]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046a8:	4a41      	ldr	r2, [pc, #260]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046b0:	4b40      	ldr	r3, [pc, #256]	@ (80047b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2232      	movs	r2, #50	@ 0x32
 80046b6:	fb02 f303 	mul.w	r3, r2, r3
 80046ba:	4a3f      	ldr	r2, [pc, #252]	@ (80047b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046bc:	fba2 2303 	umull	r2, r3, r2, r3
 80046c0:	0c9b      	lsrs	r3, r3, #18
 80046c2:	3301      	adds	r3, #1
 80046c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046c6:	e002      	b.n	80046ce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046ce:	4b38      	ldr	r3, [pc, #224]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046da:	d102      	bne.n	80046e2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f2      	bne.n	80046c8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046e2:	4b33      	ldr	r3, [pc, #204]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ee:	d158      	bne.n	80047a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e057      	b.n	80047a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046f4:	4b2e      	ldr	r3, [pc, #184]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046fa:	4a2d      	ldr	r2, [pc, #180]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004700:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004704:	e04d      	b.n	80047a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800470c:	d141      	bne.n	8004792 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800470e:	4b28      	ldr	r3, [pc, #160]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800471a:	d131      	bne.n	8004780 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800471c:	4b24      	ldr	r3, [pc, #144]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004722:	4a23      	ldr	r2, [pc, #140]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004728:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800472c:	4b20      	ldr	r3, [pc, #128]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004734:	4a1e      	ldr	r2, [pc, #120]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004736:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800473a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800473c:	4b1d      	ldr	r3, [pc, #116]	@ (80047b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2232      	movs	r2, #50	@ 0x32
 8004742:	fb02 f303 	mul.w	r3, r2, r3
 8004746:	4a1c      	ldr	r2, [pc, #112]	@ (80047b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004748:	fba2 2303 	umull	r2, r3, r2, r3
 800474c:	0c9b      	lsrs	r3, r3, #18
 800474e:	3301      	adds	r3, #1
 8004750:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004752:	e002      	b.n	800475a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3b01      	subs	r3, #1
 8004758:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800475a:	4b15      	ldr	r3, [pc, #84]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004762:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004766:	d102      	bne.n	800476e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f2      	bne.n	8004754 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800476e:	4b10      	ldr	r3, [pc, #64]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800477a:	d112      	bne.n	80047a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e011      	b.n	80047a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004780:	4b0b      	ldr	r3, [pc, #44]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004786:	4a0a      	ldr	r2, [pc, #40]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800478c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004790:	e007      	b.n	80047a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004792:	4b07      	ldr	r3, [pc, #28]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800479a:	4a05      	ldr	r2, [pc, #20]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800479c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047a0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	40007000 	.word	0x40007000
 80047b4:	20000004 	.word	0x20000004
 80047b8:	431bde83 	.word	0x431bde83

080047bc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80047c0:	4b05      	ldr	r3, [pc, #20]	@ (80047d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	4a04      	ldr	r2, [pc, #16]	@ (80047d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047ca:	6093      	str	r3, [r2, #8]
}
 80047cc:	bf00      	nop
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40007000 	.word	0x40007000

080047dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e2fe      	b.n	8004dec <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d075      	beq.n	80048e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047fa:	4b97      	ldr	r3, [pc, #604]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 030c 	and.w	r3, r3, #12
 8004802:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004804:	4b94      	ldr	r3, [pc, #592]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f003 0303 	and.w	r3, r3, #3
 800480c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	2b0c      	cmp	r3, #12
 8004812:	d102      	bne.n	800481a <HAL_RCC_OscConfig+0x3e>
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2b03      	cmp	r3, #3
 8004818:	d002      	beq.n	8004820 <HAL_RCC_OscConfig+0x44>
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2b08      	cmp	r3, #8
 800481e:	d10b      	bne.n	8004838 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004820:	4b8d      	ldr	r3, [pc, #564]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d05b      	beq.n	80048e4 <HAL_RCC_OscConfig+0x108>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d157      	bne.n	80048e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e2d9      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004840:	d106      	bne.n	8004850 <HAL_RCC_OscConfig+0x74>
 8004842:	4b85      	ldr	r3, [pc, #532]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a84      	ldr	r2, [pc, #528]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	e01d      	b.n	800488c <HAL_RCC_OscConfig+0xb0>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004858:	d10c      	bne.n	8004874 <HAL_RCC_OscConfig+0x98>
 800485a:	4b7f      	ldr	r3, [pc, #508]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a7e      	ldr	r2, [pc, #504]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004860:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	4b7c      	ldr	r3, [pc, #496]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a7b      	ldr	r2, [pc, #492]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 800486c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	e00b      	b.n	800488c <HAL_RCC_OscConfig+0xb0>
 8004874:	4b78      	ldr	r3, [pc, #480]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a77      	ldr	r2, [pc, #476]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 800487a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	4b75      	ldr	r3, [pc, #468]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a74      	ldr	r2, [pc, #464]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004886:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800488a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d013      	beq.n	80048bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fd fc00 	bl	8002098 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800489c:	f7fd fbfc 	bl	8002098 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b64      	cmp	r3, #100	@ 0x64
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e29e      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ae:	4b6a      	ldr	r3, [pc, #424]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0f0      	beq.n	800489c <HAL_RCC_OscConfig+0xc0>
 80048ba:	e014      	b.n	80048e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048bc:	f7fd fbec 	bl	8002098 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048c4:	f7fd fbe8 	bl	8002098 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b64      	cmp	r3, #100	@ 0x64
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e28a      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048d6:	4b60      	ldr	r3, [pc, #384]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCC_OscConfig+0xe8>
 80048e2:	e000      	b.n	80048e6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d075      	beq.n	80049de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048f2:	4b59      	ldr	r3, [pc, #356]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 030c 	and.w	r3, r3, #12
 80048fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048fc:	4b56      	ldr	r3, [pc, #344]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0303 	and.w	r3, r3, #3
 8004904:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	2b0c      	cmp	r3, #12
 800490a:	d102      	bne.n	8004912 <HAL_RCC_OscConfig+0x136>
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d002      	beq.n	8004918 <HAL_RCC_OscConfig+0x13c>
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	2b04      	cmp	r3, #4
 8004916:	d11f      	bne.n	8004958 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004918:	4b4f      	ldr	r3, [pc, #316]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004920:	2b00      	cmp	r3, #0
 8004922:	d005      	beq.n	8004930 <HAL_RCC_OscConfig+0x154>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e25d      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004930:	4b49      	ldr	r3, [pc, #292]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	061b      	lsls	r3, r3, #24
 800493e:	4946      	ldr	r1, [pc, #280]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004940:	4313      	orrs	r3, r2
 8004942:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004944:	4b45      	ldr	r3, [pc, #276]	@ (8004a5c <HAL_RCC_OscConfig+0x280>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4618      	mov	r0, r3
 800494a:	f7fd fb59 	bl	8002000 <HAL_InitTick>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d043      	beq.n	80049dc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e249      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d023      	beq.n	80049a8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004960:	4b3d      	ldr	r3, [pc, #244]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a3c      	ldr	r2, [pc, #240]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004966:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800496a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496c:	f7fd fb94 	bl	8002098 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004974:	f7fd fb90 	bl	8002098 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e232      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004986:	4b34      	ldr	r3, [pc, #208]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004992:	4b31      	ldr	r3, [pc, #196]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	061b      	lsls	r3, r3, #24
 80049a0:	492d      	ldr	r1, [pc, #180]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	604b      	str	r3, [r1, #4]
 80049a6:	e01a      	b.n	80049de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a2a      	ldr	r2, [pc, #168]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 80049ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b4:	f7fd fb70 	bl	8002098 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049bc:	f7fd fb6c 	bl	8002098 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e20e      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049ce:	4b22      	ldr	r3, [pc, #136]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x1e0>
 80049da:	e000      	b.n	80049de <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d041      	beq.n	8004a6e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d01c      	beq.n	8004a2c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049f2:	4b19      	ldr	r3, [pc, #100]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 80049f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049f8:	4a17      	ldr	r2, [pc, #92]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a02:	f7fd fb49 	bl	8002098 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a0a:	f7fd fb45 	bl	8002098 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e1e7      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0ef      	beq.n	8004a0a <HAL_RCC_OscConfig+0x22e>
 8004a2a:	e020      	b.n	8004a6e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a32:	4a09      	ldr	r2, [pc, #36]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004a34:	f023 0301 	bic.w	r3, r3, #1
 8004a38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3c:	f7fd fb2c 	bl	8002098 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a42:	e00d      	b.n	8004a60 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a44:	f7fd fb28 	bl	8002098 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d906      	bls.n	8004a60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e1ca      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
 8004a56:	bf00      	nop
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a60:	4b8c      	ldr	r3, [pc, #560]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1ea      	bne.n	8004a44 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 80a6 	beq.w	8004bc8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a80:	4b84      	ldr	r3, [pc, #528]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_RCC_OscConfig+0x2b4>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e000      	b.n	8004a92 <HAL_RCC_OscConfig+0x2b6>
 8004a90:	2300      	movs	r3, #0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00d      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a96:	4b7f      	ldr	r3, [pc, #508]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a9a:	4a7e      	ldr	r2, [pc, #504]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004aa2:	4b7c      	ldr	r3, [pc, #496]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ab2:	4b79      	ldr	r3, [pc, #484]	@ (8004c98 <HAL_RCC_OscConfig+0x4bc>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d118      	bne.n	8004af0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004abe:	4b76      	ldr	r3, [pc, #472]	@ (8004c98 <HAL_RCC_OscConfig+0x4bc>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a75      	ldr	r2, [pc, #468]	@ (8004c98 <HAL_RCC_OscConfig+0x4bc>)
 8004ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aca:	f7fd fae5 	bl	8002098 <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad2:	f7fd fae1 	bl	8002098 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e183      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ae4:	4b6c      	ldr	r3, [pc, #432]	@ (8004c98 <HAL_RCC_OscConfig+0x4bc>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0f0      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d108      	bne.n	8004b0a <HAL_RCC_OscConfig+0x32e>
 8004af8:	4b66      	ldr	r3, [pc, #408]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004afe:	4a65      	ldr	r2, [pc, #404]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004b00:	f043 0301 	orr.w	r3, r3, #1
 8004b04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b08:	e024      	b.n	8004b54 <HAL_RCC_OscConfig+0x378>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b05      	cmp	r3, #5
 8004b10:	d110      	bne.n	8004b34 <HAL_RCC_OscConfig+0x358>
 8004b12:	4b60      	ldr	r3, [pc, #384]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b18:	4a5e      	ldr	r2, [pc, #376]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004b1a:	f043 0304 	orr.w	r3, r3, #4
 8004b1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b22:	4b5c      	ldr	r3, [pc, #368]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b28:	4a5a      	ldr	r2, [pc, #360]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004b2a:	f043 0301 	orr.w	r3, r3, #1
 8004b2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b32:	e00f      	b.n	8004b54 <HAL_RCC_OscConfig+0x378>
 8004b34:	4b57      	ldr	r3, [pc, #348]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b3a:	4a56      	ldr	r2, [pc, #344]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004b3c:	f023 0301 	bic.w	r3, r3, #1
 8004b40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b44:	4b53      	ldr	r3, [pc, #332]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b4a:	4a52      	ldr	r2, [pc, #328]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004b4c:	f023 0304 	bic.w	r3, r3, #4
 8004b50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d016      	beq.n	8004b8a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5c:	f7fd fa9c 	bl	8002098 <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b62:	e00a      	b.n	8004b7a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b64:	f7fd fa98 	bl	8002098 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e138      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b7a:	4b46      	ldr	r3, [pc, #280]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ed      	beq.n	8004b64 <HAL_RCC_OscConfig+0x388>
 8004b88:	e015      	b.n	8004bb6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8a:	f7fd fa85 	bl	8002098 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b90:	e00a      	b.n	8004ba8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b92:	f7fd fa81 	bl	8002098 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e121      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ba8:	4b3a      	ldr	r3, [pc, #232]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1ed      	bne.n	8004b92 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bb6:	7ffb      	ldrb	r3, [r7, #31]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d105      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bbc:	4b35      	ldr	r3, [pc, #212]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc0:	4a34      	ldr	r2, [pc, #208]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bc6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d03c      	beq.n	8004c4e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01c      	beq.n	8004c16 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004bde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004be2:	4a2c      	ldr	r2, [pc, #176]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004be4:	f043 0301 	orr.w	r3, r3, #1
 8004be8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bec:	f7fd fa54 	bl	8002098 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bf4:	f7fd fa50 	bl	8002098 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e0f2      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c06:	4b23      	ldr	r3, [pc, #140]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004c08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0ef      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x418>
 8004c14:	e01b      	b.n	8004c4e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c16:	4b1f      	ldr	r3, [pc, #124]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004c18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004c1e:	f023 0301 	bic.w	r3, r3, #1
 8004c22:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c26:	f7fd fa37 	bl	8002098 <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c2e:	f7fd fa33 	bl	8002098 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e0d5      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c40:	4b14      	ldr	r3, [pc, #80]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004c42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1ef      	bne.n	8004c2e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 80c9 	beq.w	8004dea <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c58:	4b0e      	ldr	r3, [pc, #56]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 030c 	and.w	r3, r3, #12
 8004c60:	2b0c      	cmp	r3, #12
 8004c62:	f000 8083 	beq.w	8004d6c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d15e      	bne.n	8004d2c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c6e:	4b09      	ldr	r3, [pc, #36]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a08      	ldr	r2, [pc, #32]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004c74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7a:	f7fd fa0d 	bl	8002098 <HAL_GetTick>
 8004c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c80:	e00c      	b.n	8004c9c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c82:	f7fd fa09 	bl	8002098 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d905      	bls.n	8004c9c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e0ab      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
 8004c94:	40021000 	.word	0x40021000
 8004c98:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c9c:	4b55      	ldr	r3, [pc, #340]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1ec      	bne.n	8004c82 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ca8:	4b52      	ldr	r3, [pc, #328]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	4b52      	ldr	r3, [pc, #328]	@ (8004df8 <HAL_RCC_OscConfig+0x61c>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6a11      	ldr	r1, [r2, #32]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004cb8:	3a01      	subs	r2, #1
 8004cba:	0112      	lsls	r2, r2, #4
 8004cbc:	4311      	orrs	r1, r2
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004cc2:	0212      	lsls	r2, r2, #8
 8004cc4:	4311      	orrs	r1, r2
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004cca:	0852      	lsrs	r2, r2, #1
 8004ccc:	3a01      	subs	r2, #1
 8004cce:	0552      	lsls	r2, r2, #21
 8004cd0:	4311      	orrs	r1, r2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004cd6:	0852      	lsrs	r2, r2, #1
 8004cd8:	3a01      	subs	r2, #1
 8004cda:	0652      	lsls	r2, r2, #25
 8004cdc:	4311      	orrs	r1, r2
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ce2:	06d2      	lsls	r2, r2, #27
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	4943      	ldr	r1, [pc, #268]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cec:	4b41      	ldr	r3, [pc, #260]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a40      	ldr	r2, [pc, #256]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004cf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cf6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cf8:	4b3e      	ldr	r3, [pc, #248]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	4a3d      	ldr	r2, [pc, #244]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004cfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d02:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d04:	f7fd f9c8 	bl	8002098 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0c:	f7fd f9c4 	bl	8002098 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e066      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d1e:	4b35      	ldr	r3, [pc, #212]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x530>
 8004d2a:	e05e      	b.n	8004dea <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d2c:	4b31      	ldr	r3, [pc, #196]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a30      	ldr	r2, [pc, #192]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004d32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d38:	f7fd f9ae 	bl	8002098 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d40:	f7fd f9aa 	bl	8002098 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e04c      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d52:	4b28      	ldr	r3, [pc, #160]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1f0      	bne.n	8004d40 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d5e:	4b25      	ldr	r3, [pc, #148]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	4924      	ldr	r1, [pc, #144]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004d64:	4b25      	ldr	r3, [pc, #148]	@ (8004dfc <HAL_RCC_OscConfig+0x620>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	60cb      	str	r3, [r1, #12]
 8004d6a:	e03e      	b.n	8004dea <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e039      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d78:	4b1e      	ldr	r3, [pc, #120]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f003 0203 	and.w	r2, r3, #3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d12c      	bne.n	8004de6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	3b01      	subs	r3, #1
 8004d98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d123      	bne.n	8004de6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d11b      	bne.n	8004de6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d113      	bne.n	8004de6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d109      	bne.n	8004de6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ddc:	085b      	lsrs	r3, r3, #1
 8004dde:	3b01      	subs	r3, #1
 8004de0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d001      	beq.n	8004dea <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e000      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3720      	adds	r7, #32
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40021000 	.word	0x40021000
 8004df8:	019f800c 	.word	0x019f800c
 8004dfc:	feeefffc 	.word	0xfeeefffc

08004e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e11e      	b.n	8005056 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e18:	4b91      	ldr	r3, [pc, #580]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 030f 	and.w	r3, r3, #15
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d910      	bls.n	8004e48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e26:	4b8e      	ldr	r3, [pc, #568]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f023 020f 	bic.w	r2, r3, #15
 8004e2e:	498c      	ldr	r1, [pc, #560]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e36:	4b8a      	ldr	r3, [pc, #552]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d001      	beq.n	8004e48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e106      	b.n	8005056 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d073      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d129      	bne.n	8004eb0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e5c:	4b81      	ldr	r3, [pc, #516]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e0f4      	b.n	8005056 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e6c:	f000 f99e 	bl	80051ac <RCC_GetSysClockFreqFromPLLSource>
 8004e70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	4a7c      	ldr	r2, [pc, #496]	@ (8005068 <HAL_RCC_ClockConfig+0x268>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d93f      	bls.n	8004efa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e7a:	4b7a      	ldr	r3, [pc, #488]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d009      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d033      	beq.n	8004efa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d12f      	bne.n	8004efa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e9a:	4b72      	ldr	r3, [pc, #456]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ea2:	4a70      	ldr	r2, [pc, #448]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ea8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004eaa:	2380      	movs	r3, #128	@ 0x80
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	e024      	b.n	8004efa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d107      	bne.n	8004ec8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eb8:	4b6a      	ldr	r3, [pc, #424]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d109      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e0c6      	b.n	8005056 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ec8:	4b66      	ldr	r3, [pc, #408]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e0be      	b.n	8005056 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004ed8:	f000 f8ce 	bl	8005078 <HAL_RCC_GetSysClockFreq>
 8004edc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	4a61      	ldr	r2, [pc, #388]	@ (8005068 <HAL_RCC_ClockConfig+0x268>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d909      	bls.n	8004efa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ee6:	4b5f      	ldr	r3, [pc, #380]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004eee:	4a5d      	ldr	r2, [pc, #372]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004ef0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ef4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004ef6:	2380      	movs	r3, #128	@ 0x80
 8004ef8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004efa:	4b5a      	ldr	r3, [pc, #360]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f023 0203 	bic.w	r2, r3, #3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	4957      	ldr	r1, [pc, #348]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f0c:	f7fd f8c4 	bl	8002098 <HAL_GetTick>
 8004f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f12:	e00a      	b.n	8004f2a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f14:	f7fd f8c0 	bl	8002098 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e095      	b.n	8005056 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f2a:	4b4e      	ldr	r3, [pc, #312]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 020c 	and.w	r2, r3, #12
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d1eb      	bne.n	8004f14 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d023      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f54:	4b43      	ldr	r3, [pc, #268]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	4a42      	ldr	r2, [pc, #264]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004f5a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f5e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d007      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f6c:	4b3d      	ldr	r3, [pc, #244]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f74:	4a3b      	ldr	r2, [pc, #236]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004f76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f7c:	4b39      	ldr	r3, [pc, #228]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	4936      	ldr	r1, [pc, #216]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	608b      	str	r3, [r1, #8]
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	2b80      	cmp	r3, #128	@ 0x80
 8004f94:	d105      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f96:	4b33      	ldr	r3, [pc, #204]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	4a32      	ldr	r2, [pc, #200]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004f9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fa0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fa2:	4b2f      	ldr	r3, [pc, #188]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 030f 	and.w	r3, r3, #15
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d21d      	bcs.n	8004fec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f023 020f 	bic.w	r2, r3, #15
 8004fb8:	4929      	ldr	r1, [pc, #164]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fc0:	f7fd f86a 	bl	8002098 <HAL_GetTick>
 8004fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fc6:	e00a      	b.n	8004fde <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc8:	f7fd f866 	bl	8002098 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e03b      	b.n	8005056 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fde:	4b20      	ldr	r3, [pc, #128]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d1ed      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d008      	beq.n	800500a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	4917      	ldr	r1, [pc, #92]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8005006:	4313      	orrs	r3, r2
 8005008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d009      	beq.n	800502a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005016:	4b13      	ldr	r3, [pc, #76]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	490f      	ldr	r1, [pc, #60]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8005026:	4313      	orrs	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800502a:	f000 f825 	bl	8005078 <HAL_RCC_GetSysClockFreq>
 800502e:	4602      	mov	r2, r0
 8005030:	4b0c      	ldr	r3, [pc, #48]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	091b      	lsrs	r3, r3, #4
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	490c      	ldr	r1, [pc, #48]	@ (800506c <HAL_RCC_ClockConfig+0x26c>)
 800503c:	5ccb      	ldrb	r3, [r1, r3]
 800503e:	f003 031f 	and.w	r3, r3, #31
 8005042:	fa22 f303 	lsr.w	r3, r2, r3
 8005046:	4a0a      	ldr	r2, [pc, #40]	@ (8005070 <HAL_RCC_ClockConfig+0x270>)
 8005048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800504a:	4b0a      	ldr	r3, [pc, #40]	@ (8005074 <HAL_RCC_ClockConfig+0x274>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f7fc ffd6 	bl	8002000 <HAL_InitTick>
 8005054:	4603      	mov	r3, r0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40022000 	.word	0x40022000
 8005064:	40021000 	.word	0x40021000
 8005068:	04c4b400 	.word	0x04c4b400
 800506c:	08018814 	.word	0x08018814
 8005070:	20000004 	.word	0x20000004
 8005074:	20000008 	.word	0x20000008

08005078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800507e:	4b2c      	ldr	r3, [pc, #176]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	2b04      	cmp	r3, #4
 8005088:	d102      	bne.n	8005090 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800508a:	4b2a      	ldr	r3, [pc, #168]	@ (8005134 <HAL_RCC_GetSysClockFreq+0xbc>)
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	e047      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005090:	4b27      	ldr	r3, [pc, #156]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f003 030c 	and.w	r3, r3, #12
 8005098:	2b08      	cmp	r3, #8
 800509a:	d102      	bne.n	80050a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800509c:	4b26      	ldr	r3, [pc, #152]	@ (8005138 <HAL_RCC_GetSysClockFreq+0xc0>)
 800509e:	613b      	str	r3, [r7, #16]
 80050a0:	e03e      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80050a2:	4b23      	ldr	r3, [pc, #140]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 030c 	and.w	r3, r3, #12
 80050aa:	2b0c      	cmp	r3, #12
 80050ac:	d136      	bne.n	800511c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050ae:	4b20      	ldr	r3, [pc, #128]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	091b      	lsrs	r3, r3, #4
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	3301      	adds	r3, #1
 80050c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d10c      	bne.n	80050e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050cc:	4a1a      	ldr	r2, [pc, #104]	@ (8005138 <HAL_RCC_GetSysClockFreq+0xc0>)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d4:	4a16      	ldr	r2, [pc, #88]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050d6:	68d2      	ldr	r2, [r2, #12]
 80050d8:	0a12      	lsrs	r2, r2, #8
 80050da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050de:	fb02 f303 	mul.w	r3, r2, r3
 80050e2:	617b      	str	r3, [r7, #20]
      break;
 80050e4:	e00c      	b.n	8005100 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050e6:	4a13      	ldr	r2, [pc, #76]	@ (8005134 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ee:	4a10      	ldr	r2, [pc, #64]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050f0:	68d2      	ldr	r2, [r2, #12]
 80050f2:	0a12      	lsrs	r2, r2, #8
 80050f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050f8:	fb02 f303 	mul.w	r3, r2, r3
 80050fc:	617b      	str	r3, [r7, #20]
      break;
 80050fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005100:	4b0b      	ldr	r3, [pc, #44]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	0e5b      	lsrs	r3, r3, #25
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	3301      	adds	r3, #1
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	fbb2 f3f3 	udiv	r3, r2, r3
 8005118:	613b      	str	r3, [r7, #16]
 800511a:	e001      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005120:	693b      	ldr	r3, [r7, #16]
}
 8005122:	4618      	mov	r0, r3
 8005124:	371c      	adds	r7, #28
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40021000 	.word	0x40021000
 8005134:	00f42400 	.word	0x00f42400
 8005138:	016e3600 	.word	0x016e3600

0800513c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005140:	4b03      	ldr	r3, [pc, #12]	@ (8005150 <HAL_RCC_GetHCLKFreq+0x14>)
 8005142:	681b      	ldr	r3, [r3, #0]
}
 8005144:	4618      	mov	r0, r3
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	20000004 	.word	0x20000004

08005154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005158:	f7ff fff0 	bl	800513c <HAL_RCC_GetHCLKFreq>
 800515c:	4602      	mov	r2, r0
 800515e:	4b06      	ldr	r3, [pc, #24]	@ (8005178 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	0a1b      	lsrs	r3, r3, #8
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	4904      	ldr	r1, [pc, #16]	@ (800517c <HAL_RCC_GetPCLK1Freq+0x28>)
 800516a:	5ccb      	ldrb	r3, [r1, r3]
 800516c:	f003 031f 	and.w	r3, r3, #31
 8005170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005174:	4618      	mov	r0, r3
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40021000 	.word	0x40021000
 800517c:	08018824 	.word	0x08018824

08005180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005184:	f7ff ffda 	bl	800513c <HAL_RCC_GetHCLKFreq>
 8005188:	4602      	mov	r2, r0
 800518a:	4b06      	ldr	r3, [pc, #24]	@ (80051a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	0adb      	lsrs	r3, r3, #11
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	4904      	ldr	r1, [pc, #16]	@ (80051a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005196:	5ccb      	ldrb	r3, [r1, r3]
 8005198:	f003 031f 	and.w	r3, r3, #31
 800519c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40021000 	.word	0x40021000
 80051a8:	08018824 	.word	0x08018824

080051ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051b2:	4b1e      	ldr	r3, [pc, #120]	@ (800522c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051bc:	4b1b      	ldr	r3, [pc, #108]	@ (800522c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	091b      	lsrs	r3, r3, #4
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	3301      	adds	r3, #1
 80051c8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2b03      	cmp	r3, #3
 80051ce:	d10c      	bne.n	80051ea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051d0:	4a17      	ldr	r2, [pc, #92]	@ (8005230 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d8:	4a14      	ldr	r2, [pc, #80]	@ (800522c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051da:	68d2      	ldr	r2, [r2, #12]
 80051dc:	0a12      	lsrs	r2, r2, #8
 80051de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051e2:	fb02 f303 	mul.w	r3, r2, r3
 80051e6:	617b      	str	r3, [r7, #20]
    break;
 80051e8:	e00c      	b.n	8005204 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051ea:	4a12      	ldr	r2, [pc, #72]	@ (8005234 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f2:	4a0e      	ldr	r2, [pc, #56]	@ (800522c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051f4:	68d2      	ldr	r2, [r2, #12]
 80051f6:	0a12      	lsrs	r2, r2, #8
 80051f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051fc:	fb02 f303 	mul.w	r3, r2, r3
 8005200:	617b      	str	r3, [r7, #20]
    break;
 8005202:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005204:	4b09      	ldr	r3, [pc, #36]	@ (800522c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	0e5b      	lsrs	r3, r3, #25
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	3301      	adds	r3, #1
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	fbb2 f3f3 	udiv	r3, r2, r3
 800521c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800521e:	687b      	ldr	r3, [r7, #4]
}
 8005220:	4618      	mov	r0, r3
 8005222:	371c      	adds	r7, #28
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	40021000 	.word	0x40021000
 8005230:	016e3600 	.word	0x016e3600
 8005234:	00f42400 	.word	0x00f42400

08005238 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005240:	2300      	movs	r3, #0
 8005242:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005244:	2300      	movs	r3, #0
 8005246:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 8098 	beq.w	8005386 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005256:	2300      	movs	r3, #0
 8005258:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800525a:	4b43      	ldr	r3, [pc, #268]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800525c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800525e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10d      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005266:	4b40      	ldr	r3, [pc, #256]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800526a:	4a3f      	ldr	r2, [pc, #252]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800526c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005270:	6593      	str	r3, [r2, #88]	@ 0x58
 8005272:	4b3d      	ldr	r3, [pc, #244]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800527a:	60bb      	str	r3, [r7, #8]
 800527c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800527e:	2301      	movs	r3, #1
 8005280:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005282:	4b3a      	ldr	r3, [pc, #232]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a39      	ldr	r2, [pc, #228]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800528c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800528e:	f7fc ff03 	bl	8002098 <HAL_GetTick>
 8005292:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005294:	e009      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005296:	f7fc feff 	bl	8002098 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d902      	bls.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	74fb      	strb	r3, [r7, #19]
        break;
 80052a8:	e005      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052aa:	4b30      	ldr	r3, [pc, #192]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0ef      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80052b6:	7cfb      	ldrb	r3, [r7, #19]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d159      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052bc:	4b2a      	ldr	r3, [pc, #168]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052c6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d01e      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d019      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052d8:	4b23      	ldr	r3, [pc, #140]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052e4:	4b20      	ldr	r3, [pc, #128]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ea:	4a1f      	ldr	r2, [pc, #124]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052f4:	4b1c      	ldr	r3, [pc, #112]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005304:	4a18      	ldr	r2, [pc, #96]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d016      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005316:	f7fc febf 	bl	8002098 <HAL_GetTick>
 800531a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800531c:	e00b      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800531e:	f7fc febb 	bl	8002098 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	f241 3288 	movw	r2, #5000	@ 0x1388
 800532c:	4293      	cmp	r3, r2
 800532e:	d902      	bls.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	74fb      	strb	r3, [r7, #19]
            break;
 8005334:	e006      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005336:	4b0c      	ldr	r3, [pc, #48]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0ec      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005344:	7cfb      	ldrb	r3, [r7, #19]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10b      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800534a:	4b07      	ldr	r3, [pc, #28]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800534c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005350:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005358:	4903      	ldr	r1, [pc, #12]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005360:	e008      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005362:	7cfb      	ldrb	r3, [r7, #19]
 8005364:	74bb      	strb	r3, [r7, #18]
 8005366:	e005      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005368:	40021000 	.word	0x40021000
 800536c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005370:	7cfb      	ldrb	r3, [r7, #19]
 8005372:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005374:	7c7b      	ldrb	r3, [r7, #17]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d105      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800537a:	4ba7      	ldr	r3, [pc, #668]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800537c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800537e:	4aa6      	ldr	r2, [pc, #664]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005380:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005384:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005392:	4ba1      	ldr	r3, [pc, #644]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005398:	f023 0203 	bic.w	r2, r3, #3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	499d      	ldr	r1, [pc, #628]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053b4:	4b98      	ldr	r3, [pc, #608]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ba:	f023 020c 	bic.w	r2, r3, #12
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	4995      	ldr	r1, [pc, #596]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0304 	and.w	r3, r3, #4
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053d6:	4b90      	ldr	r3, [pc, #576]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	498c      	ldr	r1, [pc, #560]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0308 	and.w	r3, r3, #8
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053f8:	4b87      	ldr	r3, [pc, #540]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	4984      	ldr	r1, [pc, #528]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005408:	4313      	orrs	r3, r2
 800540a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0310 	and.w	r3, r3, #16
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800541a:	4b7f      	ldr	r3, [pc, #508]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800541c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005420:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	497b      	ldr	r1, [pc, #492]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800542a:	4313      	orrs	r3, r2
 800542c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0320 	and.w	r3, r3, #32
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00a      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800543c:	4b76      	ldr	r3, [pc, #472]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800543e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005442:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	4973      	ldr	r1, [pc, #460]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800544c:	4313      	orrs	r3, r2
 800544e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800545e:	4b6e      	ldr	r3, [pc, #440]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005464:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	496a      	ldr	r1, [pc, #424]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00a      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005480:	4b65      	ldr	r3, [pc, #404]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005486:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	4962      	ldr	r1, [pc, #392]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005490:	4313      	orrs	r3, r2
 8005492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054a2:	4b5d      	ldr	r3, [pc, #372]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b0:	4959      	ldr	r1, [pc, #356]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054c4:	4b54      	ldr	r3, [pc, #336]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054ca:	f023 0203 	bic.w	r2, r3, #3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d2:	4951      	ldr	r1, [pc, #324]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054e6:	4b4c      	ldr	r3, [pc, #304]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f4:	4948      	ldr	r1, [pc, #288]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005504:	2b00      	cmp	r3, #0
 8005506:	d015      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005508:	4b43      	ldr	r3, [pc, #268]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800550a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005516:	4940      	ldr	r1, [pc, #256]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005522:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005526:	d105      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005528:	4b3b      	ldr	r3, [pc, #236]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	4a3a      	ldr	r2, [pc, #232]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800552e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005532:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800553c:	2b00      	cmp	r3, #0
 800553e:	d015      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005540:	4b35      	ldr	r3, [pc, #212]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005546:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800554e:	4932      	ldr	r1, [pc, #200]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800555a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800555e:	d105      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005560:	4b2d      	ldr	r3, [pc, #180]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	4a2c      	ldr	r2, [pc, #176]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005566:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800556a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d015      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005578:	4b27      	ldr	r3, [pc, #156]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800557a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800557e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005586:	4924      	ldr	r1, [pc, #144]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005588:	4313      	orrs	r3, r2
 800558a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005592:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005596:	d105      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005598:	4b1f      	ldr	r3, [pc, #124]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	4a1e      	ldr	r2, [pc, #120]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800559e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055a2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d015      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055b0:	4b19      	ldr	r3, [pc, #100]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055be:	4916      	ldr	r1, [pc, #88]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055ce:	d105      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055d0:	4b11      	ldr	r3, [pc, #68]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	4a10      	ldr	r2, [pc, #64]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055da:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d019      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f6:	4908      	ldr	r1, [pc, #32]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005602:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005606:	d109      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005608:	4b03      	ldr	r3, [pc, #12]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	4a02      	ldr	r2, [pc, #8]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800560e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005612:	60d3      	str	r3, [r2, #12]
 8005614:	e002      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005616:	bf00      	nop
 8005618:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d015      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005628:	4b29      	ldr	r3, [pc, #164]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800562a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800562e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005636:	4926      	ldr	r1, [pc, #152]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005638:	4313      	orrs	r3, r2
 800563a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005642:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005646:	d105      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005648:	4b21      	ldr	r3, [pc, #132]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	4a20      	ldr	r2, [pc, #128]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800564e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005652:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d015      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005660:	4b1b      	ldr	r3, [pc, #108]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005666:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800566e:	4918      	ldr	r1, [pc, #96]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005670:	4313      	orrs	r3, r2
 8005672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800567a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800567e:	d105      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005680:	4b13      	ldr	r3, [pc, #76]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	4a12      	ldr	r2, [pc, #72]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800568a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d015      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005698:	4b0d      	ldr	r3, [pc, #52]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800569a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800569e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056a6:	490a      	ldr	r1, [pc, #40]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056b6:	d105      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056b8:	4b05      	ldr	r3, [pc, #20]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	4a04      	ldr	r2, [pc, #16]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80056c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	40021000 	.word	0x40021000

080056d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e042      	b.n	800576c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d106      	bne.n	80056fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7fc fb81 	bl	8001e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2224      	movs	r2, #36	@ 0x24
 8005702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0201 	bic.w	r2, r2, #1
 8005714:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f001 f806 	bl	8006730 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fd07 	bl	8006138 <UART_SetConfig>
 800572a:	4603      	mov	r3, r0
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e01b      	b.n	800576c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005742:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005752:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f001 f885 	bl	8006874 <UART_CheckIdleState>
 800576a:	4603      	mov	r3, r0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08a      	sub	sp, #40	@ 0x28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	4613      	mov	r3, r2
 8005780:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005788:	2b20      	cmp	r3, #32
 800578a:	d167      	bne.n	800585c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <HAL_UART_Transmit_DMA+0x24>
 8005792:	88fb      	ldrh	r3, [r7, #6]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e060      	b.n	800585e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	88fa      	ldrh	r2, [r7, #6]
 80057a6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	88fa      	ldrh	r2, [r7, #6]
 80057ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2221      	movs	r2, #33	@ 0x21
 80057be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d028      	beq.n	800581c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057ce:	4a26      	ldr	r2, [pc, #152]	@ (8005868 <HAL_UART_Transmit_DMA+0xf4>)
 80057d0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057d6:	4a25      	ldr	r2, [pc, #148]	@ (800586c <HAL_UART_Transmit_DMA+0xf8>)
 80057d8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057de:	4a24      	ldr	r2, [pc, #144]	@ (8005870 <HAL_UART_Transmit_DMA+0xfc>)
 80057e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057e6:	2200      	movs	r2, #0
 80057e8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057f2:	4619      	mov	r1, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3328      	adds	r3, #40	@ 0x28
 80057fa:	461a      	mov	r2, r3
 80057fc:	88fb      	ldrh	r3, [r7, #6]
 80057fe:	f7fe fa87 	bl	8003d10 <HAL_DMA_Start_IT>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d009      	beq.n	800581c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2210      	movs	r2, #16
 800580c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e020      	b.n	800585e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2240      	movs	r2, #64	@ 0x40
 8005822:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3308      	adds	r3, #8
 800582a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	e853 3f00 	ldrex	r3, [r3]
 8005832:	613b      	str	r3, [r7, #16]
   return(result);
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800583a:	627b      	str	r3, [r7, #36]	@ 0x24
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3308      	adds	r3, #8
 8005842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005844:	623a      	str	r2, [r7, #32]
 8005846:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	69f9      	ldr	r1, [r7, #28]
 800584a:	6a3a      	ldr	r2, [r7, #32]
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	61bb      	str	r3, [r7, #24]
   return(result);
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e5      	bne.n	8005824 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	e000      	b.n	800585e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800585c:	2302      	movs	r3, #2
  }
}
 800585e:	4618      	mov	r0, r3
 8005860:	3728      	adds	r7, #40	@ 0x28
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	08006d3f 	.word	0x08006d3f
 800586c:	08006dd9 	.word	0x08006dd9
 8005870:	08006f5f 	.word	0x08006f5f

08005874 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08a      	sub	sp, #40	@ 0x28
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	4613      	mov	r3, r2
 8005880:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005888:	2b20      	cmp	r3, #32
 800588a:	d137      	bne.n	80058fc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <HAL_UART_Receive_DMA+0x24>
 8005892:	88fb      	ldrh	r3, [r7, #6]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e030      	b.n	80058fe <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a18      	ldr	r2, [pc, #96]	@ (8005908 <HAL_UART_Receive_DMA+0x94>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d01f      	beq.n	80058ec <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d018      	beq.n	80058ec <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	e853 3f00 	ldrex	r3, [r3]
 80058c6:	613b      	str	r3, [r7, #16]
   return(result);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80058ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	623b      	str	r3, [r7, #32]
 80058da:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	69f9      	ldr	r1, [r7, #28]
 80058de:	6a3a      	ldr	r2, [r7, #32]
 80058e0:	e841 2300 	strex	r3, r2, [r1]
 80058e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e6      	bne.n	80058ba <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80058ec:	88fb      	ldrh	r3, [r7, #6]
 80058ee:	461a      	mov	r2, r3
 80058f0:	68b9      	ldr	r1, [r7, #8]
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f001 f8d6 	bl	8006aa4 <UART_Start_Receive_DMA>
 80058f8:	4603      	mov	r3, r0
 80058fa:	e000      	b.n	80058fe <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058fc:	2302      	movs	r3, #2
  }
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3728      	adds	r7, #40	@ 0x28
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	40008000 	.word	0x40008000

0800590c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b090      	sub	sp, #64	@ 0x40
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800591a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005922:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800592e:	2b80      	cmp	r3, #128	@ 0x80
 8005930:	d139      	bne.n	80059a6 <HAL_UART_DMAStop+0x9a>
 8005932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005934:	2b21      	cmp	r3, #33	@ 0x21
 8005936:	d136      	bne.n	80059a6 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3308      	adds	r3, #8
 800593e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	e853 3f00 	ldrex	r3, [r3]
 8005946:	61fb      	str	r3, [r7, #28]
   return(result);
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800594e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3308      	adds	r3, #8
 8005956:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005958:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800595a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800595e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005960:	e841 2300 	strex	r3, r2, [r1]
 8005964:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e5      	bne.n	8005938 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005970:	2b00      	cmp	r3, #0
 8005972:	d015      	beq.n	80059a0 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005978:	4618      	mov	r0, r3
 800597a:	f7fe fa44 	bl	8003e06 <HAL_DMA_Abort>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00d      	beq.n	80059a0 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005988:	4618      	mov	r0, r3
 800598a:	f7fe fbab 	bl	80040e4 <HAL_DMA_GetError>
 800598e:	4603      	mov	r3, r0
 8005990:	2b20      	cmp	r3, #32
 8005992:	d105      	bne.n	80059a0 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2210      	movs	r2, #16
 8005998:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e047      	b.n	8005a30 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f001 f925 	bl	8006bf0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b0:	2b40      	cmp	r3, #64	@ 0x40
 80059b2:	d13c      	bne.n	8005a2e <HAL_UART_DMAStop+0x122>
 80059b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b6:	2b22      	cmp	r3, #34	@ 0x22
 80059b8:	d139      	bne.n	8005a2e <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3308      	adds	r3, #8
 80059c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	e853 3f00 	ldrex	r3, [r3]
 80059c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3308      	adds	r3, #8
 80059d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059da:	61ba      	str	r2, [r7, #24]
 80059dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059de:	6979      	ldr	r1, [r7, #20]
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	e841 2300 	strex	r3, r2, [r1]
 80059e6:	613b      	str	r3, [r7, #16]
   return(result);
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1e5      	bne.n	80059ba <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d017      	beq.n	8005a28 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fe fa01 	bl	8003e06 <HAL_DMA_Abort>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00e      	beq.n	8005a28 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fe fb67 	bl	80040e4 <HAL_DMA_GetError>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b20      	cmp	r3, #32
 8005a1a:	d105      	bne.n	8005a28 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2210      	movs	r2, #16
 8005a20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e003      	b.n	8005a30 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f001 f922 	bl	8006c72 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3740      	adds	r7, #64	@ 0x40
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b0ba      	sub	sp, #232	@ 0xe8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005a62:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005a66:	4013      	ands	r3, r2
 8005a68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005a6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d11b      	bne.n	8005aac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a78:	f003 0320 	and.w	r3, r3, #32
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d015      	beq.n	8005aac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a84:	f003 0320 	and.w	r3, r3, #32
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d105      	bne.n	8005a98 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d009      	beq.n	8005aac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 8300 	beq.w	80060a2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	4798      	blx	r3
      }
      return;
 8005aaa:	e2fa      	b.n	80060a2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005aac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 8123 	beq.w	8005cfc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005ab6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005aba:	4b8d      	ldr	r3, [pc, #564]	@ (8005cf0 <HAL_UART_IRQHandler+0x2b8>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005ac2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005ac6:	4b8b      	ldr	r3, [pc, #556]	@ (8005cf4 <HAL_UART_IRQHandler+0x2bc>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 8116 	beq.w	8005cfc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d011      	beq.n	8005b00 <HAL_UART_IRQHandler+0xc8>
 8005adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00b      	beq.n	8005b00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2201      	movs	r2, #1
 8005aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af6:	f043 0201 	orr.w	r2, r3, #1
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d011      	beq.n	8005b30 <HAL_UART_IRQHandler+0xf8>
 8005b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00b      	beq.n	8005b30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b26:	f043 0204 	orr.w	r2, r3, #4
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d011      	beq.n	8005b60 <HAL_UART_IRQHandler+0x128>
 8005b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00b      	beq.n	8005b60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2204      	movs	r2, #4
 8005b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b56:	f043 0202 	orr.w	r2, r3, #2
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b64:	f003 0308 	and.w	r3, r3, #8
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d017      	beq.n	8005b9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b70:	f003 0320 	and.w	r3, r3, #32
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d105      	bne.n	8005b84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005b78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005b7c:	4b5c      	ldr	r3, [pc, #368]	@ (8005cf0 <HAL_UART_IRQHandler+0x2b8>)
 8005b7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00b      	beq.n	8005b9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2208      	movs	r2, #8
 8005b8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b92:	f043 0208 	orr.w	r2, r3, #8
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ba0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d012      	beq.n	8005bce <HAL_UART_IRQHandler+0x196>
 8005ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00c      	beq.n	8005bce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005bbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bc4:	f043 0220 	orr.w	r2, r3, #32
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 8266 	beq.w	80060a6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d013      	beq.n	8005c0e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bea:	f003 0320 	and.w	r3, r3, #32
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d105      	bne.n	8005bfe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d007      	beq.n	8005c0e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c22:	2b40      	cmp	r3, #64	@ 0x40
 8005c24:	d005      	beq.n	8005c32 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d054      	beq.n	8005cdc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f001 f81d 	bl	8006c72 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c42:	2b40      	cmp	r3, #64	@ 0x40
 8005c44:	d146      	bne.n	8005cd4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3308      	adds	r3, #8
 8005c4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c54:	e853 3f00 	ldrex	r3, [r3]
 8005c58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3308      	adds	r3, #8
 8005c6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c82:	e841 2300 	strex	r3, r2, [r1]
 8005c86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1d9      	bne.n	8005c46 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d017      	beq.n	8005ccc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ca2:	4a15      	ldr	r2, [pc, #84]	@ (8005cf8 <HAL_UART_IRQHandler+0x2c0>)
 8005ca4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fe f903 	bl	8003eb8 <HAL_DMA_Abort_IT>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d019      	beq.n	8005cec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005cc6:	4610      	mov	r0, r2
 8005cc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cca:	e00f      	b.n	8005cec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fa1d 	bl	800610c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd2:	e00b      	b.n	8005cec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fa19 	bl	800610c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cda:	e007      	b.n	8005cec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 fa15 	bl	800610c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005cea:	e1dc      	b.n	80060a6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cec:	bf00      	nop
    return;
 8005cee:	e1da      	b.n	80060a6 <HAL_UART_IRQHandler+0x66e>
 8005cf0:	10000001 	.word	0x10000001
 8005cf4:	04000120 	.word	0x04000120
 8005cf8:	08006fdf 	.word	0x08006fdf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	f040 8170 	bne.w	8005fe6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d0a:	f003 0310 	and.w	r3, r3, #16
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 8169 	beq.w	8005fe6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d18:	f003 0310 	and.w	r3, r3, #16
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 8162 	beq.w	8005fe6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2210      	movs	r2, #16
 8005d28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d34:	2b40      	cmp	r3, #64	@ 0x40
 8005d36:	f040 80d8 	bne.w	8005eea <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 80af 	beq.w	8005eb0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	f080 80a7 	bcs.w	8005eb0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0320 	and.w	r3, r3, #32
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f040 8087 	bne.w	8005e8e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	461a      	mov	r2, r3
 8005da6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005daa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005dae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005db6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005dba:	e841 2300 	strex	r3, r2, [r1]
 8005dbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1da      	bne.n	8005d80 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3308      	adds	r3, #8
 8005dd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005dd4:	e853 3f00 	ldrex	r3, [r3]
 8005dd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005dda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ddc:	f023 0301 	bic.w	r3, r3, #1
 8005de0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3308      	adds	r3, #8
 8005dea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005dee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005df2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005df6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005dfa:	e841 2300 	strex	r3, r2, [r1]
 8005dfe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005e00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1e1      	bne.n	8005dca <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3308      	adds	r3, #8
 8005e0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e10:	e853 3f00 	ldrex	r3, [r3]
 8005e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005e16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3308      	adds	r3, #8
 8005e26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005e2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005e30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005e32:	e841 2300 	strex	r3, r2, [r1]
 8005e36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005e38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1e3      	bne.n	8005e06 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e5c:	f023 0310 	bic.w	r3, r3, #16
 8005e60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e76:	e841 2300 	strex	r3, r2, [r1]
 8005e7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1e4      	bne.n	8005e4c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7fd ffbc 	bl	8003e06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2202      	movs	r2, #2
 8005e92:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f939 	bl	8006120 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005eae:	e0fc      	b.n	80060aa <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005eb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	f040 80f5 	bne.w	80060aa <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0320 	and.w	r3, r3, #32
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	f040 80eb 	bne.w	80060aa <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f91c 	bl	8006120 <HAL_UARTEx_RxEventCallback>
      return;
 8005ee8:	e0df      	b.n	80060aa <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 80d1 	beq.w	80060ae <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005f0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 80cc 	beq.w	80060ae <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f1e:	e853 3f00 	ldrex	r3, [r3]
 8005f22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f40:	e841 2300 	strex	r3, r2, [r1]
 8005f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e4      	bne.n	8005f16 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3308      	adds	r3, #8
 8005f52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	623b      	str	r3, [r7, #32]
   return(result);
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f62:	f023 0301 	bic.w	r3, r3, #1
 8005f66:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3308      	adds	r3, #8
 8005f70:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005f74:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f7c:	e841 2300 	strex	r3, r2, [r1]
 8005f80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1e1      	bne.n	8005f4c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	e853 3f00 	ldrex	r3, [r3]
 8005fa8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f023 0310 	bic.w	r3, r3, #16
 8005fb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005fbe:	61fb      	str	r3, [r7, #28]
 8005fc0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc2:	69b9      	ldr	r1, [r7, #24]
 8005fc4:	69fa      	ldr	r2, [r7, #28]
 8005fc6:	e841 2300 	strex	r3, r2, [r1]
 8005fca:	617b      	str	r3, [r7, #20]
   return(result);
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1e4      	bne.n	8005f9c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f89e 	bl	8006120 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fe4:	e063      	b.n	80060ae <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00e      	beq.n	8006010 <HAL_UART_IRQHandler+0x5d8>
 8005ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d008      	beq.n	8006010 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006006:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f001 f825 	bl	8007058 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800600e:	e051      	b.n	80060b4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006014:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006018:	2b00      	cmp	r3, #0
 800601a:	d014      	beq.n	8006046 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800601c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006024:	2b00      	cmp	r3, #0
 8006026:	d105      	bne.n	8006034 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800602c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d008      	beq.n	8006046 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006038:	2b00      	cmp	r3, #0
 800603a:	d03a      	beq.n	80060b2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	4798      	blx	r3
    }
    return;
 8006044:	e035      	b.n	80060b2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800604a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	d009      	beq.n	8006066 <HAL_UART_IRQHandler+0x62e>
 8006052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 ffcf 	bl	8007002 <UART_EndTransmit_IT>
    return;
 8006064:	e026      	b.n	80060b4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800606a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d009      	beq.n	8006086 <HAL_UART_IRQHandler+0x64e>
 8006072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006076:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fffe 	bl	8007080 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006084:	e016      	b.n	80060b4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800608a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d010      	beq.n	80060b4 <HAL_UART_IRQHandler+0x67c>
 8006092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006096:	2b00      	cmp	r3, #0
 8006098:	da0c      	bge.n	80060b4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 ffe6 	bl	800706c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060a0:	e008      	b.n	80060b4 <HAL_UART_IRQHandler+0x67c>
      return;
 80060a2:	bf00      	nop
 80060a4:	e006      	b.n	80060b4 <HAL_UART_IRQHandler+0x67c>
    return;
 80060a6:	bf00      	nop
 80060a8:	e004      	b.n	80060b4 <HAL_UART_IRQHandler+0x67c>
      return;
 80060aa:	bf00      	nop
 80060ac:	e002      	b.n	80060b4 <HAL_UART_IRQHandler+0x67c>
      return;
 80060ae:	bf00      	nop
 80060b0:	e000      	b.n	80060b4 <HAL_UART_IRQHandler+0x67c>
    return;
 80060b2:	bf00      	nop
  }
}
 80060b4:	37e8      	adds	r7, #232	@ 0xe8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop

080060bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	460b      	mov	r3, r1
 800612a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800613c:	b08c      	sub	sp, #48	@ 0x30
 800613e:	af00      	add	r7, sp, #0
 8006140:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006142:	2300      	movs	r3, #0
 8006144:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	431a      	orrs	r2, r3
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	431a      	orrs	r2, r3
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	69db      	ldr	r3, [r3, #28]
 800615c:	4313      	orrs	r3, r2
 800615e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	4baa      	ldr	r3, [pc, #680]	@ (8006410 <UART_SetConfig+0x2d8>)
 8006168:	4013      	ands	r3, r2
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	6812      	ldr	r2, [r2, #0]
 800616e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006170:	430b      	orrs	r3, r1
 8006172:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a9f      	ldr	r2, [pc, #636]	@ (8006414 <UART_SetConfig+0x2dc>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d004      	beq.n	80061a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061a0:	4313      	orrs	r3, r2
 80061a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80061ae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	6812      	ldr	r2, [r2, #0]
 80061b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061b8:	430b      	orrs	r3, r1
 80061ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c2:	f023 010f 	bic.w	r1, r3, #15
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a90      	ldr	r2, [pc, #576]	@ (8006418 <UART_SetConfig+0x2e0>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d125      	bne.n	8006228 <UART_SetConfig+0xf0>
 80061dc:	4b8f      	ldr	r3, [pc, #572]	@ (800641c <UART_SetConfig+0x2e4>)
 80061de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061e2:	f003 0303 	and.w	r3, r3, #3
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d81a      	bhi.n	8006220 <UART_SetConfig+0xe8>
 80061ea:	a201      	add	r2, pc, #4	@ (adr r2, 80061f0 <UART_SetConfig+0xb8>)
 80061ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f0:	08006201 	.word	0x08006201
 80061f4:	08006211 	.word	0x08006211
 80061f8:	08006209 	.word	0x08006209
 80061fc:	08006219 	.word	0x08006219
 8006200:	2301      	movs	r3, #1
 8006202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006206:	e116      	b.n	8006436 <UART_SetConfig+0x2fe>
 8006208:	2302      	movs	r3, #2
 800620a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800620e:	e112      	b.n	8006436 <UART_SetConfig+0x2fe>
 8006210:	2304      	movs	r3, #4
 8006212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006216:	e10e      	b.n	8006436 <UART_SetConfig+0x2fe>
 8006218:	2308      	movs	r3, #8
 800621a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800621e:	e10a      	b.n	8006436 <UART_SetConfig+0x2fe>
 8006220:	2310      	movs	r3, #16
 8006222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006226:	e106      	b.n	8006436 <UART_SetConfig+0x2fe>
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a7c      	ldr	r2, [pc, #496]	@ (8006420 <UART_SetConfig+0x2e8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d138      	bne.n	80062a4 <UART_SetConfig+0x16c>
 8006232:	4b7a      	ldr	r3, [pc, #488]	@ (800641c <UART_SetConfig+0x2e4>)
 8006234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006238:	f003 030c 	and.w	r3, r3, #12
 800623c:	2b0c      	cmp	r3, #12
 800623e:	d82d      	bhi.n	800629c <UART_SetConfig+0x164>
 8006240:	a201      	add	r2, pc, #4	@ (adr r2, 8006248 <UART_SetConfig+0x110>)
 8006242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006246:	bf00      	nop
 8006248:	0800627d 	.word	0x0800627d
 800624c:	0800629d 	.word	0x0800629d
 8006250:	0800629d 	.word	0x0800629d
 8006254:	0800629d 	.word	0x0800629d
 8006258:	0800628d 	.word	0x0800628d
 800625c:	0800629d 	.word	0x0800629d
 8006260:	0800629d 	.word	0x0800629d
 8006264:	0800629d 	.word	0x0800629d
 8006268:	08006285 	.word	0x08006285
 800626c:	0800629d 	.word	0x0800629d
 8006270:	0800629d 	.word	0x0800629d
 8006274:	0800629d 	.word	0x0800629d
 8006278:	08006295 	.word	0x08006295
 800627c:	2300      	movs	r3, #0
 800627e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006282:	e0d8      	b.n	8006436 <UART_SetConfig+0x2fe>
 8006284:	2302      	movs	r3, #2
 8006286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800628a:	e0d4      	b.n	8006436 <UART_SetConfig+0x2fe>
 800628c:	2304      	movs	r3, #4
 800628e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006292:	e0d0      	b.n	8006436 <UART_SetConfig+0x2fe>
 8006294:	2308      	movs	r3, #8
 8006296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800629a:	e0cc      	b.n	8006436 <UART_SetConfig+0x2fe>
 800629c:	2310      	movs	r3, #16
 800629e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062a2:	e0c8      	b.n	8006436 <UART_SetConfig+0x2fe>
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a5e      	ldr	r2, [pc, #376]	@ (8006424 <UART_SetConfig+0x2ec>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d125      	bne.n	80062fa <UART_SetConfig+0x1c2>
 80062ae:	4b5b      	ldr	r3, [pc, #364]	@ (800641c <UART_SetConfig+0x2e4>)
 80062b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062b4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80062b8:	2b30      	cmp	r3, #48	@ 0x30
 80062ba:	d016      	beq.n	80062ea <UART_SetConfig+0x1b2>
 80062bc:	2b30      	cmp	r3, #48	@ 0x30
 80062be:	d818      	bhi.n	80062f2 <UART_SetConfig+0x1ba>
 80062c0:	2b20      	cmp	r3, #32
 80062c2:	d00a      	beq.n	80062da <UART_SetConfig+0x1a2>
 80062c4:	2b20      	cmp	r3, #32
 80062c6:	d814      	bhi.n	80062f2 <UART_SetConfig+0x1ba>
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <UART_SetConfig+0x19a>
 80062cc:	2b10      	cmp	r3, #16
 80062ce:	d008      	beq.n	80062e2 <UART_SetConfig+0x1aa>
 80062d0:	e00f      	b.n	80062f2 <UART_SetConfig+0x1ba>
 80062d2:	2300      	movs	r3, #0
 80062d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062d8:	e0ad      	b.n	8006436 <UART_SetConfig+0x2fe>
 80062da:	2302      	movs	r3, #2
 80062dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062e0:	e0a9      	b.n	8006436 <UART_SetConfig+0x2fe>
 80062e2:	2304      	movs	r3, #4
 80062e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062e8:	e0a5      	b.n	8006436 <UART_SetConfig+0x2fe>
 80062ea:	2308      	movs	r3, #8
 80062ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062f0:	e0a1      	b.n	8006436 <UART_SetConfig+0x2fe>
 80062f2:	2310      	movs	r3, #16
 80062f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062f8:	e09d      	b.n	8006436 <UART_SetConfig+0x2fe>
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a4a      	ldr	r2, [pc, #296]	@ (8006428 <UART_SetConfig+0x2f0>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d125      	bne.n	8006350 <UART_SetConfig+0x218>
 8006304:	4b45      	ldr	r3, [pc, #276]	@ (800641c <UART_SetConfig+0x2e4>)
 8006306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800630a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800630e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006310:	d016      	beq.n	8006340 <UART_SetConfig+0x208>
 8006312:	2bc0      	cmp	r3, #192	@ 0xc0
 8006314:	d818      	bhi.n	8006348 <UART_SetConfig+0x210>
 8006316:	2b80      	cmp	r3, #128	@ 0x80
 8006318:	d00a      	beq.n	8006330 <UART_SetConfig+0x1f8>
 800631a:	2b80      	cmp	r3, #128	@ 0x80
 800631c:	d814      	bhi.n	8006348 <UART_SetConfig+0x210>
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <UART_SetConfig+0x1f0>
 8006322:	2b40      	cmp	r3, #64	@ 0x40
 8006324:	d008      	beq.n	8006338 <UART_SetConfig+0x200>
 8006326:	e00f      	b.n	8006348 <UART_SetConfig+0x210>
 8006328:	2300      	movs	r3, #0
 800632a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800632e:	e082      	b.n	8006436 <UART_SetConfig+0x2fe>
 8006330:	2302      	movs	r3, #2
 8006332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006336:	e07e      	b.n	8006436 <UART_SetConfig+0x2fe>
 8006338:	2304      	movs	r3, #4
 800633a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800633e:	e07a      	b.n	8006436 <UART_SetConfig+0x2fe>
 8006340:	2308      	movs	r3, #8
 8006342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006346:	e076      	b.n	8006436 <UART_SetConfig+0x2fe>
 8006348:	2310      	movs	r3, #16
 800634a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800634e:	e072      	b.n	8006436 <UART_SetConfig+0x2fe>
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a35      	ldr	r2, [pc, #212]	@ (800642c <UART_SetConfig+0x2f4>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d12a      	bne.n	80063b0 <UART_SetConfig+0x278>
 800635a:	4b30      	ldr	r3, [pc, #192]	@ (800641c <UART_SetConfig+0x2e4>)
 800635c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006360:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006364:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006368:	d01a      	beq.n	80063a0 <UART_SetConfig+0x268>
 800636a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800636e:	d81b      	bhi.n	80063a8 <UART_SetConfig+0x270>
 8006370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006374:	d00c      	beq.n	8006390 <UART_SetConfig+0x258>
 8006376:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800637a:	d815      	bhi.n	80063a8 <UART_SetConfig+0x270>
 800637c:	2b00      	cmp	r3, #0
 800637e:	d003      	beq.n	8006388 <UART_SetConfig+0x250>
 8006380:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006384:	d008      	beq.n	8006398 <UART_SetConfig+0x260>
 8006386:	e00f      	b.n	80063a8 <UART_SetConfig+0x270>
 8006388:	2300      	movs	r3, #0
 800638a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800638e:	e052      	b.n	8006436 <UART_SetConfig+0x2fe>
 8006390:	2302      	movs	r3, #2
 8006392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006396:	e04e      	b.n	8006436 <UART_SetConfig+0x2fe>
 8006398:	2304      	movs	r3, #4
 800639a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800639e:	e04a      	b.n	8006436 <UART_SetConfig+0x2fe>
 80063a0:	2308      	movs	r3, #8
 80063a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063a6:	e046      	b.n	8006436 <UART_SetConfig+0x2fe>
 80063a8:	2310      	movs	r3, #16
 80063aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ae:	e042      	b.n	8006436 <UART_SetConfig+0x2fe>
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a17      	ldr	r2, [pc, #92]	@ (8006414 <UART_SetConfig+0x2dc>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d13a      	bne.n	8006430 <UART_SetConfig+0x2f8>
 80063ba:	4b18      	ldr	r3, [pc, #96]	@ (800641c <UART_SetConfig+0x2e4>)
 80063bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80063c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063c8:	d01a      	beq.n	8006400 <UART_SetConfig+0x2c8>
 80063ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063ce:	d81b      	bhi.n	8006408 <UART_SetConfig+0x2d0>
 80063d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063d4:	d00c      	beq.n	80063f0 <UART_SetConfig+0x2b8>
 80063d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063da:	d815      	bhi.n	8006408 <UART_SetConfig+0x2d0>
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <UART_SetConfig+0x2b0>
 80063e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063e4:	d008      	beq.n	80063f8 <UART_SetConfig+0x2c0>
 80063e6:	e00f      	b.n	8006408 <UART_SetConfig+0x2d0>
 80063e8:	2300      	movs	r3, #0
 80063ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ee:	e022      	b.n	8006436 <UART_SetConfig+0x2fe>
 80063f0:	2302      	movs	r3, #2
 80063f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063f6:	e01e      	b.n	8006436 <UART_SetConfig+0x2fe>
 80063f8:	2304      	movs	r3, #4
 80063fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063fe:	e01a      	b.n	8006436 <UART_SetConfig+0x2fe>
 8006400:	2308      	movs	r3, #8
 8006402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006406:	e016      	b.n	8006436 <UART_SetConfig+0x2fe>
 8006408:	2310      	movs	r3, #16
 800640a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800640e:	e012      	b.n	8006436 <UART_SetConfig+0x2fe>
 8006410:	cfff69f3 	.word	0xcfff69f3
 8006414:	40008000 	.word	0x40008000
 8006418:	40013800 	.word	0x40013800
 800641c:	40021000 	.word	0x40021000
 8006420:	40004400 	.word	0x40004400
 8006424:	40004800 	.word	0x40004800
 8006428:	40004c00 	.word	0x40004c00
 800642c:	40005000 	.word	0x40005000
 8006430:	2310      	movs	r3, #16
 8006432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4aae      	ldr	r2, [pc, #696]	@ (80066f4 <UART_SetConfig+0x5bc>)
 800643c:	4293      	cmp	r3, r2
 800643e:	f040 8097 	bne.w	8006570 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006442:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006446:	2b08      	cmp	r3, #8
 8006448:	d823      	bhi.n	8006492 <UART_SetConfig+0x35a>
 800644a:	a201      	add	r2, pc, #4	@ (adr r2, 8006450 <UART_SetConfig+0x318>)
 800644c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006450:	08006475 	.word	0x08006475
 8006454:	08006493 	.word	0x08006493
 8006458:	0800647d 	.word	0x0800647d
 800645c:	08006493 	.word	0x08006493
 8006460:	08006483 	.word	0x08006483
 8006464:	08006493 	.word	0x08006493
 8006468:	08006493 	.word	0x08006493
 800646c:	08006493 	.word	0x08006493
 8006470:	0800648b 	.word	0x0800648b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006474:	f7fe fe6e 	bl	8005154 <HAL_RCC_GetPCLK1Freq>
 8006478:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800647a:	e010      	b.n	800649e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800647c:	4b9e      	ldr	r3, [pc, #632]	@ (80066f8 <UART_SetConfig+0x5c0>)
 800647e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006480:	e00d      	b.n	800649e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006482:	f7fe fdf9 	bl	8005078 <HAL_RCC_GetSysClockFreq>
 8006486:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006488:	e009      	b.n	800649e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800648a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800648e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006490:	e005      	b.n	800649e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800649c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800649e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 8130 	beq.w	8006706 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064aa:	4a94      	ldr	r2, [pc, #592]	@ (80066fc <UART_SetConfig+0x5c4>)
 80064ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064b0:	461a      	mov	r2, r3
 80064b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80064b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	685a      	ldr	r2, [r3, #4]
 80064be:	4613      	mov	r3, r2
 80064c0:	005b      	lsls	r3, r3, #1
 80064c2:	4413      	add	r3, r2
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d305      	bcc.n	80064d6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d903      	bls.n	80064de <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80064dc:	e113      	b.n	8006706 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	2200      	movs	r2, #0
 80064e2:	60bb      	str	r3, [r7, #8]
 80064e4:	60fa      	str	r2, [r7, #12]
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ea:	4a84      	ldr	r2, [pc, #528]	@ (80066fc <UART_SetConfig+0x5c4>)
 80064ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	2200      	movs	r2, #0
 80064f4:	603b      	str	r3, [r7, #0]
 80064f6:	607a      	str	r2, [r7, #4]
 80064f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006500:	f7fa f902 	bl	8000708 <__aeabi_uldivmod>
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	4610      	mov	r0, r2
 800650a:	4619      	mov	r1, r3
 800650c:	f04f 0200 	mov.w	r2, #0
 8006510:	f04f 0300 	mov.w	r3, #0
 8006514:	020b      	lsls	r3, r1, #8
 8006516:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800651a:	0202      	lsls	r2, r0, #8
 800651c:	6979      	ldr	r1, [r7, #20]
 800651e:	6849      	ldr	r1, [r1, #4]
 8006520:	0849      	lsrs	r1, r1, #1
 8006522:	2000      	movs	r0, #0
 8006524:	460c      	mov	r4, r1
 8006526:	4605      	mov	r5, r0
 8006528:	eb12 0804 	adds.w	r8, r2, r4
 800652c:	eb43 0905 	adc.w	r9, r3, r5
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	469a      	mov	sl, r3
 8006538:	4693      	mov	fp, r2
 800653a:	4652      	mov	r2, sl
 800653c:	465b      	mov	r3, fp
 800653e:	4640      	mov	r0, r8
 8006540:	4649      	mov	r1, r9
 8006542:	f7fa f8e1 	bl	8000708 <__aeabi_uldivmod>
 8006546:	4602      	mov	r2, r0
 8006548:	460b      	mov	r3, r1
 800654a:	4613      	mov	r3, r2
 800654c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006554:	d308      	bcc.n	8006568 <UART_SetConfig+0x430>
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800655c:	d204      	bcs.n	8006568 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6a3a      	ldr	r2, [r7, #32]
 8006564:	60da      	str	r2, [r3, #12]
 8006566:	e0ce      	b.n	8006706 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800656e:	e0ca      	b.n	8006706 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006578:	d166      	bne.n	8006648 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800657a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800657e:	2b08      	cmp	r3, #8
 8006580:	d827      	bhi.n	80065d2 <UART_SetConfig+0x49a>
 8006582:	a201      	add	r2, pc, #4	@ (adr r2, 8006588 <UART_SetConfig+0x450>)
 8006584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006588:	080065ad 	.word	0x080065ad
 800658c:	080065b5 	.word	0x080065b5
 8006590:	080065bd 	.word	0x080065bd
 8006594:	080065d3 	.word	0x080065d3
 8006598:	080065c3 	.word	0x080065c3
 800659c:	080065d3 	.word	0x080065d3
 80065a0:	080065d3 	.word	0x080065d3
 80065a4:	080065d3 	.word	0x080065d3
 80065a8:	080065cb 	.word	0x080065cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065ac:	f7fe fdd2 	bl	8005154 <HAL_RCC_GetPCLK1Freq>
 80065b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065b2:	e014      	b.n	80065de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065b4:	f7fe fde4 	bl	8005180 <HAL_RCC_GetPCLK2Freq>
 80065b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065ba:	e010      	b.n	80065de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065bc:	4b4e      	ldr	r3, [pc, #312]	@ (80066f8 <UART_SetConfig+0x5c0>)
 80065be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80065c0:	e00d      	b.n	80065de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065c2:	f7fe fd59 	bl	8005078 <HAL_RCC_GetSysClockFreq>
 80065c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065c8:	e009      	b.n	80065de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80065d0:	e005      	b.n	80065de <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80065dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 8090 	beq.w	8006706 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ea:	4a44      	ldr	r2, [pc, #272]	@ (80066fc <UART_SetConfig+0x5c4>)
 80065ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065f0:	461a      	mov	r2, r3
 80065f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80065f8:	005a      	lsls	r2, r3, #1
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	085b      	lsrs	r3, r3, #1
 8006600:	441a      	add	r2, r3
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	fbb2 f3f3 	udiv	r3, r2, r3
 800660a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	2b0f      	cmp	r3, #15
 8006610:	d916      	bls.n	8006640 <UART_SetConfig+0x508>
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006618:	d212      	bcs.n	8006640 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	b29b      	uxth	r3, r3
 800661e:	f023 030f 	bic.w	r3, r3, #15
 8006622:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	085b      	lsrs	r3, r3, #1
 8006628:	b29b      	uxth	r3, r3
 800662a:	f003 0307 	and.w	r3, r3, #7
 800662e:	b29a      	uxth	r2, r3
 8006630:	8bfb      	ldrh	r3, [r7, #30]
 8006632:	4313      	orrs	r3, r2
 8006634:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	8bfa      	ldrh	r2, [r7, #30]
 800663c:	60da      	str	r2, [r3, #12]
 800663e:	e062      	b.n	8006706 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006646:	e05e      	b.n	8006706 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006648:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800664c:	2b08      	cmp	r3, #8
 800664e:	d828      	bhi.n	80066a2 <UART_SetConfig+0x56a>
 8006650:	a201      	add	r2, pc, #4	@ (adr r2, 8006658 <UART_SetConfig+0x520>)
 8006652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006656:	bf00      	nop
 8006658:	0800667d 	.word	0x0800667d
 800665c:	08006685 	.word	0x08006685
 8006660:	0800668d 	.word	0x0800668d
 8006664:	080066a3 	.word	0x080066a3
 8006668:	08006693 	.word	0x08006693
 800666c:	080066a3 	.word	0x080066a3
 8006670:	080066a3 	.word	0x080066a3
 8006674:	080066a3 	.word	0x080066a3
 8006678:	0800669b 	.word	0x0800669b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800667c:	f7fe fd6a 	bl	8005154 <HAL_RCC_GetPCLK1Freq>
 8006680:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006682:	e014      	b.n	80066ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006684:	f7fe fd7c 	bl	8005180 <HAL_RCC_GetPCLK2Freq>
 8006688:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800668a:	e010      	b.n	80066ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800668c:	4b1a      	ldr	r3, [pc, #104]	@ (80066f8 <UART_SetConfig+0x5c0>)
 800668e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006690:	e00d      	b.n	80066ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006692:	f7fe fcf1 	bl	8005078 <HAL_RCC_GetSysClockFreq>
 8006696:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006698:	e009      	b.n	80066ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800669a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800669e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066a0:	e005      	b.n	80066ae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80066ac:	bf00      	nop
    }

    if (pclk != 0U)
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d028      	beq.n	8006706 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b8:	4a10      	ldr	r2, [pc, #64]	@ (80066fc <UART_SetConfig+0x5c4>)
 80066ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066be:	461a      	mov	r2, r3
 80066c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	085b      	lsrs	r3, r3, #1
 80066cc:	441a      	add	r2, r3
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	2b0f      	cmp	r3, #15
 80066dc:	d910      	bls.n	8006700 <UART_SetConfig+0x5c8>
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066e4:	d20c      	bcs.n	8006700 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	60da      	str	r2, [r3, #12]
 80066f0:	e009      	b.n	8006706 <UART_SetConfig+0x5ce>
 80066f2:	bf00      	nop
 80066f4:	40008000 	.word	0x40008000
 80066f8:	00f42400 	.word	0x00f42400
 80066fc:	0801882c 	.word	0x0801882c
      }
      else
      {
        ret = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2201      	movs	r2, #1
 800670a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2201      	movs	r2, #1
 8006712:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2200      	movs	r2, #0
 800671a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	2200      	movs	r2, #0
 8006720:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006722:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006726:	4618      	mov	r0, r3
 8006728:	3730      	adds	r7, #48	@ 0x30
 800672a:	46bd      	mov	sp, r7
 800672c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006730 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800673c:	f003 0308 	and.w	r3, r3, #8
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00a      	beq.n	800675a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00a      	beq.n	800677c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00a      	beq.n	800679e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a2:	f003 0304 	and.w	r3, r3, #4
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00a      	beq.n	80067c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	430a      	orrs	r2, r1
 80067be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c4:	f003 0310 	and.w	r3, r3, #16
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00a      	beq.n	80067e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e6:	f003 0320 	and.w	r3, r3, #32
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800680c:	2b00      	cmp	r3, #0
 800680e:	d01a      	beq.n	8006846 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800682a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800682e:	d10a      	bne.n	8006846 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	605a      	str	r2, [r3, #4]
  }
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b098      	sub	sp, #96	@ 0x60
 8006878:	af02      	add	r7, sp, #8
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006884:	f7fb fc08 	bl	8002098 <HAL_GetTick>
 8006888:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0308 	and.w	r3, r3, #8
 8006894:	2b08      	cmp	r3, #8
 8006896:	d12f      	bne.n	80068f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006898:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068a0:	2200      	movs	r2, #0
 80068a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f88e 	bl	80069c8 <UART_WaitOnFlagUntilTimeout>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d022      	beq.n	80068f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ba:	e853 3f00 	ldrex	r3, [r3]
 80068be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	461a      	mov	r2, r3
 80068ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80068d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068d8:	e841 2300 	strex	r3, r2, [r1]
 80068dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1e6      	bne.n	80068b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e063      	b.n	80069c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0304 	and.w	r3, r3, #4
 8006902:	2b04      	cmp	r3, #4
 8006904:	d149      	bne.n	800699a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006906:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800690e:	2200      	movs	r2, #0
 8006910:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f857 	bl	80069c8 <UART_WaitOnFlagUntilTimeout>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d03c      	beq.n	800699a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006928:	e853 3f00 	ldrex	r3, [r3]
 800692c:	623b      	str	r3, [r7, #32]
   return(result);
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006934:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	461a      	mov	r2, r3
 800693c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800693e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006940:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006942:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006946:	e841 2300 	strex	r3, r2, [r1]
 800694a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800694c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1e6      	bne.n	8006920 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	3308      	adds	r3, #8
 8006958:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	e853 3f00 	ldrex	r3, [r3]
 8006960:	60fb      	str	r3, [r7, #12]
   return(result);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f023 0301 	bic.w	r3, r3, #1
 8006968:	64bb      	str	r3, [r7, #72]	@ 0x48
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3308      	adds	r3, #8
 8006970:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006972:	61fa      	str	r2, [r7, #28]
 8006974:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	69b9      	ldr	r1, [r7, #24]
 8006978:	69fa      	ldr	r2, [r7, #28]
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	617b      	str	r3, [r7, #20]
   return(result);
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e5      	bne.n	8006952 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2220      	movs	r2, #32
 800698a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e012      	b.n	80069c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2220      	movs	r2, #32
 800699e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3758      	adds	r7, #88	@ 0x58
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	603b      	str	r3, [r7, #0]
 80069d4:	4613      	mov	r3, r2
 80069d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069d8:	e04f      	b.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069e0:	d04b      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e2:	f7fb fb59 	bl	8002098 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d302      	bcc.n	80069f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e04e      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0304 	and.w	r3, r3, #4
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d037      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b80      	cmp	r3, #128	@ 0x80
 8006a0e:	d034      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b40      	cmp	r3, #64	@ 0x40
 8006a14:	d031      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	f003 0308 	and.w	r3, r3, #8
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d110      	bne.n	8006a46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2208      	movs	r2, #8
 8006a2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 f920 	bl	8006c72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2208      	movs	r2, #8
 8006a36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e029      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a54:	d111      	bne.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 f906 	bl	8006c72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e00f      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69da      	ldr	r2, [r3, #28]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	4013      	ands	r3, r2
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	bf0c      	ite	eq
 8006a8a:	2301      	moveq	r3, #1
 8006a8c:	2300      	movne	r3, #0
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	461a      	mov	r2, r3
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d0a0      	beq.n	80069da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
	...

08006aa4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b096      	sub	sp, #88	@ 0x58
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	88fa      	ldrh	r2, [r7, #6]
 8006abc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2222      	movs	r2, #34	@ 0x22
 8006acc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d02d      	beq.n	8006b36 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ae0:	4a40      	ldr	r2, [pc, #256]	@ (8006be4 <UART_Start_Receive_DMA+0x140>)
 8006ae2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aea:	4a3f      	ldr	r2, [pc, #252]	@ (8006be8 <UART_Start_Receive_DMA+0x144>)
 8006aec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006af4:	4a3d      	ldr	r2, [pc, #244]	@ (8006bec <UART_Start_Receive_DMA+0x148>)
 8006af6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006afe:	2200      	movs	r2, #0
 8006b00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3324      	adds	r3, #36	@ 0x24
 8006b0e:	4619      	mov	r1, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b14:	461a      	mov	r2, r3
 8006b16:	88fb      	ldrh	r3, [r7, #6]
 8006b18:	f7fd f8fa 	bl	8003d10 <HAL_DMA_Start_IT>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d009      	beq.n	8006b36 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2210      	movs	r2, #16
 8006b26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e051      	b.n	8006bda <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d018      	beq.n	8006b70 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b46:	e853 3f00 	ldrex	r3, [r3]
 8006b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b52:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b5e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b60:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006b62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b64:	e841 2300 	strex	r3, r2, [r1]
 8006b68:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006b6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1e6      	bne.n	8006b3e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3308      	adds	r3, #8
 8006b76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7a:	e853 3f00 	ldrex	r3, [r3]
 8006b7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b82:	f043 0301 	orr.w	r3, r3, #1
 8006b86:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	3308      	adds	r3, #8
 8006b8e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006b90:	637a      	str	r2, [r7, #52]	@ 0x34
 8006b92:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b94:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b98:	e841 2300 	strex	r3, r2, [r1]
 8006b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1e5      	bne.n	8006b70 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3308      	adds	r3, #8
 8006baa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3308      	adds	r3, #8
 8006bc2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006bc4:	623a      	str	r2, [r7, #32]
 8006bc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc8:	69f9      	ldr	r1, [r7, #28]
 8006bca:	6a3a      	ldr	r2, [r7, #32]
 8006bcc:	e841 2300 	strex	r3, r2, [r1]
 8006bd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1e5      	bne.n	8006ba4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3758      	adds	r7, #88	@ 0x58
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	08006df5 	.word	0x08006df5
 8006be8:	08006f21 	.word	0x08006f21
 8006bec:	08006f5f 	.word	0x08006f5f

08006bf0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b08f      	sub	sp, #60	@ 0x3c
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	461a      	mov	r2, r3
 8006c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c18:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e6      	bne.n	8006bf8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3308      	adds	r3, #8
 8006c30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006c40:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3308      	adds	r3, #8
 8006c48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c4a:	61ba      	str	r2, [r7, #24]
 8006c4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4e:	6979      	ldr	r1, [r7, #20]
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	e841 2300 	strex	r3, r2, [r1]
 8006c56:	613b      	str	r3, [r7, #16]
   return(result);
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1e5      	bne.n	8006c2a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2220      	movs	r2, #32
 8006c62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006c66:	bf00      	nop
 8006c68:	373c      	adds	r7, #60	@ 0x3c
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b095      	sub	sp, #84	@ 0x54
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c82:	e853 3f00 	ldrex	r3, [r3]
 8006c86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	461a      	mov	r2, r3
 8006c96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c98:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c9a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ca0:	e841 2300 	strex	r3, r2, [r1]
 8006ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e6      	bne.n	8006c7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	e853 3f00 	ldrex	r3, [r3]
 8006cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cc2:	f023 0301 	bic.w	r3, r3, #1
 8006cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3308      	adds	r3, #8
 8006cce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cd8:	e841 2300 	strex	r3, r2, [r1]
 8006cdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1e3      	bne.n	8006cac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d118      	bne.n	8006d1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	e853 3f00 	ldrex	r3, [r3]
 8006cf8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f023 0310 	bic.w	r3, r3, #16
 8006d00:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	461a      	mov	r2, r3
 8006d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d0a:	61bb      	str	r3, [r7, #24]
 8006d0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0e:	6979      	ldr	r1, [r7, #20]
 8006d10:	69ba      	ldr	r2, [r7, #24]
 8006d12:	e841 2300 	strex	r3, r2, [r1]
 8006d16:	613b      	str	r3, [r7, #16]
   return(result);
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1e6      	bne.n	8006cec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2220      	movs	r2, #32
 8006d22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006d32:	bf00      	nop
 8006d34:	3754      	adds	r7, #84	@ 0x54
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b090      	sub	sp, #64	@ 0x40
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0320 	and.w	r3, r3, #32
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d137      	bne.n	8006dca <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	3308      	adds	r3, #8
 8006d68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6c:	e853 3f00 	ldrex	r3, [r3]
 8006d70:	623b      	str	r3, [r7, #32]
   return(result);
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	3308      	adds	r3, #8
 8006d80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d82:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d8a:	e841 2300 	strex	r3, r2, [r1]
 8006d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1e5      	bne.n	8006d62 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	e853 3f00 	ldrex	r3, [r3]
 8006da2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006daa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	461a      	mov	r2, r3
 8006db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db4:	61fb      	str	r3, [r7, #28]
 8006db6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db8:	69b9      	ldr	r1, [r7, #24]
 8006dba:	69fa      	ldr	r2, [r7, #28]
 8006dbc:	e841 2300 	strex	r3, r2, [r1]
 8006dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1e6      	bne.n	8006d96 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006dc8:	e002      	b.n	8006dd0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006dca:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006dcc:	f7ff f976 	bl	80060bc <HAL_UART_TxCpltCallback>
}
 8006dd0:	bf00      	nop
 8006dd2:	3740      	adds	r7, #64	@ 0x40
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f7ff f972 	bl	80060d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dec:	bf00      	nop
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b09c      	sub	sp, #112	@ 0x70
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e00:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0320 	and.w	r3, r3, #32
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d171      	bne.n	8006ef4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006e10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e12:	2200      	movs	r2, #0
 8006e14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e20:	e853 3f00 	ldrex	r3, [r3]
 8006e24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	461a      	mov	r2, r3
 8006e34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e38:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e3e:	e841 2300 	strex	r3, r2, [r1]
 8006e42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1e6      	bne.n	8006e18 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	3308      	adds	r3, #8
 8006e50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e54:	e853 3f00 	ldrex	r3, [r3]
 8006e58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e5c:	f023 0301 	bic.w	r3, r3, #1
 8006e60:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3308      	adds	r3, #8
 8006e68:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006e6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006e6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e72:	e841 2300 	strex	r3, r2, [r1]
 8006e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1e5      	bne.n	8006e4a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	3308      	adds	r3, #8
 8006e84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e88:	e853 3f00 	ldrex	r3, [r3]
 8006e8c:	623b      	str	r3, [r7, #32]
   return(result);
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e94:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3308      	adds	r3, #8
 8006e9c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006e9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ea6:	e841 2300 	strex	r3, r2, [r1]
 8006eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1e5      	bne.n	8006e7e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006eb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ebc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d118      	bne.n	8006ef4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	e853 3f00 	ldrex	r3, [r3]
 8006ece:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f023 0310 	bic.w	r3, r3, #16
 8006ed6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ed8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	461a      	mov	r2, r3
 8006ede:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ee0:	61fb      	str	r3, [r7, #28]
 8006ee2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee4:	69b9      	ldr	r1, [r7, #24]
 8006ee6:	69fa      	ldr	r2, [r7, #28]
 8006ee8:	e841 2300 	strex	r3, r2, [r1]
 8006eec:	617b      	str	r3, [r7, #20]
   return(result);
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1e6      	bne.n	8006ec2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ef4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006efa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006efc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d107      	bne.n	8006f12 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f0c:	f7ff f908 	bl	8006120 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f10:	e002      	b.n	8006f18 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006f12:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f14:	f7ff f8e6 	bl	80060e4 <HAL_UART_RxCpltCallback>
}
 8006f18:	bf00      	nop
 8006f1a:	3770      	adds	r7, #112	@ 0x70
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f2c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2201      	movs	r2, #1
 8006f32:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d109      	bne.n	8006f50 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f42:	085b      	lsrs	r3, r3, #1
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	4619      	mov	r1, r3
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f7ff f8e9 	bl	8006120 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f4e:	e002      	b.n	8006f56 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f7ff f8d1 	bl	80060f8 <HAL_UART_RxHalfCpltCallback>
}
 8006f56:	bf00      	nop
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b086      	sub	sp, #24
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f6a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f72:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f86:	2b80      	cmp	r3, #128	@ 0x80
 8006f88:	d109      	bne.n	8006f9e <UART_DMAError+0x40>
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	2b21      	cmp	r3, #33	@ 0x21
 8006f8e:	d106      	bne.n	8006f9e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006f98:	6978      	ldr	r0, [r7, #20]
 8006f9a:	f7ff fe29 	bl	8006bf0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fa8:	2b40      	cmp	r3, #64	@ 0x40
 8006faa:	d109      	bne.n	8006fc0 <UART_DMAError+0x62>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2b22      	cmp	r3, #34	@ 0x22
 8006fb0:	d106      	bne.n	8006fc0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006fba:	6978      	ldr	r0, [r7, #20]
 8006fbc:	f7ff fe59 	bl	8006c72 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fc6:	f043 0210 	orr.w	r2, r3, #16
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fd0:	6978      	ldr	r0, [r7, #20]
 8006fd2:	f7ff f89b 	bl	800610c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fd6:	bf00      	nop
 8006fd8:	3718      	adds	r7, #24
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f7ff f889 	bl	800610c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ffa:	bf00      	nop
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b088      	sub	sp, #32
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	e853 3f00 	ldrex	r3, [r3]
 8007016:	60bb      	str	r3, [r7, #8]
   return(result);
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800701e:	61fb      	str	r3, [r7, #28]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	461a      	mov	r2, r3
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	61bb      	str	r3, [r7, #24]
 800702a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702c:	6979      	ldr	r1, [r7, #20]
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	e841 2300 	strex	r3, r2, [r1]
 8007034:	613b      	str	r3, [r7, #16]
   return(result);
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1e6      	bne.n	800700a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2220      	movs	r2, #32
 8007040:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7ff f836 	bl	80060bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007050:	bf00      	nop
 8007052:	3720      	adds	r7, #32
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d101      	bne.n	80070aa <HAL_UARTEx_DisableFifoMode+0x16>
 80070a6:	2302      	movs	r3, #2
 80070a8:	e027      	b.n	80070fa <HAL_UARTEx_DisableFifoMode+0x66>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2224      	movs	r2, #36	@ 0x24
 80070b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 0201 	bic.w	r2, r2, #1
 80070d0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80070d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b084      	sub	sp, #16
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007116:	2b01      	cmp	r3, #1
 8007118:	d101      	bne.n	800711e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800711a:	2302      	movs	r3, #2
 800711c:	e02d      	b.n	800717a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2224      	movs	r2, #36	@ 0x24
 800712a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 0201 	bic.w	r2, r2, #1
 8007144:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	430a      	orrs	r2, r1
 8007158:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f850 	bl	8007200 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2220      	movs	r2, #32
 800716c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b084      	sub	sp, #16
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007192:	2b01      	cmp	r3, #1
 8007194:	d101      	bne.n	800719a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007196:	2302      	movs	r3, #2
 8007198:	e02d      	b.n	80071f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2224      	movs	r2, #36	@ 0x24
 80071a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 0201 	bic.w	r2, r2, #1
 80071c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	683a      	ldr	r2, [r7, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f812 	bl	8007200 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2220      	movs	r2, #32
 80071e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
	...

08007200 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800720c:	2b00      	cmp	r3, #0
 800720e:	d108      	bne.n	8007222 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007220:	e031      	b.n	8007286 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007222:	2308      	movs	r3, #8
 8007224:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007226:	2308      	movs	r3, #8
 8007228:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	0e5b      	lsrs	r3, r3, #25
 8007232:	b2db      	uxtb	r3, r3
 8007234:	f003 0307 	and.w	r3, r3, #7
 8007238:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	0f5b      	lsrs	r3, r3, #29
 8007242:	b2db      	uxtb	r3, r3
 8007244:	f003 0307 	and.w	r3, r3, #7
 8007248:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800724a:	7bbb      	ldrb	r3, [r7, #14]
 800724c:	7b3a      	ldrb	r2, [r7, #12]
 800724e:	4911      	ldr	r1, [pc, #68]	@ (8007294 <UARTEx_SetNbDataToProcess+0x94>)
 8007250:	5c8a      	ldrb	r2, [r1, r2]
 8007252:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007256:	7b3a      	ldrb	r2, [r7, #12]
 8007258:	490f      	ldr	r1, [pc, #60]	@ (8007298 <UARTEx_SetNbDataToProcess+0x98>)
 800725a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800725c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007260:	b29a      	uxth	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007268:	7bfb      	ldrb	r3, [r7, #15]
 800726a:	7b7a      	ldrb	r2, [r7, #13]
 800726c:	4909      	ldr	r1, [pc, #36]	@ (8007294 <UARTEx_SetNbDataToProcess+0x94>)
 800726e:	5c8a      	ldrb	r2, [r1, r2]
 8007270:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007274:	7b7a      	ldrb	r2, [r7, #13]
 8007276:	4908      	ldr	r1, [pc, #32]	@ (8007298 <UARTEx_SetNbDataToProcess+0x98>)
 8007278:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800727a:	fb93 f3f2 	sdiv	r3, r3, r2
 800727e:	b29a      	uxth	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007286:	bf00      	nop
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	08018844 	.word	0x08018844
 8007298:	0801884c 	.word	0x0801884c

0800729c <__NVIC_SetPriority>:
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	4603      	mov	r3, r0
 80072a4:	6039      	str	r1, [r7, #0]
 80072a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	db0a      	blt.n	80072c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	490c      	ldr	r1, [pc, #48]	@ (80072e8 <__NVIC_SetPriority+0x4c>)
 80072b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072ba:	0112      	lsls	r2, r2, #4
 80072bc:	b2d2      	uxtb	r2, r2
 80072be:	440b      	add	r3, r1
 80072c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80072c4:	e00a      	b.n	80072dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	4908      	ldr	r1, [pc, #32]	@ (80072ec <__NVIC_SetPriority+0x50>)
 80072cc:	79fb      	ldrb	r3, [r7, #7]
 80072ce:	f003 030f 	and.w	r3, r3, #15
 80072d2:	3b04      	subs	r3, #4
 80072d4:	0112      	lsls	r2, r2, #4
 80072d6:	b2d2      	uxtb	r2, r2
 80072d8:	440b      	add	r3, r1
 80072da:	761a      	strb	r2, [r3, #24]
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	e000e100 	.word	0xe000e100
 80072ec:	e000ed00 	.word	0xe000ed00

080072f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80072f0:	b580      	push	{r7, lr}
 80072f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80072f4:	2100      	movs	r1, #0
 80072f6:	f06f 0004 	mvn.w	r0, #4
 80072fa:	f7ff ffcf 	bl	800729c <__NVIC_SetPriority>
#endif
}
 80072fe:	bf00      	nop
 8007300:	bd80      	pop	{r7, pc}
	...

08007304 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800730a:	f3ef 8305 	mrs	r3, IPSR
 800730e:	603b      	str	r3, [r7, #0]
  return(result);
 8007310:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007316:	f06f 0305 	mvn.w	r3, #5
 800731a:	607b      	str	r3, [r7, #4]
 800731c:	e00c      	b.n	8007338 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800731e:	4b0a      	ldr	r3, [pc, #40]	@ (8007348 <osKernelInitialize+0x44>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d105      	bne.n	8007332 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007326:	4b08      	ldr	r3, [pc, #32]	@ (8007348 <osKernelInitialize+0x44>)
 8007328:	2201      	movs	r2, #1
 800732a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800732c:	2300      	movs	r3, #0
 800732e:	607b      	str	r3, [r7, #4]
 8007330:	e002      	b.n	8007338 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007332:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007336:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007338:	687b      	ldr	r3, [r7, #4]
}
 800733a:	4618      	mov	r0, r3
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	20004bfc 	.word	0x20004bfc

0800734c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007352:	f3ef 8305 	mrs	r3, IPSR
 8007356:	603b      	str	r3, [r7, #0]
  return(result);
 8007358:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <osKernelStart+0x1a>
    stat = osErrorISR;
 800735e:	f06f 0305 	mvn.w	r3, #5
 8007362:	607b      	str	r3, [r7, #4]
 8007364:	e010      	b.n	8007388 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007366:	4b0b      	ldr	r3, [pc, #44]	@ (8007394 <osKernelStart+0x48>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d109      	bne.n	8007382 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800736e:	f7ff ffbf 	bl	80072f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007372:	4b08      	ldr	r3, [pc, #32]	@ (8007394 <osKernelStart+0x48>)
 8007374:	2202      	movs	r2, #2
 8007376:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007378:	f001 f87a 	bl	8008470 <vTaskStartScheduler>
      stat = osOK;
 800737c:	2300      	movs	r3, #0
 800737e:	607b      	str	r3, [r7, #4]
 8007380:	e002      	b.n	8007388 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007382:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007386:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007388:	687b      	ldr	r3, [r7, #4]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	20004bfc 	.word	0x20004bfc

08007398 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007398:	b580      	push	{r7, lr}
 800739a:	b08e      	sub	sp, #56	@ 0x38
 800739c:	af04      	add	r7, sp, #16
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80073a4:	2300      	movs	r3, #0
 80073a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073a8:	f3ef 8305 	mrs	r3, IPSR
 80073ac:	617b      	str	r3, [r7, #20]
  return(result);
 80073ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d17e      	bne.n	80074b2 <osThreadNew+0x11a>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d07b      	beq.n	80074b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80073ba:	2380      	movs	r3, #128	@ 0x80
 80073bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80073be:	2318      	movs	r3, #24
 80073c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80073c2:	2300      	movs	r3, #0
 80073c4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80073c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d045      	beq.n	800745e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d002      	beq.n	80073e0 <osThreadNew+0x48>
        name = attr->name;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d008      	beq.n	8007406 <osThreadNew+0x6e>
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	2b38      	cmp	r3, #56	@ 0x38
 80073f8:	d805      	bhi.n	8007406 <osThreadNew+0x6e>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <osThreadNew+0x72>
        return (NULL);
 8007406:	2300      	movs	r3, #0
 8007408:	e054      	b.n	80074b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	089b      	lsrs	r3, r3, #2
 8007418:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00e      	beq.n	8007440 <osThreadNew+0xa8>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	2b5b      	cmp	r3, #91	@ 0x5b
 8007428:	d90a      	bls.n	8007440 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800742e:	2b00      	cmp	r3, #0
 8007430:	d006      	beq.n	8007440 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <osThreadNew+0xa8>
        mem = 1;
 800743a:	2301      	movs	r3, #1
 800743c:	61bb      	str	r3, [r7, #24]
 800743e:	e010      	b.n	8007462 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10c      	bne.n	8007462 <osThreadNew+0xca>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d108      	bne.n	8007462 <osThreadNew+0xca>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d104      	bne.n	8007462 <osThreadNew+0xca>
          mem = 0;
 8007458:	2300      	movs	r3, #0
 800745a:	61bb      	str	r3, [r7, #24]
 800745c:	e001      	b.n	8007462 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800745e:	2300      	movs	r3, #0
 8007460:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d110      	bne.n	800748a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007470:	9202      	str	r2, [sp, #8]
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	6a3a      	ldr	r2, [r7, #32]
 800747c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 fe1a 	bl	80080b8 <xTaskCreateStatic>
 8007484:	4603      	mov	r3, r0
 8007486:	613b      	str	r3, [r7, #16]
 8007488:	e013      	b.n	80074b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d110      	bne.n	80074b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	b29a      	uxth	r2, r3
 8007494:	f107 0310 	add.w	r3, r7, #16
 8007498:	9301      	str	r3, [sp, #4]
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f000 fe68 	bl	8008178 <xTaskCreate>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d001      	beq.n	80074b2 <osThreadNew+0x11a>
            hTask = NULL;
 80074ae:	2300      	movs	r3, #0
 80074b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80074b2:	693b      	ldr	r3, [r7, #16]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3728      	adds	r7, #40	@ 0x28
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074c4:	f3ef 8305 	mrs	r3, IPSR
 80074c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80074ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d003      	beq.n	80074d8 <osDelay+0x1c>
    stat = osErrorISR;
 80074d0:	f06f 0305 	mvn.w	r3, #5
 80074d4:	60fb      	str	r3, [r7, #12]
 80074d6:	e007      	b.n	80074e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80074d8:	2300      	movs	r3, #0
 80074da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 ff8e 	bl	8008404 <vTaskDelay>
    }
  }

  return (stat);
 80074e8:	68fb      	ldr	r3, [r7, #12]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	4a07      	ldr	r2, [pc, #28]	@ (8007520 <vApplicationGetIdleTaskMemory+0x2c>)
 8007504:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	4a06      	ldr	r2, [pc, #24]	@ (8007524 <vApplicationGetIdleTaskMemory+0x30>)
 800750a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2280      	movs	r2, #128	@ 0x80
 8007510:	601a      	str	r2, [r3, #0]
}
 8007512:	bf00      	nop
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	20004c00 	.word	0x20004c00
 8007524:	20004c5c 	.word	0x20004c5c

08007528 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	4a07      	ldr	r2, [pc, #28]	@ (8007554 <vApplicationGetTimerTaskMemory+0x2c>)
 8007538:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	4a06      	ldr	r2, [pc, #24]	@ (8007558 <vApplicationGetTimerTaskMemory+0x30>)
 800753e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007546:	601a      	str	r2, [r3, #0]
}
 8007548:	bf00      	nop
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	20004e5c 	.word	0x20004e5c
 8007558:	20004eb8 	.word	0x20004eb8

0800755c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f103 0208 	add.w	r2, r3, #8
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007574:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f103 0208 	add.w	r2, r3, #8
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f103 0208 	add.w	r2, r3, #8
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80075aa:	bf00      	nop
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075b6:	b480      	push	{r7}
 80075b8:	b085      	sub	sp, #20
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	689a      	ldr	r2, [r3, #8]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	1c5a      	adds	r2, r3, #1
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	601a      	str	r2, [r3, #0]
}
 80075f2:	bf00      	nop
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075fe:	b480      	push	{r7}
 8007600:	b085      	sub	sp, #20
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007614:	d103      	bne.n	800761e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	e00c      	b.n	8007638 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3308      	adds	r3, #8
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	e002      	b.n	800762c <vListInsert+0x2e>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	60fb      	str	r3, [r7, #12]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	429a      	cmp	r2, r3
 8007636:	d2f6      	bcs.n	8007626 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	683a      	ldr	r2, [r7, #0]
 8007652:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	1c5a      	adds	r2, r3, #1
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	601a      	str	r2, [r3, #0]
}
 8007664:	bf00      	nop
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	6892      	ldr	r2, [r2, #8]
 8007686:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	6852      	ldr	r2, [r2, #4]
 8007690:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	429a      	cmp	r2, r3
 800769a:	d103      	bne.n	80076a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	689a      	ldr	r2, [r3, #8]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	1e5a      	subs	r2, r3, #1
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10b      	bne.n	80076f0 <xQueueGenericReset+0x2c>
	__asm volatile
 80076d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	60bb      	str	r3, [r7, #8]
}
 80076ea:	bf00      	nop
 80076ec:	bf00      	nop
 80076ee:	e7fd      	b.n	80076ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80076f0:	f002 f8a2 	bl	8009838 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076fc:	68f9      	ldr	r1, [r7, #12]
 80076fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007700:	fb01 f303 	mul.w	r3, r1, r3
 8007704:	441a      	add	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007720:	3b01      	subs	r3, #1
 8007722:	68f9      	ldr	r1, [r7, #12]
 8007724:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007726:	fb01 f303 	mul.w	r3, r1, r3
 800772a:	441a      	add	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	22ff      	movs	r2, #255	@ 0xff
 8007734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	22ff      	movs	r2, #255	@ 0xff
 800773c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d114      	bne.n	8007770 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d01a      	beq.n	8007784 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3310      	adds	r3, #16
 8007752:	4618      	mov	r0, r3
 8007754:	f001 f91a 	bl	800898c <xTaskRemoveFromEventList>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d012      	beq.n	8007784 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800775e:	4b0d      	ldr	r3, [pc, #52]	@ (8007794 <xQueueGenericReset+0xd0>)
 8007760:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	e009      	b.n	8007784 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3310      	adds	r3, #16
 8007774:	4618      	mov	r0, r3
 8007776:	f7ff fef1 	bl	800755c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3324      	adds	r3, #36	@ 0x24
 800777e:	4618      	mov	r0, r3
 8007780:	f7ff feec 	bl	800755c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007784:	f002 f88a 	bl	800989c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007788:	2301      	movs	r3, #1
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	e000ed04 	.word	0xe000ed04

08007798 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007798:	b580      	push	{r7, lr}
 800779a:	b08e      	sub	sp, #56	@ 0x38
 800779c:	af02      	add	r7, sp, #8
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
 80077a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10b      	bne.n	80077c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80077ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80077be:	bf00      	nop
 80077c0:	bf00      	nop
 80077c2:	e7fd      	b.n	80077c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10b      	bne.n	80077e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80077ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ce:	f383 8811 	msr	BASEPRI, r3
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	f3bf 8f4f 	dsb	sy
 80077da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80077dc:	bf00      	nop
 80077de:	bf00      	nop
 80077e0:	e7fd      	b.n	80077de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <xQueueGenericCreateStatic+0x56>
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <xQueueGenericCreateStatic+0x5a>
 80077ee:	2301      	movs	r3, #1
 80077f0:	e000      	b.n	80077f4 <xQueueGenericCreateStatic+0x5c>
 80077f2:	2300      	movs	r3, #0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10b      	bne.n	8007810 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80077f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fc:	f383 8811 	msr	BASEPRI, r3
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	623b      	str	r3, [r7, #32]
}
 800780a:	bf00      	nop
 800780c:	bf00      	nop
 800780e:	e7fd      	b.n	800780c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d102      	bne.n	800781c <xQueueGenericCreateStatic+0x84>
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d101      	bne.n	8007820 <xQueueGenericCreateStatic+0x88>
 800781c:	2301      	movs	r3, #1
 800781e:	e000      	b.n	8007822 <xQueueGenericCreateStatic+0x8a>
 8007820:	2300      	movs	r3, #0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10b      	bne.n	800783e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	61fb      	str	r3, [r7, #28]
}
 8007838:	bf00      	nop
 800783a:	bf00      	nop
 800783c:	e7fd      	b.n	800783a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800783e:	2350      	movs	r3, #80	@ 0x50
 8007840:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	2b50      	cmp	r3, #80	@ 0x50
 8007846:	d00b      	beq.n	8007860 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784c:	f383 8811 	msr	BASEPRI, r3
 8007850:	f3bf 8f6f 	isb	sy
 8007854:	f3bf 8f4f 	dsb	sy
 8007858:	61bb      	str	r3, [r7, #24]
}
 800785a:	bf00      	nop
 800785c:	bf00      	nop
 800785e:	e7fd      	b.n	800785c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007860:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00d      	beq.n	8007888 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800786c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007874:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787a:	9300      	str	r3, [sp, #0]
 800787c:	4613      	mov	r3, r2
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	68b9      	ldr	r1, [r7, #8]
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f000 f805 	bl	8007892 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800788a:	4618      	mov	r0, r3
 800788c:	3730      	adds	r7, #48	@ 0x30
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	60b9      	str	r1, [r7, #8]
 800789c:	607a      	str	r2, [r7, #4]
 800789e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d103      	bne.n	80078ae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	e002      	b.n	80078b4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80078c0:	2101      	movs	r1, #1
 80078c2:	69b8      	ldr	r0, [r7, #24]
 80078c4:	f7ff fefe 	bl	80076c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	78fa      	ldrb	r2, [r7, #3]
 80078cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80078d0:	bf00      	nop
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08e      	sub	sp, #56	@ 0x38
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
 80078e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80078e6:	2300      	movs	r3, #0
 80078e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80078ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10b      	bne.n	800790c <xQueueGenericSend+0x34>
	__asm volatile
 80078f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007906:	bf00      	nop
 8007908:	bf00      	nop
 800790a:	e7fd      	b.n	8007908 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d103      	bne.n	800791a <xQueueGenericSend+0x42>
 8007912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <xQueueGenericSend+0x46>
 800791a:	2301      	movs	r3, #1
 800791c:	e000      	b.n	8007920 <xQueueGenericSend+0x48>
 800791e:	2300      	movs	r3, #0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10b      	bne.n	800793c <xQueueGenericSend+0x64>
	__asm volatile
 8007924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007928:	f383 8811 	msr	BASEPRI, r3
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007936:	bf00      	nop
 8007938:	bf00      	nop
 800793a:	e7fd      	b.n	8007938 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2b02      	cmp	r3, #2
 8007940:	d103      	bne.n	800794a <xQueueGenericSend+0x72>
 8007942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007946:	2b01      	cmp	r3, #1
 8007948:	d101      	bne.n	800794e <xQueueGenericSend+0x76>
 800794a:	2301      	movs	r3, #1
 800794c:	e000      	b.n	8007950 <xQueueGenericSend+0x78>
 800794e:	2300      	movs	r3, #0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10b      	bne.n	800796c <xQueueGenericSend+0x94>
	__asm volatile
 8007954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007958:	f383 8811 	msr	BASEPRI, r3
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	623b      	str	r3, [r7, #32]
}
 8007966:	bf00      	nop
 8007968:	bf00      	nop
 800796a:	e7fd      	b.n	8007968 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800796c:	f001 f9f6 	bl	8008d5c <xTaskGetSchedulerState>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d102      	bne.n	800797c <xQueueGenericSend+0xa4>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d101      	bne.n	8007980 <xQueueGenericSend+0xa8>
 800797c:	2301      	movs	r3, #1
 800797e:	e000      	b.n	8007982 <xQueueGenericSend+0xaa>
 8007980:	2300      	movs	r3, #0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10b      	bne.n	800799e <xQueueGenericSend+0xc6>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	61fb      	str	r3, [r7, #28]
}
 8007998:	bf00      	nop
 800799a:	bf00      	nop
 800799c:	e7fd      	b.n	800799a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800799e:	f001 ff4b 	bl	8009838 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d302      	bcc.n	80079b4 <xQueueGenericSend+0xdc>
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d129      	bne.n	8007a08 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	68b9      	ldr	r1, [r7, #8]
 80079b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079ba:	f000 fa0f 	bl	8007ddc <prvCopyDataToQueue>
 80079be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d010      	beq.n	80079ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ca:	3324      	adds	r3, #36	@ 0x24
 80079cc:	4618      	mov	r0, r3
 80079ce:	f000 ffdd 	bl	800898c <xTaskRemoveFromEventList>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d013      	beq.n	8007a00 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80079d8:	4b3f      	ldr	r3, [pc, #252]	@ (8007ad8 <xQueueGenericSend+0x200>)
 80079da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079de:	601a      	str	r2, [r3, #0]
 80079e0:	f3bf 8f4f 	dsb	sy
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	e00a      	b.n	8007a00 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80079ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d007      	beq.n	8007a00 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80079f0:	4b39      	ldr	r3, [pc, #228]	@ (8007ad8 <xQueueGenericSend+0x200>)
 80079f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079f6:	601a      	str	r2, [r3, #0]
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007a00:	f001 ff4c 	bl	800989c <vPortExitCritical>
				return pdPASS;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e063      	b.n	8007ad0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d103      	bne.n	8007a16 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a0e:	f001 ff45 	bl	800989c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	e05c      	b.n	8007ad0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d106      	bne.n	8007a2a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a1c:	f107 0314 	add.w	r3, r7, #20
 8007a20:	4618      	mov	r0, r3
 8007a22:	f001 f83f 	bl	8008aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a26:	2301      	movs	r3, #1
 8007a28:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a2a:	f001 ff37 	bl	800989c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a2e:	f000 fd87 	bl	8008540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a32:	f001 ff01 	bl	8009838 <vPortEnterCritical>
 8007a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a3c:	b25b      	sxtb	r3, r3
 8007a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a42:	d103      	bne.n	8007a4c <xQueueGenericSend+0x174>
 8007a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a52:	b25b      	sxtb	r3, r3
 8007a54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a58:	d103      	bne.n	8007a62 <xQueueGenericSend+0x18a>
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a62:	f001 ff1b 	bl	800989c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a66:	1d3a      	adds	r2, r7, #4
 8007a68:	f107 0314 	add.w	r3, r7, #20
 8007a6c:	4611      	mov	r1, r2
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f001 f82e 	bl	8008ad0 <xTaskCheckForTimeOut>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d124      	bne.n	8007ac4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007a7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a7c:	f000 faa6 	bl	8007fcc <prvIsQueueFull>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d018      	beq.n	8007ab8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a88:	3310      	adds	r3, #16
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 ff2a 	bl	80088e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007a94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a96:	f000 fa31 	bl	8007efc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007a9a:	f000 fd5f 	bl	800855c <xTaskResumeAll>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f47f af7c 	bne.w	800799e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ad8 <xQueueGenericSend+0x200>)
 8007aa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	e772      	b.n	800799e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ab8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007aba:	f000 fa1f 	bl	8007efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007abe:	f000 fd4d 	bl	800855c <xTaskResumeAll>
 8007ac2:	e76c      	b.n	800799e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007ac4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ac6:	f000 fa19 	bl	8007efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007aca:	f000 fd47 	bl	800855c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007ace:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3738      	adds	r7, #56	@ 0x38
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	e000ed04 	.word	0xe000ed04

08007adc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b090      	sub	sp, #64	@ 0x40
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
 8007ae8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10b      	bne.n	8007b0c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007b06:	bf00      	nop
 8007b08:	bf00      	nop
 8007b0a:	e7fd      	b.n	8007b08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d103      	bne.n	8007b1a <xQueueGenericSendFromISR+0x3e>
 8007b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d101      	bne.n	8007b1e <xQueueGenericSendFromISR+0x42>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e000      	b.n	8007b20 <xQueueGenericSendFromISR+0x44>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10b      	bne.n	8007b3c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007b36:	bf00      	nop
 8007b38:	bf00      	nop
 8007b3a:	e7fd      	b.n	8007b38 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d103      	bne.n	8007b4a <xQueueGenericSendFromISR+0x6e>
 8007b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d101      	bne.n	8007b4e <xQueueGenericSendFromISR+0x72>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e000      	b.n	8007b50 <xQueueGenericSendFromISR+0x74>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10b      	bne.n	8007b6c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	623b      	str	r3, [r7, #32]
}
 8007b66:	bf00      	nop
 8007b68:	bf00      	nop
 8007b6a:	e7fd      	b.n	8007b68 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b6c:	f001 ff44 	bl	80099f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007b70:	f3ef 8211 	mrs	r2, BASEPRI
 8007b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	61fa      	str	r2, [r7, #28]
 8007b86:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007b88:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b8a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d302      	bcc.n	8007b9e <xQueueGenericSendFromISR+0xc2>
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d12f      	bne.n	8007bfe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ba4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	68b9      	ldr	r1, [r7, #8]
 8007bb2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007bb4:	f000 f912 	bl	8007ddc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007bb8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bc0:	d112      	bne.n	8007be8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d016      	beq.n	8007bf8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bcc:	3324      	adds	r3, #36	@ 0x24
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f000 fedc 	bl	800898c <xTaskRemoveFromEventList>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00e      	beq.n	8007bf8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00b      	beq.n	8007bf8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	e007      	b.n	8007bf8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007be8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007bec:	3301      	adds	r3, #1
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	b25a      	sxtb	r2, r3
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007bfc:	e001      	b.n	8007c02 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c04:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3740      	adds	r7, #64	@ 0x40
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b08c      	sub	sp, #48	@ 0x30
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c24:	2300      	movs	r3, #0
 8007c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d10b      	bne.n	8007c4a <xQueueReceive+0x32>
	__asm volatile
 8007c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	623b      	str	r3, [r7, #32]
}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop
 8007c48:	e7fd      	b.n	8007c46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d103      	bne.n	8007c58 <xQueueReceive+0x40>
 8007c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <xQueueReceive+0x44>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e000      	b.n	8007c5e <xQueueReceive+0x46>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10b      	bne.n	8007c7a <xQueueReceive+0x62>
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	61fb      	str	r3, [r7, #28]
}
 8007c74:	bf00      	nop
 8007c76:	bf00      	nop
 8007c78:	e7fd      	b.n	8007c76 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c7a:	f001 f86f 	bl	8008d5c <xTaskGetSchedulerState>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d102      	bne.n	8007c8a <xQueueReceive+0x72>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <xQueueReceive+0x76>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e000      	b.n	8007c90 <xQueueReceive+0x78>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10b      	bne.n	8007cac <xQueueReceive+0x94>
	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	61bb      	str	r3, [r7, #24]
}
 8007ca6:	bf00      	nop
 8007ca8:	bf00      	nop
 8007caa:	e7fd      	b.n	8007ca8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cac:	f001 fdc4 	bl	8009838 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d01f      	beq.n	8007cfc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007cbc:	68b9      	ldr	r1, [r7, #8]
 8007cbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cc0:	f000 f8f6 	bl	8007eb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc6:	1e5a      	subs	r2, r3, #1
 8007cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00f      	beq.n	8007cf4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd6:	3310      	adds	r3, #16
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 fe57 	bl	800898c <xTaskRemoveFromEventList>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d007      	beq.n	8007cf4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ce4:	4b3c      	ldr	r3, [pc, #240]	@ (8007dd8 <xQueueReceive+0x1c0>)
 8007ce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007cf4:	f001 fdd2 	bl	800989c <vPortExitCritical>
				return pdPASS;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e069      	b.n	8007dd0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d103      	bne.n	8007d0a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d02:	f001 fdcb 	bl	800989c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d06:	2300      	movs	r3, #0
 8007d08:	e062      	b.n	8007dd0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d106      	bne.n	8007d1e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d10:	f107 0310 	add.w	r3, r7, #16
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 fec5 	bl	8008aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d1e:	f001 fdbd 	bl	800989c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d22:	f000 fc0d 	bl	8008540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d26:	f001 fd87 	bl	8009838 <vPortEnterCritical>
 8007d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d30:	b25b      	sxtb	r3, r3
 8007d32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d36:	d103      	bne.n	8007d40 <xQueueReceive+0x128>
 8007d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d46:	b25b      	sxtb	r3, r3
 8007d48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d4c:	d103      	bne.n	8007d56 <xQueueReceive+0x13e>
 8007d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d56:	f001 fda1 	bl	800989c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d5a:	1d3a      	adds	r2, r7, #4
 8007d5c:	f107 0310 	add.w	r3, r7, #16
 8007d60:	4611      	mov	r1, r2
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 feb4 	bl	8008ad0 <xTaskCheckForTimeOut>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d123      	bne.n	8007db6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d70:	f000 f916 	bl	8007fa0 <prvIsQueueEmpty>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d017      	beq.n	8007daa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7c:	3324      	adds	r3, #36	@ 0x24
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	4611      	mov	r1, r2
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 fdb0 	bl	80088e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d8a:	f000 f8b7 	bl	8007efc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d8e:	f000 fbe5 	bl	800855c <xTaskResumeAll>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d189      	bne.n	8007cac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007d98:	4b0f      	ldr	r3, [pc, #60]	@ (8007dd8 <xQueueReceive+0x1c0>)
 8007d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	e780      	b.n	8007cac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007daa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dac:	f000 f8a6 	bl	8007efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007db0:	f000 fbd4 	bl	800855c <xTaskResumeAll>
 8007db4:	e77a      	b.n	8007cac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007db6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007db8:	f000 f8a0 	bl	8007efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dbc:	f000 fbce 	bl	800855c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007dc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dc2:	f000 f8ed 	bl	8007fa0 <prvIsQueueEmpty>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f43f af6f 	beq.w	8007cac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007dce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3730      	adds	r7, #48	@ 0x30
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	e000ed04 	.word	0xe000ed04

08007ddc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007de8:	2300      	movs	r3, #0
 8007dea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10d      	bne.n	8007e16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d14d      	bne.n	8007e9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 ffc6 	bl	8008d98 <xTaskPriorityDisinherit>
 8007e0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	609a      	str	r2, [r3, #8]
 8007e14:	e043      	b.n	8007e9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d119      	bne.n	8007e50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6858      	ldr	r0, [r3, #4]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e24:	461a      	mov	r2, r3
 8007e26:	68b9      	ldr	r1, [r7, #8]
 8007e28:	f00f fdb7 	bl	801799a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e34:	441a      	add	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d32b      	bcc.n	8007e9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	605a      	str	r2, [r3, #4]
 8007e4e:	e026      	b.n	8007e9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	68d8      	ldr	r0, [r3, #12]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e58:	461a      	mov	r2, r3
 8007e5a:	68b9      	ldr	r1, [r7, #8]
 8007e5c:	f00f fd9d 	bl	801799a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	68da      	ldr	r2, [r3, #12]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e68:	425b      	negs	r3, r3
 8007e6a:	441a      	add	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	68da      	ldr	r2, [r3, #12]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d207      	bcs.n	8007e8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	689a      	ldr	r2, [r3, #8]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e84:	425b      	negs	r3, r3
 8007e86:	441a      	add	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d105      	bne.n	8007e9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d002      	beq.n	8007e9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	1c5a      	adds	r2, r3, #1
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007ea6:	697b      	ldr	r3, [r7, #20]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3718      	adds	r7, #24
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d018      	beq.n	8007ef4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68da      	ldr	r2, [r3, #12]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eca:	441a      	add	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d303      	bcc.n	8007ee4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	68d9      	ldr	r1, [r3, #12]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eec:	461a      	mov	r2, r3
 8007eee:	6838      	ldr	r0, [r7, #0]
 8007ef0:	f00f fd53 	bl	801799a <memcpy>
	}
}
 8007ef4:	bf00      	nop
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f04:	f001 fc98 	bl	8009838 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f10:	e011      	b.n	8007f36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d012      	beq.n	8007f40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3324      	adds	r3, #36	@ 0x24
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 fd34 	bl	800898c <xTaskRemoveFromEventList>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f2a:	f000 fe35 	bl	8008b98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	dce9      	bgt.n	8007f12 <prvUnlockQueue+0x16>
 8007f3e:	e000      	b.n	8007f42 <prvUnlockQueue+0x46>
					break;
 8007f40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	22ff      	movs	r2, #255	@ 0xff
 8007f46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007f4a:	f001 fca7 	bl	800989c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f4e:	f001 fc73 	bl	8009838 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f5a:	e011      	b.n	8007f80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d012      	beq.n	8007f8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3310      	adds	r3, #16
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f000 fd0f 	bl	800898c <xTaskRemoveFromEventList>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f74:	f000 fe10 	bl	8008b98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	dce9      	bgt.n	8007f5c <prvUnlockQueue+0x60>
 8007f88:	e000      	b.n	8007f8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	22ff      	movs	r2, #255	@ 0xff
 8007f90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007f94:	f001 fc82 	bl	800989c <vPortExitCritical>
}
 8007f98:	bf00      	nop
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fa8:	f001 fc46 	bl	8009838 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d102      	bne.n	8007fba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	60fb      	str	r3, [r7, #12]
 8007fb8:	e001      	b.n	8007fbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fbe:	f001 fc6d 	bl	800989c <vPortExitCritical>

	return xReturn;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fd4:	f001 fc30 	bl	8009838 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d102      	bne.n	8007fea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	60fb      	str	r3, [r7, #12]
 8007fe8:	e001      	b.n	8007fee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007fea:	2300      	movs	r3, #0
 8007fec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fee:	f001 fc55 	bl	800989c <vPortExitCritical>

	return xReturn;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008006:	2300      	movs	r3, #0
 8008008:	60fb      	str	r3, [r7, #12]
 800800a:	e014      	b.n	8008036 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800800c:	4a0f      	ldr	r2, [pc, #60]	@ (800804c <vQueueAddToRegistry+0x50>)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10b      	bne.n	8008030 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008018:	490c      	ldr	r1, [pc, #48]	@ (800804c <vQueueAddToRegistry+0x50>)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008022:	4a0a      	ldr	r2, [pc, #40]	@ (800804c <vQueueAddToRegistry+0x50>)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	00db      	lsls	r3, r3, #3
 8008028:	4413      	add	r3, r2
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800802e:	e006      	b.n	800803e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	3301      	adds	r3, #1
 8008034:	60fb      	str	r3, [r7, #12]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2b07      	cmp	r3, #7
 800803a:	d9e7      	bls.n	800800c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800803c:	bf00      	nop
 800803e:	bf00      	nop
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	200052b8 	.word	0x200052b8

08008050 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008060:	f001 fbea 	bl	8009838 <vPortEnterCritical>
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800806a:	b25b      	sxtb	r3, r3
 800806c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008070:	d103      	bne.n	800807a <vQueueWaitForMessageRestricted+0x2a>
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008080:	b25b      	sxtb	r3, r3
 8008082:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008086:	d103      	bne.n	8008090 <vQueueWaitForMessageRestricted+0x40>
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008090:	f001 fc04 	bl	800989c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008098:	2b00      	cmp	r3, #0
 800809a:	d106      	bne.n	80080aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	3324      	adds	r3, #36	@ 0x24
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	68b9      	ldr	r1, [r7, #8]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f000 fc45 	bl	8008934 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80080aa:	6978      	ldr	r0, [r7, #20]
 80080ac:	f7ff ff26 	bl	8007efc <prvUnlockQueue>
	}
 80080b0:	bf00      	nop
 80080b2:	3718      	adds	r7, #24
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b08e      	sub	sp, #56	@ 0x38
 80080bc:	af04      	add	r7, sp, #16
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
 80080c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10b      	bne.n	80080e4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	623b      	str	r3, [r7, #32]
}
 80080de:	bf00      	nop
 80080e0:	bf00      	nop
 80080e2:	e7fd      	b.n	80080e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80080e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10b      	bne.n	8008102 <xTaskCreateStatic+0x4a>
	__asm volatile
 80080ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	61fb      	str	r3, [r7, #28]
}
 80080fc:	bf00      	nop
 80080fe:	bf00      	nop
 8008100:	e7fd      	b.n	80080fe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008102:	235c      	movs	r3, #92	@ 0x5c
 8008104:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	2b5c      	cmp	r3, #92	@ 0x5c
 800810a:	d00b      	beq.n	8008124 <xTaskCreateStatic+0x6c>
	__asm volatile
 800810c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	61bb      	str	r3, [r7, #24]
}
 800811e:	bf00      	nop
 8008120:	bf00      	nop
 8008122:	e7fd      	b.n	8008120 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008124:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008128:	2b00      	cmp	r3, #0
 800812a:	d01e      	beq.n	800816a <xTaskCreateStatic+0xb2>
 800812c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800812e:	2b00      	cmp	r3, #0
 8008130:	d01b      	beq.n	800816a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008134:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008138:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800813a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800813c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813e:	2202      	movs	r2, #2
 8008140:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008144:	2300      	movs	r3, #0
 8008146:	9303      	str	r3, [sp, #12]
 8008148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800814a:	9302      	str	r3, [sp, #8]
 800814c:	f107 0314 	add.w	r3, r7, #20
 8008150:	9301      	str	r3, [sp, #4]
 8008152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	68b9      	ldr	r1, [r7, #8]
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f000 f850 	bl	8008202 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008162:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008164:	f000 f8de 	bl	8008324 <prvAddNewTaskToReadyList>
 8008168:	e001      	b.n	800816e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800816a:	2300      	movs	r3, #0
 800816c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800816e:	697b      	ldr	r3, [r7, #20]
	}
 8008170:	4618      	mov	r0, r3
 8008172:	3728      	adds	r7, #40	@ 0x28
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008178:	b580      	push	{r7, lr}
 800817a:	b08c      	sub	sp, #48	@ 0x30
 800817c:	af04      	add	r7, sp, #16
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	603b      	str	r3, [r7, #0]
 8008184:	4613      	mov	r3, r2
 8008186:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008188:	88fb      	ldrh	r3, [r7, #6]
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4618      	mov	r0, r3
 800818e:	f001 fc75 	bl	8009a7c <pvPortMalloc>
 8008192:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00e      	beq.n	80081b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800819a:	205c      	movs	r0, #92	@ 0x5c
 800819c:	f001 fc6e 	bl	8009a7c <pvPortMalloc>
 80081a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d003      	beq.n	80081b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80081ae:	e005      	b.n	80081bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80081b0:	6978      	ldr	r0, [r7, #20]
 80081b2:	f001 fd31 	bl	8009c18 <vPortFree>
 80081b6:	e001      	b.n	80081bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80081b8:	2300      	movs	r3, #0
 80081ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d017      	beq.n	80081f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80081ca:	88fa      	ldrh	r2, [r7, #6]
 80081cc:	2300      	movs	r3, #0
 80081ce:	9303      	str	r3, [sp, #12]
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	9302      	str	r3, [sp, #8]
 80081d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d6:	9301      	str	r3, [sp, #4]
 80081d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	68b9      	ldr	r1, [r7, #8]
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 f80e 	bl	8008202 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081e6:	69f8      	ldr	r0, [r7, #28]
 80081e8:	f000 f89c 	bl	8008324 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80081ec:	2301      	movs	r3, #1
 80081ee:	61bb      	str	r3, [r7, #24]
 80081f0:	e002      	b.n	80081f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80081f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80081f8:	69bb      	ldr	r3, [r7, #24]
	}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3720      	adds	r7, #32
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b088      	sub	sp, #32
 8008206:	af00      	add	r7, sp, #0
 8008208:	60f8      	str	r0, [r7, #12]
 800820a:	60b9      	str	r1, [r7, #8]
 800820c:	607a      	str	r2, [r7, #4]
 800820e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008212:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	461a      	mov	r2, r3
 800821a:	21a5      	movs	r1, #165	@ 0xa5
 800821c:	f00f faf4 	bl	8017808 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008222:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800822a:	3b01      	subs	r3, #1
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	f023 0307 	bic.w	r3, r3, #7
 8008238:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	f003 0307 	and.w	r3, r3, #7
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00b      	beq.n	800825c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	617b      	str	r3, [r7, #20]
}
 8008256:	bf00      	nop
 8008258:	bf00      	nop
 800825a:	e7fd      	b.n	8008258 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d01f      	beq.n	80082a2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008262:	2300      	movs	r3, #0
 8008264:	61fb      	str	r3, [r7, #28]
 8008266:	e012      	b.n	800828e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	4413      	add	r3, r2
 800826e:	7819      	ldrb	r1, [r3, #0]
 8008270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	4413      	add	r3, r2
 8008276:	3334      	adds	r3, #52	@ 0x34
 8008278:	460a      	mov	r2, r1
 800827a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	4413      	add	r3, r2
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d006      	beq.n	8008296 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	3301      	adds	r3, #1
 800828c:	61fb      	str	r3, [r7, #28]
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	2b0f      	cmp	r3, #15
 8008292:	d9e9      	bls.n	8008268 <prvInitialiseNewTask+0x66>
 8008294:	e000      	b.n	8008298 <prvInitialiseNewTask+0x96>
			{
				break;
 8008296:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800829a:	2200      	movs	r2, #0
 800829c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80082a0:	e003      	b.n	80082aa <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80082a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80082aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ac:	2b37      	cmp	r3, #55	@ 0x37
 80082ae:	d901      	bls.n	80082b4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80082b0:	2337      	movs	r3, #55	@ 0x37
 80082b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80082b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082b8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80082ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082be:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80082c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c2:	2200      	movs	r2, #0
 80082c4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80082c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c8:	3304      	adds	r3, #4
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7ff f966 	bl	800759c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d2:	3318      	adds	r3, #24
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7ff f961 	bl	800759c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80082e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082ee:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80082f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f2:	2200      	movs	r2, #0
 80082f4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80082f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	68f9      	ldr	r1, [r7, #12]
 8008302:	69b8      	ldr	r0, [r7, #24]
 8008304:	f001 f966 	bl	80095d4 <pxPortInitialiseStack>
 8008308:	4602      	mov	r2, r0
 800830a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800830e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008318:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800831a:	bf00      	nop
 800831c:	3720      	adds	r7, #32
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
	...

08008324 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800832c:	f001 fa84 	bl	8009838 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008330:	4b2d      	ldr	r3, [pc, #180]	@ (80083e8 <prvAddNewTaskToReadyList+0xc4>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	3301      	adds	r3, #1
 8008336:	4a2c      	ldr	r2, [pc, #176]	@ (80083e8 <prvAddNewTaskToReadyList+0xc4>)
 8008338:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800833a:	4b2c      	ldr	r3, [pc, #176]	@ (80083ec <prvAddNewTaskToReadyList+0xc8>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d109      	bne.n	8008356 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008342:	4a2a      	ldr	r2, [pc, #168]	@ (80083ec <prvAddNewTaskToReadyList+0xc8>)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008348:	4b27      	ldr	r3, [pc, #156]	@ (80083e8 <prvAddNewTaskToReadyList+0xc4>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d110      	bne.n	8008372 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008350:	f000 fc46 	bl	8008be0 <prvInitialiseTaskLists>
 8008354:	e00d      	b.n	8008372 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008356:	4b26      	ldr	r3, [pc, #152]	@ (80083f0 <prvAddNewTaskToReadyList+0xcc>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d109      	bne.n	8008372 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800835e:	4b23      	ldr	r3, [pc, #140]	@ (80083ec <prvAddNewTaskToReadyList+0xc8>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008368:	429a      	cmp	r2, r3
 800836a:	d802      	bhi.n	8008372 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800836c:	4a1f      	ldr	r2, [pc, #124]	@ (80083ec <prvAddNewTaskToReadyList+0xc8>)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008372:	4b20      	ldr	r3, [pc, #128]	@ (80083f4 <prvAddNewTaskToReadyList+0xd0>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	3301      	adds	r3, #1
 8008378:	4a1e      	ldr	r2, [pc, #120]	@ (80083f4 <prvAddNewTaskToReadyList+0xd0>)
 800837a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800837c:	4b1d      	ldr	r3, [pc, #116]	@ (80083f4 <prvAddNewTaskToReadyList+0xd0>)
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008388:	4b1b      	ldr	r3, [pc, #108]	@ (80083f8 <prvAddNewTaskToReadyList+0xd4>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	429a      	cmp	r2, r3
 800838e:	d903      	bls.n	8008398 <prvAddNewTaskToReadyList+0x74>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008394:	4a18      	ldr	r2, [pc, #96]	@ (80083f8 <prvAddNewTaskToReadyList+0xd4>)
 8008396:	6013      	str	r3, [r2, #0]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800839c:	4613      	mov	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4413      	add	r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	4a15      	ldr	r2, [pc, #84]	@ (80083fc <prvAddNewTaskToReadyList+0xd8>)
 80083a6:	441a      	add	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	3304      	adds	r3, #4
 80083ac:	4619      	mov	r1, r3
 80083ae:	4610      	mov	r0, r2
 80083b0:	f7ff f901 	bl	80075b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80083b4:	f001 fa72 	bl	800989c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80083b8:	4b0d      	ldr	r3, [pc, #52]	@ (80083f0 <prvAddNewTaskToReadyList+0xcc>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00e      	beq.n	80083de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80083c0:	4b0a      	ldr	r3, [pc, #40]	@ (80083ec <prvAddNewTaskToReadyList+0xc8>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d207      	bcs.n	80083de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80083ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008400 <prvAddNewTaskToReadyList+0xdc>)
 80083d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083d4:	601a      	str	r2, [r3, #0]
 80083d6:	f3bf 8f4f 	dsb	sy
 80083da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083de:	bf00      	nop
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	200057cc 	.word	0x200057cc
 80083ec:	200052f8 	.word	0x200052f8
 80083f0:	200057d8 	.word	0x200057d8
 80083f4:	200057e8 	.word	0x200057e8
 80083f8:	200057d4 	.word	0x200057d4
 80083fc:	200052fc 	.word	0x200052fc
 8008400:	e000ed04 	.word	0xe000ed04

08008404 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800840c:	2300      	movs	r3, #0
 800840e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d018      	beq.n	8008448 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008416:	4b14      	ldr	r3, [pc, #80]	@ (8008468 <vTaskDelay+0x64>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00b      	beq.n	8008436 <vTaskDelay+0x32>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	60bb      	str	r3, [r7, #8]
}
 8008430:	bf00      	nop
 8008432:	bf00      	nop
 8008434:	e7fd      	b.n	8008432 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008436:	f000 f883 	bl	8008540 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800843a:	2100      	movs	r1, #0
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fd1b 	bl	8008e78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008442:	f000 f88b 	bl	800855c <xTaskResumeAll>
 8008446:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d107      	bne.n	800845e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800844e:	4b07      	ldr	r3, [pc, #28]	@ (800846c <vTaskDelay+0x68>)
 8008450:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	f3bf 8f4f 	dsb	sy
 800845a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800845e:	bf00      	nop
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	200057f4 	.word	0x200057f4
 800846c:	e000ed04 	.word	0xe000ed04

08008470 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b08a      	sub	sp, #40	@ 0x28
 8008474:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008476:	2300      	movs	r3, #0
 8008478:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800847a:	2300      	movs	r3, #0
 800847c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800847e:	463a      	mov	r2, r7
 8008480:	1d39      	adds	r1, r7, #4
 8008482:	f107 0308 	add.w	r3, r7, #8
 8008486:	4618      	mov	r0, r3
 8008488:	f7ff f834 	bl	80074f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	9202      	str	r2, [sp, #8]
 8008494:	9301      	str	r3, [sp, #4]
 8008496:	2300      	movs	r3, #0
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	2300      	movs	r3, #0
 800849c:	460a      	mov	r2, r1
 800849e:	4922      	ldr	r1, [pc, #136]	@ (8008528 <vTaskStartScheduler+0xb8>)
 80084a0:	4822      	ldr	r0, [pc, #136]	@ (800852c <vTaskStartScheduler+0xbc>)
 80084a2:	f7ff fe09 	bl	80080b8 <xTaskCreateStatic>
 80084a6:	4603      	mov	r3, r0
 80084a8:	4a21      	ldr	r2, [pc, #132]	@ (8008530 <vTaskStartScheduler+0xc0>)
 80084aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80084ac:	4b20      	ldr	r3, [pc, #128]	@ (8008530 <vTaskStartScheduler+0xc0>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d002      	beq.n	80084ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80084b4:	2301      	movs	r3, #1
 80084b6:	617b      	str	r3, [r7, #20]
 80084b8:	e001      	b.n	80084be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80084ba:	2300      	movs	r3, #0
 80084bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d102      	bne.n	80084ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80084c4:	f000 fd2c 	bl	8008f20 <xTimerCreateTimerTask>
 80084c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d116      	bne.n	80084fe <vTaskStartScheduler+0x8e>
	__asm volatile
 80084d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	613b      	str	r3, [r7, #16]
}
 80084e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80084e4:	4b13      	ldr	r3, [pc, #76]	@ (8008534 <vTaskStartScheduler+0xc4>)
 80084e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80084ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80084ec:	4b12      	ldr	r3, [pc, #72]	@ (8008538 <vTaskStartScheduler+0xc8>)
 80084ee:	2201      	movs	r2, #1
 80084f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80084f2:	4b12      	ldr	r3, [pc, #72]	@ (800853c <vTaskStartScheduler+0xcc>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80084f8:	f001 f8fa 	bl	80096f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80084fc:	e00f      	b.n	800851e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008504:	d10b      	bne.n	800851e <vTaskStartScheduler+0xae>
	__asm volatile
 8008506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	60fb      	str	r3, [r7, #12]
}
 8008518:	bf00      	nop
 800851a:	bf00      	nop
 800851c:	e7fd      	b.n	800851a <vTaskStartScheduler+0xaa>
}
 800851e:	bf00      	nop
 8008520:	3718      	adds	r7, #24
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	080187bc 	.word	0x080187bc
 800852c:	08008bb1 	.word	0x08008bb1
 8008530:	200057f0 	.word	0x200057f0
 8008534:	200057ec 	.word	0x200057ec
 8008538:	200057d8 	.word	0x200057d8
 800853c:	200057d0 	.word	0x200057d0

08008540 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008540:	b480      	push	{r7}
 8008542:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008544:	4b04      	ldr	r3, [pc, #16]	@ (8008558 <vTaskSuspendAll+0x18>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	3301      	adds	r3, #1
 800854a:	4a03      	ldr	r2, [pc, #12]	@ (8008558 <vTaskSuspendAll+0x18>)
 800854c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800854e:	bf00      	nop
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr
 8008558:	200057f4 	.word	0x200057f4

0800855c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008562:	2300      	movs	r3, #0
 8008564:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008566:	2300      	movs	r3, #0
 8008568:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800856a:	4b42      	ldr	r3, [pc, #264]	@ (8008674 <xTaskResumeAll+0x118>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10b      	bne.n	800858a <xTaskResumeAll+0x2e>
	__asm volatile
 8008572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008576:	f383 8811 	msr	BASEPRI, r3
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	603b      	str	r3, [r7, #0]
}
 8008584:	bf00      	nop
 8008586:	bf00      	nop
 8008588:	e7fd      	b.n	8008586 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800858a:	f001 f955 	bl	8009838 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800858e:	4b39      	ldr	r3, [pc, #228]	@ (8008674 <xTaskResumeAll+0x118>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3b01      	subs	r3, #1
 8008594:	4a37      	ldr	r2, [pc, #220]	@ (8008674 <xTaskResumeAll+0x118>)
 8008596:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008598:	4b36      	ldr	r3, [pc, #216]	@ (8008674 <xTaskResumeAll+0x118>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d162      	bne.n	8008666 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085a0:	4b35      	ldr	r3, [pc, #212]	@ (8008678 <xTaskResumeAll+0x11c>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d05e      	beq.n	8008666 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085a8:	e02f      	b.n	800860a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085aa:	4b34      	ldr	r3, [pc, #208]	@ (800867c <xTaskResumeAll+0x120>)
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3318      	adds	r3, #24
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7ff f85a 	bl	8007670 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	3304      	adds	r3, #4
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7ff f855 	bl	8007670 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ca:	4b2d      	ldr	r3, [pc, #180]	@ (8008680 <xTaskResumeAll+0x124>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d903      	bls.n	80085da <xTaskResumeAll+0x7e>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d6:	4a2a      	ldr	r2, [pc, #168]	@ (8008680 <xTaskResumeAll+0x124>)
 80085d8:	6013      	str	r3, [r2, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085de:	4613      	mov	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4413      	add	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4a27      	ldr	r2, [pc, #156]	@ (8008684 <xTaskResumeAll+0x128>)
 80085e8:	441a      	add	r2, r3
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	3304      	adds	r3, #4
 80085ee:	4619      	mov	r1, r3
 80085f0:	4610      	mov	r0, r2
 80085f2:	f7fe ffe0 	bl	80075b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085fa:	4b23      	ldr	r3, [pc, #140]	@ (8008688 <xTaskResumeAll+0x12c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008600:	429a      	cmp	r2, r3
 8008602:	d302      	bcc.n	800860a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008604:	4b21      	ldr	r3, [pc, #132]	@ (800868c <xTaskResumeAll+0x130>)
 8008606:	2201      	movs	r2, #1
 8008608:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800860a:	4b1c      	ldr	r3, [pc, #112]	@ (800867c <xTaskResumeAll+0x120>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1cb      	bne.n	80085aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008618:	f000 fb80 	bl	8008d1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800861c:	4b1c      	ldr	r3, [pc, #112]	@ (8008690 <xTaskResumeAll+0x134>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d010      	beq.n	800864a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008628:	f000 f846 	bl	80086b8 <xTaskIncrementTick>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d002      	beq.n	8008638 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008632:	4b16      	ldr	r3, [pc, #88]	@ (800868c <xTaskResumeAll+0x130>)
 8008634:	2201      	movs	r2, #1
 8008636:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3b01      	subs	r3, #1
 800863c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1f1      	bne.n	8008628 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008644:	4b12      	ldr	r3, [pc, #72]	@ (8008690 <xTaskResumeAll+0x134>)
 8008646:	2200      	movs	r2, #0
 8008648:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800864a:	4b10      	ldr	r3, [pc, #64]	@ (800868c <xTaskResumeAll+0x130>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d009      	beq.n	8008666 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008652:	2301      	movs	r3, #1
 8008654:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008656:	4b0f      	ldr	r3, [pc, #60]	@ (8008694 <xTaskResumeAll+0x138>)
 8008658:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800865c:	601a      	str	r2, [r3, #0]
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008666:	f001 f919 	bl	800989c <vPortExitCritical>

	return xAlreadyYielded;
 800866a:	68bb      	ldr	r3, [r7, #8]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	200057f4 	.word	0x200057f4
 8008678:	200057cc 	.word	0x200057cc
 800867c:	2000578c 	.word	0x2000578c
 8008680:	200057d4 	.word	0x200057d4
 8008684:	200052fc 	.word	0x200052fc
 8008688:	200052f8 	.word	0x200052f8
 800868c:	200057e0 	.word	0x200057e0
 8008690:	200057dc 	.word	0x200057dc
 8008694:	e000ed04 	.word	0xe000ed04

08008698 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800869e:	4b05      	ldr	r3, [pc, #20]	@ (80086b4 <xTaskGetTickCount+0x1c>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80086a4:	687b      	ldr	r3, [r7, #4]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	200057d0 	.word	0x200057d0

080086b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b086      	sub	sp, #24
 80086bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80086be:	2300      	movs	r3, #0
 80086c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086c2:	4b4f      	ldr	r3, [pc, #316]	@ (8008800 <xTaskIncrementTick+0x148>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	f040 8090 	bne.w	80087ec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80086cc:	4b4d      	ldr	r3, [pc, #308]	@ (8008804 <xTaskIncrementTick+0x14c>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3301      	adds	r3, #1
 80086d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80086d4:	4a4b      	ldr	r2, [pc, #300]	@ (8008804 <xTaskIncrementTick+0x14c>)
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d121      	bne.n	8008724 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80086e0:	4b49      	ldr	r3, [pc, #292]	@ (8008808 <xTaskIncrementTick+0x150>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00b      	beq.n	8008702 <xTaskIncrementTick+0x4a>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	603b      	str	r3, [r7, #0]
}
 80086fc:	bf00      	nop
 80086fe:	bf00      	nop
 8008700:	e7fd      	b.n	80086fe <xTaskIncrementTick+0x46>
 8008702:	4b41      	ldr	r3, [pc, #260]	@ (8008808 <xTaskIncrementTick+0x150>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	60fb      	str	r3, [r7, #12]
 8008708:	4b40      	ldr	r3, [pc, #256]	@ (800880c <xTaskIncrementTick+0x154>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a3e      	ldr	r2, [pc, #248]	@ (8008808 <xTaskIncrementTick+0x150>)
 800870e:	6013      	str	r3, [r2, #0]
 8008710:	4a3e      	ldr	r2, [pc, #248]	@ (800880c <xTaskIncrementTick+0x154>)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6013      	str	r3, [r2, #0]
 8008716:	4b3e      	ldr	r3, [pc, #248]	@ (8008810 <xTaskIncrementTick+0x158>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3301      	adds	r3, #1
 800871c:	4a3c      	ldr	r2, [pc, #240]	@ (8008810 <xTaskIncrementTick+0x158>)
 800871e:	6013      	str	r3, [r2, #0]
 8008720:	f000 fafc 	bl	8008d1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008724:	4b3b      	ldr	r3, [pc, #236]	@ (8008814 <xTaskIncrementTick+0x15c>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	429a      	cmp	r2, r3
 800872c:	d349      	bcc.n	80087c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800872e:	4b36      	ldr	r3, [pc, #216]	@ (8008808 <xTaskIncrementTick+0x150>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d104      	bne.n	8008742 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008738:	4b36      	ldr	r3, [pc, #216]	@ (8008814 <xTaskIncrementTick+0x15c>)
 800873a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800873e:	601a      	str	r2, [r3, #0]
					break;
 8008740:	e03f      	b.n	80087c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008742:	4b31      	ldr	r3, [pc, #196]	@ (8008808 <xTaskIncrementTick+0x150>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008752:	693a      	ldr	r2, [r7, #16]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	429a      	cmp	r2, r3
 8008758:	d203      	bcs.n	8008762 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800875a:	4a2e      	ldr	r2, [pc, #184]	@ (8008814 <xTaskIncrementTick+0x15c>)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008760:	e02f      	b.n	80087c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	3304      	adds	r3, #4
 8008766:	4618      	mov	r0, r3
 8008768:	f7fe ff82 	bl	8007670 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008770:	2b00      	cmp	r3, #0
 8008772:	d004      	beq.n	800877e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	3318      	adds	r3, #24
 8008778:	4618      	mov	r0, r3
 800877a:	f7fe ff79 	bl	8007670 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008782:	4b25      	ldr	r3, [pc, #148]	@ (8008818 <xTaskIncrementTick+0x160>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	429a      	cmp	r2, r3
 8008788:	d903      	bls.n	8008792 <xTaskIncrementTick+0xda>
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800878e:	4a22      	ldr	r2, [pc, #136]	@ (8008818 <xTaskIncrementTick+0x160>)
 8008790:	6013      	str	r3, [r2, #0]
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008796:	4613      	mov	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4413      	add	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4a1f      	ldr	r2, [pc, #124]	@ (800881c <xTaskIncrementTick+0x164>)
 80087a0:	441a      	add	r2, r3
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	3304      	adds	r3, #4
 80087a6:	4619      	mov	r1, r3
 80087a8:	4610      	mov	r0, r2
 80087aa:	f7fe ff04 	bl	80075b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008820 <xTaskIncrementTick+0x168>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d3b8      	bcc.n	800872e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80087bc:	2301      	movs	r3, #1
 80087be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087c0:	e7b5      	b.n	800872e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80087c2:	4b17      	ldr	r3, [pc, #92]	@ (8008820 <xTaskIncrementTick+0x168>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087c8:	4914      	ldr	r1, [pc, #80]	@ (800881c <xTaskIncrementTick+0x164>)
 80087ca:	4613      	mov	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	440b      	add	r3, r1
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d901      	bls.n	80087de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80087da:	2301      	movs	r3, #1
 80087dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80087de:	4b11      	ldr	r3, [pc, #68]	@ (8008824 <xTaskIncrementTick+0x16c>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d007      	beq.n	80087f6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80087e6:	2301      	movs	r3, #1
 80087e8:	617b      	str	r3, [r7, #20]
 80087ea:	e004      	b.n	80087f6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80087ec:	4b0e      	ldr	r3, [pc, #56]	@ (8008828 <xTaskIncrementTick+0x170>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	3301      	adds	r3, #1
 80087f2:	4a0d      	ldr	r2, [pc, #52]	@ (8008828 <xTaskIncrementTick+0x170>)
 80087f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80087f6:	697b      	ldr	r3, [r7, #20]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	200057f4 	.word	0x200057f4
 8008804:	200057d0 	.word	0x200057d0
 8008808:	20005784 	.word	0x20005784
 800880c:	20005788 	.word	0x20005788
 8008810:	200057e4 	.word	0x200057e4
 8008814:	200057ec 	.word	0x200057ec
 8008818:	200057d4 	.word	0x200057d4
 800881c:	200052fc 	.word	0x200052fc
 8008820:	200052f8 	.word	0x200052f8
 8008824:	200057e0 	.word	0x200057e0
 8008828:	200057dc 	.word	0x200057dc

0800882c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008832:	4b28      	ldr	r3, [pc, #160]	@ (80088d4 <vTaskSwitchContext+0xa8>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d003      	beq.n	8008842 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800883a:	4b27      	ldr	r3, [pc, #156]	@ (80088d8 <vTaskSwitchContext+0xac>)
 800883c:	2201      	movs	r2, #1
 800883e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008840:	e042      	b.n	80088c8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008842:	4b25      	ldr	r3, [pc, #148]	@ (80088d8 <vTaskSwitchContext+0xac>)
 8008844:	2200      	movs	r2, #0
 8008846:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008848:	4b24      	ldr	r3, [pc, #144]	@ (80088dc <vTaskSwitchContext+0xb0>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	60fb      	str	r3, [r7, #12]
 800884e:	e011      	b.n	8008874 <vTaskSwitchContext+0x48>
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d10b      	bne.n	800886e <vTaskSwitchContext+0x42>
	__asm volatile
 8008856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	607b      	str	r3, [r7, #4]
}
 8008868:	bf00      	nop
 800886a:	bf00      	nop
 800886c:	e7fd      	b.n	800886a <vTaskSwitchContext+0x3e>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	3b01      	subs	r3, #1
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	491a      	ldr	r1, [pc, #104]	@ (80088e0 <vTaskSwitchContext+0xb4>)
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	4613      	mov	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4413      	add	r3, r2
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	440b      	add	r3, r1
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d0e3      	beq.n	8008850 <vTaskSwitchContext+0x24>
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	4613      	mov	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	4413      	add	r3, r2
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	4a13      	ldr	r2, [pc, #76]	@ (80088e0 <vTaskSwitchContext+0xb4>)
 8008894:	4413      	add	r3, r2
 8008896:	60bb      	str	r3, [r7, #8]
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	685a      	ldr	r2, [r3, #4]
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	605a      	str	r2, [r3, #4]
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	3308      	adds	r3, #8
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d104      	bne.n	80088b8 <vTaskSwitchContext+0x8c>
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	685a      	ldr	r2, [r3, #4]
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	605a      	str	r2, [r3, #4]
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	4a09      	ldr	r2, [pc, #36]	@ (80088e4 <vTaskSwitchContext+0xb8>)
 80088c0:	6013      	str	r3, [r2, #0]
 80088c2:	4a06      	ldr	r2, [pc, #24]	@ (80088dc <vTaskSwitchContext+0xb0>)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6013      	str	r3, [r2, #0]
}
 80088c8:	bf00      	nop
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr
 80088d4:	200057f4 	.word	0x200057f4
 80088d8:	200057e0 	.word	0x200057e0
 80088dc:	200057d4 	.word	0x200057d4
 80088e0:	200052fc 	.word	0x200052fc
 80088e4:	200052f8 	.word	0x200052f8

080088e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10b      	bne.n	8008910 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80088f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fc:	f383 8811 	msr	BASEPRI, r3
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	60fb      	str	r3, [r7, #12]
}
 800890a:	bf00      	nop
 800890c:	bf00      	nop
 800890e:	e7fd      	b.n	800890c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008910:	4b07      	ldr	r3, [pc, #28]	@ (8008930 <vTaskPlaceOnEventList+0x48>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	3318      	adds	r3, #24
 8008916:	4619      	mov	r1, r3
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f7fe fe70 	bl	80075fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800891e:	2101      	movs	r1, #1
 8008920:	6838      	ldr	r0, [r7, #0]
 8008922:	f000 faa9 	bl	8008e78 <prvAddCurrentTaskToDelayedList>
}
 8008926:	bf00      	nop
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	200052f8 	.word	0x200052f8

08008934 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008934:	b580      	push	{r7, lr}
 8008936:	b086      	sub	sp, #24
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10b      	bne.n	800895e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800894a:	f383 8811 	msr	BASEPRI, r3
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f3bf 8f4f 	dsb	sy
 8008956:	617b      	str	r3, [r7, #20]
}
 8008958:	bf00      	nop
 800895a:	bf00      	nop
 800895c:	e7fd      	b.n	800895a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800895e:	4b0a      	ldr	r3, [pc, #40]	@ (8008988 <vTaskPlaceOnEventListRestricted+0x54>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3318      	adds	r3, #24
 8008964:	4619      	mov	r1, r3
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f7fe fe25 	bl	80075b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d002      	beq.n	8008978 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008972:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008976:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008978:	6879      	ldr	r1, [r7, #4]
 800897a:	68b8      	ldr	r0, [r7, #8]
 800897c:	f000 fa7c 	bl	8008e78 <prvAddCurrentTaskToDelayedList>
	}
 8008980:	bf00      	nop
 8008982:	3718      	adds	r7, #24
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	200052f8 	.word	0x200052f8

0800898c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b086      	sub	sp, #24
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d10b      	bne.n	80089ba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80089a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	60fb      	str	r3, [r7, #12]
}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop
 80089b8:	e7fd      	b.n	80089b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	3318      	adds	r3, #24
 80089be:	4618      	mov	r0, r3
 80089c0:	f7fe fe56 	bl	8007670 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089c4:	4b1d      	ldr	r3, [pc, #116]	@ (8008a3c <xTaskRemoveFromEventList+0xb0>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d11d      	bne.n	8008a08 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	3304      	adds	r3, #4
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fe fe4d 	bl	8007670 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089da:	4b19      	ldr	r3, [pc, #100]	@ (8008a40 <xTaskRemoveFromEventList+0xb4>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d903      	bls.n	80089ea <xTaskRemoveFromEventList+0x5e>
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e6:	4a16      	ldr	r2, [pc, #88]	@ (8008a40 <xTaskRemoveFromEventList+0xb4>)
 80089e8:	6013      	str	r3, [r2, #0]
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ee:	4613      	mov	r3, r2
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4413      	add	r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4a13      	ldr	r2, [pc, #76]	@ (8008a44 <xTaskRemoveFromEventList+0xb8>)
 80089f8:	441a      	add	r2, r3
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	3304      	adds	r3, #4
 80089fe:	4619      	mov	r1, r3
 8008a00:	4610      	mov	r0, r2
 8008a02:	f7fe fdd8 	bl	80075b6 <vListInsertEnd>
 8008a06:	e005      	b.n	8008a14 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	3318      	adds	r3, #24
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	480e      	ldr	r0, [pc, #56]	@ (8008a48 <xTaskRemoveFromEventList+0xbc>)
 8008a10:	f7fe fdd1 	bl	80075b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a18:	4b0c      	ldr	r3, [pc, #48]	@ (8008a4c <xTaskRemoveFromEventList+0xc0>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d905      	bls.n	8008a2e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a22:	2301      	movs	r3, #1
 8008a24:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a26:	4b0a      	ldr	r3, [pc, #40]	@ (8008a50 <xTaskRemoveFromEventList+0xc4>)
 8008a28:	2201      	movs	r2, #1
 8008a2a:	601a      	str	r2, [r3, #0]
 8008a2c:	e001      	b.n	8008a32 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a32:	697b      	ldr	r3, [r7, #20]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3718      	adds	r7, #24
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	200057f4 	.word	0x200057f4
 8008a40:	200057d4 	.word	0x200057d4
 8008a44:	200052fc 	.word	0x200052fc
 8008a48:	2000578c 	.word	0x2000578c
 8008a4c:	200052f8 	.word	0x200052f8
 8008a50:	200057e0 	.word	0x200057e0

08008a54 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10b      	bne.n	8008a7a <vTaskSetTimeOutState+0x26>
	__asm volatile
 8008a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a66:	f383 8811 	msr	BASEPRI, r3
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	60fb      	str	r3, [r7, #12]
}
 8008a74:	bf00      	nop
 8008a76:	bf00      	nop
 8008a78:	e7fd      	b.n	8008a76 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008a7a:	f000 fedd 	bl	8009838 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008a7e:	4b07      	ldr	r3, [pc, #28]	@ (8008a9c <vTaskSetTimeOutState+0x48>)
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008a86:	4b06      	ldr	r3, [pc, #24]	@ (8008aa0 <vTaskSetTimeOutState+0x4c>)
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008a8e:	f000 ff05 	bl	800989c <vPortExitCritical>
}
 8008a92:	bf00      	nop
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	200057e4 	.word	0x200057e4
 8008aa0:	200057d0 	.word	0x200057d0

08008aa4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008aac:	4b06      	ldr	r3, [pc, #24]	@ (8008ac8 <vTaskInternalSetTimeOutState+0x24>)
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ab4:	4b05      	ldr	r3, [pc, #20]	@ (8008acc <vTaskInternalSetTimeOutState+0x28>)
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	605a      	str	r2, [r3, #4]
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	200057e4 	.word	0x200057e4
 8008acc:	200057d0 	.word	0x200057d0

08008ad0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b088      	sub	sp, #32
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10b      	bne.n	8008af8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae4:	f383 8811 	msr	BASEPRI, r3
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	f3bf 8f4f 	dsb	sy
 8008af0:	613b      	str	r3, [r7, #16]
}
 8008af2:	bf00      	nop
 8008af4:	bf00      	nop
 8008af6:	e7fd      	b.n	8008af4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d10b      	bne.n	8008b16 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	60fb      	str	r3, [r7, #12]
}
 8008b10:	bf00      	nop
 8008b12:	bf00      	nop
 8008b14:	e7fd      	b.n	8008b12 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008b16:	f000 fe8f 	bl	8009838 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8008b90 <xTaskCheckForTimeOut+0xc0>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	69ba      	ldr	r2, [r7, #24]
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b32:	d102      	bne.n	8008b3a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b34:	2300      	movs	r3, #0
 8008b36:	61fb      	str	r3, [r7, #28]
 8008b38:	e023      	b.n	8008b82 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	4b15      	ldr	r3, [pc, #84]	@ (8008b94 <xTaskCheckForTimeOut+0xc4>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d007      	beq.n	8008b56 <xTaskCheckForTimeOut+0x86>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	69ba      	ldr	r2, [r7, #24]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d302      	bcc.n	8008b56 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b50:	2301      	movs	r3, #1
 8008b52:	61fb      	str	r3, [r7, #28]
 8008b54:	e015      	b.n	8008b82 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d20b      	bcs.n	8008b78 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	1ad2      	subs	r2, r2, r3
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f7ff ff99 	bl	8008aa4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b72:	2300      	movs	r3, #0
 8008b74:	61fb      	str	r3, [r7, #28]
 8008b76:	e004      	b.n	8008b82 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b82:	f000 fe8b 	bl	800989c <vPortExitCritical>

	return xReturn;
 8008b86:	69fb      	ldr	r3, [r7, #28]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3720      	adds	r7, #32
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	200057d0 	.word	0x200057d0
 8008b94:	200057e4 	.word	0x200057e4

08008b98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b98:	b480      	push	{r7}
 8008b9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008b9c:	4b03      	ldr	r3, [pc, #12]	@ (8008bac <vTaskMissedYield+0x14>)
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	601a      	str	r2, [r3, #0]
}
 8008ba2:	bf00      	nop
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	200057e0 	.word	0x200057e0

08008bb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008bb8:	f000 f852 	bl	8008c60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008bbc:	4b06      	ldr	r3, [pc, #24]	@ (8008bd8 <prvIdleTask+0x28>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d9f9      	bls.n	8008bb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008bc4:	4b05      	ldr	r3, [pc, #20]	@ (8008bdc <prvIdleTask+0x2c>)
 8008bc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bca:	601a      	str	r2, [r3, #0]
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008bd4:	e7f0      	b.n	8008bb8 <prvIdleTask+0x8>
 8008bd6:	bf00      	nop
 8008bd8:	200052fc 	.word	0x200052fc
 8008bdc:	e000ed04 	.word	0xe000ed04

08008be0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008be6:	2300      	movs	r3, #0
 8008be8:	607b      	str	r3, [r7, #4]
 8008bea:	e00c      	b.n	8008c06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	4613      	mov	r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4413      	add	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4a12      	ldr	r2, [pc, #72]	@ (8008c40 <prvInitialiseTaskLists+0x60>)
 8008bf8:	4413      	add	r3, r2
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fe fcae 	bl	800755c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	3301      	adds	r3, #1
 8008c04:	607b      	str	r3, [r7, #4]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2b37      	cmp	r3, #55	@ 0x37
 8008c0a:	d9ef      	bls.n	8008bec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c0c:	480d      	ldr	r0, [pc, #52]	@ (8008c44 <prvInitialiseTaskLists+0x64>)
 8008c0e:	f7fe fca5 	bl	800755c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c12:	480d      	ldr	r0, [pc, #52]	@ (8008c48 <prvInitialiseTaskLists+0x68>)
 8008c14:	f7fe fca2 	bl	800755c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c18:	480c      	ldr	r0, [pc, #48]	@ (8008c4c <prvInitialiseTaskLists+0x6c>)
 8008c1a:	f7fe fc9f 	bl	800755c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c1e:	480c      	ldr	r0, [pc, #48]	@ (8008c50 <prvInitialiseTaskLists+0x70>)
 8008c20:	f7fe fc9c 	bl	800755c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c24:	480b      	ldr	r0, [pc, #44]	@ (8008c54 <prvInitialiseTaskLists+0x74>)
 8008c26:	f7fe fc99 	bl	800755c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8008c58 <prvInitialiseTaskLists+0x78>)
 8008c2c:	4a05      	ldr	r2, [pc, #20]	@ (8008c44 <prvInitialiseTaskLists+0x64>)
 8008c2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c30:	4b0a      	ldr	r3, [pc, #40]	@ (8008c5c <prvInitialiseTaskLists+0x7c>)
 8008c32:	4a05      	ldr	r2, [pc, #20]	@ (8008c48 <prvInitialiseTaskLists+0x68>)
 8008c34:	601a      	str	r2, [r3, #0]
}
 8008c36:	bf00      	nop
 8008c38:	3708      	adds	r7, #8
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	200052fc 	.word	0x200052fc
 8008c44:	2000575c 	.word	0x2000575c
 8008c48:	20005770 	.word	0x20005770
 8008c4c:	2000578c 	.word	0x2000578c
 8008c50:	200057a0 	.word	0x200057a0
 8008c54:	200057b8 	.word	0x200057b8
 8008c58:	20005784 	.word	0x20005784
 8008c5c:	20005788 	.word	0x20005788

08008c60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c66:	e019      	b.n	8008c9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c68:	f000 fde6 	bl	8009838 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c6c:	4b10      	ldr	r3, [pc, #64]	@ (8008cb0 <prvCheckTasksWaitingTermination+0x50>)
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	3304      	adds	r3, #4
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7fe fcf9 	bl	8007670 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb4 <prvCheckTasksWaitingTermination+0x54>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	3b01      	subs	r3, #1
 8008c84:	4a0b      	ldr	r2, [pc, #44]	@ (8008cb4 <prvCheckTasksWaitingTermination+0x54>)
 8008c86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c88:	4b0b      	ldr	r3, [pc, #44]	@ (8008cb8 <prvCheckTasksWaitingTermination+0x58>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8008cb8 <prvCheckTasksWaitingTermination+0x58>)
 8008c90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c92:	f000 fe03 	bl	800989c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f810 	bl	8008cbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c9c:	4b06      	ldr	r3, [pc, #24]	@ (8008cb8 <prvCheckTasksWaitingTermination+0x58>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1e1      	bne.n	8008c68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ca4:	bf00      	nop
 8008ca6:	bf00      	nop
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	200057a0 	.word	0x200057a0
 8008cb4:	200057cc 	.word	0x200057cc
 8008cb8:	200057b4 	.word	0x200057b4

08008cbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d108      	bne.n	8008ce0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 ffa0 	bl	8009c18 <vPortFree>
				vPortFree( pxTCB );
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 ff9d 	bl	8009c18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008cde:	e019      	b.n	8008d14 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d103      	bne.n	8008cf2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 ff94 	bl	8009c18 <vPortFree>
	}
 8008cf0:	e010      	b.n	8008d14 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d00b      	beq.n	8008d14 <prvDeleteTCB+0x58>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	60fb      	str	r3, [r7, #12]
}
 8008d0e:	bf00      	nop
 8008d10:	bf00      	nop
 8008d12:	e7fd      	b.n	8008d10 <prvDeleteTCB+0x54>
	}
 8008d14:	bf00      	nop
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d22:	4b0c      	ldr	r3, [pc, #48]	@ (8008d54 <prvResetNextTaskUnblockTime+0x38>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d104      	bne.n	8008d36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d58 <prvResetNextTaskUnblockTime+0x3c>)
 8008d2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d34:	e008      	b.n	8008d48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d36:	4b07      	ldr	r3, [pc, #28]	@ (8008d54 <prvResetNextTaskUnblockTime+0x38>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	4a04      	ldr	r2, [pc, #16]	@ (8008d58 <prvResetNextTaskUnblockTime+0x3c>)
 8008d46:	6013      	str	r3, [r2, #0]
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr
 8008d54:	20005784 	.word	0x20005784
 8008d58:	200057ec 	.word	0x200057ec

08008d5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d62:	4b0b      	ldr	r3, [pc, #44]	@ (8008d90 <xTaskGetSchedulerState+0x34>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d102      	bne.n	8008d70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	607b      	str	r3, [r7, #4]
 8008d6e:	e008      	b.n	8008d82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d70:	4b08      	ldr	r3, [pc, #32]	@ (8008d94 <xTaskGetSchedulerState+0x38>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d102      	bne.n	8008d7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d78:	2302      	movs	r3, #2
 8008d7a:	607b      	str	r3, [r7, #4]
 8008d7c:	e001      	b.n	8008d82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d82:	687b      	ldr	r3, [r7, #4]
	}
 8008d84:	4618      	mov	r0, r3
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr
 8008d90:	200057d8 	.word	0x200057d8
 8008d94:	200057f4 	.word	0x200057f4

08008d98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008da4:	2300      	movs	r3, #0
 8008da6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d058      	beq.n	8008e60 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008dae:	4b2f      	ldr	r3, [pc, #188]	@ (8008e6c <xTaskPriorityDisinherit+0xd4>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	693a      	ldr	r2, [r7, #16]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d00b      	beq.n	8008dd0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	60fb      	str	r3, [r7, #12]
}
 8008dca:	bf00      	nop
 8008dcc:	bf00      	nop
 8008dce:	e7fd      	b.n	8008dcc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d10b      	bne.n	8008df0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ddc:	f383 8811 	msr	BASEPRI, r3
 8008de0:	f3bf 8f6f 	isb	sy
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	60bb      	str	r3, [r7, #8]
}
 8008dea:	bf00      	nop
 8008dec:	bf00      	nop
 8008dee:	e7fd      	b.n	8008dec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008df4:	1e5a      	subs	r2, r3, #1
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d02c      	beq.n	8008e60 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d128      	bne.n	8008e60 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	3304      	adds	r3, #4
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7fe fc2c 	bl	8007670 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e24:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e30:	4b0f      	ldr	r3, [pc, #60]	@ (8008e70 <xTaskPriorityDisinherit+0xd8>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d903      	bls.n	8008e40 <xTaskPriorityDisinherit+0xa8>
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e3c:	4a0c      	ldr	r2, [pc, #48]	@ (8008e70 <xTaskPriorityDisinherit+0xd8>)
 8008e3e:	6013      	str	r3, [r2, #0]
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e44:	4613      	mov	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4413      	add	r3, r2
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	4a09      	ldr	r2, [pc, #36]	@ (8008e74 <xTaskPriorityDisinherit+0xdc>)
 8008e4e:	441a      	add	r2, r3
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	3304      	adds	r3, #4
 8008e54:	4619      	mov	r1, r3
 8008e56:	4610      	mov	r0, r2
 8008e58:	f7fe fbad 	bl	80075b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e60:	697b      	ldr	r3, [r7, #20]
	}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3718      	adds	r7, #24
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	200052f8 	.word	0x200052f8
 8008e70:	200057d4 	.word	0x200057d4
 8008e74:	200052fc 	.word	0x200052fc

08008e78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e82:	4b21      	ldr	r3, [pc, #132]	@ (8008f08 <prvAddCurrentTaskToDelayedList+0x90>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e88:	4b20      	ldr	r3, [pc, #128]	@ (8008f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fe fbee 	bl	8007670 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e9a:	d10a      	bne.n	8008eb2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d007      	beq.n	8008eb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8008f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	4819      	ldr	r0, [pc, #100]	@ (8008f10 <prvAddCurrentTaskToDelayedList+0x98>)
 8008eac:	f7fe fb83 	bl	80075b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008eb0:	e026      	b.n	8008f00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008eba:	4b14      	ldr	r3, [pc, #80]	@ (8008f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ec2:	68ba      	ldr	r2, [r7, #8]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d209      	bcs.n	8008ede <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008eca:	4b12      	ldr	r3, [pc, #72]	@ (8008f14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	4b0f      	ldr	r3, [pc, #60]	@ (8008f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	3304      	adds	r3, #4
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	4610      	mov	r0, r2
 8008ed8:	f7fe fb91 	bl	80075fe <vListInsert>
}
 8008edc:	e010      	b.n	8008f00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ede:	4b0e      	ldr	r3, [pc, #56]	@ (8008f18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8008f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4610      	mov	r0, r2
 8008eec:	f7fe fb87 	bl	80075fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8008f1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d202      	bcs.n	8008f00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008efa:	4a08      	ldr	r2, [pc, #32]	@ (8008f1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	6013      	str	r3, [r2, #0]
}
 8008f00:	bf00      	nop
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	200057d0 	.word	0x200057d0
 8008f0c:	200052f8 	.word	0x200052f8
 8008f10:	200057b8 	.word	0x200057b8
 8008f14:	20005788 	.word	0x20005788
 8008f18:	20005784 	.word	0x20005784
 8008f1c:	200057ec 	.word	0x200057ec

08008f20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08a      	sub	sp, #40	@ 0x28
 8008f24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f26:	2300      	movs	r3, #0
 8008f28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f2a:	f000 fb13 	bl	8009554 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8008fa4 <xTimerCreateTimerTask+0x84>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d021      	beq.n	8008f7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f36:	2300      	movs	r3, #0
 8008f38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f3e:	1d3a      	adds	r2, r7, #4
 8008f40:	f107 0108 	add.w	r1, r7, #8
 8008f44:	f107 030c 	add.w	r3, r7, #12
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7fe faed 	bl	8007528 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f4e:	6879      	ldr	r1, [r7, #4]
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	9202      	str	r2, [sp, #8]
 8008f56:	9301      	str	r3, [sp, #4]
 8008f58:	2302      	movs	r3, #2
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	460a      	mov	r2, r1
 8008f60:	4911      	ldr	r1, [pc, #68]	@ (8008fa8 <xTimerCreateTimerTask+0x88>)
 8008f62:	4812      	ldr	r0, [pc, #72]	@ (8008fac <xTimerCreateTimerTask+0x8c>)
 8008f64:	f7ff f8a8 	bl	80080b8 <xTaskCreateStatic>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	4a11      	ldr	r2, [pc, #68]	@ (8008fb0 <xTimerCreateTimerTask+0x90>)
 8008f6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f6e:	4b10      	ldr	r3, [pc, #64]	@ (8008fb0 <xTimerCreateTimerTask+0x90>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d001      	beq.n	8008f7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f76:	2301      	movs	r3, #1
 8008f78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10b      	bne.n	8008f98 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	613b      	str	r3, [r7, #16]
}
 8008f92:	bf00      	nop
 8008f94:	bf00      	nop
 8008f96:	e7fd      	b.n	8008f94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008f98:	697b      	ldr	r3, [r7, #20]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3718      	adds	r7, #24
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	20005828 	.word	0x20005828
 8008fa8:	080187c4 	.word	0x080187c4
 8008fac:	080090ed 	.word	0x080090ed
 8008fb0:	2000582c 	.word	0x2000582c

08008fb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b08a      	sub	sp, #40	@ 0x28
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	607a      	str	r2, [r7, #4]
 8008fc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10b      	bne.n	8008fe4 <xTimerGenericCommand+0x30>
	__asm volatile
 8008fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd0:	f383 8811 	msr	BASEPRI, r3
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	623b      	str	r3, [r7, #32]
}
 8008fde:	bf00      	nop
 8008fe0:	bf00      	nop
 8008fe2:	e7fd      	b.n	8008fe0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008fe4:	4b19      	ldr	r3, [pc, #100]	@ (800904c <xTimerGenericCommand+0x98>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d02a      	beq.n	8009042 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	2b05      	cmp	r3, #5
 8008ffc:	dc18      	bgt.n	8009030 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ffe:	f7ff fead 	bl	8008d5c <xTaskGetSchedulerState>
 8009002:	4603      	mov	r3, r0
 8009004:	2b02      	cmp	r3, #2
 8009006:	d109      	bne.n	800901c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009008:	4b10      	ldr	r3, [pc, #64]	@ (800904c <xTimerGenericCommand+0x98>)
 800900a:	6818      	ldr	r0, [r3, #0]
 800900c:	f107 0110 	add.w	r1, r7, #16
 8009010:	2300      	movs	r3, #0
 8009012:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009014:	f7fe fc60 	bl	80078d8 <xQueueGenericSend>
 8009018:	6278      	str	r0, [r7, #36]	@ 0x24
 800901a:	e012      	b.n	8009042 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800901c:	4b0b      	ldr	r3, [pc, #44]	@ (800904c <xTimerGenericCommand+0x98>)
 800901e:	6818      	ldr	r0, [r3, #0]
 8009020:	f107 0110 	add.w	r1, r7, #16
 8009024:	2300      	movs	r3, #0
 8009026:	2200      	movs	r2, #0
 8009028:	f7fe fc56 	bl	80078d8 <xQueueGenericSend>
 800902c:	6278      	str	r0, [r7, #36]	@ 0x24
 800902e:	e008      	b.n	8009042 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009030:	4b06      	ldr	r3, [pc, #24]	@ (800904c <xTimerGenericCommand+0x98>)
 8009032:	6818      	ldr	r0, [r3, #0]
 8009034:	f107 0110 	add.w	r1, r7, #16
 8009038:	2300      	movs	r3, #0
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	f7fe fd4e 	bl	8007adc <xQueueGenericSendFromISR>
 8009040:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009044:	4618      	mov	r0, r3
 8009046:	3728      	adds	r7, #40	@ 0x28
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	20005828 	.word	0x20005828

08009050 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b088      	sub	sp, #32
 8009054:	af02      	add	r7, sp, #8
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800905a:	4b23      	ldr	r3, [pc, #140]	@ (80090e8 <prvProcessExpiredTimer+0x98>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	3304      	adds	r3, #4
 8009068:	4618      	mov	r0, r3
 800906a:	f7fe fb01 	bl	8007670 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009074:	f003 0304 	and.w	r3, r3, #4
 8009078:	2b00      	cmp	r3, #0
 800907a:	d023      	beq.n	80090c4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	699a      	ldr	r2, [r3, #24]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	18d1      	adds	r1, r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	6978      	ldr	r0, [r7, #20]
 800908a:	f000 f8d5 	bl	8009238 <prvInsertTimerInActiveList>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d020      	beq.n	80090d6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009094:	2300      	movs	r3, #0
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	2300      	movs	r3, #0
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	2100      	movs	r1, #0
 800909e:	6978      	ldr	r0, [r7, #20]
 80090a0:	f7ff ff88 	bl	8008fb4 <xTimerGenericCommand>
 80090a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d114      	bne.n	80090d6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80090ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	60fb      	str	r3, [r7, #12]
}
 80090be:	bf00      	nop
 80090c0:	bf00      	nop
 80090c2:	e7fd      	b.n	80090c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090ca:	f023 0301 	bic.w	r3, r3, #1
 80090ce:	b2da      	uxtb	r2, r3
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	6a1b      	ldr	r3, [r3, #32]
 80090da:	6978      	ldr	r0, [r7, #20]
 80090dc:	4798      	blx	r3
}
 80090de:	bf00      	nop
 80090e0:	3718      	adds	r7, #24
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	20005820 	.word	0x20005820

080090ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090f4:	f107 0308 	add.w	r3, r7, #8
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 f859 	bl	80091b0 <prvGetNextExpireTime>
 80090fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	4619      	mov	r1, r3
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f000 f805 	bl	8009114 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800910a:	f000 f8d7 	bl	80092bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800910e:	bf00      	nop
 8009110:	e7f0      	b.n	80090f4 <prvTimerTask+0x8>
	...

08009114 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800911e:	f7ff fa0f 	bl	8008540 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009122:	f107 0308 	add.w	r3, r7, #8
 8009126:	4618      	mov	r0, r3
 8009128:	f000 f866 	bl	80091f8 <prvSampleTimeNow>
 800912c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d130      	bne.n	8009196 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10a      	bne.n	8009150 <prvProcessTimerOrBlockTask+0x3c>
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	429a      	cmp	r2, r3
 8009140:	d806      	bhi.n	8009150 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009142:	f7ff fa0b 	bl	800855c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009146:	68f9      	ldr	r1, [r7, #12]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7ff ff81 	bl	8009050 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800914e:	e024      	b.n	800919a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d008      	beq.n	8009168 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009156:	4b13      	ldr	r3, [pc, #76]	@ (80091a4 <prvProcessTimerOrBlockTask+0x90>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d101      	bne.n	8009164 <prvProcessTimerOrBlockTask+0x50>
 8009160:	2301      	movs	r3, #1
 8009162:	e000      	b.n	8009166 <prvProcessTimerOrBlockTask+0x52>
 8009164:	2300      	movs	r3, #0
 8009166:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009168:	4b0f      	ldr	r3, [pc, #60]	@ (80091a8 <prvProcessTimerOrBlockTask+0x94>)
 800916a:	6818      	ldr	r0, [r3, #0]
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	4619      	mov	r1, r3
 8009176:	f7fe ff6b 	bl	8008050 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800917a:	f7ff f9ef 	bl	800855c <xTaskResumeAll>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d10a      	bne.n	800919a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009184:	4b09      	ldr	r3, [pc, #36]	@ (80091ac <prvProcessTimerOrBlockTask+0x98>)
 8009186:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800918a:	601a      	str	r2, [r3, #0]
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	f3bf 8f6f 	isb	sy
}
 8009194:	e001      	b.n	800919a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009196:	f7ff f9e1 	bl	800855c <xTaskResumeAll>
}
 800919a:	bf00      	nop
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	20005824 	.word	0x20005824
 80091a8:	20005828 	.word	0x20005828
 80091ac:	e000ed04 	.word	0xe000ed04

080091b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80091b8:	4b0e      	ldr	r3, [pc, #56]	@ (80091f4 <prvGetNextExpireTime+0x44>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d101      	bne.n	80091c6 <prvGetNextExpireTime+0x16>
 80091c2:	2201      	movs	r2, #1
 80091c4:	e000      	b.n	80091c8 <prvGetNextExpireTime+0x18>
 80091c6:	2200      	movs	r2, #0
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d105      	bne.n	80091e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091d4:	4b07      	ldr	r3, [pc, #28]	@ (80091f4 <prvGetNextExpireTime+0x44>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	60fb      	str	r3, [r7, #12]
 80091de:	e001      	b.n	80091e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80091e0:	2300      	movs	r3, #0
 80091e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80091e4:	68fb      	ldr	r3, [r7, #12]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	20005820 	.word	0x20005820

080091f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009200:	f7ff fa4a 	bl	8008698 <xTaskGetTickCount>
 8009204:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009206:	4b0b      	ldr	r3, [pc, #44]	@ (8009234 <prvSampleTimeNow+0x3c>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	429a      	cmp	r2, r3
 800920e:	d205      	bcs.n	800921c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009210:	f000 f93a 	bl	8009488 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	601a      	str	r2, [r3, #0]
 800921a:	e002      	b.n	8009222 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009222:	4a04      	ldr	r2, [pc, #16]	@ (8009234 <prvSampleTimeNow+0x3c>)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009228:	68fb      	ldr	r3, [r7, #12]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	20005830 	.word	0x20005830

08009238 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
 8009244:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009246:	2300      	movs	r3, #0
 8009248:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	68ba      	ldr	r2, [r7, #8]
 800924e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	429a      	cmp	r2, r3
 800925c:	d812      	bhi.n	8009284 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	1ad2      	subs	r2, r2, r3
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	429a      	cmp	r2, r3
 800926a:	d302      	bcc.n	8009272 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800926c:	2301      	movs	r3, #1
 800926e:	617b      	str	r3, [r7, #20]
 8009270:	e01b      	b.n	80092aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009272:	4b10      	ldr	r3, [pc, #64]	@ (80092b4 <prvInsertTimerInActiveList+0x7c>)
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	3304      	adds	r3, #4
 800927a:	4619      	mov	r1, r3
 800927c:	4610      	mov	r0, r2
 800927e:	f7fe f9be 	bl	80075fe <vListInsert>
 8009282:	e012      	b.n	80092aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	429a      	cmp	r2, r3
 800928a:	d206      	bcs.n	800929a <prvInsertTimerInActiveList+0x62>
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	429a      	cmp	r2, r3
 8009292:	d302      	bcc.n	800929a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009294:	2301      	movs	r3, #1
 8009296:	617b      	str	r3, [r7, #20]
 8009298:	e007      	b.n	80092aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800929a:	4b07      	ldr	r3, [pc, #28]	@ (80092b8 <prvInsertTimerInActiveList+0x80>)
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3304      	adds	r3, #4
 80092a2:	4619      	mov	r1, r3
 80092a4:	4610      	mov	r0, r2
 80092a6:	f7fe f9aa 	bl	80075fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 80092aa:	697b      	ldr	r3, [r7, #20]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3718      	adds	r7, #24
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	20005824 	.word	0x20005824
 80092b8:	20005820 	.word	0x20005820

080092bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b08e      	sub	sp, #56	@ 0x38
 80092c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092c2:	e0ce      	b.n	8009462 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	da19      	bge.n	80092fe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80092ca:	1d3b      	adds	r3, r7, #4
 80092cc:	3304      	adds	r3, #4
 80092ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80092d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10b      	bne.n	80092ee <prvProcessReceivedCommands+0x32>
	__asm volatile
 80092d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092da:	f383 8811 	msr	BASEPRI, r3
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	61fb      	str	r3, [r7, #28]
}
 80092e8:	bf00      	nop
 80092ea:	bf00      	nop
 80092ec:	e7fd      	b.n	80092ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80092ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092f4:	6850      	ldr	r0, [r2, #4]
 80092f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092f8:	6892      	ldr	r2, [r2, #8]
 80092fa:	4611      	mov	r1, r2
 80092fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	f2c0 80ae 	blt.w	8009462 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800930a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800930c:	695b      	ldr	r3, [r3, #20]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d004      	beq.n	800931c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009314:	3304      	adds	r3, #4
 8009316:	4618      	mov	r0, r3
 8009318:	f7fe f9aa 	bl	8007670 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800931c:	463b      	mov	r3, r7
 800931e:	4618      	mov	r0, r3
 8009320:	f7ff ff6a 	bl	80091f8 <prvSampleTimeNow>
 8009324:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2b09      	cmp	r3, #9
 800932a:	f200 8097 	bhi.w	800945c <prvProcessReceivedCommands+0x1a0>
 800932e:	a201      	add	r2, pc, #4	@ (adr r2, 8009334 <prvProcessReceivedCommands+0x78>)
 8009330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009334:	0800935d 	.word	0x0800935d
 8009338:	0800935d 	.word	0x0800935d
 800933c:	0800935d 	.word	0x0800935d
 8009340:	080093d3 	.word	0x080093d3
 8009344:	080093e7 	.word	0x080093e7
 8009348:	08009433 	.word	0x08009433
 800934c:	0800935d 	.word	0x0800935d
 8009350:	0800935d 	.word	0x0800935d
 8009354:	080093d3 	.word	0x080093d3
 8009358:	080093e7 	.word	0x080093e7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800935c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800935e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009362:	f043 0301 	orr.w	r3, r3, #1
 8009366:	b2da      	uxtb	r2, r3
 8009368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800936a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	18d1      	adds	r1, r2, r3
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800937a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800937c:	f7ff ff5c 	bl	8009238 <prvInsertTimerInActiveList>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d06c      	beq.n	8009460 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009388:	6a1b      	ldr	r3, [r3, #32]
 800938a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800938c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800938e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009390:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009394:	f003 0304 	and.w	r3, r3, #4
 8009398:	2b00      	cmp	r3, #0
 800939a:	d061      	beq.n	8009460 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800939c:	68ba      	ldr	r2, [r7, #8]
 800939e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a0:	699b      	ldr	r3, [r3, #24]
 80093a2:	441a      	add	r2, r3
 80093a4:	2300      	movs	r3, #0
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	2300      	movs	r3, #0
 80093aa:	2100      	movs	r1, #0
 80093ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093ae:	f7ff fe01 	bl	8008fb4 <xTimerGenericCommand>
 80093b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80093b4:	6a3b      	ldr	r3, [r7, #32]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d152      	bne.n	8009460 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	61bb      	str	r3, [r7, #24]
}
 80093cc:	bf00      	nop
 80093ce:	bf00      	nop
 80093d0:	e7fd      	b.n	80093ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093d8:	f023 0301 	bic.w	r3, r3, #1
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80093e4:	e03d      	b.n	8009462 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80093e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093ec:	f043 0301 	orr.w	r3, r3, #1
 80093f0:	b2da      	uxtb	r2, r3
 80093f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80093f8:	68ba      	ldr	r2, [r7, #8]
 80093fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80093fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009400:	699b      	ldr	r3, [r3, #24]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10b      	bne.n	800941e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	617b      	str	r3, [r7, #20]
}
 8009418:	bf00      	nop
 800941a:	bf00      	nop
 800941c:	e7fd      	b.n	800941a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800941e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009420:	699a      	ldr	r2, [r3, #24]
 8009422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009424:	18d1      	adds	r1, r2, r3
 8009426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800942a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800942c:	f7ff ff04 	bl	8009238 <prvInsertTimerInActiveList>
					break;
 8009430:	e017      	b.n	8009462 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009434:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009438:	f003 0302 	and.w	r3, r3, #2
 800943c:	2b00      	cmp	r3, #0
 800943e:	d103      	bne.n	8009448 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009440:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009442:	f000 fbe9 	bl	8009c18 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009446:	e00c      	b.n	8009462 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800944a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800944e:	f023 0301 	bic.w	r3, r3, #1
 8009452:	b2da      	uxtb	r2, r3
 8009454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009456:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800945a:	e002      	b.n	8009462 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800945c:	bf00      	nop
 800945e:	e000      	b.n	8009462 <prvProcessReceivedCommands+0x1a6>
					break;
 8009460:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009462:	4b08      	ldr	r3, [pc, #32]	@ (8009484 <prvProcessReceivedCommands+0x1c8>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	1d39      	adds	r1, r7, #4
 8009468:	2200      	movs	r2, #0
 800946a:	4618      	mov	r0, r3
 800946c:	f7fe fbd4 	bl	8007c18 <xQueueReceive>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	f47f af26 	bne.w	80092c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009478:	bf00      	nop
 800947a:	bf00      	nop
 800947c:	3730      	adds	r7, #48	@ 0x30
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	20005828 	.word	0x20005828

08009488 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b088      	sub	sp, #32
 800948c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800948e:	e049      	b.n	8009524 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009490:	4b2e      	ldr	r3, [pc, #184]	@ (800954c <prvSwitchTimerLists+0xc4>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800949a:	4b2c      	ldr	r3, [pc, #176]	@ (800954c <prvSwitchTimerLists+0xc4>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	3304      	adds	r3, #4
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7fe f8e1 	bl	8007670 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6a1b      	ldr	r3, [r3, #32]
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094bc:	f003 0304 	and.w	r3, r3, #4
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d02f      	beq.n	8009524 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	699b      	ldr	r3, [r3, #24]
 80094c8:	693a      	ldr	r2, [r7, #16]
 80094ca:	4413      	add	r3, r2
 80094cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80094ce:	68ba      	ldr	r2, [r7, #8]
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d90e      	bls.n	80094f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094e2:	4b1a      	ldr	r3, [pc, #104]	@ (800954c <prvSwitchTimerLists+0xc4>)
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	3304      	adds	r3, #4
 80094ea:	4619      	mov	r1, r3
 80094ec:	4610      	mov	r0, r2
 80094ee:	f7fe f886 	bl	80075fe <vListInsert>
 80094f2:	e017      	b.n	8009524 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094f4:	2300      	movs	r3, #0
 80094f6:	9300      	str	r3, [sp, #0]
 80094f8:	2300      	movs	r3, #0
 80094fa:	693a      	ldr	r2, [r7, #16]
 80094fc:	2100      	movs	r1, #0
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f7ff fd58 	bl	8008fb4 <xTimerGenericCommand>
 8009504:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10b      	bne.n	8009524 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	603b      	str	r3, [r7, #0]
}
 800951e:	bf00      	nop
 8009520:	bf00      	nop
 8009522:	e7fd      	b.n	8009520 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009524:	4b09      	ldr	r3, [pc, #36]	@ (800954c <prvSwitchTimerLists+0xc4>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1b0      	bne.n	8009490 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800952e:	4b07      	ldr	r3, [pc, #28]	@ (800954c <prvSwitchTimerLists+0xc4>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009534:	4b06      	ldr	r3, [pc, #24]	@ (8009550 <prvSwitchTimerLists+0xc8>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a04      	ldr	r2, [pc, #16]	@ (800954c <prvSwitchTimerLists+0xc4>)
 800953a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800953c:	4a04      	ldr	r2, [pc, #16]	@ (8009550 <prvSwitchTimerLists+0xc8>)
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	6013      	str	r3, [r2, #0]
}
 8009542:	bf00      	nop
 8009544:	3718      	adds	r7, #24
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	20005820 	.word	0x20005820
 8009550:	20005824 	.word	0x20005824

08009554 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800955a:	f000 f96d 	bl	8009838 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800955e:	4b15      	ldr	r3, [pc, #84]	@ (80095b4 <prvCheckForValidListAndQueue+0x60>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d120      	bne.n	80095a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009566:	4814      	ldr	r0, [pc, #80]	@ (80095b8 <prvCheckForValidListAndQueue+0x64>)
 8009568:	f7fd fff8 	bl	800755c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800956c:	4813      	ldr	r0, [pc, #76]	@ (80095bc <prvCheckForValidListAndQueue+0x68>)
 800956e:	f7fd fff5 	bl	800755c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009572:	4b13      	ldr	r3, [pc, #76]	@ (80095c0 <prvCheckForValidListAndQueue+0x6c>)
 8009574:	4a10      	ldr	r2, [pc, #64]	@ (80095b8 <prvCheckForValidListAndQueue+0x64>)
 8009576:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009578:	4b12      	ldr	r3, [pc, #72]	@ (80095c4 <prvCheckForValidListAndQueue+0x70>)
 800957a:	4a10      	ldr	r2, [pc, #64]	@ (80095bc <prvCheckForValidListAndQueue+0x68>)
 800957c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800957e:	2300      	movs	r3, #0
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	4b11      	ldr	r3, [pc, #68]	@ (80095c8 <prvCheckForValidListAndQueue+0x74>)
 8009584:	4a11      	ldr	r2, [pc, #68]	@ (80095cc <prvCheckForValidListAndQueue+0x78>)
 8009586:	2110      	movs	r1, #16
 8009588:	200a      	movs	r0, #10
 800958a:	f7fe f905 	bl	8007798 <xQueueGenericCreateStatic>
 800958e:	4603      	mov	r3, r0
 8009590:	4a08      	ldr	r2, [pc, #32]	@ (80095b4 <prvCheckForValidListAndQueue+0x60>)
 8009592:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009594:	4b07      	ldr	r3, [pc, #28]	@ (80095b4 <prvCheckForValidListAndQueue+0x60>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d005      	beq.n	80095a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800959c:	4b05      	ldr	r3, [pc, #20]	@ (80095b4 <prvCheckForValidListAndQueue+0x60>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	490b      	ldr	r1, [pc, #44]	@ (80095d0 <prvCheckForValidListAndQueue+0x7c>)
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fe fd2a 	bl	8007ffc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095a8:	f000 f978 	bl	800989c <vPortExitCritical>
}
 80095ac:	bf00      	nop
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	20005828 	.word	0x20005828
 80095b8:	200057f8 	.word	0x200057f8
 80095bc:	2000580c 	.word	0x2000580c
 80095c0:	20005820 	.word	0x20005820
 80095c4:	20005824 	.word	0x20005824
 80095c8:	200058d4 	.word	0x200058d4
 80095cc:	20005834 	.word	0x20005834
 80095d0:	080187cc 	.word	0x080187cc

080095d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	3b04      	subs	r3, #4
 80095e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80095ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3b04      	subs	r3, #4
 80095f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	f023 0201 	bic.w	r2, r3, #1
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	3b04      	subs	r3, #4
 8009602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009604:	4a0c      	ldr	r2, [pc, #48]	@ (8009638 <pxPortInitialiseStack+0x64>)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	3b14      	subs	r3, #20
 800960e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	3b04      	subs	r3, #4
 800961a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f06f 0202 	mvn.w	r2, #2
 8009622:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	3b20      	subs	r3, #32
 8009628:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800962a:	68fb      	ldr	r3, [r7, #12]
}
 800962c:	4618      	mov	r0, r3
 800962e:	3714      	adds	r7, #20
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr
 8009638:	0800963d 	.word	0x0800963d

0800963c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009642:	2300      	movs	r3, #0
 8009644:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009646:	4b13      	ldr	r3, [pc, #76]	@ (8009694 <prvTaskExitError+0x58>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800964e:	d00b      	beq.n	8009668 <prvTaskExitError+0x2c>
	__asm volatile
 8009650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009654:	f383 8811 	msr	BASEPRI, r3
 8009658:	f3bf 8f6f 	isb	sy
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	60fb      	str	r3, [r7, #12]
}
 8009662:	bf00      	nop
 8009664:	bf00      	nop
 8009666:	e7fd      	b.n	8009664 <prvTaskExitError+0x28>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	60bb      	str	r3, [r7, #8]
}
 800967a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800967c:	bf00      	nop
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d0fc      	beq.n	800967e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009684:	bf00      	nop
 8009686:	bf00      	nop
 8009688:	3714      	adds	r7, #20
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	20000010 	.word	0x20000010
	...

080096a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80096a0:	4b07      	ldr	r3, [pc, #28]	@ (80096c0 <pxCurrentTCBConst2>)
 80096a2:	6819      	ldr	r1, [r3, #0]
 80096a4:	6808      	ldr	r0, [r1, #0]
 80096a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096aa:	f380 8809 	msr	PSP, r0
 80096ae:	f3bf 8f6f 	isb	sy
 80096b2:	f04f 0000 	mov.w	r0, #0
 80096b6:	f380 8811 	msr	BASEPRI, r0
 80096ba:	4770      	bx	lr
 80096bc:	f3af 8000 	nop.w

080096c0 <pxCurrentTCBConst2>:
 80096c0:	200052f8 	.word	0x200052f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80096c4:	bf00      	nop
 80096c6:	bf00      	nop

080096c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80096c8:	4808      	ldr	r0, [pc, #32]	@ (80096ec <prvPortStartFirstTask+0x24>)
 80096ca:	6800      	ldr	r0, [r0, #0]
 80096cc:	6800      	ldr	r0, [r0, #0]
 80096ce:	f380 8808 	msr	MSP, r0
 80096d2:	f04f 0000 	mov.w	r0, #0
 80096d6:	f380 8814 	msr	CONTROL, r0
 80096da:	b662      	cpsie	i
 80096dc:	b661      	cpsie	f
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	f3bf 8f6f 	isb	sy
 80096e6:	df00      	svc	0
 80096e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80096ea:	bf00      	nop
 80096ec:	e000ed08 	.word	0xe000ed08

080096f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b086      	sub	sp, #24
 80096f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80096f6:	4b47      	ldr	r3, [pc, #284]	@ (8009814 <xPortStartScheduler+0x124>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a47      	ldr	r2, [pc, #284]	@ (8009818 <xPortStartScheduler+0x128>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d10b      	bne.n	8009718 <xPortStartScheduler+0x28>
	__asm volatile
 8009700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	613b      	str	r3, [r7, #16]
}
 8009712:	bf00      	nop
 8009714:	bf00      	nop
 8009716:	e7fd      	b.n	8009714 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009718:	4b3e      	ldr	r3, [pc, #248]	@ (8009814 <xPortStartScheduler+0x124>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a3f      	ldr	r2, [pc, #252]	@ (800981c <xPortStartScheduler+0x12c>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d10b      	bne.n	800973a <xPortStartScheduler+0x4a>
	__asm volatile
 8009722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	60fb      	str	r3, [r7, #12]
}
 8009734:	bf00      	nop
 8009736:	bf00      	nop
 8009738:	e7fd      	b.n	8009736 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800973a:	4b39      	ldr	r3, [pc, #228]	@ (8009820 <xPortStartScheduler+0x130>)
 800973c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	b2db      	uxtb	r3, r3
 8009744:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	22ff      	movs	r2, #255	@ 0xff
 800974a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	b2db      	uxtb	r3, r3
 8009752:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009754:	78fb      	ldrb	r3, [r7, #3]
 8009756:	b2db      	uxtb	r3, r3
 8009758:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800975c:	b2da      	uxtb	r2, r3
 800975e:	4b31      	ldr	r3, [pc, #196]	@ (8009824 <xPortStartScheduler+0x134>)
 8009760:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009762:	4b31      	ldr	r3, [pc, #196]	@ (8009828 <xPortStartScheduler+0x138>)
 8009764:	2207      	movs	r2, #7
 8009766:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009768:	e009      	b.n	800977e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800976a:	4b2f      	ldr	r3, [pc, #188]	@ (8009828 <xPortStartScheduler+0x138>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	3b01      	subs	r3, #1
 8009770:	4a2d      	ldr	r2, [pc, #180]	@ (8009828 <xPortStartScheduler+0x138>)
 8009772:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009774:	78fb      	ldrb	r3, [r7, #3]
 8009776:	b2db      	uxtb	r3, r3
 8009778:	005b      	lsls	r3, r3, #1
 800977a:	b2db      	uxtb	r3, r3
 800977c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800977e:	78fb      	ldrb	r3, [r7, #3]
 8009780:	b2db      	uxtb	r3, r3
 8009782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009786:	2b80      	cmp	r3, #128	@ 0x80
 8009788:	d0ef      	beq.n	800976a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800978a:	4b27      	ldr	r3, [pc, #156]	@ (8009828 <xPortStartScheduler+0x138>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f1c3 0307 	rsb	r3, r3, #7
 8009792:	2b04      	cmp	r3, #4
 8009794:	d00b      	beq.n	80097ae <xPortStartScheduler+0xbe>
	__asm volatile
 8009796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800979a:	f383 8811 	msr	BASEPRI, r3
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	f3bf 8f4f 	dsb	sy
 80097a6:	60bb      	str	r3, [r7, #8]
}
 80097a8:	bf00      	nop
 80097aa:	bf00      	nop
 80097ac:	e7fd      	b.n	80097aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80097ae:	4b1e      	ldr	r3, [pc, #120]	@ (8009828 <xPortStartScheduler+0x138>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	021b      	lsls	r3, r3, #8
 80097b4:	4a1c      	ldr	r2, [pc, #112]	@ (8009828 <xPortStartScheduler+0x138>)
 80097b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097b8:	4b1b      	ldr	r3, [pc, #108]	@ (8009828 <xPortStartScheduler+0x138>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80097c0:	4a19      	ldr	r2, [pc, #100]	@ (8009828 <xPortStartScheduler+0x138>)
 80097c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097cc:	4b17      	ldr	r3, [pc, #92]	@ (800982c <xPortStartScheduler+0x13c>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a16      	ldr	r2, [pc, #88]	@ (800982c <xPortStartScheduler+0x13c>)
 80097d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80097d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097d8:	4b14      	ldr	r3, [pc, #80]	@ (800982c <xPortStartScheduler+0x13c>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a13      	ldr	r2, [pc, #76]	@ (800982c <xPortStartScheduler+0x13c>)
 80097de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80097e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80097e4:	f000 f8da 	bl	800999c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80097e8:	4b11      	ldr	r3, [pc, #68]	@ (8009830 <xPortStartScheduler+0x140>)
 80097ea:	2200      	movs	r2, #0
 80097ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80097ee:	f000 f8f9 	bl	80099e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80097f2:	4b10      	ldr	r3, [pc, #64]	@ (8009834 <xPortStartScheduler+0x144>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a0f      	ldr	r2, [pc, #60]	@ (8009834 <xPortStartScheduler+0x144>)
 80097f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80097fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80097fe:	f7ff ff63 	bl	80096c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009802:	f7ff f813 	bl	800882c <vTaskSwitchContext>
	prvTaskExitError();
 8009806:	f7ff ff19 	bl	800963c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3718      	adds	r7, #24
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	e000ed00 	.word	0xe000ed00
 8009818:	410fc271 	.word	0x410fc271
 800981c:	410fc270 	.word	0x410fc270
 8009820:	e000e400 	.word	0xe000e400
 8009824:	20005924 	.word	0x20005924
 8009828:	20005928 	.word	0x20005928
 800982c:	e000ed20 	.word	0xe000ed20
 8009830:	20000010 	.word	0x20000010
 8009834:	e000ef34 	.word	0xe000ef34

08009838 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
	__asm volatile
 800983e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	607b      	str	r3, [r7, #4]
}
 8009850:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009852:	4b10      	ldr	r3, [pc, #64]	@ (8009894 <vPortEnterCritical+0x5c>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	3301      	adds	r3, #1
 8009858:	4a0e      	ldr	r2, [pc, #56]	@ (8009894 <vPortEnterCritical+0x5c>)
 800985a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800985c:	4b0d      	ldr	r3, [pc, #52]	@ (8009894 <vPortEnterCritical+0x5c>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2b01      	cmp	r3, #1
 8009862:	d110      	bne.n	8009886 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009864:	4b0c      	ldr	r3, [pc, #48]	@ (8009898 <vPortEnterCritical+0x60>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	b2db      	uxtb	r3, r3
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00b      	beq.n	8009886 <vPortEnterCritical+0x4e>
	__asm volatile
 800986e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009872:	f383 8811 	msr	BASEPRI, r3
 8009876:	f3bf 8f6f 	isb	sy
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	603b      	str	r3, [r7, #0]
}
 8009880:	bf00      	nop
 8009882:	bf00      	nop
 8009884:	e7fd      	b.n	8009882 <vPortEnterCritical+0x4a>
	}
}
 8009886:	bf00      	nop
 8009888:	370c      	adds	r7, #12
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	20000010 	.word	0x20000010
 8009898:	e000ed04 	.word	0xe000ed04

0800989c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098a2:	4b12      	ldr	r3, [pc, #72]	@ (80098ec <vPortExitCritical+0x50>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10b      	bne.n	80098c2 <vPortExitCritical+0x26>
	__asm volatile
 80098aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	607b      	str	r3, [r7, #4]
}
 80098bc:	bf00      	nop
 80098be:	bf00      	nop
 80098c0:	e7fd      	b.n	80098be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80098c2:	4b0a      	ldr	r3, [pc, #40]	@ (80098ec <vPortExitCritical+0x50>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	3b01      	subs	r3, #1
 80098c8:	4a08      	ldr	r2, [pc, #32]	@ (80098ec <vPortExitCritical+0x50>)
 80098ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098cc:	4b07      	ldr	r3, [pc, #28]	@ (80098ec <vPortExitCritical+0x50>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d105      	bne.n	80098e0 <vPortExitCritical+0x44>
 80098d4:	2300      	movs	r3, #0
 80098d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	f383 8811 	msr	BASEPRI, r3
}
 80098de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80098e0:	bf00      	nop
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr
 80098ec:	20000010 	.word	0x20000010

080098f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80098f0:	f3ef 8009 	mrs	r0, PSP
 80098f4:	f3bf 8f6f 	isb	sy
 80098f8:	4b15      	ldr	r3, [pc, #84]	@ (8009950 <pxCurrentTCBConst>)
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	f01e 0f10 	tst.w	lr, #16
 8009900:	bf08      	it	eq
 8009902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800990a:	6010      	str	r0, [r2, #0]
 800990c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009910:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009914:	f380 8811 	msr	BASEPRI, r0
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	f7fe ff84 	bl	800882c <vTaskSwitchContext>
 8009924:	f04f 0000 	mov.w	r0, #0
 8009928:	f380 8811 	msr	BASEPRI, r0
 800992c:	bc09      	pop	{r0, r3}
 800992e:	6819      	ldr	r1, [r3, #0]
 8009930:	6808      	ldr	r0, [r1, #0]
 8009932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009936:	f01e 0f10 	tst.w	lr, #16
 800993a:	bf08      	it	eq
 800993c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009940:	f380 8809 	msr	PSP, r0
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop
 800994c:	f3af 8000 	nop.w

08009950 <pxCurrentTCBConst>:
 8009950:	200052f8 	.word	0x200052f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009954:	bf00      	nop
 8009956:	bf00      	nop

08009958 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
	__asm volatile
 800995e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009962:	f383 8811 	msr	BASEPRI, r3
 8009966:	f3bf 8f6f 	isb	sy
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	607b      	str	r3, [r7, #4]
}
 8009970:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009972:	f7fe fea1 	bl	80086b8 <xTaskIncrementTick>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d003      	beq.n	8009984 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800997c:	4b06      	ldr	r3, [pc, #24]	@ (8009998 <xPortSysTickHandler+0x40>)
 800997e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	2300      	movs	r3, #0
 8009986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	f383 8811 	msr	BASEPRI, r3
}
 800998e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009990:	bf00      	nop
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	e000ed04 	.word	0xe000ed04

0800999c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800999c:	b480      	push	{r7}
 800999e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099a0:	4b0b      	ldr	r3, [pc, #44]	@ (80099d0 <vPortSetupTimerInterrupt+0x34>)
 80099a2:	2200      	movs	r2, #0
 80099a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099a6:	4b0b      	ldr	r3, [pc, #44]	@ (80099d4 <vPortSetupTimerInterrupt+0x38>)
 80099a8:	2200      	movs	r2, #0
 80099aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099ac:	4b0a      	ldr	r3, [pc, #40]	@ (80099d8 <vPortSetupTimerInterrupt+0x3c>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a0a      	ldr	r2, [pc, #40]	@ (80099dc <vPortSetupTimerInterrupt+0x40>)
 80099b2:	fba2 2303 	umull	r2, r3, r2, r3
 80099b6:	099b      	lsrs	r3, r3, #6
 80099b8:	4a09      	ldr	r2, [pc, #36]	@ (80099e0 <vPortSetupTimerInterrupt+0x44>)
 80099ba:	3b01      	subs	r3, #1
 80099bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099be:	4b04      	ldr	r3, [pc, #16]	@ (80099d0 <vPortSetupTimerInterrupt+0x34>)
 80099c0:	2207      	movs	r2, #7
 80099c2:	601a      	str	r2, [r3, #0]
}
 80099c4:	bf00      	nop
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	e000e010 	.word	0xe000e010
 80099d4:	e000e018 	.word	0xe000e018
 80099d8:	20000004 	.word	0x20000004
 80099dc:	10624dd3 	.word	0x10624dd3
 80099e0:	e000e014 	.word	0xe000e014

080099e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80099e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80099f4 <vPortEnableVFP+0x10>
 80099e8:	6801      	ldr	r1, [r0, #0]
 80099ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80099ee:	6001      	str	r1, [r0, #0]
 80099f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80099f2:	bf00      	nop
 80099f4:	e000ed88 	.word	0xe000ed88

080099f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80099fe:	f3ef 8305 	mrs	r3, IPSR
 8009a02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2b0f      	cmp	r3, #15
 8009a08:	d915      	bls.n	8009a36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a0a:	4a18      	ldr	r2, [pc, #96]	@ (8009a6c <vPortValidateInterruptPriority+0x74>)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	4413      	add	r3, r2
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a14:	4b16      	ldr	r3, [pc, #88]	@ (8009a70 <vPortValidateInterruptPriority+0x78>)
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	7afa      	ldrb	r2, [r7, #11]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d20b      	bcs.n	8009a36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	607b      	str	r3, [r7, #4]
}
 8009a30:	bf00      	nop
 8009a32:	bf00      	nop
 8009a34:	e7fd      	b.n	8009a32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a36:	4b0f      	ldr	r3, [pc, #60]	@ (8009a74 <vPortValidateInterruptPriority+0x7c>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8009a78 <vPortValidateInterruptPriority+0x80>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d90b      	bls.n	8009a5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a4a:	f383 8811 	msr	BASEPRI, r3
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	603b      	str	r3, [r7, #0]
}
 8009a58:	bf00      	nop
 8009a5a:	bf00      	nop
 8009a5c:	e7fd      	b.n	8009a5a <vPortValidateInterruptPriority+0x62>
	}
 8009a5e:	bf00      	nop
 8009a60:	3714      	adds	r7, #20
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	e000e3f0 	.word	0xe000e3f0
 8009a70:	20005924 	.word	0x20005924
 8009a74:	e000ed0c 	.word	0xe000ed0c
 8009a78:	20005928 	.word	0x20005928

08009a7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b08a      	sub	sp, #40	@ 0x28
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a84:	2300      	movs	r3, #0
 8009a86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a88:	f7fe fd5a 	bl	8008540 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a8c:	4b5c      	ldr	r3, [pc, #368]	@ (8009c00 <pvPortMalloc+0x184>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d101      	bne.n	8009a98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a94:	f000 f924 	bl	8009ce0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a98:	4b5a      	ldr	r3, [pc, #360]	@ (8009c04 <pvPortMalloc+0x188>)
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	f040 8095 	bne.w	8009bd0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d01e      	beq.n	8009aea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009aac:	2208      	movs	r2, #8
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f003 0307 	and.w	r3, r3, #7
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d015      	beq.n	8009aea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f023 0307 	bic.w	r3, r3, #7
 8009ac4:	3308      	adds	r3, #8
 8009ac6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f003 0307 	and.w	r3, r3, #7
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00b      	beq.n	8009aea <pvPortMalloc+0x6e>
	__asm volatile
 8009ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad6:	f383 8811 	msr	BASEPRI, r3
 8009ada:	f3bf 8f6f 	isb	sy
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	617b      	str	r3, [r7, #20]
}
 8009ae4:	bf00      	nop
 8009ae6:	bf00      	nop
 8009ae8:	e7fd      	b.n	8009ae6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d06f      	beq.n	8009bd0 <pvPortMalloc+0x154>
 8009af0:	4b45      	ldr	r3, [pc, #276]	@ (8009c08 <pvPortMalloc+0x18c>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d86a      	bhi.n	8009bd0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009afa:	4b44      	ldr	r3, [pc, #272]	@ (8009c0c <pvPortMalloc+0x190>)
 8009afc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009afe:	4b43      	ldr	r3, [pc, #268]	@ (8009c0c <pvPortMalloc+0x190>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b04:	e004      	b.n	8009b10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d903      	bls.n	8009b22 <pvPortMalloc+0xa6>
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1f1      	bne.n	8009b06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b22:	4b37      	ldr	r3, [pc, #220]	@ (8009c00 <pvPortMalloc+0x184>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d051      	beq.n	8009bd0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b2c:	6a3b      	ldr	r3, [r7, #32]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2208      	movs	r2, #8
 8009b32:	4413      	add	r3, r2
 8009b34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	6a3b      	ldr	r3, [r7, #32]
 8009b3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b40:	685a      	ldr	r2, [r3, #4]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	1ad2      	subs	r2, r2, r3
 8009b46:	2308      	movs	r3, #8
 8009b48:	005b      	lsls	r3, r3, #1
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d920      	bls.n	8009b90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4413      	add	r3, r2
 8009b54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	f003 0307 	and.w	r3, r3, #7
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d00b      	beq.n	8009b78 <pvPortMalloc+0xfc>
	__asm volatile
 8009b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b64:	f383 8811 	msr	BASEPRI, r3
 8009b68:	f3bf 8f6f 	isb	sy
 8009b6c:	f3bf 8f4f 	dsb	sy
 8009b70:	613b      	str	r3, [r7, #16]
}
 8009b72:	bf00      	nop
 8009b74:	bf00      	nop
 8009b76:	e7fd      	b.n	8009b74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b7a:	685a      	ldr	r2, [r3, #4]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	1ad2      	subs	r2, r2, r3
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b8a:	69b8      	ldr	r0, [r7, #24]
 8009b8c:	f000 f90a 	bl	8009da4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b90:	4b1d      	ldr	r3, [pc, #116]	@ (8009c08 <pvPortMalloc+0x18c>)
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8009c08 <pvPortMalloc+0x18c>)
 8009b9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8009c08 <pvPortMalloc+0x18c>)
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8009c10 <pvPortMalloc+0x194>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d203      	bcs.n	8009bb2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009baa:	4b17      	ldr	r3, [pc, #92]	@ (8009c08 <pvPortMalloc+0x18c>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a18      	ldr	r2, [pc, #96]	@ (8009c10 <pvPortMalloc+0x194>)
 8009bb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb4:	685a      	ldr	r2, [r3, #4]
 8009bb6:	4b13      	ldr	r3, [pc, #76]	@ (8009c04 <pvPortMalloc+0x188>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	431a      	orrs	r2, r3
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009bc6:	4b13      	ldr	r3, [pc, #76]	@ (8009c14 <pvPortMalloc+0x198>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	4a11      	ldr	r2, [pc, #68]	@ (8009c14 <pvPortMalloc+0x198>)
 8009bce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009bd0:	f7fe fcc4 	bl	800855c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	f003 0307 	and.w	r3, r3, #7
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00b      	beq.n	8009bf6 <pvPortMalloc+0x17a>
	__asm volatile
 8009bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be2:	f383 8811 	msr	BASEPRI, r3
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	60fb      	str	r3, [r7, #12]
}
 8009bf0:	bf00      	nop
 8009bf2:	bf00      	nop
 8009bf4:	e7fd      	b.n	8009bf2 <pvPortMalloc+0x176>
	return pvReturn;
 8009bf6:	69fb      	ldr	r3, [r7, #28]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3728      	adds	r7, #40	@ 0x28
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	20006534 	.word	0x20006534
 8009c04:	20006548 	.word	0x20006548
 8009c08:	20006538 	.word	0x20006538
 8009c0c:	2000652c 	.word	0x2000652c
 8009c10:	2000653c 	.word	0x2000653c
 8009c14:	20006540 	.word	0x20006540

08009c18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b086      	sub	sp, #24
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d04f      	beq.n	8009cca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c2a:	2308      	movs	r3, #8
 8009c2c:	425b      	negs	r3, r3
 8009c2e:	697a      	ldr	r2, [r7, #20]
 8009c30:	4413      	add	r3, r2
 8009c32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	685a      	ldr	r2, [r3, #4]
 8009c3c:	4b25      	ldr	r3, [pc, #148]	@ (8009cd4 <vPortFree+0xbc>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4013      	ands	r3, r2
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d10b      	bne.n	8009c5e <vPortFree+0x46>
	__asm volatile
 8009c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c4a:	f383 8811 	msr	BASEPRI, r3
 8009c4e:	f3bf 8f6f 	isb	sy
 8009c52:	f3bf 8f4f 	dsb	sy
 8009c56:	60fb      	str	r3, [r7, #12]
}
 8009c58:	bf00      	nop
 8009c5a:	bf00      	nop
 8009c5c:	e7fd      	b.n	8009c5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00b      	beq.n	8009c7e <vPortFree+0x66>
	__asm volatile
 8009c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c6a:	f383 8811 	msr	BASEPRI, r3
 8009c6e:	f3bf 8f6f 	isb	sy
 8009c72:	f3bf 8f4f 	dsb	sy
 8009c76:	60bb      	str	r3, [r7, #8]
}
 8009c78:	bf00      	nop
 8009c7a:	bf00      	nop
 8009c7c:	e7fd      	b.n	8009c7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	685a      	ldr	r2, [r3, #4]
 8009c82:	4b14      	ldr	r3, [pc, #80]	@ (8009cd4 <vPortFree+0xbc>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4013      	ands	r3, r2
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d01e      	beq.n	8009cca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d11a      	bne.n	8009cca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	685a      	ldr	r2, [r3, #4]
 8009c98:	4b0e      	ldr	r3, [pc, #56]	@ (8009cd4 <vPortFree+0xbc>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	43db      	mvns	r3, r3
 8009c9e:	401a      	ands	r2, r3
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ca4:	f7fe fc4c 	bl	8008540 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	685a      	ldr	r2, [r3, #4]
 8009cac:	4b0a      	ldr	r3, [pc, #40]	@ (8009cd8 <vPortFree+0xc0>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	4a09      	ldr	r2, [pc, #36]	@ (8009cd8 <vPortFree+0xc0>)
 8009cb4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cb6:	6938      	ldr	r0, [r7, #16]
 8009cb8:	f000 f874 	bl	8009da4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009cbc:	4b07      	ldr	r3, [pc, #28]	@ (8009cdc <vPortFree+0xc4>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	4a06      	ldr	r2, [pc, #24]	@ (8009cdc <vPortFree+0xc4>)
 8009cc4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009cc6:	f7fe fc49 	bl	800855c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009cca:	bf00      	nop
 8009ccc:	3718      	adds	r7, #24
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	20006548 	.word	0x20006548
 8009cd8:	20006538 	.word	0x20006538
 8009cdc:	20006544 	.word	0x20006544

08009ce0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009ce6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009cea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009cec:	4b27      	ldr	r3, [pc, #156]	@ (8009d8c <prvHeapInit+0xac>)
 8009cee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f003 0307 	and.w	r3, r3, #7
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d00c      	beq.n	8009d14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	3307      	adds	r3, #7
 8009cfe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f023 0307 	bic.w	r3, r3, #7
 8009d06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d08:	68ba      	ldr	r2, [r7, #8]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	4a1f      	ldr	r2, [pc, #124]	@ (8009d8c <prvHeapInit+0xac>)
 8009d10:	4413      	add	r3, r2
 8009d12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d18:	4a1d      	ldr	r2, [pc, #116]	@ (8009d90 <prvHeapInit+0xb0>)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8009d90 <prvHeapInit+0xb0>)
 8009d20:	2200      	movs	r2, #0
 8009d22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	68ba      	ldr	r2, [r7, #8]
 8009d28:	4413      	add	r3, r2
 8009d2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d2c:	2208      	movs	r2, #8
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	1a9b      	subs	r3, r3, r2
 8009d32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f023 0307 	bic.w	r3, r3, #7
 8009d3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	4a15      	ldr	r2, [pc, #84]	@ (8009d94 <prvHeapInit+0xb4>)
 8009d40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d42:	4b14      	ldr	r3, [pc, #80]	@ (8009d94 <prvHeapInit+0xb4>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2200      	movs	r2, #0
 8009d48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d4a:	4b12      	ldr	r3, [pc, #72]	@ (8009d94 <prvHeapInit+0xb4>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	1ad2      	subs	r2, r2, r3
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d60:	4b0c      	ldr	r3, [pc, #48]	@ (8009d94 <prvHeapInit+0xb4>)
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8009d98 <prvHeapInit+0xb8>)
 8009d6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	4a09      	ldr	r2, [pc, #36]	@ (8009d9c <prvHeapInit+0xbc>)
 8009d76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d78:	4b09      	ldr	r3, [pc, #36]	@ (8009da0 <prvHeapInit+0xc0>)
 8009d7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009d7e:	601a      	str	r2, [r3, #0]
}
 8009d80:	bf00      	nop
 8009d82:	3714      	adds	r7, #20
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr
 8009d8c:	2000592c 	.word	0x2000592c
 8009d90:	2000652c 	.word	0x2000652c
 8009d94:	20006534 	.word	0x20006534
 8009d98:	2000653c 	.word	0x2000653c
 8009d9c:	20006538 	.word	0x20006538
 8009da0:	20006548 	.word	0x20006548

08009da4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009dac:	4b28      	ldr	r3, [pc, #160]	@ (8009e50 <prvInsertBlockIntoFreeList+0xac>)
 8009dae:	60fb      	str	r3, [r7, #12]
 8009db0:	e002      	b.n	8009db8 <prvInsertBlockIntoFreeList+0x14>
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	60fb      	str	r3, [r7, #12]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d8f7      	bhi.n	8009db2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	68ba      	ldr	r2, [r7, #8]
 8009dcc:	4413      	add	r3, r2
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d108      	bne.n	8009de6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	685a      	ldr	r2, [r3, #4]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	441a      	add	r2, r3
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	68ba      	ldr	r2, [r7, #8]
 8009df0:	441a      	add	r2, r3
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d118      	bne.n	8009e2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	4b15      	ldr	r3, [pc, #84]	@ (8009e54 <prvInsertBlockIntoFreeList+0xb0>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d00d      	beq.n	8009e22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	685a      	ldr	r2, [r3, #4]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	441a      	add	r2, r3
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	601a      	str	r2, [r3, #0]
 8009e20:	e008      	b.n	8009e34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e22:	4b0c      	ldr	r3, [pc, #48]	@ (8009e54 <prvInsertBlockIntoFreeList+0xb0>)
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	601a      	str	r2, [r3, #0]
 8009e2a:	e003      	b.n	8009e34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d002      	beq.n	8009e42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e42:	bf00      	nop
 8009e44:	3714      	adds	r7, #20
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop
 8009e50:	2000652c 	.word	0x2000652c
 8009e54:	20006534 	.word	0x20006534

08009e58 <fun5mini_interfaces__srv__EatCall_Request__init>:
 8009e58:	3800      	subs	r0, #0
 8009e5a:	bf18      	it	ne
 8009e5c:	2001      	movne	r0, #1
 8009e5e:	4770      	bx	lr

08009e60 <fun5mini_interfaces__srv__EatCall_Request__fini>:
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop

08009e64 <fun5mini_interfaces__srv__EatCall_Response__init>:
 8009e64:	3800      	subs	r0, #0
 8009e66:	bf18      	it	ne
 8009e68:	2001      	movne	r0, #1
 8009e6a:	4770      	bx	lr

08009e6c <fun5mini_interfaces__srv__EatCall_Response__fini>:
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop

08009e70 <rosidl_typesupport_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall>:
 8009e70:	4b04      	ldr	r3, [pc, #16]	@ (8009e84 <rosidl_typesupport_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall+0x14>)
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	b10a      	cbz	r2, 8009e7a <rosidl_typesupport_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall+0xa>
 8009e76:	4803      	ldr	r0, [pc, #12]	@ (8009e84 <rosidl_typesupport_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall+0x14>)
 8009e78:	4770      	bx	lr
 8009e7a:	4a03      	ldr	r2, [pc, #12]	@ (8009e88 <rosidl_typesupport_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall+0x18>)
 8009e7c:	4801      	ldr	r0, [pc, #4]	@ (8009e84 <rosidl_typesupport_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall+0x14>)
 8009e7e:	6812      	ldr	r2, [r2, #0]
 8009e80:	601a      	str	r2, [r3, #0]
 8009e82:	4770      	bx	lr
 8009e84:	2000001c 	.word	0x2000001c
 8009e88:	20000324 	.word	0x20000324

08009e8c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__fun5mini_interfaces__srv__EatCall_Request>:
 8009e8c:	4b04      	ldr	r3, [pc, #16]	@ (8009ea0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__fun5mini_interfaces__srv__EatCall_Request+0x14>)
 8009e8e:	4805      	ldr	r0, [pc, #20]	@ (8009ea4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__fun5mini_interfaces__srv__EatCall_Request+0x18>)
 8009e90:	4905      	ldr	r1, [pc, #20]	@ (8009ea8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__fun5mini_interfaces__srv__EatCall_Request+0x1c>)
 8009e92:	4a06      	ldr	r2, [pc, #24]	@ (8009eac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__fun5mini_interfaces__srv__EatCall_Request+0x20>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	6003      	str	r3, [r0, #0]
 8009e98:	600b      	str	r3, [r1, #0]
 8009e9a:	6013      	str	r3, [r2, #0]
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	20000324 	.word	0x20000324
 8009ea4:	20000038 	.word	0x20000038
 8009ea8:	20000044 	.word	0x20000044
 8009eac:	2000001c 	.word	0x2000001c

08009eb0 <fun5mini_interfaces__srv__EatCall_Request__rosidl_typesupport_introspection_c__EatCall_Request_init_function>:
 8009eb0:	f7ff bfd2 	b.w	8009e58 <fun5mini_interfaces__srv__EatCall_Request__init>

08009eb4 <fun5mini_interfaces__srv__EatCall_Request__rosidl_typesupport_introspection_c__EatCall_Request_fini_function>:
 8009eb4:	f7ff bfd4 	b.w	8009e60 <fun5mini_interfaces__srv__EatCall_Request__fini>

08009eb8 <fun5mini_interfaces__srv__EatCall_Response__rosidl_typesupport_introspection_c__EatCall_Response_init_function>:
 8009eb8:	f7ff bfd4 	b.w	8009e64 <fun5mini_interfaces__srv__EatCall_Response__init>

08009ebc <fun5mini_interfaces__srv__EatCall_Response__rosidl_typesupport_introspection_c__EatCall_Response_fini_function>:
 8009ebc:	f7ff bfd6 	b.w	8009e6c <fun5mini_interfaces__srv__EatCall_Response__fini>

08009ec0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__fun5mini_interfaces__srv__EatCall_Request>:
 8009ec0:	4b04      	ldr	r3, [pc, #16]	@ (8009ed4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__fun5mini_interfaces__srv__EatCall_Request+0x14>)
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	b10a      	cbz	r2, 8009eca <rosidl_typesupport_introspection_c__get_message_type_support_handle__fun5mini_interfaces__srv__EatCall_Request+0xa>
 8009ec6:	4803      	ldr	r0, [pc, #12]	@ (8009ed4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__fun5mini_interfaces__srv__EatCall_Request+0x14>)
 8009ec8:	4770      	bx	lr
 8009eca:	4a03      	ldr	r2, [pc, #12]	@ (8009ed8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__fun5mini_interfaces__srv__EatCall_Request+0x18>)
 8009ecc:	4801      	ldr	r0, [pc, #4]	@ (8009ed4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__fun5mini_interfaces__srv__EatCall_Request+0x14>)
 8009ece:	6812      	ldr	r2, [r2, #0]
 8009ed0:	601a      	str	r2, [r3, #0]
 8009ed2:	4770      	bx	lr
 8009ed4:	2000008c 	.word	0x2000008c
 8009ed8:	20000328 	.word	0x20000328

08009edc <rosidl_typesupport_introspection_c__get_message_type_support_handle__fun5mini_interfaces__srv__EatCall_Response>:
 8009edc:	4b04      	ldr	r3, [pc, #16]	@ (8009ef0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__fun5mini_interfaces__srv__EatCall_Response+0x14>)
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	b10a      	cbz	r2, 8009ee6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__fun5mini_interfaces__srv__EatCall_Response+0xa>
 8009ee2:	4803      	ldr	r0, [pc, #12]	@ (8009ef0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__fun5mini_interfaces__srv__EatCall_Response+0x14>)
 8009ee4:	4770      	bx	lr
 8009ee6:	4a03      	ldr	r2, [pc, #12]	@ (8009ef4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__fun5mini_interfaces__srv__EatCall_Response+0x18>)
 8009ee8:	4801      	ldr	r0, [pc, #4]	@ (8009ef0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__fun5mini_interfaces__srv__EatCall_Response+0x14>)
 8009eea:	6812      	ldr	r2, [r2, #0]
 8009eec:	601a      	str	r2, [r3, #0]
 8009eee:	4770      	bx	lr
 8009ef0:	200000d4 	.word	0x200000d4
 8009ef4:	20000328 	.word	0x20000328

08009ef8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall>:
 8009ef8:	4b13      	ldr	r3, [pc, #76]	@ (8009f48 <rosidl_typesupport_introspection_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall+0x50>)
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	b132      	cbz	r2, 8009f0c <rosidl_typesupport_introspection_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall+0x14>
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	689a      	ldr	r2, [r3, #8]
 8009f02:	b152      	cbz	r2, 8009f1a <rosidl_typesupport_introspection_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall+0x22>
 8009f04:	68da      	ldr	r2, [r3, #12]
 8009f06:	b182      	cbz	r2, 8009f2a <rosidl_typesupport_introspection_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall+0x32>
 8009f08:	480f      	ldr	r0, [pc, #60]	@ (8009f48 <rosidl_typesupport_introspection_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall+0x50>)
 8009f0a:	4770      	bx	lr
 8009f0c:	4a0f      	ldr	r2, [pc, #60]	@ (8009f4c <rosidl_typesupport_introspection_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall+0x54>)
 8009f0e:	6812      	ldr	r2, [r2, #0]
 8009f10:	601a      	str	r2, [r3, #0]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	689a      	ldr	r2, [r3, #8]
 8009f16:	2a00      	cmp	r2, #0
 8009f18:	d1f4      	bne.n	8009f04 <rosidl_typesupport_introspection_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall+0xc>
 8009f1a:	4a0d      	ldr	r2, [pc, #52]	@ (8009f50 <rosidl_typesupport_introspection_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall+0x58>)
 8009f1c:	6811      	ldr	r1, [r2, #0]
 8009f1e:	b179      	cbz	r1, 8009f40 <rosidl_typesupport_introspection_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall+0x48>
 8009f20:	6852      	ldr	r2, [r2, #4]
 8009f22:	609a      	str	r2, [r3, #8]
 8009f24:	68da      	ldr	r2, [r3, #12]
 8009f26:	2a00      	cmp	r2, #0
 8009f28:	d1ee      	bne.n	8009f08 <rosidl_typesupport_introspection_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall+0x10>
 8009f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8009f54 <rosidl_typesupport_introspection_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall+0x5c>)
 8009f2c:	6811      	ldr	r1, [r2, #0]
 8009f2e:	b119      	cbz	r1, 8009f38 <rosidl_typesupport_introspection_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall+0x40>
 8009f30:	6852      	ldr	r2, [r2, #4]
 8009f32:	4805      	ldr	r0, [pc, #20]	@ (8009f48 <rosidl_typesupport_introspection_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall+0x50>)
 8009f34:	60da      	str	r2, [r3, #12]
 8009f36:	4770      	bx	lr
 8009f38:	4904      	ldr	r1, [pc, #16]	@ (8009f4c <rosidl_typesupport_introspection_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall+0x54>)
 8009f3a:	6809      	ldr	r1, [r1, #0]
 8009f3c:	6011      	str	r1, [r2, #0]
 8009f3e:	e7f7      	b.n	8009f30 <rosidl_typesupport_introspection_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall+0x38>
 8009f40:	4902      	ldr	r1, [pc, #8]	@ (8009f4c <rosidl_typesupport_introspection_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall+0x54>)
 8009f42:	6809      	ldr	r1, [r1, #0]
 8009f44:	6011      	str	r1, [r2, #0]
 8009f46:	e7eb      	b.n	8009f20 <rosidl_typesupport_introspection_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall+0x28>
 8009f48:	200000f0 	.word	0x200000f0
 8009f4c:	20000328 	.word	0x20000328
 8009f50:	2000008c 	.word	0x2000008c
 8009f54:	200000d4 	.word	0x200000d4

08009f58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__fun5mini_interfaces__srv__EatCall_Request>:
 8009f58:	4800      	ldr	r0, [pc, #0]	@ (8009f5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__fun5mini_interfaces__srv__EatCall_Request+0x4>)
 8009f5a:	4770      	bx	lr
 8009f5c:	20000118 	.word	0x20000118

08009f60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__fun5mini_interfaces__srv__EatCall_Response>:
 8009f60:	4800      	ldr	r0, [pc, #0]	@ (8009f64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__fun5mini_interfaces__srv__EatCall_Response+0x4>)
 8009f62:	4770      	bx	lr
 8009f64:	20000124 	.word	0x20000124

08009f68 <_EatCall_Request__max_serialized_size>:
 8009f68:	b508      	push	{r3, lr}
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	2000      	movs	r0, #0
 8009f6e:	f001 fb03 	bl	800b578 <ucdr_alignment>
 8009f72:	3001      	adds	r0, #1
 8009f74:	bd08      	pop	{r3, pc}
 8009f76:	bf00      	nop

08009f78 <_EatCall_Request__cdr_deserialize>:
 8009f78:	b109      	cbz	r1, 8009f7e <_EatCall_Request__cdr_deserialize+0x6>
 8009f7a:	f000 b99f 	b.w	800a2bc <ucdr_deserialize_bool>
 8009f7e:	4608      	mov	r0, r1
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop

08009f84 <_EatCall_Response__cdr_deserialize>:
 8009f84:	b109      	cbz	r1, 8009f8a <_EatCall_Response__cdr_deserialize+0x6>
 8009f86:	f000 b9c7 	b.w	800a318 <ucdr_deserialize_uint8_t>
 8009f8a:	4608      	mov	r0, r1
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop

08009f90 <_EatCall_Request__get_serialized_size>:
 8009f90:	b130      	cbz	r0, 8009fa0 <_EatCall_Request__get_serialized_size+0x10>
 8009f92:	b508      	push	{r3, lr}
 8009f94:	2101      	movs	r1, #1
 8009f96:	2000      	movs	r0, #0
 8009f98:	f001 faee 	bl	800b578 <ucdr_alignment>
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	bd08      	pop	{r3, pc}
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop

08009fa4 <_EatCall_Request__cdr_serialize>:
 8009fa4:	460a      	mov	r2, r1
 8009fa6:	b118      	cbz	r0, 8009fb0 <_EatCall_Request__cdr_serialize+0xc>
 8009fa8:	7801      	ldrb	r1, [r0, #0]
 8009faa:	4610      	mov	r0, r2
 8009fac:	f000 b970 	b.w	800a290 <ucdr_serialize_bool>
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop

08009fb4 <_EatCall_Response__cdr_serialize>:
 8009fb4:	460a      	mov	r2, r1
 8009fb6:	b118      	cbz	r0, 8009fc0 <_EatCall_Response__cdr_serialize+0xc>
 8009fb8:	7801      	ldrb	r1, [r0, #0]
 8009fba:	4610      	mov	r0, r2
 8009fbc:	f000 b996 	b.w	800a2ec <ucdr_serialize_uint8_t>
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop

08009fc4 <get_serialized_size_fun5mini_interfaces__srv__EatCall_Request>:
 8009fc4:	b138      	cbz	r0, 8009fd6 <get_serialized_size_fun5mini_interfaces__srv__EatCall_Request+0x12>
 8009fc6:	b508      	push	{r3, lr}
 8009fc8:	460b      	mov	r3, r1
 8009fca:	4618      	mov	r0, r3
 8009fcc:	2101      	movs	r1, #1
 8009fce:	f001 fad3 	bl	800b578 <ucdr_alignment>
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	bd08      	pop	{r3, pc}
 8009fd6:	4770      	bx	lr

08009fd8 <get_serialized_size_fun5mini_interfaces__srv__EatCall_Response>:
 8009fd8:	b138      	cbz	r0, 8009fea <get_serialized_size_fun5mini_interfaces__srv__EatCall_Response+0x12>
 8009fda:	b508      	push	{r3, lr}
 8009fdc:	460b      	mov	r3, r1
 8009fde:	4618      	mov	r0, r3
 8009fe0:	2101      	movs	r1, #1
 8009fe2:	f001 fac9 	bl	800b578 <ucdr_alignment>
 8009fe6:	3001      	adds	r0, #1
 8009fe8:	bd08      	pop	{r3, pc}
 8009fea:	4770      	bx	lr

08009fec <_EatCall_Response__get_serialized_size>:
 8009fec:	b130      	cbz	r0, 8009ffc <_EatCall_Response__get_serialized_size+0x10>
 8009fee:	b508      	push	{r3, lr}
 8009ff0:	2101      	movs	r1, #1
 8009ff2:	2000      	movs	r0, #0
 8009ff4:	f001 fac0 	bl	800b578 <ucdr_alignment>
 8009ff8:	3001      	adds	r0, #1
 8009ffa:	bd08      	pop	{r3, pc}
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop

0800a000 <_EatCall_Response__max_serialized_size>:
 800a000:	b508      	push	{r3, lr}
 800a002:	2101      	movs	r1, #1
 800a004:	2000      	movs	r0, #0
 800a006:	f001 fab7 	bl	800b578 <ucdr_alignment>
 800a00a:	3001      	adds	r0, #1
 800a00c:	bd08      	pop	{r3, pc}
 800a00e:	bf00      	nop

0800a010 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall>:
 800a010:	4800      	ldr	r0, [pc, #0]	@ (800a014 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__fun5mini_interfaces__srv__EatCall+0x4>)
 800a012:	4770      	bx	lr
 800a014:	2000010c 	.word	0x2000010c

0800a018 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a018:	4b04      	ldr	r3, [pc, #16]	@ (800a02c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	b10a      	cbz	r2, 800a022 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800a01e:	4803      	ldr	r0, [pc, #12]	@ (800a02c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a020:	4770      	bx	lr
 800a022:	4a03      	ldr	r2, [pc, #12]	@ (800a030 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800a024:	4801      	ldr	r0, [pc, #4]	@ (800a02c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a026:	6812      	ldr	r2, [r2, #0]
 800a028:	601a      	str	r2, [r3, #0]
 800a02a:	4770      	bx	lr
 800a02c:	20000170 	.word	0x20000170
 800a030:	20000324 	.word	0x20000324

0800a034 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a034:	4a02      	ldr	r2, [pc, #8]	@ (800a040 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800a036:	4b03      	ldr	r3, [pc, #12]	@ (800a044 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800a038:	6812      	ldr	r2, [r2, #0]
 800a03a:	601a      	str	r2, [r3, #0]
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop
 800a040:	20000324 	.word	0x20000324
 800a044:	20000170 	.word	0x20000170

0800a048 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800a048:	f005 ba24 	b.w	800f494 <geometry_msgs__msg__Twist__init>

0800a04c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800a04c:	f005 ba46 	b.w	800f4dc <geometry_msgs__msg__Twist__fini>

0800a050 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a050:	b510      	push	{r4, lr}
 800a052:	f000 f819 	bl	800a088 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a056:	4c07      	ldr	r4, [pc, #28]	@ (800a074 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800a058:	60e0      	str	r0, [r4, #12]
 800a05a:	f000 f815 	bl	800a088 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a05e:	4b06      	ldr	r3, [pc, #24]	@ (800a078 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a060:	64a0      	str	r0, [r4, #72]	@ 0x48
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	b10a      	cbz	r2, 800a06a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800a066:	4804      	ldr	r0, [pc, #16]	@ (800a078 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a068:	bd10      	pop	{r4, pc}
 800a06a:	4a04      	ldr	r2, [pc, #16]	@ (800a07c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800a06c:	4802      	ldr	r0, [pc, #8]	@ (800a078 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a06e:	6812      	ldr	r2, [r2, #0]
 800a070:	601a      	str	r2, [r3, #0]
 800a072:	bd10      	pop	{r4, pc}
 800a074:	2000017c 	.word	0x2000017c
 800a078:	200001f4 	.word	0x200001f4
 800a07c:	20000328 	.word	0x20000328

0800a080 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800a080:	f005 ba38 	b.w	800f4f4 <geometry_msgs__msg__Vector3__init>

0800a084 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800a084:	f005 ba3a 	b.w	800f4fc <geometry_msgs__msg__Vector3__fini>

0800a088 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a088:	4b04      	ldr	r3, [pc, #16]	@ (800a09c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	b10a      	cbz	r2, 800a092 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800a08e:	4803      	ldr	r0, [pc, #12]	@ (800a09c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a090:	4770      	bx	lr
 800a092:	4a03      	ldr	r2, [pc, #12]	@ (800a0a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800a094:	4801      	ldr	r0, [pc, #4]	@ (800a09c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a096:	6812      	ldr	r2, [r2, #0]
 800a098:	601a      	str	r2, [r3, #0]
 800a09a:	4770      	bx	lr
 800a09c:	200002b4 	.word	0x200002b4
 800a0a0:	20000328 	.word	0x20000328

0800a0a4 <get_serialized_size_geometry_msgs__msg__Twist>:
 800a0a4:	b570      	push	{r4, r5, r6, lr}
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	b148      	cbz	r0, 800a0be <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800a0aa:	460d      	mov	r5, r1
 800a0ac:	f000 f860 	bl	800a170 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a0b0:	4606      	mov	r6, r0
 800a0b2:	1829      	adds	r1, r5, r0
 800a0b4:	f104 0018 	add.w	r0, r4, #24
 800a0b8:	f000 f85a 	bl	800a170 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a0bc:	4430      	add	r0, r6
 800a0be:	bd70      	pop	{r4, r5, r6, pc}

0800a0c0 <_Twist__cdr_deserialize>:
 800a0c0:	b570      	push	{r4, r5, r6, lr}
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	b189      	cbz	r1, 800a0ea <_Twist__cdr_deserialize+0x2a>
 800a0c6:	4605      	mov	r5, r0
 800a0c8:	f000 f8de 	bl	800a288 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a0cc:	6843      	ldr	r3, [r0, #4]
 800a0ce:	4621      	mov	r1, r4
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	4798      	blx	r3
 800a0d6:	f000 f8d7 	bl	800a288 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a0da:	6843      	ldr	r3, [r0, #4]
 800a0dc:	f104 0118 	add.w	r1, r4, #24
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a0e8:	4718      	bx	r3
 800a0ea:	4608      	mov	r0, r1
 800a0ec:	bd70      	pop	{r4, r5, r6, pc}
 800a0ee:	bf00      	nop

0800a0f0 <_Twist__cdr_serialize>:
 800a0f0:	b510      	push	{r4, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	9101      	str	r1, [sp, #4]
 800a0f6:	b190      	cbz	r0, 800a11e <_Twist__cdr_serialize+0x2e>
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	f000 f8c5 	bl	800a288 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a0fe:	6843      	ldr	r3, [r0, #4]
 800a100:	9901      	ldr	r1, [sp, #4]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	4620      	mov	r0, r4
 800a106:	4798      	blx	r3
 800a108:	f000 f8be 	bl	800a288 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a10c:	6843      	ldr	r3, [r0, #4]
 800a10e:	9901      	ldr	r1, [sp, #4]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	f104 0018 	add.w	r0, r4, #24
 800a116:	b002      	add	sp, #8
 800a118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a11c:	4718      	bx	r3
 800a11e:	b002      	add	sp, #8
 800a120:	bd10      	pop	{r4, pc}
 800a122:	bf00      	nop

0800a124 <_Twist__get_serialized_size>:
 800a124:	b538      	push	{r3, r4, r5, lr}
 800a126:	4604      	mov	r4, r0
 800a128:	b148      	cbz	r0, 800a13e <_Twist__get_serialized_size+0x1a>
 800a12a:	2100      	movs	r1, #0
 800a12c:	f000 f820 	bl	800a170 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a130:	4605      	mov	r5, r0
 800a132:	4601      	mov	r1, r0
 800a134:	f104 0018 	add.w	r0, r4, #24
 800a138:	f000 f81a 	bl	800a170 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a13c:	4428      	add	r0, r5
 800a13e:	bd38      	pop	{r3, r4, r5, pc}

0800a140 <_Twist__max_serialized_size>:
 800a140:	b510      	push	{r4, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	2301      	movs	r3, #1
 800a146:	2100      	movs	r1, #0
 800a148:	f10d 0007 	add.w	r0, sp, #7
 800a14c:	f88d 3007 	strb.w	r3, [sp, #7]
 800a150:	f000 f87e 	bl	800a250 <max_serialized_size_geometry_msgs__msg__Vector3>
 800a154:	4604      	mov	r4, r0
 800a156:	4601      	mov	r1, r0
 800a158:	f10d 0007 	add.w	r0, sp, #7
 800a15c:	f000 f878 	bl	800a250 <max_serialized_size_geometry_msgs__msg__Vector3>
 800a160:	4420      	add	r0, r4
 800a162:	b002      	add	sp, #8
 800a164:	bd10      	pop	{r4, pc}
 800a166:	bf00      	nop

0800a168 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a168:	4800      	ldr	r0, [pc, #0]	@ (800a16c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800a16a:	4770      	bx	lr
 800a16c:	200002c0 	.word	0x200002c0

0800a170 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800a170:	b1b8      	cbz	r0, 800a1a2 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800a172:	b538      	push	{r3, r4, r5, lr}
 800a174:	460d      	mov	r5, r1
 800a176:	4628      	mov	r0, r5
 800a178:	2108      	movs	r1, #8
 800a17a:	f001 f9fd 	bl	800b578 <ucdr_alignment>
 800a17e:	f105 0308 	add.w	r3, r5, #8
 800a182:	181c      	adds	r4, r3, r0
 800a184:	2108      	movs	r1, #8
 800a186:	4620      	mov	r0, r4
 800a188:	f001 f9f6 	bl	800b578 <ucdr_alignment>
 800a18c:	3008      	adds	r0, #8
 800a18e:	4404      	add	r4, r0
 800a190:	2108      	movs	r1, #8
 800a192:	4620      	mov	r0, r4
 800a194:	f001 f9f0 	bl	800b578 <ucdr_alignment>
 800a198:	f1c5 0508 	rsb	r5, r5, #8
 800a19c:	4428      	add	r0, r5
 800a19e:	4420      	add	r0, r4
 800a1a0:	bd38      	pop	{r3, r4, r5, pc}
 800a1a2:	4770      	bx	lr

0800a1a4 <_Vector3__cdr_deserialize>:
 800a1a4:	b538      	push	{r3, r4, r5, lr}
 800a1a6:	460c      	mov	r4, r1
 800a1a8:	b171      	cbz	r1, 800a1c8 <_Vector3__cdr_deserialize+0x24>
 800a1aa:	4605      	mov	r5, r0
 800a1ac:	f001 f8c6 	bl	800b33c <ucdr_deserialize_double>
 800a1b0:	f104 0108 	add.w	r1, r4, #8
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	f001 f8c1 	bl	800b33c <ucdr_deserialize_double>
 800a1ba:	f104 0110 	add.w	r1, r4, #16
 800a1be:	4628      	mov	r0, r5
 800a1c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1c4:	f001 b8ba 	b.w	800b33c <ucdr_deserialize_double>
 800a1c8:	4608      	mov	r0, r1
 800a1ca:	bd38      	pop	{r3, r4, r5, pc}

0800a1cc <_Vector3__cdr_serialize>:
 800a1cc:	b198      	cbz	r0, 800a1f6 <_Vector3__cdr_serialize+0x2a>
 800a1ce:	b538      	push	{r3, r4, r5, lr}
 800a1d0:	ed90 0b00 	vldr	d0, [r0]
 800a1d4:	460d      	mov	r5, r1
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	4608      	mov	r0, r1
 800a1da:	f000 ffdf 	bl	800b19c <ucdr_serialize_double>
 800a1de:	ed94 0b02 	vldr	d0, [r4, #8]
 800a1e2:	4628      	mov	r0, r5
 800a1e4:	f000 ffda 	bl	800b19c <ucdr_serialize_double>
 800a1e8:	ed94 0b04 	vldr	d0, [r4, #16]
 800a1ec:	4628      	mov	r0, r5
 800a1ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1f2:	f000 bfd3 	b.w	800b19c <ucdr_serialize_double>
 800a1f6:	4770      	bx	lr

0800a1f8 <_Vector3__get_serialized_size>:
 800a1f8:	b198      	cbz	r0, 800a222 <_Vector3__get_serialized_size+0x2a>
 800a1fa:	b510      	push	{r4, lr}
 800a1fc:	2108      	movs	r1, #8
 800a1fe:	2000      	movs	r0, #0
 800a200:	f001 f9ba 	bl	800b578 <ucdr_alignment>
 800a204:	f100 0408 	add.w	r4, r0, #8
 800a208:	2108      	movs	r1, #8
 800a20a:	4620      	mov	r0, r4
 800a20c:	f001 f9b4 	bl	800b578 <ucdr_alignment>
 800a210:	3008      	adds	r0, #8
 800a212:	4404      	add	r4, r0
 800a214:	2108      	movs	r1, #8
 800a216:	4620      	mov	r0, r4
 800a218:	f001 f9ae 	bl	800b578 <ucdr_alignment>
 800a21c:	3008      	adds	r0, #8
 800a21e:	4420      	add	r0, r4
 800a220:	bd10      	pop	{r4, pc}
 800a222:	4770      	bx	lr

0800a224 <_Vector3__max_serialized_size>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	2108      	movs	r1, #8
 800a228:	2000      	movs	r0, #0
 800a22a:	f001 f9a5 	bl	800b578 <ucdr_alignment>
 800a22e:	f100 0508 	add.w	r5, r0, #8
 800a232:	2108      	movs	r1, #8
 800a234:	4628      	mov	r0, r5
 800a236:	f001 f99f 	bl	800b578 <ucdr_alignment>
 800a23a:	f100 0408 	add.w	r4, r0, #8
 800a23e:	442c      	add	r4, r5
 800a240:	2108      	movs	r1, #8
 800a242:	4620      	mov	r0, r4
 800a244:	f001 f998 	bl	800b578 <ucdr_alignment>
 800a248:	3008      	adds	r0, #8
 800a24a:	4420      	add	r0, r4
 800a24c:	bd38      	pop	{r3, r4, r5, pc}
 800a24e:	bf00      	nop

0800a250 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800a250:	b570      	push	{r4, r5, r6, lr}
 800a252:	2301      	movs	r3, #1
 800a254:	460c      	mov	r4, r1
 800a256:	7003      	strb	r3, [r0, #0]
 800a258:	2108      	movs	r1, #8
 800a25a:	4620      	mov	r0, r4
 800a25c:	f001 f98c 	bl	800b578 <ucdr_alignment>
 800a260:	f104 0508 	add.w	r5, r4, #8
 800a264:	1946      	adds	r6, r0, r5
 800a266:	2108      	movs	r1, #8
 800a268:	4630      	mov	r0, r6
 800a26a:	f001 f985 	bl	800b578 <ucdr_alignment>
 800a26e:	f100 0508 	add.w	r5, r0, #8
 800a272:	4435      	add	r5, r6
 800a274:	2108      	movs	r1, #8
 800a276:	4628      	mov	r0, r5
 800a278:	f001 f97e 	bl	800b578 <ucdr_alignment>
 800a27c:	f1c4 0408 	rsb	r4, r4, #8
 800a280:	4420      	add	r0, r4
 800a282:	4428      	add	r0, r5
 800a284:	bd70      	pop	{r4, r5, r6, pc}
 800a286:	bf00      	nop

0800a288 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a288:	4800      	ldr	r0, [pc, #0]	@ (800a28c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800a28a:	4770      	bx	lr
 800a28c:	200002e8 	.word	0x200002e8

0800a290 <ucdr_serialize_bool>:
 800a290:	b538      	push	{r3, r4, r5, lr}
 800a292:	460d      	mov	r5, r1
 800a294:	2101      	movs	r1, #1
 800a296:	4604      	mov	r4, r0
 800a298:	f001 f922 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800a29c:	b148      	cbz	r0, 800a2b2 <ucdr_serialize_bool+0x22>
 800a29e:	68a3      	ldr	r3, [r4, #8]
 800a2a0:	701d      	strb	r5, [r3, #0]
 800a2a2:	68a2      	ldr	r2, [r4, #8]
 800a2a4:	6923      	ldr	r3, [r4, #16]
 800a2a6:	2101      	movs	r1, #1
 800a2a8:	440a      	add	r2, r1
 800a2aa:	440b      	add	r3, r1
 800a2ac:	60a2      	str	r2, [r4, #8]
 800a2ae:	6123      	str	r3, [r4, #16]
 800a2b0:	7561      	strb	r1, [r4, #21]
 800a2b2:	7da0      	ldrb	r0, [r4, #22]
 800a2b4:	f080 0001 	eor.w	r0, r0, #1
 800a2b8:	bd38      	pop	{r3, r4, r5, pc}
 800a2ba:	bf00      	nop

0800a2bc <ucdr_deserialize_bool>:
 800a2bc:	b538      	push	{r3, r4, r5, lr}
 800a2be:	460d      	mov	r5, r1
 800a2c0:	2101      	movs	r1, #1
 800a2c2:	4604      	mov	r4, r0
 800a2c4:	f001 f90c 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800a2c8:	b160      	cbz	r0, 800a2e4 <ucdr_deserialize_bool+0x28>
 800a2ca:	68a2      	ldr	r2, [r4, #8]
 800a2cc:	6923      	ldr	r3, [r4, #16]
 800a2ce:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a2d2:	3900      	subs	r1, #0
 800a2d4:	bf18      	it	ne
 800a2d6:	2101      	movne	r1, #1
 800a2d8:	7029      	strb	r1, [r5, #0]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	2101      	movs	r1, #1
 800a2de:	60a2      	str	r2, [r4, #8]
 800a2e0:	6123      	str	r3, [r4, #16]
 800a2e2:	7561      	strb	r1, [r4, #21]
 800a2e4:	7da0      	ldrb	r0, [r4, #22]
 800a2e6:	f080 0001 	eor.w	r0, r0, #1
 800a2ea:	bd38      	pop	{r3, r4, r5, pc}

0800a2ec <ucdr_serialize_uint8_t>:
 800a2ec:	b538      	push	{r3, r4, r5, lr}
 800a2ee:	460d      	mov	r5, r1
 800a2f0:	2101      	movs	r1, #1
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	f001 f8f4 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800a2f8:	b148      	cbz	r0, 800a30e <ucdr_serialize_uint8_t+0x22>
 800a2fa:	68a3      	ldr	r3, [r4, #8]
 800a2fc:	701d      	strb	r5, [r3, #0]
 800a2fe:	68a2      	ldr	r2, [r4, #8]
 800a300:	6923      	ldr	r3, [r4, #16]
 800a302:	2101      	movs	r1, #1
 800a304:	440a      	add	r2, r1
 800a306:	440b      	add	r3, r1
 800a308:	60a2      	str	r2, [r4, #8]
 800a30a:	6123      	str	r3, [r4, #16]
 800a30c:	7561      	strb	r1, [r4, #21]
 800a30e:	7da0      	ldrb	r0, [r4, #22]
 800a310:	f080 0001 	eor.w	r0, r0, #1
 800a314:	bd38      	pop	{r3, r4, r5, pc}
 800a316:	bf00      	nop

0800a318 <ucdr_deserialize_uint8_t>:
 800a318:	b538      	push	{r3, r4, r5, lr}
 800a31a:	460d      	mov	r5, r1
 800a31c:	2101      	movs	r1, #1
 800a31e:	4604      	mov	r4, r0
 800a320:	f001 f8de 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800a324:	b150      	cbz	r0, 800a33c <ucdr_deserialize_uint8_t+0x24>
 800a326:	68a3      	ldr	r3, [r4, #8]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	702b      	strb	r3, [r5, #0]
 800a32c:	68a2      	ldr	r2, [r4, #8]
 800a32e:	6923      	ldr	r3, [r4, #16]
 800a330:	2101      	movs	r1, #1
 800a332:	440a      	add	r2, r1
 800a334:	440b      	add	r3, r1
 800a336:	60a2      	str	r2, [r4, #8]
 800a338:	6123      	str	r3, [r4, #16]
 800a33a:	7561      	strb	r1, [r4, #21]
 800a33c:	7da0      	ldrb	r0, [r4, #22]
 800a33e:	f080 0001 	eor.w	r0, r0, #1
 800a342:	bd38      	pop	{r3, r4, r5, pc}

0800a344 <ucdr_serialize_uint16_t>:
 800a344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a348:	b082      	sub	sp, #8
 800a34a:	460b      	mov	r3, r1
 800a34c:	2102      	movs	r1, #2
 800a34e:	4604      	mov	r4, r0
 800a350:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a354:	f001 f918 	bl	800b588 <ucdr_buffer_alignment>
 800a358:	4601      	mov	r1, r0
 800a35a:	4620      	mov	r0, r4
 800a35c:	7d67      	ldrb	r7, [r4, #21]
 800a35e:	f001 f957 	bl	800b610 <ucdr_advance_buffer>
 800a362:	2102      	movs	r1, #2
 800a364:	4620      	mov	r0, r4
 800a366:	f001 f8af 	bl	800b4c8 <ucdr_check_buffer_available_for>
 800a36a:	bb78      	cbnz	r0, 800a3cc <ucdr_serialize_uint16_t+0x88>
 800a36c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a370:	42ab      	cmp	r3, r5
 800a372:	d926      	bls.n	800a3c2 <ucdr_serialize_uint16_t+0x7e>
 800a374:	1b5e      	subs	r6, r3, r5
 800a376:	60a3      	str	r3, [r4, #8]
 800a378:	6923      	ldr	r3, [r4, #16]
 800a37a:	f1c6 0802 	rsb	r8, r6, #2
 800a37e:	4433      	add	r3, r6
 800a380:	6123      	str	r3, [r4, #16]
 800a382:	4641      	mov	r1, r8
 800a384:	4620      	mov	r0, r4
 800a386:	f001 f8ab 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800a38a:	2800      	cmp	r0, #0
 800a38c:	d03b      	beq.n	800a406 <ucdr_serialize_uint16_t+0xc2>
 800a38e:	7d23      	ldrb	r3, [r4, #20]
 800a390:	2b01      	cmp	r3, #1
 800a392:	d04a      	beq.n	800a42a <ucdr_serialize_uint16_t+0xe6>
 800a394:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a398:	702b      	strb	r3, [r5, #0]
 800a39a:	2e00      	cmp	r6, #0
 800a39c:	d040      	beq.n	800a420 <ucdr_serialize_uint16_t+0xdc>
 800a39e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a3a2:	706b      	strb	r3, [r5, #1]
 800a3a4:	6923      	ldr	r3, [r4, #16]
 800a3a6:	68a2      	ldr	r2, [r4, #8]
 800a3a8:	7da0      	ldrb	r0, [r4, #22]
 800a3aa:	3302      	adds	r3, #2
 800a3ac:	1b9e      	subs	r6, r3, r6
 800a3ae:	4442      	add	r2, r8
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	f080 0001 	eor.w	r0, r0, #1
 800a3b6:	60a2      	str	r2, [r4, #8]
 800a3b8:	6126      	str	r6, [r4, #16]
 800a3ba:	7563      	strb	r3, [r4, #21]
 800a3bc:	b002      	add	sp, #8
 800a3be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c2:	2102      	movs	r1, #2
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	f001 f88b 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800a3ca:	b190      	cbz	r0, 800a3f2 <ucdr_serialize_uint16_t+0xae>
 800a3cc:	7d23      	ldrb	r3, [r4, #20]
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	68a3      	ldr	r3, [r4, #8]
 800a3d2:	d014      	beq.n	800a3fe <ucdr_serialize_uint16_t+0xba>
 800a3d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a3d8:	701a      	strb	r2, [r3, #0]
 800a3da:	68a3      	ldr	r3, [r4, #8]
 800a3dc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a3e0:	705a      	strb	r2, [r3, #1]
 800a3e2:	68a2      	ldr	r2, [r4, #8]
 800a3e4:	6923      	ldr	r3, [r4, #16]
 800a3e6:	3202      	adds	r2, #2
 800a3e8:	3302      	adds	r3, #2
 800a3ea:	2102      	movs	r1, #2
 800a3ec:	60a2      	str	r2, [r4, #8]
 800a3ee:	6123      	str	r3, [r4, #16]
 800a3f0:	7561      	strb	r1, [r4, #21]
 800a3f2:	7da0      	ldrb	r0, [r4, #22]
 800a3f4:	f080 0001 	eor.w	r0, r0, #1
 800a3f8:	b002      	add	sp, #8
 800a3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3fe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a402:	801a      	strh	r2, [r3, #0]
 800a404:	e7ed      	b.n	800a3e2 <ucdr_serialize_uint16_t+0x9e>
 800a406:	68a2      	ldr	r2, [r4, #8]
 800a408:	6923      	ldr	r3, [r4, #16]
 800a40a:	7da0      	ldrb	r0, [r4, #22]
 800a40c:	7567      	strb	r7, [r4, #21]
 800a40e:	1b92      	subs	r2, r2, r6
 800a410:	1b9b      	subs	r3, r3, r6
 800a412:	f080 0001 	eor.w	r0, r0, #1
 800a416:	60a2      	str	r2, [r4, #8]
 800a418:	6123      	str	r3, [r4, #16]
 800a41a:	b002      	add	sp, #8
 800a41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a420:	68a3      	ldr	r3, [r4, #8]
 800a422:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a426:	701a      	strb	r2, [r3, #0]
 800a428:	e7bc      	b.n	800a3a4 <ucdr_serialize_uint16_t+0x60>
 800a42a:	4628      	mov	r0, r5
 800a42c:	f10d 0506 	add.w	r5, sp, #6
 800a430:	4629      	mov	r1, r5
 800a432:	4632      	mov	r2, r6
 800a434:	f00d fab1 	bl	801799a <memcpy>
 800a438:	68a0      	ldr	r0, [r4, #8]
 800a43a:	4642      	mov	r2, r8
 800a43c:	19a9      	adds	r1, r5, r6
 800a43e:	f00d faac 	bl	801799a <memcpy>
 800a442:	e7af      	b.n	800a3a4 <ucdr_serialize_uint16_t+0x60>

0800a444 <ucdr_serialize_endian_uint16_t>:
 800a444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a448:	b083      	sub	sp, #12
 800a44a:	460d      	mov	r5, r1
 800a44c:	2102      	movs	r1, #2
 800a44e:	4604      	mov	r4, r0
 800a450:	f8ad 2006 	strh.w	r2, [sp, #6]
 800a454:	f001 f898 	bl	800b588 <ucdr_buffer_alignment>
 800a458:	4601      	mov	r1, r0
 800a45a:	4620      	mov	r0, r4
 800a45c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a460:	f001 f8d6 	bl	800b610 <ucdr_advance_buffer>
 800a464:	2102      	movs	r1, #2
 800a466:	4620      	mov	r0, r4
 800a468:	f001 f82e 	bl	800b4c8 <ucdr_check_buffer_available_for>
 800a46c:	bb70      	cbnz	r0, 800a4cc <ucdr_serialize_endian_uint16_t+0x88>
 800a46e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a472:	42be      	cmp	r6, r7
 800a474:	d925      	bls.n	800a4c2 <ucdr_serialize_endian_uint16_t+0x7e>
 800a476:	6923      	ldr	r3, [r4, #16]
 800a478:	60a6      	str	r6, [r4, #8]
 800a47a:	1bf6      	subs	r6, r6, r7
 800a47c:	4433      	add	r3, r6
 800a47e:	f1c6 0902 	rsb	r9, r6, #2
 800a482:	6123      	str	r3, [r4, #16]
 800a484:	4649      	mov	r1, r9
 800a486:	4620      	mov	r0, r4
 800a488:	f001 f82a 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	d039      	beq.n	800a504 <ucdr_serialize_endian_uint16_t+0xc0>
 800a490:	2d01      	cmp	r5, #1
 800a492:	d04a      	beq.n	800a52a <ucdr_serialize_endian_uint16_t+0xe6>
 800a494:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a498:	703b      	strb	r3, [r7, #0]
 800a49a:	2e00      	cmp	r6, #0
 800a49c:	d040      	beq.n	800a520 <ucdr_serialize_endian_uint16_t+0xdc>
 800a49e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a4a2:	707b      	strb	r3, [r7, #1]
 800a4a4:	6923      	ldr	r3, [r4, #16]
 800a4a6:	68a2      	ldr	r2, [r4, #8]
 800a4a8:	7da0      	ldrb	r0, [r4, #22]
 800a4aa:	3302      	adds	r3, #2
 800a4ac:	444a      	add	r2, r9
 800a4ae:	1b9b      	subs	r3, r3, r6
 800a4b0:	2102      	movs	r1, #2
 800a4b2:	f080 0001 	eor.w	r0, r0, #1
 800a4b6:	60a2      	str	r2, [r4, #8]
 800a4b8:	6123      	str	r3, [r4, #16]
 800a4ba:	7561      	strb	r1, [r4, #21]
 800a4bc:	b003      	add	sp, #12
 800a4be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4c2:	2102      	movs	r1, #2
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	f001 f80b 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800a4ca:	b188      	cbz	r0, 800a4f0 <ucdr_serialize_endian_uint16_t+0xac>
 800a4cc:	2d01      	cmp	r5, #1
 800a4ce:	68a3      	ldr	r3, [r4, #8]
 800a4d0:	d014      	beq.n	800a4fc <ucdr_serialize_endian_uint16_t+0xb8>
 800a4d2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a4d6:	701a      	strb	r2, [r3, #0]
 800a4d8:	68a3      	ldr	r3, [r4, #8]
 800a4da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a4de:	705a      	strb	r2, [r3, #1]
 800a4e0:	68a2      	ldr	r2, [r4, #8]
 800a4e2:	6923      	ldr	r3, [r4, #16]
 800a4e4:	3202      	adds	r2, #2
 800a4e6:	3302      	adds	r3, #2
 800a4e8:	2102      	movs	r1, #2
 800a4ea:	60a2      	str	r2, [r4, #8]
 800a4ec:	6123      	str	r3, [r4, #16]
 800a4ee:	7561      	strb	r1, [r4, #21]
 800a4f0:	7da0      	ldrb	r0, [r4, #22]
 800a4f2:	f080 0001 	eor.w	r0, r0, #1
 800a4f6:	b003      	add	sp, #12
 800a4f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a500:	801a      	strh	r2, [r3, #0]
 800a502:	e7ed      	b.n	800a4e0 <ucdr_serialize_endian_uint16_t+0x9c>
 800a504:	68a2      	ldr	r2, [r4, #8]
 800a506:	6923      	ldr	r3, [r4, #16]
 800a508:	7da0      	ldrb	r0, [r4, #22]
 800a50a:	f884 8015 	strb.w	r8, [r4, #21]
 800a50e:	1b92      	subs	r2, r2, r6
 800a510:	1b9b      	subs	r3, r3, r6
 800a512:	f080 0001 	eor.w	r0, r0, #1
 800a516:	60a2      	str	r2, [r4, #8]
 800a518:	6123      	str	r3, [r4, #16]
 800a51a:	b003      	add	sp, #12
 800a51c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a520:	68a3      	ldr	r3, [r4, #8]
 800a522:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a526:	701a      	strb	r2, [r3, #0]
 800a528:	e7bc      	b.n	800a4a4 <ucdr_serialize_endian_uint16_t+0x60>
 800a52a:	f10d 0506 	add.w	r5, sp, #6
 800a52e:	4629      	mov	r1, r5
 800a530:	4632      	mov	r2, r6
 800a532:	4638      	mov	r0, r7
 800a534:	f00d fa31 	bl	801799a <memcpy>
 800a538:	68a0      	ldr	r0, [r4, #8]
 800a53a:	464a      	mov	r2, r9
 800a53c:	19a9      	adds	r1, r5, r6
 800a53e:	f00d fa2c 	bl	801799a <memcpy>
 800a542:	e7af      	b.n	800a4a4 <ucdr_serialize_endian_uint16_t+0x60>

0800a544 <ucdr_deserialize_uint16_t>:
 800a544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a548:	460d      	mov	r5, r1
 800a54a:	2102      	movs	r1, #2
 800a54c:	4604      	mov	r4, r0
 800a54e:	f001 f81b 	bl	800b588 <ucdr_buffer_alignment>
 800a552:	4601      	mov	r1, r0
 800a554:	4620      	mov	r0, r4
 800a556:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a55a:	f001 f859 	bl	800b610 <ucdr_advance_buffer>
 800a55e:	2102      	movs	r1, #2
 800a560:	4620      	mov	r0, r4
 800a562:	f000 ffb1 	bl	800b4c8 <ucdr_check_buffer_available_for>
 800a566:	bb60      	cbnz	r0, 800a5c2 <ucdr_deserialize_uint16_t+0x7e>
 800a568:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a56c:	42be      	cmp	r6, r7
 800a56e:	d923      	bls.n	800a5b8 <ucdr_deserialize_uint16_t+0x74>
 800a570:	6923      	ldr	r3, [r4, #16]
 800a572:	60a6      	str	r6, [r4, #8]
 800a574:	1bf6      	subs	r6, r6, r7
 800a576:	4433      	add	r3, r6
 800a578:	f1c6 0902 	rsb	r9, r6, #2
 800a57c:	6123      	str	r3, [r4, #16]
 800a57e:	4649      	mov	r1, r9
 800a580:	4620      	mov	r0, r4
 800a582:	f000 ffad 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800a586:	2800      	cmp	r0, #0
 800a588:	d034      	beq.n	800a5f4 <ucdr_deserialize_uint16_t+0xb0>
 800a58a:	7d23      	ldrb	r3, [r4, #20]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d042      	beq.n	800a616 <ucdr_deserialize_uint16_t+0xd2>
 800a590:	787b      	ldrb	r3, [r7, #1]
 800a592:	702b      	strb	r3, [r5, #0]
 800a594:	2e00      	cmp	r6, #0
 800a596:	d03a      	beq.n	800a60e <ucdr_deserialize_uint16_t+0xca>
 800a598:	783b      	ldrb	r3, [r7, #0]
 800a59a:	706b      	strb	r3, [r5, #1]
 800a59c:	6923      	ldr	r3, [r4, #16]
 800a59e:	68a2      	ldr	r2, [r4, #8]
 800a5a0:	7da0      	ldrb	r0, [r4, #22]
 800a5a2:	2102      	movs	r1, #2
 800a5a4:	3302      	adds	r3, #2
 800a5a6:	444a      	add	r2, r9
 800a5a8:	1b9b      	subs	r3, r3, r6
 800a5aa:	7561      	strb	r1, [r4, #21]
 800a5ac:	60a2      	str	r2, [r4, #8]
 800a5ae:	6123      	str	r3, [r4, #16]
 800a5b0:	f080 0001 	eor.w	r0, r0, #1
 800a5b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5b8:	2102      	movs	r1, #2
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f000 ff90 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800a5c0:	b180      	cbz	r0, 800a5e4 <ucdr_deserialize_uint16_t+0xa0>
 800a5c2:	7d23      	ldrb	r3, [r4, #20]
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	68a3      	ldr	r3, [r4, #8]
 800a5c8:	d011      	beq.n	800a5ee <ucdr_deserialize_uint16_t+0xaa>
 800a5ca:	785b      	ldrb	r3, [r3, #1]
 800a5cc:	702b      	strb	r3, [r5, #0]
 800a5ce:	68a3      	ldr	r3, [r4, #8]
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	706b      	strb	r3, [r5, #1]
 800a5d4:	68a2      	ldr	r2, [r4, #8]
 800a5d6:	6923      	ldr	r3, [r4, #16]
 800a5d8:	3202      	adds	r2, #2
 800a5da:	3302      	adds	r3, #2
 800a5dc:	2102      	movs	r1, #2
 800a5de:	60a2      	str	r2, [r4, #8]
 800a5e0:	6123      	str	r3, [r4, #16]
 800a5e2:	7561      	strb	r1, [r4, #21]
 800a5e4:	7da0      	ldrb	r0, [r4, #22]
 800a5e6:	f080 0001 	eor.w	r0, r0, #1
 800a5ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ee:	881b      	ldrh	r3, [r3, #0]
 800a5f0:	802b      	strh	r3, [r5, #0]
 800a5f2:	e7ef      	b.n	800a5d4 <ucdr_deserialize_uint16_t+0x90>
 800a5f4:	68a2      	ldr	r2, [r4, #8]
 800a5f6:	6923      	ldr	r3, [r4, #16]
 800a5f8:	7da0      	ldrb	r0, [r4, #22]
 800a5fa:	f884 8015 	strb.w	r8, [r4, #21]
 800a5fe:	1b92      	subs	r2, r2, r6
 800a600:	1b9b      	subs	r3, r3, r6
 800a602:	60a2      	str	r2, [r4, #8]
 800a604:	6123      	str	r3, [r4, #16]
 800a606:	f080 0001 	eor.w	r0, r0, #1
 800a60a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a60e:	68a3      	ldr	r3, [r4, #8]
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	706b      	strb	r3, [r5, #1]
 800a614:	e7c2      	b.n	800a59c <ucdr_deserialize_uint16_t+0x58>
 800a616:	4639      	mov	r1, r7
 800a618:	4632      	mov	r2, r6
 800a61a:	4628      	mov	r0, r5
 800a61c:	f00d f9bd 	bl	801799a <memcpy>
 800a620:	68a1      	ldr	r1, [r4, #8]
 800a622:	464a      	mov	r2, r9
 800a624:	19a8      	adds	r0, r5, r6
 800a626:	f00d f9b8 	bl	801799a <memcpy>
 800a62a:	e7b7      	b.n	800a59c <ucdr_deserialize_uint16_t+0x58>

0800a62c <ucdr_deserialize_endian_uint16_t>:
 800a62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a630:	460e      	mov	r6, r1
 800a632:	2102      	movs	r1, #2
 800a634:	4604      	mov	r4, r0
 800a636:	4615      	mov	r5, r2
 800a638:	f000 ffa6 	bl	800b588 <ucdr_buffer_alignment>
 800a63c:	4601      	mov	r1, r0
 800a63e:	4620      	mov	r0, r4
 800a640:	f894 9015 	ldrb.w	r9, [r4, #21]
 800a644:	f000 ffe4 	bl	800b610 <ucdr_advance_buffer>
 800a648:	2102      	movs	r1, #2
 800a64a:	4620      	mov	r0, r4
 800a64c:	f000 ff3c 	bl	800b4c8 <ucdr_check_buffer_available_for>
 800a650:	bb70      	cbnz	r0, 800a6b0 <ucdr_deserialize_endian_uint16_t+0x84>
 800a652:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800a656:	4547      	cmp	r7, r8
 800a658:	d925      	bls.n	800a6a6 <ucdr_deserialize_endian_uint16_t+0x7a>
 800a65a:	6923      	ldr	r3, [r4, #16]
 800a65c:	60a7      	str	r7, [r4, #8]
 800a65e:	eba7 0708 	sub.w	r7, r7, r8
 800a662:	443b      	add	r3, r7
 800a664:	f1c7 0a02 	rsb	sl, r7, #2
 800a668:	6123      	str	r3, [r4, #16]
 800a66a:	4651      	mov	r1, sl
 800a66c:	4620      	mov	r0, r4
 800a66e:	f000 ff37 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800a672:	2800      	cmp	r0, #0
 800a674:	d034      	beq.n	800a6e0 <ucdr_deserialize_endian_uint16_t+0xb4>
 800a676:	2e01      	cmp	r6, #1
 800a678:	d043      	beq.n	800a702 <ucdr_deserialize_endian_uint16_t+0xd6>
 800a67a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a67e:	702b      	strb	r3, [r5, #0]
 800a680:	2f00      	cmp	r7, #0
 800a682:	d03a      	beq.n	800a6fa <ucdr_deserialize_endian_uint16_t+0xce>
 800a684:	f898 3000 	ldrb.w	r3, [r8]
 800a688:	706b      	strb	r3, [r5, #1]
 800a68a:	6923      	ldr	r3, [r4, #16]
 800a68c:	68a2      	ldr	r2, [r4, #8]
 800a68e:	7da0      	ldrb	r0, [r4, #22]
 800a690:	2102      	movs	r1, #2
 800a692:	3302      	adds	r3, #2
 800a694:	4452      	add	r2, sl
 800a696:	1bdb      	subs	r3, r3, r7
 800a698:	7561      	strb	r1, [r4, #21]
 800a69a:	60a2      	str	r2, [r4, #8]
 800a69c:	6123      	str	r3, [r4, #16]
 800a69e:	f080 0001 	eor.w	r0, r0, #1
 800a6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6a6:	2102      	movs	r1, #2
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	f000 ff19 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800a6ae:	b178      	cbz	r0, 800a6d0 <ucdr_deserialize_endian_uint16_t+0xa4>
 800a6b0:	2e01      	cmp	r6, #1
 800a6b2:	68a3      	ldr	r3, [r4, #8]
 800a6b4:	d011      	beq.n	800a6da <ucdr_deserialize_endian_uint16_t+0xae>
 800a6b6:	785b      	ldrb	r3, [r3, #1]
 800a6b8:	702b      	strb	r3, [r5, #0]
 800a6ba:	68a3      	ldr	r3, [r4, #8]
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	706b      	strb	r3, [r5, #1]
 800a6c0:	68a2      	ldr	r2, [r4, #8]
 800a6c2:	6923      	ldr	r3, [r4, #16]
 800a6c4:	3202      	adds	r2, #2
 800a6c6:	3302      	adds	r3, #2
 800a6c8:	2102      	movs	r1, #2
 800a6ca:	60a2      	str	r2, [r4, #8]
 800a6cc:	6123      	str	r3, [r4, #16]
 800a6ce:	7561      	strb	r1, [r4, #21]
 800a6d0:	7da0      	ldrb	r0, [r4, #22]
 800a6d2:	f080 0001 	eor.w	r0, r0, #1
 800a6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6da:	881b      	ldrh	r3, [r3, #0]
 800a6dc:	802b      	strh	r3, [r5, #0]
 800a6de:	e7ef      	b.n	800a6c0 <ucdr_deserialize_endian_uint16_t+0x94>
 800a6e0:	68a2      	ldr	r2, [r4, #8]
 800a6e2:	6923      	ldr	r3, [r4, #16]
 800a6e4:	7da0      	ldrb	r0, [r4, #22]
 800a6e6:	f884 9015 	strb.w	r9, [r4, #21]
 800a6ea:	1bd2      	subs	r2, r2, r7
 800a6ec:	1bdb      	subs	r3, r3, r7
 800a6ee:	60a2      	str	r2, [r4, #8]
 800a6f0:	6123      	str	r3, [r4, #16]
 800a6f2:	f080 0001 	eor.w	r0, r0, #1
 800a6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6fa:	68a3      	ldr	r3, [r4, #8]
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	706b      	strb	r3, [r5, #1]
 800a700:	e7c3      	b.n	800a68a <ucdr_deserialize_endian_uint16_t+0x5e>
 800a702:	4641      	mov	r1, r8
 800a704:	463a      	mov	r2, r7
 800a706:	4628      	mov	r0, r5
 800a708:	f00d f947 	bl	801799a <memcpy>
 800a70c:	68a1      	ldr	r1, [r4, #8]
 800a70e:	4652      	mov	r2, sl
 800a710:	19e8      	adds	r0, r5, r7
 800a712:	f00d f942 	bl	801799a <memcpy>
 800a716:	e7b8      	b.n	800a68a <ucdr_deserialize_endian_uint16_t+0x5e>

0800a718 <ucdr_serialize_uint32_t>:
 800a718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a71c:	b082      	sub	sp, #8
 800a71e:	4604      	mov	r4, r0
 800a720:	9101      	str	r1, [sp, #4]
 800a722:	2104      	movs	r1, #4
 800a724:	f000 ff30 	bl	800b588 <ucdr_buffer_alignment>
 800a728:	4601      	mov	r1, r0
 800a72a:	4620      	mov	r0, r4
 800a72c:	7d67      	ldrb	r7, [r4, #21]
 800a72e:	f000 ff6f 	bl	800b610 <ucdr_advance_buffer>
 800a732:	2104      	movs	r1, #4
 800a734:	4620      	mov	r0, r4
 800a736:	f000 fec7 	bl	800b4c8 <ucdr_check_buffer_available_for>
 800a73a:	2800      	cmp	r0, #0
 800a73c:	d139      	bne.n	800a7b2 <ucdr_serialize_uint32_t+0x9a>
 800a73e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a742:	42ab      	cmp	r3, r5
 800a744:	d930      	bls.n	800a7a8 <ucdr_serialize_uint32_t+0x90>
 800a746:	1b5e      	subs	r6, r3, r5
 800a748:	60a3      	str	r3, [r4, #8]
 800a74a:	6923      	ldr	r3, [r4, #16]
 800a74c:	f1c6 0804 	rsb	r8, r6, #4
 800a750:	4433      	add	r3, r6
 800a752:	6123      	str	r3, [r4, #16]
 800a754:	4641      	mov	r1, r8
 800a756:	4620      	mov	r0, r4
 800a758:	f000 fec2 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800a75c:	2800      	cmp	r0, #0
 800a75e:	d04c      	beq.n	800a7fa <ucdr_serialize_uint32_t+0xe2>
 800a760:	7d23      	ldrb	r3, [r4, #20]
 800a762:	2b01      	cmp	r3, #1
 800a764:	d063      	beq.n	800a82e <ucdr_serialize_uint32_t+0x116>
 800a766:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a76a:	702b      	strb	r3, [r5, #0]
 800a76c:	2e00      	cmp	r6, #0
 800a76e:	d051      	beq.n	800a814 <ucdr_serialize_uint32_t+0xfc>
 800a770:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a774:	706b      	strb	r3, [r5, #1]
 800a776:	2e01      	cmp	r6, #1
 800a778:	d050      	beq.n	800a81c <ucdr_serialize_uint32_t+0x104>
 800a77a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a77e:	70ab      	strb	r3, [r5, #2]
 800a780:	2e02      	cmp	r6, #2
 800a782:	d04f      	beq.n	800a824 <ucdr_serialize_uint32_t+0x10c>
 800a784:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a788:	70eb      	strb	r3, [r5, #3]
 800a78a:	6923      	ldr	r3, [r4, #16]
 800a78c:	68a2      	ldr	r2, [r4, #8]
 800a78e:	7da0      	ldrb	r0, [r4, #22]
 800a790:	3304      	adds	r3, #4
 800a792:	1b9e      	subs	r6, r3, r6
 800a794:	4442      	add	r2, r8
 800a796:	2304      	movs	r3, #4
 800a798:	f080 0001 	eor.w	r0, r0, #1
 800a79c:	60a2      	str	r2, [r4, #8]
 800a79e:	6126      	str	r6, [r4, #16]
 800a7a0:	7563      	strb	r3, [r4, #21]
 800a7a2:	b002      	add	sp, #8
 800a7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7a8:	2104      	movs	r1, #4
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	f000 fe98 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800a7b0:	b1d0      	cbz	r0, 800a7e8 <ucdr_serialize_uint32_t+0xd0>
 800a7b2:	7d23      	ldrb	r3, [r4, #20]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	68a3      	ldr	r3, [r4, #8]
 800a7b8:	d01c      	beq.n	800a7f4 <ucdr_serialize_uint32_t+0xdc>
 800a7ba:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a7be:	701a      	strb	r2, [r3, #0]
 800a7c0:	68a3      	ldr	r3, [r4, #8]
 800a7c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a7c6:	705a      	strb	r2, [r3, #1]
 800a7c8:	68a3      	ldr	r3, [r4, #8]
 800a7ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a7ce:	709a      	strb	r2, [r3, #2]
 800a7d0:	68a3      	ldr	r3, [r4, #8]
 800a7d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a7d6:	70da      	strb	r2, [r3, #3]
 800a7d8:	68a2      	ldr	r2, [r4, #8]
 800a7da:	6923      	ldr	r3, [r4, #16]
 800a7dc:	3204      	adds	r2, #4
 800a7de:	3304      	adds	r3, #4
 800a7e0:	2104      	movs	r1, #4
 800a7e2:	60a2      	str	r2, [r4, #8]
 800a7e4:	6123      	str	r3, [r4, #16]
 800a7e6:	7561      	strb	r1, [r4, #21]
 800a7e8:	7da0      	ldrb	r0, [r4, #22]
 800a7ea:	f080 0001 	eor.w	r0, r0, #1
 800a7ee:	b002      	add	sp, #8
 800a7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7f4:	9a01      	ldr	r2, [sp, #4]
 800a7f6:	601a      	str	r2, [r3, #0]
 800a7f8:	e7ee      	b.n	800a7d8 <ucdr_serialize_uint32_t+0xc0>
 800a7fa:	68a2      	ldr	r2, [r4, #8]
 800a7fc:	6923      	ldr	r3, [r4, #16]
 800a7fe:	7da0      	ldrb	r0, [r4, #22]
 800a800:	7567      	strb	r7, [r4, #21]
 800a802:	1b92      	subs	r2, r2, r6
 800a804:	1b9b      	subs	r3, r3, r6
 800a806:	f080 0001 	eor.w	r0, r0, #1
 800a80a:	60a2      	str	r2, [r4, #8]
 800a80c:	6123      	str	r3, [r4, #16]
 800a80e:	b002      	add	sp, #8
 800a810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a814:	68a3      	ldr	r3, [r4, #8]
 800a816:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a81a:	701a      	strb	r2, [r3, #0]
 800a81c:	68a3      	ldr	r3, [r4, #8]
 800a81e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a822:	701a      	strb	r2, [r3, #0]
 800a824:	68a3      	ldr	r3, [r4, #8]
 800a826:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a82a:	701a      	strb	r2, [r3, #0]
 800a82c:	e7ad      	b.n	800a78a <ucdr_serialize_uint32_t+0x72>
 800a82e:	4628      	mov	r0, r5
 800a830:	ad01      	add	r5, sp, #4
 800a832:	4629      	mov	r1, r5
 800a834:	4632      	mov	r2, r6
 800a836:	f00d f8b0 	bl	801799a <memcpy>
 800a83a:	68a0      	ldr	r0, [r4, #8]
 800a83c:	4642      	mov	r2, r8
 800a83e:	19a9      	adds	r1, r5, r6
 800a840:	f00d f8ab 	bl	801799a <memcpy>
 800a844:	e7a1      	b.n	800a78a <ucdr_serialize_uint32_t+0x72>
 800a846:	bf00      	nop

0800a848 <ucdr_serialize_endian_uint32_t>:
 800a848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a84c:	b083      	sub	sp, #12
 800a84e:	460d      	mov	r5, r1
 800a850:	2104      	movs	r1, #4
 800a852:	4604      	mov	r4, r0
 800a854:	9201      	str	r2, [sp, #4]
 800a856:	f000 fe97 	bl	800b588 <ucdr_buffer_alignment>
 800a85a:	4601      	mov	r1, r0
 800a85c:	4620      	mov	r0, r4
 800a85e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a862:	f000 fed5 	bl	800b610 <ucdr_advance_buffer>
 800a866:	2104      	movs	r1, #4
 800a868:	4620      	mov	r0, r4
 800a86a:	f000 fe2d 	bl	800b4c8 <ucdr_check_buffer_available_for>
 800a86e:	2800      	cmp	r0, #0
 800a870:	d138      	bne.n	800a8e4 <ucdr_serialize_endian_uint32_t+0x9c>
 800a872:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a876:	42b7      	cmp	r7, r6
 800a878:	d92f      	bls.n	800a8da <ucdr_serialize_endian_uint32_t+0x92>
 800a87a:	6923      	ldr	r3, [r4, #16]
 800a87c:	60a7      	str	r7, [r4, #8]
 800a87e:	1bbf      	subs	r7, r7, r6
 800a880:	443b      	add	r3, r7
 800a882:	f1c7 0904 	rsb	r9, r7, #4
 800a886:	6123      	str	r3, [r4, #16]
 800a888:	4649      	mov	r1, r9
 800a88a:	4620      	mov	r0, r4
 800a88c:	f000 fe28 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800a890:	2800      	cmp	r0, #0
 800a892:	d04a      	beq.n	800a92a <ucdr_serialize_endian_uint32_t+0xe2>
 800a894:	2d01      	cmp	r5, #1
 800a896:	d063      	beq.n	800a960 <ucdr_serialize_endian_uint32_t+0x118>
 800a898:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a89c:	7033      	strb	r3, [r6, #0]
 800a89e:	2f00      	cmp	r7, #0
 800a8a0:	d051      	beq.n	800a946 <ucdr_serialize_endian_uint32_t+0xfe>
 800a8a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a8a6:	7073      	strb	r3, [r6, #1]
 800a8a8:	2f01      	cmp	r7, #1
 800a8aa:	d050      	beq.n	800a94e <ucdr_serialize_endian_uint32_t+0x106>
 800a8ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a8b0:	70b3      	strb	r3, [r6, #2]
 800a8b2:	2f02      	cmp	r7, #2
 800a8b4:	d04f      	beq.n	800a956 <ucdr_serialize_endian_uint32_t+0x10e>
 800a8b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a8ba:	70f3      	strb	r3, [r6, #3]
 800a8bc:	6923      	ldr	r3, [r4, #16]
 800a8be:	68a2      	ldr	r2, [r4, #8]
 800a8c0:	7da0      	ldrb	r0, [r4, #22]
 800a8c2:	3304      	adds	r3, #4
 800a8c4:	444a      	add	r2, r9
 800a8c6:	1bdb      	subs	r3, r3, r7
 800a8c8:	2104      	movs	r1, #4
 800a8ca:	f080 0001 	eor.w	r0, r0, #1
 800a8ce:	60a2      	str	r2, [r4, #8]
 800a8d0:	6123      	str	r3, [r4, #16]
 800a8d2:	7561      	strb	r1, [r4, #21]
 800a8d4:	b003      	add	sp, #12
 800a8d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8da:	2104      	movs	r1, #4
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f000 fdff 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800a8e2:	b1c8      	cbz	r0, 800a918 <ucdr_serialize_endian_uint32_t+0xd0>
 800a8e4:	2d01      	cmp	r5, #1
 800a8e6:	68a3      	ldr	r3, [r4, #8]
 800a8e8:	d01c      	beq.n	800a924 <ucdr_serialize_endian_uint32_t+0xdc>
 800a8ea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a8ee:	701a      	strb	r2, [r3, #0]
 800a8f0:	68a3      	ldr	r3, [r4, #8]
 800a8f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a8f6:	705a      	strb	r2, [r3, #1]
 800a8f8:	68a3      	ldr	r3, [r4, #8]
 800a8fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a8fe:	709a      	strb	r2, [r3, #2]
 800a900:	68a3      	ldr	r3, [r4, #8]
 800a902:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a906:	70da      	strb	r2, [r3, #3]
 800a908:	68a2      	ldr	r2, [r4, #8]
 800a90a:	6923      	ldr	r3, [r4, #16]
 800a90c:	3204      	adds	r2, #4
 800a90e:	3304      	adds	r3, #4
 800a910:	2104      	movs	r1, #4
 800a912:	60a2      	str	r2, [r4, #8]
 800a914:	6123      	str	r3, [r4, #16]
 800a916:	7561      	strb	r1, [r4, #21]
 800a918:	7da0      	ldrb	r0, [r4, #22]
 800a91a:	f080 0001 	eor.w	r0, r0, #1
 800a91e:	b003      	add	sp, #12
 800a920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a924:	9a01      	ldr	r2, [sp, #4]
 800a926:	601a      	str	r2, [r3, #0]
 800a928:	e7ee      	b.n	800a908 <ucdr_serialize_endian_uint32_t+0xc0>
 800a92a:	68a2      	ldr	r2, [r4, #8]
 800a92c:	6923      	ldr	r3, [r4, #16]
 800a92e:	7da0      	ldrb	r0, [r4, #22]
 800a930:	f884 8015 	strb.w	r8, [r4, #21]
 800a934:	1bd2      	subs	r2, r2, r7
 800a936:	1bdb      	subs	r3, r3, r7
 800a938:	f080 0001 	eor.w	r0, r0, #1
 800a93c:	60a2      	str	r2, [r4, #8]
 800a93e:	6123      	str	r3, [r4, #16]
 800a940:	b003      	add	sp, #12
 800a942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a946:	68a3      	ldr	r3, [r4, #8]
 800a948:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a94c:	701a      	strb	r2, [r3, #0]
 800a94e:	68a3      	ldr	r3, [r4, #8]
 800a950:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a954:	701a      	strb	r2, [r3, #0]
 800a956:	68a3      	ldr	r3, [r4, #8]
 800a958:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a95c:	701a      	strb	r2, [r3, #0]
 800a95e:	e7ad      	b.n	800a8bc <ucdr_serialize_endian_uint32_t+0x74>
 800a960:	ad01      	add	r5, sp, #4
 800a962:	4629      	mov	r1, r5
 800a964:	463a      	mov	r2, r7
 800a966:	4630      	mov	r0, r6
 800a968:	f00d f817 	bl	801799a <memcpy>
 800a96c:	68a0      	ldr	r0, [r4, #8]
 800a96e:	464a      	mov	r2, r9
 800a970:	19e9      	adds	r1, r5, r7
 800a972:	f00d f812 	bl	801799a <memcpy>
 800a976:	e7a1      	b.n	800a8bc <ucdr_serialize_endian_uint32_t+0x74>

0800a978 <ucdr_deserialize_uint32_t>:
 800a978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a97c:	460d      	mov	r5, r1
 800a97e:	2104      	movs	r1, #4
 800a980:	4604      	mov	r4, r0
 800a982:	f000 fe01 	bl	800b588 <ucdr_buffer_alignment>
 800a986:	4601      	mov	r1, r0
 800a988:	4620      	mov	r0, r4
 800a98a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a98e:	f000 fe3f 	bl	800b610 <ucdr_advance_buffer>
 800a992:	2104      	movs	r1, #4
 800a994:	4620      	mov	r0, r4
 800a996:	f000 fd97 	bl	800b4c8 <ucdr_check_buffer_available_for>
 800a99a:	2800      	cmp	r0, #0
 800a99c:	d138      	bne.n	800aa10 <ucdr_deserialize_uint32_t+0x98>
 800a99e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a9a2:	42b7      	cmp	r7, r6
 800a9a4:	d92f      	bls.n	800aa06 <ucdr_deserialize_uint32_t+0x8e>
 800a9a6:	6923      	ldr	r3, [r4, #16]
 800a9a8:	60a7      	str	r7, [r4, #8]
 800a9aa:	1bbf      	subs	r7, r7, r6
 800a9ac:	443b      	add	r3, r7
 800a9ae:	f1c7 0904 	rsb	r9, r7, #4
 800a9b2:	6123      	str	r3, [r4, #16]
 800a9b4:	4649      	mov	r1, r9
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f000 fd92 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	d046      	beq.n	800aa4e <ucdr_deserialize_uint32_t+0xd6>
 800a9c0:	7d23      	ldrb	r3, [r4, #20]
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d05c      	beq.n	800aa80 <ucdr_deserialize_uint32_t+0x108>
 800a9c6:	78f3      	ldrb	r3, [r6, #3]
 800a9c8:	702b      	strb	r3, [r5, #0]
 800a9ca:	2f00      	cmp	r7, #0
 800a9cc:	d04c      	beq.n	800aa68 <ucdr_deserialize_uint32_t+0xf0>
 800a9ce:	78b3      	ldrb	r3, [r6, #2]
 800a9d0:	706b      	strb	r3, [r5, #1]
 800a9d2:	2f01      	cmp	r7, #1
 800a9d4:	f105 0302 	add.w	r3, r5, #2
 800a9d8:	d04a      	beq.n	800aa70 <ucdr_deserialize_uint32_t+0xf8>
 800a9da:	7873      	ldrb	r3, [r6, #1]
 800a9dc:	70ab      	strb	r3, [r5, #2]
 800a9de:	2f02      	cmp	r7, #2
 800a9e0:	f105 0303 	add.w	r3, r5, #3
 800a9e4:	d048      	beq.n	800aa78 <ucdr_deserialize_uint32_t+0x100>
 800a9e6:	7833      	ldrb	r3, [r6, #0]
 800a9e8:	70eb      	strb	r3, [r5, #3]
 800a9ea:	6923      	ldr	r3, [r4, #16]
 800a9ec:	68a2      	ldr	r2, [r4, #8]
 800a9ee:	7da0      	ldrb	r0, [r4, #22]
 800a9f0:	2104      	movs	r1, #4
 800a9f2:	3304      	adds	r3, #4
 800a9f4:	444a      	add	r2, r9
 800a9f6:	1bdb      	subs	r3, r3, r7
 800a9f8:	7561      	strb	r1, [r4, #21]
 800a9fa:	60a2      	str	r2, [r4, #8]
 800a9fc:	6123      	str	r3, [r4, #16]
 800a9fe:	f080 0001 	eor.w	r0, r0, #1
 800aa02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa06:	2104      	movs	r1, #4
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f000 fd69 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800aa0e:	b1b0      	cbz	r0, 800aa3e <ucdr_deserialize_uint32_t+0xc6>
 800aa10:	7d23      	ldrb	r3, [r4, #20]
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	68a3      	ldr	r3, [r4, #8]
 800aa16:	d017      	beq.n	800aa48 <ucdr_deserialize_uint32_t+0xd0>
 800aa18:	78db      	ldrb	r3, [r3, #3]
 800aa1a:	702b      	strb	r3, [r5, #0]
 800aa1c:	68a3      	ldr	r3, [r4, #8]
 800aa1e:	789b      	ldrb	r3, [r3, #2]
 800aa20:	706b      	strb	r3, [r5, #1]
 800aa22:	68a3      	ldr	r3, [r4, #8]
 800aa24:	785b      	ldrb	r3, [r3, #1]
 800aa26:	70ab      	strb	r3, [r5, #2]
 800aa28:	68a3      	ldr	r3, [r4, #8]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	70eb      	strb	r3, [r5, #3]
 800aa2e:	68a2      	ldr	r2, [r4, #8]
 800aa30:	6923      	ldr	r3, [r4, #16]
 800aa32:	3204      	adds	r2, #4
 800aa34:	3304      	adds	r3, #4
 800aa36:	2104      	movs	r1, #4
 800aa38:	60a2      	str	r2, [r4, #8]
 800aa3a:	6123      	str	r3, [r4, #16]
 800aa3c:	7561      	strb	r1, [r4, #21]
 800aa3e:	7da0      	ldrb	r0, [r4, #22]
 800aa40:	f080 0001 	eor.w	r0, r0, #1
 800aa44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	602b      	str	r3, [r5, #0]
 800aa4c:	e7ef      	b.n	800aa2e <ucdr_deserialize_uint32_t+0xb6>
 800aa4e:	68a2      	ldr	r2, [r4, #8]
 800aa50:	6923      	ldr	r3, [r4, #16]
 800aa52:	7da0      	ldrb	r0, [r4, #22]
 800aa54:	f884 8015 	strb.w	r8, [r4, #21]
 800aa58:	1bd2      	subs	r2, r2, r7
 800aa5a:	1bdb      	subs	r3, r3, r7
 800aa5c:	60a2      	str	r2, [r4, #8]
 800aa5e:	6123      	str	r3, [r4, #16]
 800aa60:	f080 0001 	eor.w	r0, r0, #1
 800aa64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa68:	68a3      	ldr	r3, [r4, #8]
 800aa6a:	789b      	ldrb	r3, [r3, #2]
 800aa6c:	706b      	strb	r3, [r5, #1]
 800aa6e:	1cab      	adds	r3, r5, #2
 800aa70:	68a2      	ldr	r2, [r4, #8]
 800aa72:	7852      	ldrb	r2, [r2, #1]
 800aa74:	f803 2b01 	strb.w	r2, [r3], #1
 800aa78:	68a2      	ldr	r2, [r4, #8]
 800aa7a:	7812      	ldrb	r2, [r2, #0]
 800aa7c:	701a      	strb	r2, [r3, #0]
 800aa7e:	e7b4      	b.n	800a9ea <ucdr_deserialize_uint32_t+0x72>
 800aa80:	4631      	mov	r1, r6
 800aa82:	463a      	mov	r2, r7
 800aa84:	4628      	mov	r0, r5
 800aa86:	f00c ff88 	bl	801799a <memcpy>
 800aa8a:	68a1      	ldr	r1, [r4, #8]
 800aa8c:	464a      	mov	r2, r9
 800aa8e:	19e8      	adds	r0, r5, r7
 800aa90:	f00c ff83 	bl	801799a <memcpy>
 800aa94:	e7a9      	b.n	800a9ea <ucdr_deserialize_uint32_t+0x72>
 800aa96:	bf00      	nop

0800aa98 <ucdr_deserialize_endian_uint32_t>:
 800aa98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa9c:	460e      	mov	r6, r1
 800aa9e:	2104      	movs	r1, #4
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	4615      	mov	r5, r2
 800aaa4:	f000 fd70 	bl	800b588 <ucdr_buffer_alignment>
 800aaa8:	4601      	mov	r1, r0
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f894 9015 	ldrb.w	r9, [r4, #21]
 800aab0:	f000 fdae 	bl	800b610 <ucdr_advance_buffer>
 800aab4:	2104      	movs	r1, #4
 800aab6:	4620      	mov	r0, r4
 800aab8:	f000 fd06 	bl	800b4c8 <ucdr_check_buffer_available_for>
 800aabc:	2800      	cmp	r0, #0
 800aabe:	d13c      	bne.n	800ab3a <ucdr_deserialize_endian_uint32_t+0xa2>
 800aac0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800aac4:	42bb      	cmp	r3, r7
 800aac6:	d933      	bls.n	800ab30 <ucdr_deserialize_endian_uint32_t+0x98>
 800aac8:	eba3 0807 	sub.w	r8, r3, r7
 800aacc:	60a3      	str	r3, [r4, #8]
 800aace:	6923      	ldr	r3, [r4, #16]
 800aad0:	f1c8 0a04 	rsb	sl, r8, #4
 800aad4:	4443      	add	r3, r8
 800aad6:	6123      	str	r3, [r4, #16]
 800aad8:	4651      	mov	r1, sl
 800aada:	4620      	mov	r0, r4
 800aadc:	f000 fd00 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800aae0:	2800      	cmp	r0, #0
 800aae2:	d048      	beq.n	800ab76 <ucdr_deserialize_endian_uint32_t+0xde>
 800aae4:	2e01      	cmp	r6, #1
 800aae6:	d061      	beq.n	800abac <ucdr_deserialize_endian_uint32_t+0x114>
 800aae8:	78fb      	ldrb	r3, [r7, #3]
 800aaea:	702b      	strb	r3, [r5, #0]
 800aaec:	f1b8 0f00 	cmp.w	r8, #0
 800aaf0:	d050      	beq.n	800ab94 <ucdr_deserialize_endian_uint32_t+0xfc>
 800aaf2:	78bb      	ldrb	r3, [r7, #2]
 800aaf4:	706b      	strb	r3, [r5, #1]
 800aaf6:	f1b8 0f01 	cmp.w	r8, #1
 800aafa:	f105 0302 	add.w	r3, r5, #2
 800aafe:	d04d      	beq.n	800ab9c <ucdr_deserialize_endian_uint32_t+0x104>
 800ab00:	787b      	ldrb	r3, [r7, #1]
 800ab02:	70ab      	strb	r3, [r5, #2]
 800ab04:	f1b8 0f02 	cmp.w	r8, #2
 800ab08:	f105 0303 	add.w	r3, r5, #3
 800ab0c:	d04a      	beq.n	800aba4 <ucdr_deserialize_endian_uint32_t+0x10c>
 800ab0e:	783b      	ldrb	r3, [r7, #0]
 800ab10:	70eb      	strb	r3, [r5, #3]
 800ab12:	6923      	ldr	r3, [r4, #16]
 800ab14:	68a2      	ldr	r2, [r4, #8]
 800ab16:	7da0      	ldrb	r0, [r4, #22]
 800ab18:	2104      	movs	r1, #4
 800ab1a:	3304      	adds	r3, #4
 800ab1c:	4452      	add	r2, sl
 800ab1e:	eba3 0308 	sub.w	r3, r3, r8
 800ab22:	7561      	strb	r1, [r4, #21]
 800ab24:	60a2      	str	r2, [r4, #8]
 800ab26:	6123      	str	r3, [r4, #16]
 800ab28:	f080 0001 	eor.w	r0, r0, #1
 800ab2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab30:	2104      	movs	r1, #4
 800ab32:	4620      	mov	r0, r4
 800ab34:	f000 fcd4 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800ab38:	b1a8      	cbz	r0, 800ab66 <ucdr_deserialize_endian_uint32_t+0xce>
 800ab3a:	2e01      	cmp	r6, #1
 800ab3c:	68a3      	ldr	r3, [r4, #8]
 800ab3e:	d017      	beq.n	800ab70 <ucdr_deserialize_endian_uint32_t+0xd8>
 800ab40:	78db      	ldrb	r3, [r3, #3]
 800ab42:	702b      	strb	r3, [r5, #0]
 800ab44:	68a3      	ldr	r3, [r4, #8]
 800ab46:	789b      	ldrb	r3, [r3, #2]
 800ab48:	706b      	strb	r3, [r5, #1]
 800ab4a:	68a3      	ldr	r3, [r4, #8]
 800ab4c:	785b      	ldrb	r3, [r3, #1]
 800ab4e:	70ab      	strb	r3, [r5, #2]
 800ab50:	68a3      	ldr	r3, [r4, #8]
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	70eb      	strb	r3, [r5, #3]
 800ab56:	68a2      	ldr	r2, [r4, #8]
 800ab58:	6923      	ldr	r3, [r4, #16]
 800ab5a:	3204      	adds	r2, #4
 800ab5c:	3304      	adds	r3, #4
 800ab5e:	2104      	movs	r1, #4
 800ab60:	60a2      	str	r2, [r4, #8]
 800ab62:	6123      	str	r3, [r4, #16]
 800ab64:	7561      	strb	r1, [r4, #21]
 800ab66:	7da0      	ldrb	r0, [r4, #22]
 800ab68:	f080 0001 	eor.w	r0, r0, #1
 800ab6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	602b      	str	r3, [r5, #0]
 800ab74:	e7ef      	b.n	800ab56 <ucdr_deserialize_endian_uint32_t+0xbe>
 800ab76:	68a2      	ldr	r2, [r4, #8]
 800ab78:	6923      	ldr	r3, [r4, #16]
 800ab7a:	7da0      	ldrb	r0, [r4, #22]
 800ab7c:	f884 9015 	strb.w	r9, [r4, #21]
 800ab80:	eba2 0208 	sub.w	r2, r2, r8
 800ab84:	eba3 0308 	sub.w	r3, r3, r8
 800ab88:	60a2      	str	r2, [r4, #8]
 800ab8a:	6123      	str	r3, [r4, #16]
 800ab8c:	f080 0001 	eor.w	r0, r0, #1
 800ab90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab94:	68a3      	ldr	r3, [r4, #8]
 800ab96:	789b      	ldrb	r3, [r3, #2]
 800ab98:	706b      	strb	r3, [r5, #1]
 800ab9a:	1cab      	adds	r3, r5, #2
 800ab9c:	68a2      	ldr	r2, [r4, #8]
 800ab9e:	7852      	ldrb	r2, [r2, #1]
 800aba0:	f803 2b01 	strb.w	r2, [r3], #1
 800aba4:	68a2      	ldr	r2, [r4, #8]
 800aba6:	7812      	ldrb	r2, [r2, #0]
 800aba8:	701a      	strb	r2, [r3, #0]
 800abaa:	e7b2      	b.n	800ab12 <ucdr_deserialize_endian_uint32_t+0x7a>
 800abac:	4639      	mov	r1, r7
 800abae:	4642      	mov	r2, r8
 800abb0:	4628      	mov	r0, r5
 800abb2:	f00c fef2 	bl	801799a <memcpy>
 800abb6:	68a1      	ldr	r1, [r4, #8]
 800abb8:	4652      	mov	r2, sl
 800abba:	eb05 0008 	add.w	r0, r5, r8
 800abbe:	f00c feec 	bl	801799a <memcpy>
 800abc2:	e7a6      	b.n	800ab12 <ucdr_deserialize_endian_uint32_t+0x7a>

0800abc4 <ucdr_serialize_uint64_t>:
 800abc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abc8:	2108      	movs	r1, #8
 800abca:	b082      	sub	sp, #8
 800abcc:	4604      	mov	r4, r0
 800abce:	e9cd 2300 	strd	r2, r3, [sp]
 800abd2:	f000 fcd9 	bl	800b588 <ucdr_buffer_alignment>
 800abd6:	4601      	mov	r1, r0
 800abd8:	4620      	mov	r0, r4
 800abda:	7d67      	ldrb	r7, [r4, #21]
 800abdc:	f000 fd18 	bl	800b610 <ucdr_advance_buffer>
 800abe0:	2108      	movs	r1, #8
 800abe2:	4620      	mov	r0, r4
 800abe4:	f000 fc70 	bl	800b4c8 <ucdr_check_buffer_available_for>
 800abe8:	2800      	cmp	r0, #0
 800abea:	d14e      	bne.n	800ac8a <ucdr_serialize_uint64_t+0xc6>
 800abec:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800abf0:	42ab      	cmp	r3, r5
 800abf2:	d945      	bls.n	800ac80 <ucdr_serialize_uint64_t+0xbc>
 800abf4:	1b5e      	subs	r6, r3, r5
 800abf6:	60a3      	str	r3, [r4, #8]
 800abf8:	6923      	ldr	r3, [r4, #16]
 800abfa:	f1c6 0808 	rsb	r8, r6, #8
 800abfe:	4433      	add	r3, r6
 800ac00:	6123      	str	r3, [r4, #16]
 800ac02:	4641      	mov	r1, r8
 800ac04:	4620      	mov	r0, r4
 800ac06:	f000 fc6b 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	d074      	beq.n	800acf8 <ucdr_serialize_uint64_t+0x134>
 800ac0e:	7d23      	ldrb	r3, [r4, #20]
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	f000 809b 	beq.w	800ad4c <ucdr_serialize_uint64_t+0x188>
 800ac16:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ac1a:	702b      	strb	r3, [r5, #0]
 800ac1c:	2e00      	cmp	r6, #0
 800ac1e:	d078      	beq.n	800ad12 <ucdr_serialize_uint64_t+0x14e>
 800ac20:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ac24:	706b      	strb	r3, [r5, #1]
 800ac26:	2e01      	cmp	r6, #1
 800ac28:	d077      	beq.n	800ad1a <ucdr_serialize_uint64_t+0x156>
 800ac2a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ac2e:	70ab      	strb	r3, [r5, #2]
 800ac30:	2e02      	cmp	r6, #2
 800ac32:	d076      	beq.n	800ad22 <ucdr_serialize_uint64_t+0x15e>
 800ac34:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ac38:	70eb      	strb	r3, [r5, #3]
 800ac3a:	2e03      	cmp	r6, #3
 800ac3c:	d075      	beq.n	800ad2a <ucdr_serialize_uint64_t+0x166>
 800ac3e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ac42:	712b      	strb	r3, [r5, #4]
 800ac44:	2e04      	cmp	r6, #4
 800ac46:	d074      	beq.n	800ad32 <ucdr_serialize_uint64_t+0x16e>
 800ac48:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800ac4c:	716b      	strb	r3, [r5, #5]
 800ac4e:	2e05      	cmp	r6, #5
 800ac50:	d073      	beq.n	800ad3a <ucdr_serialize_uint64_t+0x176>
 800ac52:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800ac56:	71ab      	strb	r3, [r5, #6]
 800ac58:	2e06      	cmp	r6, #6
 800ac5a:	d072      	beq.n	800ad42 <ucdr_serialize_uint64_t+0x17e>
 800ac5c:	f89d 3000 	ldrb.w	r3, [sp]
 800ac60:	71eb      	strb	r3, [r5, #7]
 800ac62:	6923      	ldr	r3, [r4, #16]
 800ac64:	68a2      	ldr	r2, [r4, #8]
 800ac66:	7da0      	ldrb	r0, [r4, #22]
 800ac68:	3308      	adds	r3, #8
 800ac6a:	1b9e      	subs	r6, r3, r6
 800ac6c:	4442      	add	r2, r8
 800ac6e:	2308      	movs	r3, #8
 800ac70:	f080 0001 	eor.w	r0, r0, #1
 800ac74:	60a2      	str	r2, [r4, #8]
 800ac76:	6126      	str	r6, [r4, #16]
 800ac78:	7563      	strb	r3, [r4, #21]
 800ac7a:	b002      	add	sp, #8
 800ac7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac80:	2108      	movs	r1, #8
 800ac82:	4620      	mov	r0, r4
 800ac84:	f000 fc2c 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800ac88:	b350      	cbz	r0, 800ace0 <ucdr_serialize_uint64_t+0x11c>
 800ac8a:	7d23      	ldrb	r3, [r4, #20]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d02d      	beq.n	800acec <ucdr_serialize_uint64_t+0x128>
 800ac90:	68a3      	ldr	r3, [r4, #8]
 800ac92:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ac96:	701a      	strb	r2, [r3, #0]
 800ac98:	68a3      	ldr	r3, [r4, #8]
 800ac9a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ac9e:	705a      	strb	r2, [r3, #1]
 800aca0:	68a3      	ldr	r3, [r4, #8]
 800aca2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800aca6:	709a      	strb	r2, [r3, #2]
 800aca8:	68a3      	ldr	r3, [r4, #8]
 800acaa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800acae:	70da      	strb	r2, [r3, #3]
 800acb0:	68a3      	ldr	r3, [r4, #8]
 800acb2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800acb6:	711a      	strb	r2, [r3, #4]
 800acb8:	68a3      	ldr	r3, [r4, #8]
 800acba:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800acbe:	715a      	strb	r2, [r3, #5]
 800acc0:	68a3      	ldr	r3, [r4, #8]
 800acc2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800acc6:	719a      	strb	r2, [r3, #6]
 800acc8:	68a3      	ldr	r3, [r4, #8]
 800acca:	f89d 2000 	ldrb.w	r2, [sp]
 800acce:	71da      	strb	r2, [r3, #7]
 800acd0:	68a2      	ldr	r2, [r4, #8]
 800acd2:	6923      	ldr	r3, [r4, #16]
 800acd4:	3208      	adds	r2, #8
 800acd6:	3308      	adds	r3, #8
 800acd8:	2108      	movs	r1, #8
 800acda:	60a2      	str	r2, [r4, #8]
 800acdc:	6123      	str	r3, [r4, #16]
 800acde:	7561      	strb	r1, [r4, #21]
 800ace0:	7da0      	ldrb	r0, [r4, #22]
 800ace2:	f080 0001 	eor.w	r0, r0, #1
 800ace6:	b002      	add	sp, #8
 800ace8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acec:	466b      	mov	r3, sp
 800acee:	cb03      	ldmia	r3!, {r0, r1}
 800acf0:	68a3      	ldr	r3, [r4, #8]
 800acf2:	6018      	str	r0, [r3, #0]
 800acf4:	6059      	str	r1, [r3, #4]
 800acf6:	e7eb      	b.n	800acd0 <ucdr_serialize_uint64_t+0x10c>
 800acf8:	68a2      	ldr	r2, [r4, #8]
 800acfa:	6923      	ldr	r3, [r4, #16]
 800acfc:	7da0      	ldrb	r0, [r4, #22]
 800acfe:	7567      	strb	r7, [r4, #21]
 800ad00:	1b92      	subs	r2, r2, r6
 800ad02:	1b9b      	subs	r3, r3, r6
 800ad04:	f080 0001 	eor.w	r0, r0, #1
 800ad08:	60a2      	str	r2, [r4, #8]
 800ad0a:	6123      	str	r3, [r4, #16]
 800ad0c:	b002      	add	sp, #8
 800ad0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad12:	68a3      	ldr	r3, [r4, #8]
 800ad14:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ad18:	701a      	strb	r2, [r3, #0]
 800ad1a:	68a3      	ldr	r3, [r4, #8]
 800ad1c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ad20:	701a      	strb	r2, [r3, #0]
 800ad22:	68a3      	ldr	r3, [r4, #8]
 800ad24:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ad28:	701a      	strb	r2, [r3, #0]
 800ad2a:	68a3      	ldr	r3, [r4, #8]
 800ad2c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ad30:	701a      	strb	r2, [r3, #0]
 800ad32:	68a3      	ldr	r3, [r4, #8]
 800ad34:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ad38:	701a      	strb	r2, [r3, #0]
 800ad3a:	68a3      	ldr	r3, [r4, #8]
 800ad3c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ad40:	701a      	strb	r2, [r3, #0]
 800ad42:	68a3      	ldr	r3, [r4, #8]
 800ad44:	f89d 2000 	ldrb.w	r2, [sp]
 800ad48:	701a      	strb	r2, [r3, #0]
 800ad4a:	e78a      	b.n	800ac62 <ucdr_serialize_uint64_t+0x9e>
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	466d      	mov	r5, sp
 800ad50:	4629      	mov	r1, r5
 800ad52:	4632      	mov	r2, r6
 800ad54:	f00c fe21 	bl	801799a <memcpy>
 800ad58:	68a0      	ldr	r0, [r4, #8]
 800ad5a:	4642      	mov	r2, r8
 800ad5c:	19a9      	adds	r1, r5, r6
 800ad5e:	f00c fe1c 	bl	801799a <memcpy>
 800ad62:	e77e      	b.n	800ac62 <ucdr_serialize_uint64_t+0x9e>

0800ad64 <ucdr_serialize_int16_t>:
 800ad64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad68:	b082      	sub	sp, #8
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	2102      	movs	r1, #2
 800ad6e:	4604      	mov	r4, r0
 800ad70:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ad74:	f000 fc08 	bl	800b588 <ucdr_buffer_alignment>
 800ad78:	4601      	mov	r1, r0
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	7d67      	ldrb	r7, [r4, #21]
 800ad7e:	f000 fc47 	bl	800b610 <ucdr_advance_buffer>
 800ad82:	2102      	movs	r1, #2
 800ad84:	4620      	mov	r0, r4
 800ad86:	f000 fb9f 	bl	800b4c8 <ucdr_check_buffer_available_for>
 800ad8a:	bb78      	cbnz	r0, 800adec <ucdr_serialize_int16_t+0x88>
 800ad8c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ad90:	42ab      	cmp	r3, r5
 800ad92:	d926      	bls.n	800ade2 <ucdr_serialize_int16_t+0x7e>
 800ad94:	1b5e      	subs	r6, r3, r5
 800ad96:	60a3      	str	r3, [r4, #8]
 800ad98:	6923      	ldr	r3, [r4, #16]
 800ad9a:	f1c6 0802 	rsb	r8, r6, #2
 800ad9e:	4433      	add	r3, r6
 800ada0:	6123      	str	r3, [r4, #16]
 800ada2:	4641      	mov	r1, r8
 800ada4:	4620      	mov	r0, r4
 800ada6:	f000 fb9b 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800adaa:	2800      	cmp	r0, #0
 800adac:	d03b      	beq.n	800ae26 <ucdr_serialize_int16_t+0xc2>
 800adae:	7d23      	ldrb	r3, [r4, #20]
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d04a      	beq.n	800ae4a <ucdr_serialize_int16_t+0xe6>
 800adb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800adb8:	702b      	strb	r3, [r5, #0]
 800adba:	2e00      	cmp	r6, #0
 800adbc:	d040      	beq.n	800ae40 <ucdr_serialize_int16_t+0xdc>
 800adbe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800adc2:	706b      	strb	r3, [r5, #1]
 800adc4:	6923      	ldr	r3, [r4, #16]
 800adc6:	68a2      	ldr	r2, [r4, #8]
 800adc8:	7da0      	ldrb	r0, [r4, #22]
 800adca:	3302      	adds	r3, #2
 800adcc:	1b9e      	subs	r6, r3, r6
 800adce:	4442      	add	r2, r8
 800add0:	2302      	movs	r3, #2
 800add2:	f080 0001 	eor.w	r0, r0, #1
 800add6:	60a2      	str	r2, [r4, #8]
 800add8:	6126      	str	r6, [r4, #16]
 800adda:	7563      	strb	r3, [r4, #21]
 800addc:	b002      	add	sp, #8
 800adde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ade2:	2102      	movs	r1, #2
 800ade4:	4620      	mov	r0, r4
 800ade6:	f000 fb7b 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800adea:	b190      	cbz	r0, 800ae12 <ucdr_serialize_int16_t+0xae>
 800adec:	7d23      	ldrb	r3, [r4, #20]
 800adee:	2b01      	cmp	r3, #1
 800adf0:	68a3      	ldr	r3, [r4, #8]
 800adf2:	d014      	beq.n	800ae1e <ucdr_serialize_int16_t+0xba>
 800adf4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800adf8:	701a      	strb	r2, [r3, #0]
 800adfa:	68a3      	ldr	r3, [r4, #8]
 800adfc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ae00:	705a      	strb	r2, [r3, #1]
 800ae02:	68a2      	ldr	r2, [r4, #8]
 800ae04:	6923      	ldr	r3, [r4, #16]
 800ae06:	3202      	adds	r2, #2
 800ae08:	3302      	adds	r3, #2
 800ae0a:	2102      	movs	r1, #2
 800ae0c:	60a2      	str	r2, [r4, #8]
 800ae0e:	6123      	str	r3, [r4, #16]
 800ae10:	7561      	strb	r1, [r4, #21]
 800ae12:	7da0      	ldrb	r0, [r4, #22]
 800ae14:	f080 0001 	eor.w	r0, r0, #1
 800ae18:	b002      	add	sp, #8
 800ae1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae1e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ae22:	801a      	strh	r2, [r3, #0]
 800ae24:	e7ed      	b.n	800ae02 <ucdr_serialize_int16_t+0x9e>
 800ae26:	68a2      	ldr	r2, [r4, #8]
 800ae28:	6923      	ldr	r3, [r4, #16]
 800ae2a:	7da0      	ldrb	r0, [r4, #22]
 800ae2c:	7567      	strb	r7, [r4, #21]
 800ae2e:	1b92      	subs	r2, r2, r6
 800ae30:	1b9b      	subs	r3, r3, r6
 800ae32:	f080 0001 	eor.w	r0, r0, #1
 800ae36:	60a2      	str	r2, [r4, #8]
 800ae38:	6123      	str	r3, [r4, #16]
 800ae3a:	b002      	add	sp, #8
 800ae3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae40:	68a3      	ldr	r3, [r4, #8]
 800ae42:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ae46:	701a      	strb	r2, [r3, #0]
 800ae48:	e7bc      	b.n	800adc4 <ucdr_serialize_int16_t+0x60>
 800ae4a:	4628      	mov	r0, r5
 800ae4c:	f10d 0506 	add.w	r5, sp, #6
 800ae50:	4629      	mov	r1, r5
 800ae52:	4632      	mov	r2, r6
 800ae54:	f00c fda1 	bl	801799a <memcpy>
 800ae58:	68a0      	ldr	r0, [r4, #8]
 800ae5a:	4642      	mov	r2, r8
 800ae5c:	19a9      	adds	r1, r5, r6
 800ae5e:	f00c fd9c 	bl	801799a <memcpy>
 800ae62:	e7af      	b.n	800adc4 <ucdr_serialize_int16_t+0x60>

0800ae64 <ucdr_deserialize_int16_t>:
 800ae64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae68:	460d      	mov	r5, r1
 800ae6a:	2102      	movs	r1, #2
 800ae6c:	4604      	mov	r4, r0
 800ae6e:	f000 fb8b 	bl	800b588 <ucdr_buffer_alignment>
 800ae72:	4601      	mov	r1, r0
 800ae74:	4620      	mov	r0, r4
 800ae76:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ae7a:	f000 fbc9 	bl	800b610 <ucdr_advance_buffer>
 800ae7e:	2102      	movs	r1, #2
 800ae80:	4620      	mov	r0, r4
 800ae82:	f000 fb21 	bl	800b4c8 <ucdr_check_buffer_available_for>
 800ae86:	bb60      	cbnz	r0, 800aee2 <ucdr_deserialize_int16_t+0x7e>
 800ae88:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ae8c:	42be      	cmp	r6, r7
 800ae8e:	d923      	bls.n	800aed8 <ucdr_deserialize_int16_t+0x74>
 800ae90:	6923      	ldr	r3, [r4, #16]
 800ae92:	60a6      	str	r6, [r4, #8]
 800ae94:	1bf6      	subs	r6, r6, r7
 800ae96:	4433      	add	r3, r6
 800ae98:	f1c6 0902 	rsb	r9, r6, #2
 800ae9c:	6123      	str	r3, [r4, #16]
 800ae9e:	4649      	mov	r1, r9
 800aea0:	4620      	mov	r0, r4
 800aea2:	f000 fb1d 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d034      	beq.n	800af14 <ucdr_deserialize_int16_t+0xb0>
 800aeaa:	7d23      	ldrb	r3, [r4, #20]
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d042      	beq.n	800af36 <ucdr_deserialize_int16_t+0xd2>
 800aeb0:	787b      	ldrb	r3, [r7, #1]
 800aeb2:	702b      	strb	r3, [r5, #0]
 800aeb4:	2e00      	cmp	r6, #0
 800aeb6:	d03a      	beq.n	800af2e <ucdr_deserialize_int16_t+0xca>
 800aeb8:	783b      	ldrb	r3, [r7, #0]
 800aeba:	706b      	strb	r3, [r5, #1]
 800aebc:	6923      	ldr	r3, [r4, #16]
 800aebe:	68a2      	ldr	r2, [r4, #8]
 800aec0:	7da0      	ldrb	r0, [r4, #22]
 800aec2:	2102      	movs	r1, #2
 800aec4:	3302      	adds	r3, #2
 800aec6:	444a      	add	r2, r9
 800aec8:	1b9b      	subs	r3, r3, r6
 800aeca:	7561      	strb	r1, [r4, #21]
 800aecc:	60a2      	str	r2, [r4, #8]
 800aece:	6123      	str	r3, [r4, #16]
 800aed0:	f080 0001 	eor.w	r0, r0, #1
 800aed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aed8:	2102      	movs	r1, #2
 800aeda:	4620      	mov	r0, r4
 800aedc:	f000 fb00 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800aee0:	b180      	cbz	r0, 800af04 <ucdr_deserialize_int16_t+0xa0>
 800aee2:	7d23      	ldrb	r3, [r4, #20]
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	68a3      	ldr	r3, [r4, #8]
 800aee8:	d011      	beq.n	800af0e <ucdr_deserialize_int16_t+0xaa>
 800aeea:	785b      	ldrb	r3, [r3, #1]
 800aeec:	702b      	strb	r3, [r5, #0]
 800aeee:	68a3      	ldr	r3, [r4, #8]
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	706b      	strb	r3, [r5, #1]
 800aef4:	68a2      	ldr	r2, [r4, #8]
 800aef6:	6923      	ldr	r3, [r4, #16]
 800aef8:	3202      	adds	r2, #2
 800aefa:	3302      	adds	r3, #2
 800aefc:	2102      	movs	r1, #2
 800aefe:	60a2      	str	r2, [r4, #8]
 800af00:	6123      	str	r3, [r4, #16]
 800af02:	7561      	strb	r1, [r4, #21]
 800af04:	7da0      	ldrb	r0, [r4, #22]
 800af06:	f080 0001 	eor.w	r0, r0, #1
 800af0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af0e:	881b      	ldrh	r3, [r3, #0]
 800af10:	802b      	strh	r3, [r5, #0]
 800af12:	e7ef      	b.n	800aef4 <ucdr_deserialize_int16_t+0x90>
 800af14:	68a2      	ldr	r2, [r4, #8]
 800af16:	6923      	ldr	r3, [r4, #16]
 800af18:	7da0      	ldrb	r0, [r4, #22]
 800af1a:	f884 8015 	strb.w	r8, [r4, #21]
 800af1e:	1b92      	subs	r2, r2, r6
 800af20:	1b9b      	subs	r3, r3, r6
 800af22:	60a2      	str	r2, [r4, #8]
 800af24:	6123      	str	r3, [r4, #16]
 800af26:	f080 0001 	eor.w	r0, r0, #1
 800af2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af2e:	68a3      	ldr	r3, [r4, #8]
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	706b      	strb	r3, [r5, #1]
 800af34:	e7c2      	b.n	800aebc <ucdr_deserialize_int16_t+0x58>
 800af36:	4639      	mov	r1, r7
 800af38:	4632      	mov	r2, r6
 800af3a:	4628      	mov	r0, r5
 800af3c:	f00c fd2d 	bl	801799a <memcpy>
 800af40:	68a1      	ldr	r1, [r4, #8]
 800af42:	464a      	mov	r2, r9
 800af44:	19a8      	adds	r0, r5, r6
 800af46:	f00c fd28 	bl	801799a <memcpy>
 800af4a:	e7b7      	b.n	800aebc <ucdr_deserialize_int16_t+0x58>

0800af4c <ucdr_serialize_int32_t>:
 800af4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af50:	b082      	sub	sp, #8
 800af52:	4604      	mov	r4, r0
 800af54:	9101      	str	r1, [sp, #4]
 800af56:	2104      	movs	r1, #4
 800af58:	f000 fb16 	bl	800b588 <ucdr_buffer_alignment>
 800af5c:	4601      	mov	r1, r0
 800af5e:	4620      	mov	r0, r4
 800af60:	7d67      	ldrb	r7, [r4, #21]
 800af62:	f000 fb55 	bl	800b610 <ucdr_advance_buffer>
 800af66:	2104      	movs	r1, #4
 800af68:	4620      	mov	r0, r4
 800af6a:	f000 faad 	bl	800b4c8 <ucdr_check_buffer_available_for>
 800af6e:	2800      	cmp	r0, #0
 800af70:	d139      	bne.n	800afe6 <ucdr_serialize_int32_t+0x9a>
 800af72:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800af76:	42ab      	cmp	r3, r5
 800af78:	d930      	bls.n	800afdc <ucdr_serialize_int32_t+0x90>
 800af7a:	1b5e      	subs	r6, r3, r5
 800af7c:	60a3      	str	r3, [r4, #8]
 800af7e:	6923      	ldr	r3, [r4, #16]
 800af80:	f1c6 0804 	rsb	r8, r6, #4
 800af84:	4433      	add	r3, r6
 800af86:	6123      	str	r3, [r4, #16]
 800af88:	4641      	mov	r1, r8
 800af8a:	4620      	mov	r0, r4
 800af8c:	f000 faa8 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800af90:	2800      	cmp	r0, #0
 800af92:	d04c      	beq.n	800b02e <ucdr_serialize_int32_t+0xe2>
 800af94:	7d23      	ldrb	r3, [r4, #20]
 800af96:	2b01      	cmp	r3, #1
 800af98:	d063      	beq.n	800b062 <ucdr_serialize_int32_t+0x116>
 800af9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800af9e:	702b      	strb	r3, [r5, #0]
 800afa0:	2e00      	cmp	r6, #0
 800afa2:	d051      	beq.n	800b048 <ucdr_serialize_int32_t+0xfc>
 800afa4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800afa8:	706b      	strb	r3, [r5, #1]
 800afaa:	2e01      	cmp	r6, #1
 800afac:	d050      	beq.n	800b050 <ucdr_serialize_int32_t+0x104>
 800afae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800afb2:	70ab      	strb	r3, [r5, #2]
 800afb4:	2e02      	cmp	r6, #2
 800afb6:	d04f      	beq.n	800b058 <ucdr_serialize_int32_t+0x10c>
 800afb8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800afbc:	70eb      	strb	r3, [r5, #3]
 800afbe:	6923      	ldr	r3, [r4, #16]
 800afc0:	68a2      	ldr	r2, [r4, #8]
 800afc2:	7da0      	ldrb	r0, [r4, #22]
 800afc4:	3304      	adds	r3, #4
 800afc6:	1b9e      	subs	r6, r3, r6
 800afc8:	4442      	add	r2, r8
 800afca:	2304      	movs	r3, #4
 800afcc:	f080 0001 	eor.w	r0, r0, #1
 800afd0:	60a2      	str	r2, [r4, #8]
 800afd2:	6126      	str	r6, [r4, #16]
 800afd4:	7563      	strb	r3, [r4, #21]
 800afd6:	b002      	add	sp, #8
 800afd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afdc:	2104      	movs	r1, #4
 800afde:	4620      	mov	r0, r4
 800afe0:	f000 fa7e 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800afe4:	b1d0      	cbz	r0, 800b01c <ucdr_serialize_int32_t+0xd0>
 800afe6:	7d23      	ldrb	r3, [r4, #20]
 800afe8:	2b01      	cmp	r3, #1
 800afea:	68a3      	ldr	r3, [r4, #8]
 800afec:	d01c      	beq.n	800b028 <ucdr_serialize_int32_t+0xdc>
 800afee:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800aff2:	701a      	strb	r2, [r3, #0]
 800aff4:	68a3      	ldr	r3, [r4, #8]
 800aff6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800affa:	705a      	strb	r2, [r3, #1]
 800affc:	68a3      	ldr	r3, [r4, #8]
 800affe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b002:	709a      	strb	r2, [r3, #2]
 800b004:	68a3      	ldr	r3, [r4, #8]
 800b006:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b00a:	70da      	strb	r2, [r3, #3]
 800b00c:	68a2      	ldr	r2, [r4, #8]
 800b00e:	6923      	ldr	r3, [r4, #16]
 800b010:	3204      	adds	r2, #4
 800b012:	3304      	adds	r3, #4
 800b014:	2104      	movs	r1, #4
 800b016:	60a2      	str	r2, [r4, #8]
 800b018:	6123      	str	r3, [r4, #16]
 800b01a:	7561      	strb	r1, [r4, #21]
 800b01c:	7da0      	ldrb	r0, [r4, #22]
 800b01e:	f080 0001 	eor.w	r0, r0, #1
 800b022:	b002      	add	sp, #8
 800b024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b028:	9a01      	ldr	r2, [sp, #4]
 800b02a:	601a      	str	r2, [r3, #0]
 800b02c:	e7ee      	b.n	800b00c <ucdr_serialize_int32_t+0xc0>
 800b02e:	68a2      	ldr	r2, [r4, #8]
 800b030:	6923      	ldr	r3, [r4, #16]
 800b032:	7da0      	ldrb	r0, [r4, #22]
 800b034:	7567      	strb	r7, [r4, #21]
 800b036:	1b92      	subs	r2, r2, r6
 800b038:	1b9b      	subs	r3, r3, r6
 800b03a:	f080 0001 	eor.w	r0, r0, #1
 800b03e:	60a2      	str	r2, [r4, #8]
 800b040:	6123      	str	r3, [r4, #16]
 800b042:	b002      	add	sp, #8
 800b044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b048:	68a3      	ldr	r3, [r4, #8]
 800b04a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b04e:	701a      	strb	r2, [r3, #0]
 800b050:	68a3      	ldr	r3, [r4, #8]
 800b052:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b056:	701a      	strb	r2, [r3, #0]
 800b058:	68a3      	ldr	r3, [r4, #8]
 800b05a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b05e:	701a      	strb	r2, [r3, #0]
 800b060:	e7ad      	b.n	800afbe <ucdr_serialize_int32_t+0x72>
 800b062:	4628      	mov	r0, r5
 800b064:	ad01      	add	r5, sp, #4
 800b066:	4629      	mov	r1, r5
 800b068:	4632      	mov	r2, r6
 800b06a:	f00c fc96 	bl	801799a <memcpy>
 800b06e:	68a0      	ldr	r0, [r4, #8]
 800b070:	4642      	mov	r2, r8
 800b072:	19a9      	adds	r1, r5, r6
 800b074:	f00c fc91 	bl	801799a <memcpy>
 800b078:	e7a1      	b.n	800afbe <ucdr_serialize_int32_t+0x72>
 800b07a:	bf00      	nop

0800b07c <ucdr_deserialize_int32_t>:
 800b07c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b080:	460d      	mov	r5, r1
 800b082:	2104      	movs	r1, #4
 800b084:	4604      	mov	r4, r0
 800b086:	f000 fa7f 	bl	800b588 <ucdr_buffer_alignment>
 800b08a:	4601      	mov	r1, r0
 800b08c:	4620      	mov	r0, r4
 800b08e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b092:	f000 fabd 	bl	800b610 <ucdr_advance_buffer>
 800b096:	2104      	movs	r1, #4
 800b098:	4620      	mov	r0, r4
 800b09a:	f000 fa15 	bl	800b4c8 <ucdr_check_buffer_available_for>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	d138      	bne.n	800b114 <ucdr_deserialize_int32_t+0x98>
 800b0a2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b0a6:	42b7      	cmp	r7, r6
 800b0a8:	d92f      	bls.n	800b10a <ucdr_deserialize_int32_t+0x8e>
 800b0aa:	6923      	ldr	r3, [r4, #16]
 800b0ac:	60a7      	str	r7, [r4, #8]
 800b0ae:	1bbf      	subs	r7, r7, r6
 800b0b0:	443b      	add	r3, r7
 800b0b2:	f1c7 0904 	rsb	r9, r7, #4
 800b0b6:	6123      	str	r3, [r4, #16]
 800b0b8:	4649      	mov	r1, r9
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f000 fa10 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	d046      	beq.n	800b152 <ucdr_deserialize_int32_t+0xd6>
 800b0c4:	7d23      	ldrb	r3, [r4, #20]
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d05c      	beq.n	800b184 <ucdr_deserialize_int32_t+0x108>
 800b0ca:	78f3      	ldrb	r3, [r6, #3]
 800b0cc:	702b      	strb	r3, [r5, #0]
 800b0ce:	2f00      	cmp	r7, #0
 800b0d0:	d04c      	beq.n	800b16c <ucdr_deserialize_int32_t+0xf0>
 800b0d2:	78b3      	ldrb	r3, [r6, #2]
 800b0d4:	706b      	strb	r3, [r5, #1]
 800b0d6:	2f01      	cmp	r7, #1
 800b0d8:	f105 0302 	add.w	r3, r5, #2
 800b0dc:	d04a      	beq.n	800b174 <ucdr_deserialize_int32_t+0xf8>
 800b0de:	7873      	ldrb	r3, [r6, #1]
 800b0e0:	70ab      	strb	r3, [r5, #2]
 800b0e2:	2f02      	cmp	r7, #2
 800b0e4:	f105 0303 	add.w	r3, r5, #3
 800b0e8:	d048      	beq.n	800b17c <ucdr_deserialize_int32_t+0x100>
 800b0ea:	7833      	ldrb	r3, [r6, #0]
 800b0ec:	70eb      	strb	r3, [r5, #3]
 800b0ee:	6923      	ldr	r3, [r4, #16]
 800b0f0:	68a2      	ldr	r2, [r4, #8]
 800b0f2:	7da0      	ldrb	r0, [r4, #22]
 800b0f4:	2104      	movs	r1, #4
 800b0f6:	3304      	adds	r3, #4
 800b0f8:	444a      	add	r2, r9
 800b0fa:	1bdb      	subs	r3, r3, r7
 800b0fc:	7561      	strb	r1, [r4, #21]
 800b0fe:	60a2      	str	r2, [r4, #8]
 800b100:	6123      	str	r3, [r4, #16]
 800b102:	f080 0001 	eor.w	r0, r0, #1
 800b106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b10a:	2104      	movs	r1, #4
 800b10c:	4620      	mov	r0, r4
 800b10e:	f000 f9e7 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800b112:	b1b0      	cbz	r0, 800b142 <ucdr_deserialize_int32_t+0xc6>
 800b114:	7d23      	ldrb	r3, [r4, #20]
 800b116:	2b01      	cmp	r3, #1
 800b118:	68a3      	ldr	r3, [r4, #8]
 800b11a:	d017      	beq.n	800b14c <ucdr_deserialize_int32_t+0xd0>
 800b11c:	78db      	ldrb	r3, [r3, #3]
 800b11e:	702b      	strb	r3, [r5, #0]
 800b120:	68a3      	ldr	r3, [r4, #8]
 800b122:	789b      	ldrb	r3, [r3, #2]
 800b124:	706b      	strb	r3, [r5, #1]
 800b126:	68a3      	ldr	r3, [r4, #8]
 800b128:	785b      	ldrb	r3, [r3, #1]
 800b12a:	70ab      	strb	r3, [r5, #2]
 800b12c:	68a3      	ldr	r3, [r4, #8]
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	70eb      	strb	r3, [r5, #3]
 800b132:	68a2      	ldr	r2, [r4, #8]
 800b134:	6923      	ldr	r3, [r4, #16]
 800b136:	3204      	adds	r2, #4
 800b138:	3304      	adds	r3, #4
 800b13a:	2104      	movs	r1, #4
 800b13c:	60a2      	str	r2, [r4, #8]
 800b13e:	6123      	str	r3, [r4, #16]
 800b140:	7561      	strb	r1, [r4, #21]
 800b142:	7da0      	ldrb	r0, [r4, #22]
 800b144:	f080 0001 	eor.w	r0, r0, #1
 800b148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	602b      	str	r3, [r5, #0]
 800b150:	e7ef      	b.n	800b132 <ucdr_deserialize_int32_t+0xb6>
 800b152:	68a2      	ldr	r2, [r4, #8]
 800b154:	6923      	ldr	r3, [r4, #16]
 800b156:	7da0      	ldrb	r0, [r4, #22]
 800b158:	f884 8015 	strb.w	r8, [r4, #21]
 800b15c:	1bd2      	subs	r2, r2, r7
 800b15e:	1bdb      	subs	r3, r3, r7
 800b160:	60a2      	str	r2, [r4, #8]
 800b162:	6123      	str	r3, [r4, #16]
 800b164:	f080 0001 	eor.w	r0, r0, #1
 800b168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b16c:	68a3      	ldr	r3, [r4, #8]
 800b16e:	789b      	ldrb	r3, [r3, #2]
 800b170:	706b      	strb	r3, [r5, #1]
 800b172:	1cab      	adds	r3, r5, #2
 800b174:	68a2      	ldr	r2, [r4, #8]
 800b176:	7852      	ldrb	r2, [r2, #1]
 800b178:	f803 2b01 	strb.w	r2, [r3], #1
 800b17c:	68a2      	ldr	r2, [r4, #8]
 800b17e:	7812      	ldrb	r2, [r2, #0]
 800b180:	701a      	strb	r2, [r3, #0]
 800b182:	e7b4      	b.n	800b0ee <ucdr_deserialize_int32_t+0x72>
 800b184:	4631      	mov	r1, r6
 800b186:	463a      	mov	r2, r7
 800b188:	4628      	mov	r0, r5
 800b18a:	f00c fc06 	bl	801799a <memcpy>
 800b18e:	68a1      	ldr	r1, [r4, #8]
 800b190:	464a      	mov	r2, r9
 800b192:	19e8      	adds	r0, r5, r7
 800b194:	f00c fc01 	bl	801799a <memcpy>
 800b198:	e7a9      	b.n	800b0ee <ucdr_deserialize_int32_t+0x72>
 800b19a:	bf00      	nop

0800b19c <ucdr_serialize_double>:
 800b19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1a0:	2108      	movs	r1, #8
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	4604      	mov	r4, r0
 800b1a6:	ed8d 0b00 	vstr	d0, [sp]
 800b1aa:	f000 f9ed 	bl	800b588 <ucdr_buffer_alignment>
 800b1ae:	4601      	mov	r1, r0
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	7d67      	ldrb	r7, [r4, #21]
 800b1b4:	f000 fa2c 	bl	800b610 <ucdr_advance_buffer>
 800b1b8:	2108      	movs	r1, #8
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f000 f984 	bl	800b4c8 <ucdr_check_buffer_available_for>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	d14e      	bne.n	800b262 <ucdr_serialize_double+0xc6>
 800b1c4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b1c8:	42ab      	cmp	r3, r5
 800b1ca:	d945      	bls.n	800b258 <ucdr_serialize_double+0xbc>
 800b1cc:	1b5e      	subs	r6, r3, r5
 800b1ce:	60a3      	str	r3, [r4, #8]
 800b1d0:	6923      	ldr	r3, [r4, #16]
 800b1d2:	f1c6 0808 	rsb	r8, r6, #8
 800b1d6:	4433      	add	r3, r6
 800b1d8:	6123      	str	r3, [r4, #16]
 800b1da:	4641      	mov	r1, r8
 800b1dc:	4620      	mov	r0, r4
 800b1de:	f000 f97f 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	d074      	beq.n	800b2d0 <ucdr_serialize_double+0x134>
 800b1e6:	7d23      	ldrb	r3, [r4, #20]
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	f000 809b 	beq.w	800b324 <ucdr_serialize_double+0x188>
 800b1ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b1f2:	702b      	strb	r3, [r5, #0]
 800b1f4:	2e00      	cmp	r6, #0
 800b1f6:	d078      	beq.n	800b2ea <ucdr_serialize_double+0x14e>
 800b1f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b1fc:	706b      	strb	r3, [r5, #1]
 800b1fe:	2e01      	cmp	r6, #1
 800b200:	d077      	beq.n	800b2f2 <ucdr_serialize_double+0x156>
 800b202:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b206:	70ab      	strb	r3, [r5, #2]
 800b208:	2e02      	cmp	r6, #2
 800b20a:	d076      	beq.n	800b2fa <ucdr_serialize_double+0x15e>
 800b20c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b210:	70eb      	strb	r3, [r5, #3]
 800b212:	2e03      	cmp	r6, #3
 800b214:	d075      	beq.n	800b302 <ucdr_serialize_double+0x166>
 800b216:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b21a:	712b      	strb	r3, [r5, #4]
 800b21c:	2e04      	cmp	r6, #4
 800b21e:	d074      	beq.n	800b30a <ucdr_serialize_double+0x16e>
 800b220:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b224:	716b      	strb	r3, [r5, #5]
 800b226:	2e05      	cmp	r6, #5
 800b228:	d073      	beq.n	800b312 <ucdr_serialize_double+0x176>
 800b22a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b22e:	71ab      	strb	r3, [r5, #6]
 800b230:	2e06      	cmp	r6, #6
 800b232:	d072      	beq.n	800b31a <ucdr_serialize_double+0x17e>
 800b234:	f89d 3000 	ldrb.w	r3, [sp]
 800b238:	71eb      	strb	r3, [r5, #7]
 800b23a:	6923      	ldr	r3, [r4, #16]
 800b23c:	68a2      	ldr	r2, [r4, #8]
 800b23e:	7da0      	ldrb	r0, [r4, #22]
 800b240:	3308      	adds	r3, #8
 800b242:	1b9e      	subs	r6, r3, r6
 800b244:	4442      	add	r2, r8
 800b246:	2308      	movs	r3, #8
 800b248:	f080 0001 	eor.w	r0, r0, #1
 800b24c:	60a2      	str	r2, [r4, #8]
 800b24e:	6126      	str	r6, [r4, #16]
 800b250:	7563      	strb	r3, [r4, #21]
 800b252:	b002      	add	sp, #8
 800b254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b258:	2108      	movs	r1, #8
 800b25a:	4620      	mov	r0, r4
 800b25c:	f000 f940 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800b260:	b350      	cbz	r0, 800b2b8 <ucdr_serialize_double+0x11c>
 800b262:	7d23      	ldrb	r3, [r4, #20]
 800b264:	2b01      	cmp	r3, #1
 800b266:	d02d      	beq.n	800b2c4 <ucdr_serialize_double+0x128>
 800b268:	68a3      	ldr	r3, [r4, #8]
 800b26a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b26e:	701a      	strb	r2, [r3, #0]
 800b270:	68a3      	ldr	r3, [r4, #8]
 800b272:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b276:	705a      	strb	r2, [r3, #1]
 800b278:	68a3      	ldr	r3, [r4, #8]
 800b27a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b27e:	709a      	strb	r2, [r3, #2]
 800b280:	68a3      	ldr	r3, [r4, #8]
 800b282:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b286:	70da      	strb	r2, [r3, #3]
 800b288:	68a3      	ldr	r3, [r4, #8]
 800b28a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b28e:	711a      	strb	r2, [r3, #4]
 800b290:	68a3      	ldr	r3, [r4, #8]
 800b292:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b296:	715a      	strb	r2, [r3, #5]
 800b298:	68a3      	ldr	r3, [r4, #8]
 800b29a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b29e:	719a      	strb	r2, [r3, #6]
 800b2a0:	68a3      	ldr	r3, [r4, #8]
 800b2a2:	f89d 2000 	ldrb.w	r2, [sp]
 800b2a6:	71da      	strb	r2, [r3, #7]
 800b2a8:	68a2      	ldr	r2, [r4, #8]
 800b2aa:	6923      	ldr	r3, [r4, #16]
 800b2ac:	3208      	adds	r2, #8
 800b2ae:	3308      	adds	r3, #8
 800b2b0:	2108      	movs	r1, #8
 800b2b2:	60a2      	str	r2, [r4, #8]
 800b2b4:	6123      	str	r3, [r4, #16]
 800b2b6:	7561      	strb	r1, [r4, #21]
 800b2b8:	7da0      	ldrb	r0, [r4, #22]
 800b2ba:	f080 0001 	eor.w	r0, r0, #1
 800b2be:	b002      	add	sp, #8
 800b2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2c4:	466b      	mov	r3, sp
 800b2c6:	cb03      	ldmia	r3!, {r0, r1}
 800b2c8:	68a3      	ldr	r3, [r4, #8]
 800b2ca:	6018      	str	r0, [r3, #0]
 800b2cc:	6059      	str	r1, [r3, #4]
 800b2ce:	e7eb      	b.n	800b2a8 <ucdr_serialize_double+0x10c>
 800b2d0:	68a2      	ldr	r2, [r4, #8]
 800b2d2:	6923      	ldr	r3, [r4, #16]
 800b2d4:	7da0      	ldrb	r0, [r4, #22]
 800b2d6:	7567      	strb	r7, [r4, #21]
 800b2d8:	1b92      	subs	r2, r2, r6
 800b2da:	1b9b      	subs	r3, r3, r6
 800b2dc:	f080 0001 	eor.w	r0, r0, #1
 800b2e0:	60a2      	str	r2, [r4, #8]
 800b2e2:	6123      	str	r3, [r4, #16]
 800b2e4:	b002      	add	sp, #8
 800b2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2ea:	68a3      	ldr	r3, [r4, #8]
 800b2ec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b2f0:	701a      	strb	r2, [r3, #0]
 800b2f2:	68a3      	ldr	r3, [r4, #8]
 800b2f4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b2f8:	701a      	strb	r2, [r3, #0]
 800b2fa:	68a3      	ldr	r3, [r4, #8]
 800b2fc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b300:	701a      	strb	r2, [r3, #0]
 800b302:	68a3      	ldr	r3, [r4, #8]
 800b304:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b308:	701a      	strb	r2, [r3, #0]
 800b30a:	68a3      	ldr	r3, [r4, #8]
 800b30c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b310:	701a      	strb	r2, [r3, #0]
 800b312:	68a3      	ldr	r3, [r4, #8]
 800b314:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b318:	701a      	strb	r2, [r3, #0]
 800b31a:	68a3      	ldr	r3, [r4, #8]
 800b31c:	f89d 2000 	ldrb.w	r2, [sp]
 800b320:	701a      	strb	r2, [r3, #0]
 800b322:	e78a      	b.n	800b23a <ucdr_serialize_double+0x9e>
 800b324:	4628      	mov	r0, r5
 800b326:	466d      	mov	r5, sp
 800b328:	4629      	mov	r1, r5
 800b32a:	4632      	mov	r2, r6
 800b32c:	f00c fb35 	bl	801799a <memcpy>
 800b330:	68a0      	ldr	r0, [r4, #8]
 800b332:	4642      	mov	r2, r8
 800b334:	19a9      	adds	r1, r5, r6
 800b336:	f00c fb30 	bl	801799a <memcpy>
 800b33a:	e77e      	b.n	800b23a <ucdr_serialize_double+0x9e>

0800b33c <ucdr_deserialize_double>:
 800b33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b340:	460d      	mov	r5, r1
 800b342:	2108      	movs	r1, #8
 800b344:	4604      	mov	r4, r0
 800b346:	f000 f91f 	bl	800b588 <ucdr_buffer_alignment>
 800b34a:	4601      	mov	r1, r0
 800b34c:	4620      	mov	r0, r4
 800b34e:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b352:	f000 f95d 	bl	800b610 <ucdr_advance_buffer>
 800b356:	2108      	movs	r1, #8
 800b358:	4620      	mov	r0, r4
 800b35a:	f000 f8b5 	bl	800b4c8 <ucdr_check_buffer_available_for>
 800b35e:	2800      	cmp	r0, #0
 800b360:	d151      	bne.n	800b406 <ucdr_deserialize_double+0xca>
 800b362:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b366:	42be      	cmp	r6, r7
 800b368:	d948      	bls.n	800b3fc <ucdr_deserialize_double+0xc0>
 800b36a:	6923      	ldr	r3, [r4, #16]
 800b36c:	60a6      	str	r6, [r4, #8]
 800b36e:	1bf6      	subs	r6, r6, r7
 800b370:	4433      	add	r3, r6
 800b372:	f1c6 0808 	rsb	r8, r6, #8
 800b376:	6123      	str	r3, [r4, #16]
 800b378:	4641      	mov	r1, r8
 800b37a:	4620      	mov	r0, r4
 800b37c:	f000 f8b0 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800b380:	2800      	cmp	r0, #0
 800b382:	d06d      	beq.n	800b460 <ucdr_deserialize_double+0x124>
 800b384:	7d23      	ldrb	r3, [r4, #20]
 800b386:	2b01      	cmp	r3, #1
 800b388:	f000 8093 	beq.w	800b4b2 <ucdr_deserialize_double+0x176>
 800b38c:	79fb      	ldrb	r3, [r7, #7]
 800b38e:	702b      	strb	r3, [r5, #0]
 800b390:	2e00      	cmp	r6, #0
 800b392:	d072      	beq.n	800b47a <ucdr_deserialize_double+0x13e>
 800b394:	79bb      	ldrb	r3, [r7, #6]
 800b396:	706b      	strb	r3, [r5, #1]
 800b398:	2e01      	cmp	r6, #1
 800b39a:	f105 0302 	add.w	r3, r5, #2
 800b39e:	d070      	beq.n	800b482 <ucdr_deserialize_double+0x146>
 800b3a0:	797b      	ldrb	r3, [r7, #5]
 800b3a2:	70ab      	strb	r3, [r5, #2]
 800b3a4:	2e02      	cmp	r6, #2
 800b3a6:	f105 0303 	add.w	r3, r5, #3
 800b3aa:	d06e      	beq.n	800b48a <ucdr_deserialize_double+0x14e>
 800b3ac:	793b      	ldrb	r3, [r7, #4]
 800b3ae:	70eb      	strb	r3, [r5, #3]
 800b3b0:	2e03      	cmp	r6, #3
 800b3b2:	f105 0304 	add.w	r3, r5, #4
 800b3b6:	d06c      	beq.n	800b492 <ucdr_deserialize_double+0x156>
 800b3b8:	78fb      	ldrb	r3, [r7, #3]
 800b3ba:	712b      	strb	r3, [r5, #4]
 800b3bc:	2e04      	cmp	r6, #4
 800b3be:	f105 0305 	add.w	r3, r5, #5
 800b3c2:	d06a      	beq.n	800b49a <ucdr_deserialize_double+0x15e>
 800b3c4:	78bb      	ldrb	r3, [r7, #2]
 800b3c6:	716b      	strb	r3, [r5, #5]
 800b3c8:	2e05      	cmp	r6, #5
 800b3ca:	f105 0306 	add.w	r3, r5, #6
 800b3ce:	d068      	beq.n	800b4a2 <ucdr_deserialize_double+0x166>
 800b3d0:	787b      	ldrb	r3, [r7, #1]
 800b3d2:	71ab      	strb	r3, [r5, #6]
 800b3d4:	2e06      	cmp	r6, #6
 800b3d6:	f105 0307 	add.w	r3, r5, #7
 800b3da:	d066      	beq.n	800b4aa <ucdr_deserialize_double+0x16e>
 800b3dc:	783b      	ldrb	r3, [r7, #0]
 800b3de:	71eb      	strb	r3, [r5, #7]
 800b3e0:	6923      	ldr	r3, [r4, #16]
 800b3e2:	68a2      	ldr	r2, [r4, #8]
 800b3e4:	7da0      	ldrb	r0, [r4, #22]
 800b3e6:	3308      	adds	r3, #8
 800b3e8:	1b9e      	subs	r6, r3, r6
 800b3ea:	2308      	movs	r3, #8
 800b3ec:	4442      	add	r2, r8
 800b3ee:	7563      	strb	r3, [r4, #21]
 800b3f0:	60a2      	str	r2, [r4, #8]
 800b3f2:	6126      	str	r6, [r4, #16]
 800b3f4:	f080 0001 	eor.w	r0, r0, #1
 800b3f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3fc:	2108      	movs	r1, #8
 800b3fe:	4620      	mov	r0, r4
 800b400:	f000 f86e 	bl	800b4e0 <ucdr_check_final_buffer_behavior>
 800b404:	b310      	cbz	r0, 800b44c <ucdr_deserialize_double+0x110>
 800b406:	7d23      	ldrb	r3, [r4, #20]
 800b408:	2b01      	cmp	r3, #1
 800b40a:	68a3      	ldr	r3, [r4, #8]
 800b40c:	d023      	beq.n	800b456 <ucdr_deserialize_double+0x11a>
 800b40e:	79db      	ldrb	r3, [r3, #7]
 800b410:	702b      	strb	r3, [r5, #0]
 800b412:	68a3      	ldr	r3, [r4, #8]
 800b414:	799b      	ldrb	r3, [r3, #6]
 800b416:	706b      	strb	r3, [r5, #1]
 800b418:	68a3      	ldr	r3, [r4, #8]
 800b41a:	795b      	ldrb	r3, [r3, #5]
 800b41c:	70ab      	strb	r3, [r5, #2]
 800b41e:	68a3      	ldr	r3, [r4, #8]
 800b420:	791b      	ldrb	r3, [r3, #4]
 800b422:	70eb      	strb	r3, [r5, #3]
 800b424:	68a3      	ldr	r3, [r4, #8]
 800b426:	78db      	ldrb	r3, [r3, #3]
 800b428:	712b      	strb	r3, [r5, #4]
 800b42a:	68a3      	ldr	r3, [r4, #8]
 800b42c:	789b      	ldrb	r3, [r3, #2]
 800b42e:	716b      	strb	r3, [r5, #5]
 800b430:	68a3      	ldr	r3, [r4, #8]
 800b432:	785b      	ldrb	r3, [r3, #1]
 800b434:	71ab      	strb	r3, [r5, #6]
 800b436:	68a3      	ldr	r3, [r4, #8]
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	71eb      	strb	r3, [r5, #7]
 800b43c:	68a2      	ldr	r2, [r4, #8]
 800b43e:	6923      	ldr	r3, [r4, #16]
 800b440:	3208      	adds	r2, #8
 800b442:	3308      	adds	r3, #8
 800b444:	2108      	movs	r1, #8
 800b446:	60a2      	str	r2, [r4, #8]
 800b448:	6123      	str	r3, [r4, #16]
 800b44a:	7561      	strb	r1, [r4, #21]
 800b44c:	7da0      	ldrb	r0, [r4, #22]
 800b44e:	f080 0001 	eor.w	r0, r0, #1
 800b452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	606b      	str	r3, [r5, #4]
 800b45c:	602a      	str	r2, [r5, #0]
 800b45e:	e7ed      	b.n	800b43c <ucdr_deserialize_double+0x100>
 800b460:	68a2      	ldr	r2, [r4, #8]
 800b462:	6923      	ldr	r3, [r4, #16]
 800b464:	7da0      	ldrb	r0, [r4, #22]
 800b466:	f884 9015 	strb.w	r9, [r4, #21]
 800b46a:	1b92      	subs	r2, r2, r6
 800b46c:	1b9b      	subs	r3, r3, r6
 800b46e:	60a2      	str	r2, [r4, #8]
 800b470:	6123      	str	r3, [r4, #16]
 800b472:	f080 0001 	eor.w	r0, r0, #1
 800b476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b47a:	68a3      	ldr	r3, [r4, #8]
 800b47c:	799b      	ldrb	r3, [r3, #6]
 800b47e:	706b      	strb	r3, [r5, #1]
 800b480:	1cab      	adds	r3, r5, #2
 800b482:	68a2      	ldr	r2, [r4, #8]
 800b484:	7952      	ldrb	r2, [r2, #5]
 800b486:	f803 2b01 	strb.w	r2, [r3], #1
 800b48a:	68a2      	ldr	r2, [r4, #8]
 800b48c:	7912      	ldrb	r2, [r2, #4]
 800b48e:	f803 2b01 	strb.w	r2, [r3], #1
 800b492:	68a2      	ldr	r2, [r4, #8]
 800b494:	78d2      	ldrb	r2, [r2, #3]
 800b496:	f803 2b01 	strb.w	r2, [r3], #1
 800b49a:	68a2      	ldr	r2, [r4, #8]
 800b49c:	7892      	ldrb	r2, [r2, #2]
 800b49e:	f803 2b01 	strb.w	r2, [r3], #1
 800b4a2:	68a2      	ldr	r2, [r4, #8]
 800b4a4:	7852      	ldrb	r2, [r2, #1]
 800b4a6:	f803 2b01 	strb.w	r2, [r3], #1
 800b4aa:	68a2      	ldr	r2, [r4, #8]
 800b4ac:	7812      	ldrb	r2, [r2, #0]
 800b4ae:	701a      	strb	r2, [r3, #0]
 800b4b0:	e796      	b.n	800b3e0 <ucdr_deserialize_double+0xa4>
 800b4b2:	4639      	mov	r1, r7
 800b4b4:	4632      	mov	r2, r6
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	f00c fa6f 	bl	801799a <memcpy>
 800b4bc:	68a1      	ldr	r1, [r4, #8]
 800b4be:	4642      	mov	r2, r8
 800b4c0:	19a8      	adds	r0, r5, r6
 800b4c2:	f00c fa6a 	bl	801799a <memcpy>
 800b4c6:	e78b      	b.n	800b3e0 <ucdr_deserialize_double+0xa4>

0800b4c8 <ucdr_check_buffer_available_for>:
 800b4c8:	7d83      	ldrb	r3, [r0, #22]
 800b4ca:	b93b      	cbnz	r3, 800b4dc <ucdr_check_buffer_available_for+0x14>
 800b4cc:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800b4d0:	4419      	add	r1, r3
 800b4d2:	4288      	cmp	r0, r1
 800b4d4:	bf34      	ite	cc
 800b4d6:	2000      	movcc	r0, #0
 800b4d8:	2001      	movcs	r0, #1
 800b4da:	4770      	bx	lr
 800b4dc:	2000      	movs	r0, #0
 800b4de:	4770      	bx	lr

0800b4e0 <ucdr_check_final_buffer_behavior>:
 800b4e0:	7d83      	ldrb	r3, [r0, #22]
 800b4e2:	b943      	cbnz	r3, 800b4f6 <ucdr_check_final_buffer_behavior+0x16>
 800b4e4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800b4e8:	4291      	cmp	r1, r2
 800b4ea:	b510      	push	{r4, lr}
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	d205      	bcs.n	800b4fc <ucdr_check_final_buffer_behavior+0x1c>
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	bd10      	pop	{r4, pc}
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	4770      	bx	lr
 800b4fc:	6982      	ldr	r2, [r0, #24]
 800b4fe:	b13a      	cbz	r2, 800b510 <ucdr_check_final_buffer_behavior+0x30>
 800b500:	69c1      	ldr	r1, [r0, #28]
 800b502:	4790      	blx	r2
 800b504:	f080 0301 	eor.w	r3, r0, #1
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	75a0      	strb	r0, [r4, #22]
 800b50c:	4618      	mov	r0, r3
 800b50e:	bd10      	pop	{r4, pc}
 800b510:	2001      	movs	r0, #1
 800b512:	75a0      	strb	r0, [r4, #22]
 800b514:	e7fa      	b.n	800b50c <ucdr_check_final_buffer_behavior+0x2c>
 800b516:	bf00      	nop

0800b518 <ucdr_set_on_full_buffer_callback>:
 800b518:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop

0800b520 <ucdr_init_buffer_origin_offset_endian>:
 800b520:	b410      	push	{r4}
 800b522:	9c01      	ldr	r4, [sp, #4]
 800b524:	6001      	str	r1, [r0, #0]
 800b526:	440a      	add	r2, r1
 800b528:	6042      	str	r2, [r0, #4]
 800b52a:	190a      	adds	r2, r1, r4
 800b52c:	441c      	add	r4, r3
 800b52e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800b532:	6082      	str	r2, [r0, #8]
 800b534:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b538:	7503      	strb	r3, [r0, #20]
 800b53a:	2200      	movs	r2, #0
 800b53c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800b540:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b544:	7542      	strb	r2, [r0, #21]
 800b546:	7582      	strb	r2, [r0, #22]
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop

0800b54c <ucdr_init_buffer_origin_offset>:
 800b54c:	b510      	push	{r4, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	9c04      	ldr	r4, [sp, #16]
 800b552:	9400      	str	r4, [sp, #0]
 800b554:	2401      	movs	r4, #1
 800b556:	9401      	str	r4, [sp, #4]
 800b558:	f7ff ffe2 	bl	800b520 <ucdr_init_buffer_origin_offset_endian>
 800b55c:	b002      	add	sp, #8
 800b55e:	bd10      	pop	{r4, pc}

0800b560 <ucdr_init_buffer_origin>:
 800b560:	b510      	push	{r4, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	2400      	movs	r4, #0
 800b566:	9400      	str	r4, [sp, #0]
 800b568:	f7ff fff0 	bl	800b54c <ucdr_init_buffer_origin_offset>
 800b56c:	b002      	add	sp, #8
 800b56e:	bd10      	pop	{r4, pc}

0800b570 <ucdr_init_buffer>:
 800b570:	2300      	movs	r3, #0
 800b572:	f7ff bff5 	b.w	800b560 <ucdr_init_buffer_origin>
 800b576:	bf00      	nop

0800b578 <ucdr_alignment>:
 800b578:	fbb0 f3f1 	udiv	r3, r0, r1
 800b57c:	fb03 0011 	mls	r0, r3, r1, r0
 800b580:	1a08      	subs	r0, r1, r0
 800b582:	3901      	subs	r1, #1
 800b584:	4008      	ands	r0, r1
 800b586:	4770      	bx	lr

0800b588 <ucdr_buffer_alignment>:
 800b588:	7d43      	ldrb	r3, [r0, #21]
 800b58a:	428b      	cmp	r3, r1
 800b58c:	d208      	bcs.n	800b5a0 <ucdr_buffer_alignment+0x18>
 800b58e:	6900      	ldr	r0, [r0, #16]
 800b590:	fbb0 f3f1 	udiv	r3, r0, r1
 800b594:	fb01 0013 	mls	r0, r1, r3, r0
 800b598:	1a08      	subs	r0, r1, r0
 800b59a:	3901      	subs	r1, #1
 800b59c:	4008      	ands	r0, r1
 800b59e:	4770      	bx	lr
 800b5a0:	2000      	movs	r0, #0
 800b5a2:	4770      	bx	lr

0800b5a4 <ucdr_align_to>:
 800b5a4:	b538      	push	{r3, r4, r5, lr}
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	460d      	mov	r5, r1
 800b5aa:	f7ff ffed 	bl	800b588 <ucdr_buffer_alignment>
 800b5ae:	68a3      	ldr	r3, [r4, #8]
 800b5b0:	6921      	ldr	r1, [r4, #16]
 800b5b2:	7565      	strb	r5, [r4, #21]
 800b5b4:	181a      	adds	r2, r3, r0
 800b5b6:	6863      	ldr	r3, [r4, #4]
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	4408      	add	r0, r1
 800b5bc:	bf28      	it	cs
 800b5be:	4613      	movcs	r3, r2
 800b5c0:	6120      	str	r0, [r4, #16]
 800b5c2:	60a3      	str	r3, [r4, #8]
 800b5c4:	bd38      	pop	{r3, r4, r5, pc}
 800b5c6:	bf00      	nop

0800b5c8 <ucdr_buffer_length>:
 800b5c8:	6882      	ldr	r2, [r0, #8]
 800b5ca:	6800      	ldr	r0, [r0, #0]
 800b5cc:	1a10      	subs	r0, r2, r0
 800b5ce:	4770      	bx	lr

0800b5d0 <ucdr_buffer_remaining>:
 800b5d0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800b5d4:	1a10      	subs	r0, r2, r0
 800b5d6:	4770      	bx	lr

0800b5d8 <ucdr_check_final_buffer_behavior_array>:
 800b5d8:	b538      	push	{r3, r4, r5, lr}
 800b5da:	7d83      	ldrb	r3, [r0, #22]
 800b5dc:	b963      	cbnz	r3, 800b5f8 <ucdr_check_final_buffer_behavior_array+0x20>
 800b5de:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	4604      	mov	r4, r0
 800b5e6:	460d      	mov	r5, r1
 800b5e8:	d308      	bcc.n	800b5fc <ucdr_check_final_buffer_behavior_array+0x24>
 800b5ea:	b139      	cbz	r1, 800b5fc <ucdr_check_final_buffer_behavior_array+0x24>
 800b5ec:	6983      	ldr	r3, [r0, #24]
 800b5ee:	b163      	cbz	r3, 800b60a <ucdr_check_final_buffer_behavior_array+0x32>
 800b5f0:	69c1      	ldr	r1, [r0, #28]
 800b5f2:	4798      	blx	r3
 800b5f4:	75a0      	strb	r0, [r4, #22]
 800b5f6:	b108      	cbz	r0, 800b5fc <ucdr_check_final_buffer_behavior_array+0x24>
 800b5f8:	2000      	movs	r0, #0
 800b5fa:	bd38      	pop	{r3, r4, r5, pc}
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	f7ff ffe7 	bl	800b5d0 <ucdr_buffer_remaining>
 800b602:	42a8      	cmp	r0, r5
 800b604:	bf28      	it	cs
 800b606:	4628      	movcs	r0, r5
 800b608:	bd38      	pop	{r3, r4, r5, pc}
 800b60a:	2301      	movs	r3, #1
 800b60c:	7583      	strb	r3, [r0, #22]
 800b60e:	e7f3      	b.n	800b5f8 <ucdr_check_final_buffer_behavior_array+0x20>

0800b610 <ucdr_advance_buffer>:
 800b610:	b538      	push	{r3, r4, r5, lr}
 800b612:	4604      	mov	r4, r0
 800b614:	460d      	mov	r5, r1
 800b616:	f7ff ff57 	bl	800b4c8 <ucdr_check_buffer_available_for>
 800b61a:	b178      	cbz	r0, 800b63c <ucdr_advance_buffer+0x2c>
 800b61c:	6923      	ldr	r3, [r4, #16]
 800b61e:	68a2      	ldr	r2, [r4, #8]
 800b620:	442b      	add	r3, r5
 800b622:	6123      	str	r3, [r4, #16]
 800b624:	2301      	movs	r3, #1
 800b626:	442a      	add	r2, r5
 800b628:	7563      	strb	r3, [r4, #21]
 800b62a:	60a2      	str	r2, [r4, #8]
 800b62c:	bd38      	pop	{r3, r4, r5, pc}
 800b62e:	68a2      	ldr	r2, [r4, #8]
 800b630:	6923      	ldr	r3, [r4, #16]
 800b632:	4402      	add	r2, r0
 800b634:	4403      	add	r3, r0
 800b636:	1a2d      	subs	r5, r5, r0
 800b638:	60a2      	str	r2, [r4, #8]
 800b63a:	6123      	str	r3, [r4, #16]
 800b63c:	4629      	mov	r1, r5
 800b63e:	2201      	movs	r2, #1
 800b640:	4620      	mov	r0, r4
 800b642:	f7ff ffc9 	bl	800b5d8 <ucdr_check_final_buffer_behavior_array>
 800b646:	2800      	cmp	r0, #0
 800b648:	d1f1      	bne.n	800b62e <ucdr_advance_buffer+0x1e>
 800b64a:	2301      	movs	r3, #1
 800b64c:	7563      	strb	r3, [r4, #21]
 800b64e:	bd38      	pop	{r3, r4, r5, pc}

0800b650 <rcl_get_zero_initialized_client>:
 800b650:	4b01      	ldr	r3, [pc, #4]	@ (800b658 <rcl_get_zero_initialized_client+0x8>)
 800b652:	6818      	ldr	r0, [r3, #0]
 800b654:	4770      	bx	lr
 800b656:	bf00      	nop
 800b658:	08018dec 	.word	0x08018dec

0800b65c <rcl_client_init>:
 800b65c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b660:	b089      	sub	sp, #36	@ 0x24
 800b662:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800b664:	b1c5      	cbz	r5, 800b698 <rcl_client_init+0x3c>
 800b666:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800b66a:	4604      	mov	r4, r0
 800b66c:	4648      	mov	r0, r9
 800b66e:	4688      	mov	r8, r1
 800b670:	4617      	mov	r7, r2
 800b672:	461e      	mov	r6, r3
 800b674:	f001 fcfa 	bl	800d06c <rcutils_allocator_is_valid>
 800b678:	b170      	cbz	r0, 800b698 <rcl_client_init+0x3c>
 800b67a:	b16c      	cbz	r4, 800b698 <rcl_client_init+0x3c>
 800b67c:	4640      	mov	r0, r8
 800b67e:	f000 fb83 	bl	800bd88 <rcl_node_is_valid>
 800b682:	2800      	cmp	r0, #0
 800b684:	d05e      	beq.n	800b744 <rcl_client_init+0xe8>
 800b686:	b13f      	cbz	r7, 800b698 <rcl_client_init+0x3c>
 800b688:	b136      	cbz	r6, 800b698 <rcl_client_init+0x3c>
 800b68a:	6823      	ldr	r3, [r4, #0]
 800b68c:	b14b      	cbz	r3, 800b6a2 <rcl_client_init+0x46>
 800b68e:	2664      	movs	r6, #100	@ 0x64
 800b690:	4630      	mov	r0, r6
 800b692:	b009      	add	sp, #36	@ 0x24
 800b694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b698:	260b      	movs	r6, #11
 800b69a:	4630      	mov	r0, r6
 800b69c:	b009      	add	sp, #36	@ 0x24
 800b69e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6a2:	aa07      	add	r2, sp, #28
 800b6a4:	9205      	str	r2, [sp, #20]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	9304      	str	r3, [sp, #16]
 800b6aa:	9203      	str	r2, [sp, #12]
 800b6ac:	9307      	str	r3, [sp, #28]
 800b6ae:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800b6b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b6b6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b6ba:	4631      	mov	r1, r6
 800b6bc:	e899 000c 	ldmia.w	r9, {r2, r3}
 800b6c0:	4640      	mov	r0, r8
 800b6c2:	f000 fbb5 	bl	800be30 <rcl_node_resolve_name>
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	d14b      	bne.n	800b762 <rcl_client_init+0x106>
 800b6ca:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800b6cc:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b6ce:	f44f 708c 	mov.w	r0, #280	@ 0x118
 800b6d2:	4798      	blx	r3
 800b6d4:	6020      	str	r0, [r4, #0]
 800b6d6:	2800      	cmp	r0, #0
 800b6d8:	d049      	beq.n	800b76e <rcl_client_init+0x112>
 800b6da:	4640      	mov	r0, r8
 800b6dc:	f000 fb76 	bl	800bdcc <rcl_node_get_rmw_handle>
 800b6e0:	462b      	mov	r3, r5
 800b6e2:	9a07      	ldr	r2, [sp, #28]
 800b6e4:	6826      	ldr	r6, [r4, #0]
 800b6e6:	4639      	mov	r1, r7
 800b6e8:	f002 fa00 	bl	800daec <rmw_create_client>
 800b6ec:	6823      	ldr	r3, [r4, #0]
 800b6ee:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 800b6f2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800b6f6:	b360      	cbz	r0, 800b752 <rcl_client_init+0xf6>
 800b6f8:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 800b6fc:	f002 fb0c 	bl	800dd18 <rmw_client_request_publisher_get_actual_qos>
 800b700:	bb28      	cbnz	r0, 800b74e <rcl_client_init+0xf2>
 800b702:	6821      	ldr	r1, [r4, #0]
 800b704:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 800b708:	31b8      	adds	r1, #184	@ 0xb8
 800b70a:	f002 fb15 	bl	800dd38 <rmw_client_response_subscription_get_actual_qos>
 800b70e:	4606      	mov	r6, r0
 800b710:	b9e8      	cbnz	r0, 800b74e <rcl_client_init+0xf2>
 800b712:	6823      	ldr	r3, [r4, #0]
 800b714:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800b718:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
 800b71c:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 800b720:	4629      	mov	r1, r5
 800b722:	4618      	mov	r0, r3
 800b724:	2268      	movs	r2, #104	@ 0x68
 800b726:	f00c f938 	bl	801799a <memcpy>
 800b72a:	2100      	movs	r1, #0
 800b72c:	4603      	mov	r3, r0
 800b72e:	2000      	movs	r0, #0
 800b730:	e9c3 0144 	strd	r0, r1, [r3, #272]	@ 0x110
 800b734:	9807      	ldr	r0, [sp, #28]
 800b736:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800b738:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b73a:	4798      	blx	r3
 800b73c:	4630      	mov	r0, r6
 800b73e:	b009      	add	sp, #36	@ 0x24
 800b740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b744:	26c8      	movs	r6, #200	@ 0xc8
 800b746:	4630      	mov	r0, r6
 800b748:	b009      	add	sp, #36	@ 0x24
 800b74a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b74e:	6823      	ldr	r3, [r4, #0]
 800b750:	b12b      	cbz	r3, 800b75e <rcl_client_init+0x102>
 800b752:	4618      	mov	r0, r3
 800b754:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800b756:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b758:	4790      	blx	r2
 800b75a:	2300      	movs	r3, #0
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	2601      	movs	r6, #1
 800b760:	e7e8      	b.n	800b734 <rcl_client_init+0xd8>
 800b762:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 800b766:	2b01      	cmp	r3, #1
 800b768:	d903      	bls.n	800b772 <rcl_client_init+0x116>
 800b76a:	280a      	cmp	r0, #10
 800b76c:	d1f7      	bne.n	800b75e <rcl_client_init+0x102>
 800b76e:	260a      	movs	r6, #10
 800b770:	e7e0      	b.n	800b734 <rcl_client_init+0xd8>
 800b772:	2668      	movs	r6, #104	@ 0x68
 800b774:	e7de      	b.n	800b734 <rcl_client_init+0xd8>
 800b776:	bf00      	nop

0800b778 <rcl_client_get_default_options>:
 800b778:	b530      	push	{r4, r5, lr}
 800b77a:	4d0f      	ldr	r5, [pc, #60]	@ (800b7b8 <rcl_client_get_default_options+0x40>)
 800b77c:	490f      	ldr	r1, [pc, #60]	@ (800b7bc <rcl_client_get_default_options+0x44>)
 800b77e:	b087      	sub	sp, #28
 800b780:	4604      	mov	r4, r0
 800b782:	2250      	movs	r2, #80	@ 0x50
 800b784:	4628      	mov	r0, r5
 800b786:	f00c f908 	bl	801799a <memcpy>
 800b78a:	4668      	mov	r0, sp
 800b78c:	f001 fc60 	bl	800d050 <rcutils_get_default_allocator>
 800b790:	46ec      	mov	ip, sp
 800b792:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b796:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800b79a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b79e:	2268      	movs	r2, #104	@ 0x68
 800b7a0:	f8dc 3000 	ldr.w	r3, [ip]
 800b7a4:	f8ce 3000 	str.w	r3, [lr]
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	f00c f8f5 	bl	801799a <memcpy>
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	b007      	add	sp, #28
 800b7b4:	bd30      	pop	{r4, r5, pc}
 800b7b6:	bf00      	nop
 800b7b8:	20006550 	.word	0x20006550
 800b7bc:	08018df0 	.word	0x08018df0

0800b7c0 <rcl_client_get_rmw_handle>:
 800b7c0:	b118      	cbz	r0, 800b7ca <rcl_client_get_rmw_handle+0xa>
 800b7c2:	6800      	ldr	r0, [r0, #0]
 800b7c4:	b108      	cbz	r0, 800b7ca <rcl_client_get_rmw_handle+0xa>
 800b7c6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800b7ca:	4770      	bx	lr

0800b7cc <rcl_send_request>:
 800b7cc:	b570      	push	{r4, r5, r6, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	b1e8      	cbz	r0, 800b80e <rcl_send_request+0x42>
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	6800      	ldr	r0, [r0, #0]
 800b7d6:	b1d0      	cbz	r0, 800b80e <rcl_send_request+0x42>
 800b7d8:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800b7dc:	b1bb      	cbz	r3, 800b80e <rcl_send_request+0x42>
 800b7de:	460e      	mov	r6, r1
 800b7e0:	b1d1      	cbz	r1, 800b818 <rcl_send_request+0x4c>
 800b7e2:	4615      	mov	r5, r2
 800b7e4:	b1c2      	cbz	r2, 800b818 <rcl_send_request+0x4c>
 800b7e6:	2105      	movs	r1, #5
 800b7e8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800b7ec:	f001 fc4c 	bl	800d088 <__atomic_load_8>
 800b7f0:	6823      	ldr	r3, [r4, #0]
 800b7f2:	e9c5 0100 	strd	r0, r1, [r5]
 800b7f6:	462a      	mov	r2, r5
 800b7f8:	4631      	mov	r1, r6
 800b7fa:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800b7fe:	f002 ffc9 	bl	800e794 <rmw_send_request>
 800b802:	4606      	mov	r6, r0
 800b804:	b160      	cbz	r0, 800b820 <rcl_send_request+0x54>
 800b806:	2601      	movs	r6, #1
 800b808:	4630      	mov	r0, r6
 800b80a:	b002      	add	sp, #8
 800b80c:	bd70      	pop	{r4, r5, r6, pc}
 800b80e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800b812:	4630      	mov	r0, r6
 800b814:	b002      	add	sp, #8
 800b816:	bd70      	pop	{r4, r5, r6, pc}
 800b818:	260b      	movs	r6, #11
 800b81a:	4630      	mov	r0, r6
 800b81c:	b002      	add	sp, #8
 800b81e:	bd70      	pop	{r4, r5, r6, pc}
 800b820:	6820      	ldr	r0, [r4, #0]
 800b822:	2105      	movs	r1, #5
 800b824:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b828:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800b82c:	9100      	str	r1, [sp, #0]
 800b82e:	f001 fc97 	bl	800d160 <__atomic_exchange_8>
 800b832:	4630      	mov	r0, r6
 800b834:	b002      	add	sp, #8
 800b836:	bd70      	pop	{r4, r5, r6, pc}

0800b838 <rcl_take_response>:
 800b838:	b570      	push	{r4, r5, r6, lr}
 800b83a:	468e      	mov	lr, r1
 800b83c:	460c      	mov	r4, r1
 800b83e:	4616      	mov	r6, r2
 800b840:	4605      	mov	r5, r0
 800b842:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b846:	b08c      	sub	sp, #48	@ 0x30
 800b848:	f10d 0c18 	add.w	ip, sp, #24
 800b84c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b850:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800b854:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b858:	b35d      	cbz	r5, 800b8b2 <rcl_take_response+0x7a>
 800b85a:	682b      	ldr	r3, [r5, #0]
 800b85c:	b34b      	cbz	r3, 800b8b2 <rcl_take_response+0x7a>
 800b85e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800b862:	b330      	cbz	r0, 800b8b2 <rcl_take_response+0x7a>
 800b864:	b346      	cbz	r6, 800b8b8 <rcl_take_response+0x80>
 800b866:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800b8c0 <rcl_take_response+0x88>
 800b86a:	2300      	movs	r3, #0
 800b86c:	f88d 3007 	strb.w	r3, [sp, #7]
 800b870:	4632      	mov	r2, r6
 800b872:	f10d 0307 	add.w	r3, sp, #7
 800b876:	a902      	add	r1, sp, #8
 800b878:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b87c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b880:	f003 f890 	bl	800e9a4 <rmw_take_response>
 800b884:	4605      	mov	r5, r0
 800b886:	b9c8      	cbnz	r0, 800b8bc <rcl_take_response+0x84>
 800b888:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b88c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800b890:	2a00      	cmp	r2, #0
 800b892:	bf08      	it	eq
 800b894:	461d      	moveq	r5, r3
 800b896:	f10d 0e18 	add.w	lr, sp, #24
 800b89a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b89e:	46a4      	mov	ip, r4
 800b8a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b8a4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800b8a8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b8ac:	4628      	mov	r0, r5
 800b8ae:	b00c      	add	sp, #48	@ 0x30
 800b8b0:	bd70      	pop	{r4, r5, r6, pc}
 800b8b2:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800b8b6:	e7ee      	b.n	800b896 <rcl_take_response+0x5e>
 800b8b8:	250b      	movs	r5, #11
 800b8ba:	e7ec      	b.n	800b896 <rcl_take_response+0x5e>
 800b8bc:	2501      	movs	r5, #1
 800b8be:	e7ea      	b.n	800b896 <rcl_take_response+0x5e>
	...

0800b8c8 <rcl_client_is_valid>:
 800b8c8:	b130      	cbz	r0, 800b8d8 <rcl_client_is_valid+0x10>
 800b8ca:	6800      	ldr	r0, [r0, #0]
 800b8cc:	b120      	cbz	r0, 800b8d8 <rcl_client_is_valid+0x10>
 800b8ce:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800b8d2:	3800      	subs	r0, #0
 800b8d4:	bf18      	it	ne
 800b8d6:	2001      	movne	r0, #1
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop

0800b8dc <rcl_get_zero_initialized_init_options>:
 800b8dc:	2000      	movs	r0, #0
 800b8de:	4770      	bx	lr

0800b8e0 <rcl_init_options_init>:
 800b8e0:	b084      	sub	sp, #16
 800b8e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8e4:	b097      	sub	sp, #92	@ 0x5c
 800b8e6:	ae1d      	add	r6, sp, #116	@ 0x74
 800b8e8:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	d058      	beq.n	800b9a2 <rcl_init_options_init+0xc2>
 800b8f0:	6803      	ldr	r3, [r0, #0]
 800b8f2:	4605      	mov	r5, r0
 800b8f4:	b133      	cbz	r3, 800b904 <rcl_init_options_init+0x24>
 800b8f6:	2464      	movs	r4, #100	@ 0x64
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	b017      	add	sp, #92	@ 0x5c
 800b8fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b900:	b004      	add	sp, #16
 800b902:	4770      	bx	lr
 800b904:	4630      	mov	r0, r6
 800b906:	f001 fbb1 	bl	800d06c <rcutils_allocator_is_valid>
 800b90a:	2800      	cmp	r0, #0
 800b90c:	d049      	beq.n	800b9a2 <rcl_init_options_init+0xc2>
 800b90e:	46b4      	mov	ip, r6
 800b910:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b914:	ac11      	add	r4, sp, #68	@ 0x44
 800b916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b918:	f8dc 3000 	ldr.w	r3, [ip]
 800b91c:	6023      	str	r3, [r4, #0]
 800b91e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800b920:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b922:	2050      	movs	r0, #80	@ 0x50
 800b924:	4798      	blx	r3
 800b926:	4604      	mov	r4, r0
 800b928:	6028      	str	r0, [r5, #0]
 800b92a:	2800      	cmp	r0, #0
 800b92c:	d03b      	beq.n	800b9a6 <rcl_init_options_init+0xc6>
 800b92e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800b932:	4686      	mov	lr, r0
 800b934:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b938:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b93c:	f8dc 3000 	ldr.w	r3, [ip]
 800b940:	f8ce 3000 	str.w	r3, [lr]
 800b944:	a802      	add	r0, sp, #8
 800b946:	f001 ff63 	bl	800d810 <rmw_get_zero_initialized_init_options>
 800b94a:	f10d 0e08 	add.w	lr, sp, #8
 800b94e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b952:	f104 0c18 	add.w	ip, r4, #24
 800b956:	682f      	ldr	r7, [r5, #0]
 800b958:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b95c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b960:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b964:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b968:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b96c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800b970:	ac20      	add	r4, sp, #128	@ 0x80
 800b972:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b976:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b97a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b97e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800b982:	f107 0018 	add.w	r0, r7, #24
 800b986:	f002 f9ed 	bl	800dd64 <rmw_init_options_init>
 800b98a:	4604      	mov	r4, r0
 800b98c:	2800      	cmp	r0, #0
 800b98e:	d0b3      	beq.n	800b8f8 <rcl_init_options_init+0x18>
 800b990:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800b992:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b994:	6828      	ldr	r0, [r5, #0]
 800b996:	4798      	blx	r3
 800b998:	4620      	mov	r0, r4
 800b99a:	f007 f993 	bl	8012cc4 <rcl_convert_rmw_ret_to_rcl_ret>
 800b99e:	4604      	mov	r4, r0
 800b9a0:	e7aa      	b.n	800b8f8 <rcl_init_options_init+0x18>
 800b9a2:	240b      	movs	r4, #11
 800b9a4:	e7a8      	b.n	800b8f8 <rcl_init_options_init+0x18>
 800b9a6:	240a      	movs	r4, #10
 800b9a8:	e7a6      	b.n	800b8f8 <rcl_init_options_init+0x18>
 800b9aa:	bf00      	nop

0800b9ac <rcl_init_options_fini>:
 800b9ac:	b530      	push	{r4, r5, lr}
 800b9ae:	b087      	sub	sp, #28
 800b9b0:	b1f0      	cbz	r0, 800b9f0 <rcl_init_options_fini+0x44>
 800b9b2:	6803      	ldr	r3, [r0, #0]
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	b1db      	cbz	r3, 800b9f0 <rcl_init_options_fini+0x44>
 800b9b8:	469c      	mov	ip, r3
 800b9ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b9be:	f10d 0e04 	add.w	lr, sp, #4
 800b9c2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b9c6:	f8dc 3000 	ldr.w	r3, [ip]
 800b9ca:	f8ce 3000 	str.w	r3, [lr]
 800b9ce:	a801      	add	r0, sp, #4
 800b9d0:	f001 fb4c 	bl	800d06c <rcutils_allocator_is_valid>
 800b9d4:	b160      	cbz	r0, 800b9f0 <rcl_init_options_fini+0x44>
 800b9d6:	6820      	ldr	r0, [r4, #0]
 800b9d8:	3018      	adds	r0, #24
 800b9da:	f002 fa73 	bl	800dec4 <rmw_init_options_fini>
 800b9de:	4605      	mov	r5, r0
 800b9e0:	b950      	cbnz	r0, 800b9f8 <rcl_init_options_fini+0x4c>
 800b9e2:	6820      	ldr	r0, [r4, #0]
 800b9e4:	9b02      	ldr	r3, [sp, #8]
 800b9e6:	9905      	ldr	r1, [sp, #20]
 800b9e8:	4798      	blx	r3
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	b007      	add	sp, #28
 800b9ee:	bd30      	pop	{r4, r5, pc}
 800b9f0:	250b      	movs	r5, #11
 800b9f2:	4628      	mov	r0, r5
 800b9f4:	b007      	add	sp, #28
 800b9f6:	bd30      	pop	{r4, r5, pc}
 800b9f8:	f007 f964 	bl	8012cc4 <rcl_convert_rmw_ret_to_rcl_ret>
 800b9fc:	4605      	mov	r5, r0
 800b9fe:	e7f8      	b.n	800b9f2 <rcl_init_options_fini+0x46>

0800ba00 <rcl_init_options_copy>:
 800ba00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba04:	b094      	sub	sp, #80	@ 0x50
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d058      	beq.n	800babc <rcl_init_options_copy+0xbc>
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	6800      	ldr	r0, [r0, #0]
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	d054      	beq.n	800babc <rcl_init_options_copy+0xbc>
 800ba12:	460e      	mov	r6, r1
 800ba14:	f001 fb2a 	bl	800d06c <rcutils_allocator_is_valid>
 800ba18:	2800      	cmp	r0, #0
 800ba1a:	d04f      	beq.n	800babc <rcl_init_options_copy+0xbc>
 800ba1c:	2e00      	cmp	r6, #0
 800ba1e:	d04d      	beq.n	800babc <rcl_init_options_copy+0xbc>
 800ba20:	6833      	ldr	r3, [r6, #0]
 800ba22:	b123      	cbz	r3, 800ba2e <rcl_init_options_copy+0x2e>
 800ba24:	2464      	movs	r4, #100	@ 0x64
 800ba26:	4620      	mov	r0, r4
 800ba28:	b014      	add	sp, #80	@ 0x50
 800ba2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba2e:	6827      	ldr	r7, [r4, #0]
 800ba30:	46bc      	mov	ip, r7
 800ba32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ba36:	ad0f      	add	r5, sp, #60	@ 0x3c
 800ba38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ba3a:	f8dc 3000 	ldr.w	r3, [ip]
 800ba3e:	f8d7 8000 	ldr.w	r8, [r7]
 800ba42:	602b      	str	r3, [r5, #0]
 800ba44:	4619      	mov	r1, r3
 800ba46:	2050      	movs	r0, #80	@ 0x50
 800ba48:	47c0      	blx	r8
 800ba4a:	4605      	mov	r5, r0
 800ba4c:	6030      	str	r0, [r6, #0]
 800ba4e:	b3d0      	cbz	r0, 800bac6 <rcl_init_options_copy+0xc6>
 800ba50:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800ba54:	4686      	mov	lr, r0
 800ba56:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ba5a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ba5e:	f8dc 3000 	ldr.w	r3, [ip]
 800ba62:	f8ce 3000 	str.w	r3, [lr]
 800ba66:	4668      	mov	r0, sp
 800ba68:	f001 fed2 	bl	800d810 <rmw_get_zero_initialized_init_options>
 800ba6c:	46ee      	mov	lr, sp
 800ba6e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ba72:	f105 0c18 	add.w	ip, r5, #24
 800ba76:	6824      	ldr	r4, [r4, #0]
 800ba78:	6835      	ldr	r5, [r6, #0]
 800ba7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ba7e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ba82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ba86:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ba8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ba8e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ba92:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ba96:	f104 0018 	add.w	r0, r4, #24
 800ba9a:	f105 0118 	add.w	r1, r5, #24
 800ba9e:	f002 f9c9 	bl	800de34 <rmw_init_options_copy>
 800baa2:	4604      	mov	r4, r0
 800baa4:	2800      	cmp	r0, #0
 800baa6:	d0be      	beq.n	800ba26 <rcl_init_options_copy+0x26>
 800baa8:	f001 fbaa 	bl	800d200 <rcutils_get_error_string>
 800baac:	f001 fbc0 	bl	800d230 <rcutils_reset_error>
 800bab0:	4630      	mov	r0, r6
 800bab2:	f7ff ff7b 	bl	800b9ac <rcl_init_options_fini>
 800bab6:	b140      	cbz	r0, 800baca <rcl_init_options_copy+0xca>
 800bab8:	4604      	mov	r4, r0
 800baba:	e7b4      	b.n	800ba26 <rcl_init_options_copy+0x26>
 800babc:	240b      	movs	r4, #11
 800babe:	4620      	mov	r0, r4
 800bac0:	b014      	add	sp, #80	@ 0x50
 800bac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bac6:	240a      	movs	r4, #10
 800bac8:	e7ad      	b.n	800ba26 <rcl_init_options_copy+0x26>
 800baca:	4620      	mov	r0, r4
 800bacc:	b014      	add	sp, #80	@ 0x50
 800bace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bad2:	f007 b8f7 	b.w	8012cc4 <rcl_convert_rmw_ret_to_rcl_ret>
 800bad6:	bf00      	nop

0800bad8 <rcl_init_options_set_domain_id>:
 800bad8:	b120      	cbz	r0, 800bae4 <rcl_init_options_set_domain_id+0xc>
 800bada:	6803      	ldr	r3, [r0, #0]
 800badc:	b113      	cbz	r3, 800bae4 <rcl_init_options_set_domain_id+0xc>
 800bade:	6259      	str	r1, [r3, #36]	@ 0x24
 800bae0:	2000      	movs	r0, #0
 800bae2:	4770      	bx	lr
 800bae4:	200b      	movs	r0, #11
 800bae6:	4770      	bx	lr

0800bae8 <rcl_get_zero_initialized_node>:
 800bae8:	4a03      	ldr	r2, [pc, #12]	@ (800baf8 <rcl_get_zero_initialized_node+0x10>)
 800baea:	4603      	mov	r3, r0
 800baec:	e892 0003 	ldmia.w	r2, {r0, r1}
 800baf0:	e883 0003 	stmia.w	r3, {r0, r1}
 800baf4:	4618      	mov	r0, r3
 800baf6:	4770      	bx	lr
 800baf8:	08018e5c 	.word	0x08018e5c

0800bafc <rcl_node_init>:
 800bafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb00:	b0a9      	sub	sp, #164	@ 0xa4
 800bb02:	4604      	mov	r4, r0
 800bb04:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800bb08:	a823      	add	r0, sp, #140	@ 0x8c
 800bb0a:	460e      	mov	r6, r1
 800bb0c:	4615      	mov	r5, r2
 800bb0e:	461f      	mov	r7, r3
 800bb10:	f007 fb9c 	bl	801324c <rcl_guard_condition_get_default_options>
 800bb14:	f1b8 0f00 	cmp.w	r8, #0
 800bb18:	f000 80e6 	beq.w	800bce8 <rcl_node_init+0x1ec>
 800bb1c:	4640      	mov	r0, r8
 800bb1e:	f001 faa5 	bl	800d06c <rcutils_allocator_is_valid>
 800bb22:	2800      	cmp	r0, #0
 800bb24:	f000 80e0 	beq.w	800bce8 <rcl_node_init+0x1ec>
 800bb28:	2e00      	cmp	r6, #0
 800bb2a:	f000 80dd 	beq.w	800bce8 <rcl_node_init+0x1ec>
 800bb2e:	2d00      	cmp	r5, #0
 800bb30:	f000 80da 	beq.w	800bce8 <rcl_node_init+0x1ec>
 800bb34:	2c00      	cmp	r4, #0
 800bb36:	f000 80d7 	beq.w	800bce8 <rcl_node_init+0x1ec>
 800bb3a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800bb3e:	f1b9 0f00 	cmp.w	r9, #0
 800bb42:	f040 80fd 	bne.w	800bd40 <rcl_node_init+0x244>
 800bb46:	2f00      	cmp	r7, #0
 800bb48:	f000 80ce 	beq.w	800bce8 <rcl_node_init+0x1ec>
 800bb4c:	4638      	mov	r0, r7
 800bb4e:	f007 f8d7 	bl	8012d00 <rcl_context_is_valid>
 800bb52:	4682      	mov	sl, r0
 800bb54:	2800      	cmp	r0, #0
 800bb56:	f000 80cd 	beq.w	800bcf4 <rcl_node_init+0x1f8>
 800bb5a:	464a      	mov	r2, r9
 800bb5c:	a922      	add	r1, sp, #136	@ 0x88
 800bb5e:	4630      	mov	r0, r6
 800bb60:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800bb64:	f001 ff4e 	bl	800da04 <rmw_validate_node_name>
 800bb68:	4681      	mov	r9, r0
 800bb6a:	2800      	cmp	r0, #0
 800bb6c:	f040 80be 	bne.w	800bcec <rcl_node_init+0x1f0>
 800bb70:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800bb72:	2800      	cmp	r0, #0
 800bb74:	f040 80f0 	bne.w	800bd58 <rcl_node_init+0x25c>
 800bb78:	4628      	mov	r0, r5
 800bb7a:	f7f4 fb5b 	bl	8000234 <strlen>
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	f040 80bb 	bne.w	800bcfa <rcl_node_init+0x1fe>
 800bb84:	4d7c      	ldr	r5, [pc, #496]	@ (800bd78 <rcl_node_init+0x27c>)
 800bb86:	a922      	add	r1, sp, #136	@ 0x88
 800bb88:	2200      	movs	r2, #0
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	f001 ff1c 	bl	800d9c8 <rmw_validate_namespace>
 800bb90:	4681      	mov	r9, r0
 800bb92:	2800      	cmp	r0, #0
 800bb94:	f040 80aa 	bne.w	800bcec <rcl_node_init+0x1f0>
 800bb98:	4682      	mov	sl, r0
 800bb9a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	f040 80e0 	bne.w	800bd62 <rcl_node_init+0x266>
 800bba2:	f8d8 3000 	ldr.w	r3, [r8]
 800bba6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bbaa:	2078      	movs	r0, #120	@ 0x78
 800bbac:	4798      	blx	r3
 800bbae:	4681      	mov	r9, r0
 800bbb0:	6060      	str	r0, [r4, #4]
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	f000 80ca 	beq.w	800bd4c <rcl_node_init+0x250>
 800bbb8:	2200      	movs	r2, #0
 800bbba:	2300      	movs	r3, #0
 800bbbc:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800bbc0:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800bbc4:	a808      	add	r0, sp, #32
 800bbc6:	f000 f907 	bl	800bdd8 <rcl_node_get_default_options>
 800bbca:	a908      	add	r1, sp, #32
 800bbcc:	4648      	mov	r0, r9
 800bbce:	2268      	movs	r2, #104	@ 0x68
 800bbd0:	f00b fee3 	bl	801799a <memcpy>
 800bbd4:	6861      	ldr	r1, [r4, #4]
 800bbd6:	6027      	str	r7, [r4, #0]
 800bbd8:	4640      	mov	r0, r8
 800bbda:	f000 f90b 	bl	800bdf4 <rcl_node_options_copy>
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	d158      	bne.n	800bc94 <rcl_node_init+0x198>
 800bbe2:	4628      	mov	r0, r5
 800bbe4:	f7f4 fb26 	bl	8000234 <strlen>
 800bbe8:	4428      	add	r0, r5
 800bbea:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800bbee:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800bbf2:	2b2f      	cmp	r3, #47	@ 0x2f
 800bbf4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bbf8:	9300      	str	r3, [sp, #0]
 800bbfa:	bf0c      	ite	eq
 800bbfc:	4b5f      	ldreq	r3, [pc, #380]	@ (800bd7c <rcl_node_init+0x280>)
 800bbfe:	4b60      	ldrne	r3, [pc, #384]	@ (800bd80 <rcl_node_init+0x284>)
 800bc00:	9302      	str	r3, [sp, #8]
 800bc02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bc06:	9301      	str	r3, [sp, #4]
 800bc08:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800bc0c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800bc10:	f001 fb2a 	bl	800d268 <rcutils_format_string_limit>
 800bc14:	6823      	ldr	r3, [r4, #0]
 800bc16:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800bc1a:	6818      	ldr	r0, [r3, #0]
 800bc1c:	4631      	mov	r1, r6
 800bc1e:	3028      	adds	r0, #40	@ 0x28
 800bc20:	462a      	mov	r2, r5
 800bc22:	6866      	ldr	r6, [r4, #4]
 800bc24:	f002 fb78 	bl	800e318 <rmw_create_node>
 800bc28:	6863      	ldr	r3, [r4, #4]
 800bc2a:	66b0      	str	r0, [r6, #104]	@ 0x68
 800bc2c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800bc2e:	2800      	cmp	r0, #0
 800bc30:	d032      	beq.n	800bc98 <rcl_node_init+0x19c>
 800bc32:	f002 fc05 	bl	800e440 <rmw_node_get_graph_guard_condition>
 800bc36:	4681      	mov	r9, r0
 800bc38:	b360      	cbz	r0, 800bc94 <rcl_node_init+0x198>
 800bc3a:	f8d8 3000 	ldr.w	r3, [r8]
 800bc3e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bc42:	6866      	ldr	r6, [r4, #4]
 800bc44:	2008      	movs	r0, #8
 800bc46:	4798      	blx	r3
 800bc48:	6863      	ldr	r3, [r4, #4]
 800bc4a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800bc4c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800bc50:	f1bb 0f00 	cmp.w	fp, #0
 800bc54:	d020      	beq.n	800bc98 <rcl_node_init+0x19c>
 800bc56:	a806      	add	r0, sp, #24
 800bc58:	f007 fa1c 	bl	8013094 <rcl_get_zero_initialized_guard_condition>
 800bc5c:	a806      	add	r0, sp, #24
 800bc5e:	c803      	ldmia	r0, {r0, r1}
 800bc60:	6863      	ldr	r3, [r4, #4]
 800bc62:	46c4      	mov	ip, r8
 800bc64:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800bc68:	e88b 0003 	stmia.w	fp, {r0, r1}
 800bc6c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bc70:	ae23      	add	r6, sp, #140	@ 0x8c
 800bc72:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800bc74:	f8dc 3000 	ldr.w	r3, [ip]
 800bc78:	6033      	str	r3, [r6, #0]
 800bc7a:	ab28      	add	r3, sp, #160	@ 0xa0
 800bc7c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800bc80:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bc84:	4649      	mov	r1, r9
 800bc86:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc88:	463a      	mov	r2, r7
 800bc8a:	4670      	mov	r0, lr
 800bc8c:	f007 fa58 	bl	8013140 <rcl_guard_condition_init_from_rmw>
 800bc90:	4681      	mov	r9, r0
 800bc92:	b328      	cbz	r0, 800bce0 <rcl_node_init+0x1e4>
 800bc94:	6863      	ldr	r3, [r4, #4]
 800bc96:	b1f3      	cbz	r3, 800bcd6 <rcl_node_init+0x1da>
 800bc98:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800bc9a:	b128      	cbz	r0, 800bca8 <rcl_node_init+0x1ac>
 800bc9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bca0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bca4:	4798      	blx	r3
 800bca6:	6863      	ldr	r3, [r4, #4]
 800bca8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800bcaa:	b110      	cbz	r0, 800bcb2 <rcl_node_init+0x1b6>
 800bcac:	f002 fb4c 	bl	800e348 <rmw_destroy_node>
 800bcb0:	6863      	ldr	r3, [r4, #4]
 800bcb2:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800bcb4:	b148      	cbz	r0, 800bcca <rcl_node_init+0x1ce>
 800bcb6:	f007 faa3 	bl	8013200 <rcl_guard_condition_fini>
 800bcba:	6863      	ldr	r3, [r4, #4]
 800bcbc:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bcc0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800bcc2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bcc6:	4798      	blx	r3
 800bcc8:	6863      	ldr	r3, [r4, #4]
 800bcca:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bcd4:	4798      	blx	r3
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	e9c4 3300 	strd	r3, r3, [r4]
 800bcdc:	f04f 0901 	mov.w	r9, #1
 800bce0:	f1ba 0f00 	cmp.w	sl, #0
 800bce4:	d125      	bne.n	800bd32 <rcl_node_init+0x236>
 800bce6:	e001      	b.n	800bcec <rcl_node_init+0x1f0>
 800bce8:	f04f 090b 	mov.w	r9, #11
 800bcec:	4648      	mov	r0, r9
 800bcee:	b029      	add	sp, #164	@ 0xa4
 800bcf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf4:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800bcf8:	e7f8      	b.n	800bcec <rcl_node_init+0x1f0>
 800bcfa:	782b      	ldrb	r3, [r5, #0]
 800bcfc:	2b2f      	cmp	r3, #47	@ 0x2f
 800bcfe:	f43f af42 	beq.w	800bb86 <rcl_node_init+0x8a>
 800bd02:	9503      	str	r5, [sp, #12]
 800bd04:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bd08:	9300      	str	r3, [sp, #0]
 800bd0a:	4b1e      	ldr	r3, [pc, #120]	@ (800bd84 <rcl_node_init+0x288>)
 800bd0c:	9302      	str	r3, [sp, #8]
 800bd0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bd12:	9301      	str	r3, [sp, #4]
 800bd14:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800bd18:	f001 faa6 	bl	800d268 <rcutils_format_string_limit>
 800bd1c:	4605      	mov	r5, r0
 800bd1e:	b340      	cbz	r0, 800bd72 <rcl_node_init+0x276>
 800bd20:	2200      	movs	r2, #0
 800bd22:	a922      	add	r1, sp, #136	@ 0x88
 800bd24:	9222      	str	r2, [sp, #136]	@ 0x88
 800bd26:	f001 fe4f 	bl	800d9c8 <rmw_validate_namespace>
 800bd2a:	4681      	mov	r9, r0
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	f43f af34 	beq.w	800bb9a <rcl_node_init+0x9e>
 800bd32:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bd36:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	4798      	blx	r3
 800bd3e:	e7d5      	b.n	800bcec <rcl_node_init+0x1f0>
 800bd40:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800bd44:	4648      	mov	r0, r9
 800bd46:	b029      	add	sp, #164	@ 0xa4
 800bd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd4c:	f04f 090a 	mov.w	r9, #10
 800bd50:	f1ba 0f00 	cmp.w	sl, #0
 800bd54:	d1ed      	bne.n	800bd32 <rcl_node_init+0x236>
 800bd56:	e7c9      	b.n	800bcec <rcl_node_init+0x1f0>
 800bd58:	f001 fea6 	bl	800daa8 <rmw_node_name_validation_result_string>
 800bd5c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800bd60:	e7c4      	b.n	800bcec <rcl_node_init+0x1f0>
 800bd62:	f001 fe43 	bl	800d9ec <rmw_namespace_validation_result_string>
 800bd66:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800bd6a:	f1ba 0f00 	cmp.w	sl, #0
 800bd6e:	d1e0      	bne.n	800bd32 <rcl_node_init+0x236>
 800bd70:	e7bc      	b.n	800bcec <rcl_node_init+0x1f0>
 800bd72:	f04f 090a 	mov.w	r9, #10
 800bd76:	e7b9      	b.n	800bcec <rcl_node_init+0x1f0>
 800bd78:	08018e44 	.word	0x08018e44
 800bd7c:	08018e4c 	.word	0x08018e4c
 800bd80:	08018e54 	.word	0x08018e54
 800bd84:	08018e48 	.word	0x08018e48

0800bd88 <rcl_node_is_valid>:
 800bd88:	b130      	cbz	r0, 800bd98 <rcl_node_is_valid+0x10>
 800bd8a:	6843      	ldr	r3, [r0, #4]
 800bd8c:	b123      	cbz	r3, 800bd98 <rcl_node_is_valid+0x10>
 800bd8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd90:	b113      	cbz	r3, 800bd98 <rcl_node_is_valid+0x10>
 800bd92:	6800      	ldr	r0, [r0, #0]
 800bd94:	f006 bfb4 	b.w	8012d00 <rcl_context_is_valid>
 800bd98:	2000      	movs	r0, #0
 800bd9a:	4770      	bx	lr

0800bd9c <rcl_node_get_name>:
 800bd9c:	b120      	cbz	r0, 800bda8 <rcl_node_get_name+0xc>
 800bd9e:	6840      	ldr	r0, [r0, #4]
 800bda0:	b110      	cbz	r0, 800bda8 <rcl_node_get_name+0xc>
 800bda2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800bda4:	b100      	cbz	r0, 800bda8 <rcl_node_get_name+0xc>
 800bda6:	6880      	ldr	r0, [r0, #8]
 800bda8:	4770      	bx	lr
 800bdaa:	bf00      	nop

0800bdac <rcl_node_get_namespace>:
 800bdac:	b120      	cbz	r0, 800bdb8 <rcl_node_get_namespace+0xc>
 800bdae:	6840      	ldr	r0, [r0, #4]
 800bdb0:	b110      	cbz	r0, 800bdb8 <rcl_node_get_namespace+0xc>
 800bdb2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800bdb4:	b100      	cbz	r0, 800bdb8 <rcl_node_get_namespace+0xc>
 800bdb6:	68c0      	ldr	r0, [r0, #12]
 800bdb8:	4770      	bx	lr
 800bdba:	bf00      	nop

0800bdbc <rcl_node_get_options>:
 800bdbc:	b128      	cbz	r0, 800bdca <rcl_node_get_options+0xe>
 800bdbe:	6840      	ldr	r0, [r0, #4]
 800bdc0:	b118      	cbz	r0, 800bdca <rcl_node_get_options+0xe>
 800bdc2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	bf08      	it	eq
 800bdc8:	2000      	moveq	r0, #0
 800bdca:	4770      	bx	lr

0800bdcc <rcl_node_get_rmw_handle>:
 800bdcc:	b110      	cbz	r0, 800bdd4 <rcl_node_get_rmw_handle+0x8>
 800bdce:	6840      	ldr	r0, [r0, #4]
 800bdd0:	b100      	cbz	r0, 800bdd4 <rcl_node_get_rmw_handle+0x8>
 800bdd2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop

0800bdd8 <rcl_node_get_default_options>:
 800bdd8:	b510      	push	{r4, lr}
 800bdda:	2268      	movs	r2, #104	@ 0x68
 800bddc:	4604      	mov	r4, r0
 800bdde:	2100      	movs	r1, #0
 800bde0:	f00b fd12 	bl	8017808 <memset>
 800bde4:	4620      	mov	r0, r4
 800bde6:	f001 f933 	bl	800d050 <rcutils_get_default_allocator>
 800bdea:	2301      	movs	r3, #1
 800bdec:	7523      	strb	r3, [r4, #20]
 800bdee:	4620      	mov	r0, r4
 800bdf0:	bd10      	pop	{r4, pc}
 800bdf2:	bf00      	nop

0800bdf4 <rcl_node_options_copy>:
 800bdf4:	b1d0      	cbz	r0, 800be2c <rcl_node_options_copy+0x38>
 800bdf6:	b570      	push	{r4, r5, r6, lr}
 800bdf8:	460c      	mov	r4, r1
 800bdfa:	b1a9      	cbz	r1, 800be28 <rcl_node_options_copy+0x34>
 800bdfc:	4288      	cmp	r0, r1
 800bdfe:	4684      	mov	ip, r0
 800be00:	d012      	beq.n	800be28 <rcl_node_options_copy+0x34>
 800be02:	4605      	mov	r5, r0
 800be04:	8a86      	ldrh	r6, [r0, #20]
 800be06:	468e      	mov	lr, r1
 800be08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be0a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800be0e:	682b      	ldr	r3, [r5, #0]
 800be10:	f8ce 3000 	str.w	r3, [lr]
 800be14:	f10c 0118 	add.w	r1, ip, #24
 800be18:	2250      	movs	r2, #80	@ 0x50
 800be1a:	82a6      	strh	r6, [r4, #20]
 800be1c:	f104 0018 	add.w	r0, r4, #24
 800be20:	f00b fdbb 	bl	801799a <memcpy>
 800be24:	2000      	movs	r0, #0
 800be26:	bd70      	pop	{r4, r5, r6, pc}
 800be28:	200b      	movs	r0, #11
 800be2a:	bd70      	pop	{r4, r5, r6, pc}
 800be2c:	200b      	movs	r0, #11
 800be2e:	4770      	bx	lr

0800be30 <rcl_node_resolve_name>:
 800be30:	b082      	sub	sp, #8
 800be32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be36:	b091      	sub	sp, #68	@ 0x44
 800be38:	ac1a      	add	r4, sp, #104	@ 0x68
 800be3a:	e884 000c 	stmia.w	r4, {r2, r3}
 800be3e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800be42:	2800      	cmp	r0, #0
 800be44:	d03b      	beq.n	800bebe <rcl_node_resolve_name+0x8e>
 800be46:	460c      	mov	r4, r1
 800be48:	4605      	mov	r5, r0
 800be4a:	f7ff ffb7 	bl	800bdbc <rcl_node_get_options>
 800be4e:	2800      	cmp	r0, #0
 800be50:	d037      	beq.n	800bec2 <rcl_node_resolve_name+0x92>
 800be52:	4628      	mov	r0, r5
 800be54:	f7ff ffa2 	bl	800bd9c <rcl_node_get_name>
 800be58:	4606      	mov	r6, r0
 800be5a:	4628      	mov	r0, r5
 800be5c:	f7ff ffa6 	bl	800bdac <rcl_node_get_namespace>
 800be60:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800be64:	4681      	mov	r9, r0
 800be66:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800be6a:	ad0b      	add	r5, sp, #44	@ 0x2c
 800be6c:	46ac      	mov	ip, r5
 800be6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800be72:	f8de 3000 	ldr.w	r3, [lr]
 800be76:	f8cc 3000 	str.w	r3, [ip]
 800be7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be7c:	b1fb      	cbz	r3, 800bebe <rcl_node_resolve_name+0x8e>
 800be7e:	468a      	mov	sl, r1
 800be80:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800be84:	f001 fb48 	bl	800d518 <rcutils_get_zero_initialized_string_map>
 800be88:	ab10      	add	r3, sp, #64	@ 0x40
 800be8a:	9008      	str	r0, [sp, #32]
 800be8c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800be90:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800be94:	2100      	movs	r1, #0
 800be96:	e895 000c 	ldmia.w	r5, {r2, r3}
 800be9a:	a808      	add	r0, sp, #32
 800be9c:	f001 fbb4 	bl	800d608 <rcutils_string_map_init>
 800bea0:	4607      	mov	r7, r0
 800bea2:	b180      	cbz	r0, 800bec6 <rcl_node_resolve_name+0x96>
 800bea4:	f001 f9ac 	bl	800d200 <rcutils_get_error_string>
 800bea8:	f001 f9c2 	bl	800d230 <rcutils_reset_error>
 800beac:	2f0a      	cmp	r7, #10
 800beae:	bf18      	it	ne
 800beb0:	2701      	movne	r7, #1
 800beb2:	4638      	mov	r0, r7
 800beb4:	b011      	add	sp, #68	@ 0x44
 800beb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beba:	b002      	add	sp, #8
 800bebc:	4770      	bx	lr
 800bebe:	270b      	movs	r7, #11
 800bec0:	e7f7      	b.n	800beb2 <rcl_node_resolve_name+0x82>
 800bec2:	2701      	movs	r7, #1
 800bec4:	e7f5      	b.n	800beb2 <rcl_node_resolve_name+0x82>
 800bec6:	9009      	str	r0, [sp, #36]	@ 0x24
 800bec8:	9007      	str	r0, [sp, #28]
 800beca:	a808      	add	r0, sp, #32
 800becc:	f007 f8dc 	bl	8013088 <rcl_get_default_topic_name_substitutions>
 800bed0:	4607      	mov	r7, r0
 800bed2:	b1a8      	cbz	r0, 800bf00 <rcl_node_resolve_name+0xd0>
 800bed4:	280a      	cmp	r0, #10
 800bed6:	9c07      	ldr	r4, [sp, #28]
 800bed8:	d000      	beq.n	800bedc <rcl_node_resolve_name+0xac>
 800beda:	2701      	movs	r7, #1
 800bedc:	a808      	add	r0, sp, #32
 800bede:	f001 fbd3 	bl	800d688 <rcutils_string_map_fini>
 800bee2:	2800      	cmp	r0, #0
 800bee4:	d13d      	bne.n	800bf62 <rcl_node_resolve_name+0x132>
 800bee6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bee8:	4659      	mov	r1, fp
 800beea:	47d0      	blx	sl
 800beec:	4659      	mov	r1, fp
 800beee:	4620      	mov	r0, r4
 800bef0:	47d0      	blx	sl
 800bef2:	f1b8 0f00 	cmp.w	r8, #0
 800bef6:	d0dc      	beq.n	800beb2 <rcl_node_resolve_name+0x82>
 800bef8:	2f67      	cmp	r7, #103	@ 0x67
 800befa:	bf08      	it	eq
 800befc:	2768      	moveq	r7, #104	@ 0x68
 800befe:	e7d8      	b.n	800beb2 <rcl_node_resolve_name+0x82>
 800bf00:	ab09      	add	r3, sp, #36	@ 0x24
 800bf02:	9305      	str	r3, [sp, #20]
 800bf04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf06:	46ec      	mov	ip, sp
 800bf08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bf0c:	682b      	ldr	r3, [r5, #0]
 800bf0e:	f8cc 3000 	str.w	r3, [ip]
 800bf12:	464a      	mov	r2, r9
 800bf14:	4631      	mov	r1, r6
 800bf16:	4620      	mov	r0, r4
 800bf18:	ab08      	add	r3, sp, #32
 800bf1a:	f006 ff57 	bl	8012dcc <rcl_expand_topic_name>
 800bf1e:	4607      	mov	r7, r0
 800bf20:	b9b8      	cbnz	r0, 800bf52 <rcl_node_resolve_name+0x122>
 800bf22:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800bf24:	9009      	str	r0, [sp, #36]	@ 0x24
 800bf26:	4602      	mov	r2, r0
 800bf28:	a90a      	add	r1, sp, #40	@ 0x28
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	f001 fc88 	bl	800d840 <rmw_validate_full_topic_name>
 800bf30:	b988      	cbnz	r0, 800bf56 <rcl_node_resolve_name+0x126>
 800bf32:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800bf34:	b9d5      	cbnz	r5, 800bf6c <rcl_node_resolve_name+0x13c>
 800bf36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf38:	a808      	add	r0, sp, #32
 800bf3a:	601c      	str	r4, [r3, #0]
 800bf3c:	f001 fba4 	bl	800d688 <rcutils_string_map_fini>
 800bf40:	4607      	mov	r7, r0
 800bf42:	b1a8      	cbz	r0, 800bf70 <rcl_node_resolve_name+0x140>
 800bf44:	f001 f95c 	bl	800d200 <rcutils_get_error_string>
 800bf48:	462c      	mov	r4, r5
 800bf4a:	f001 f971 	bl	800d230 <rcutils_reset_error>
 800bf4e:	2701      	movs	r7, #1
 800bf50:	e7c9      	b.n	800bee6 <rcl_node_resolve_name+0xb6>
 800bf52:	9c07      	ldr	r4, [sp, #28]
 800bf54:	e7c2      	b.n	800bedc <rcl_node_resolve_name+0xac>
 800bf56:	f001 f953 	bl	800d200 <rcutils_get_error_string>
 800bf5a:	2701      	movs	r7, #1
 800bf5c:	f001 f968 	bl	800d230 <rcutils_reset_error>
 800bf60:	e7bc      	b.n	800bedc <rcl_node_resolve_name+0xac>
 800bf62:	f001 f94d 	bl	800d200 <rcutils_get_error_string>
 800bf66:	f001 f963 	bl	800d230 <rcutils_reset_error>
 800bf6a:	e7bc      	b.n	800bee6 <rcl_node_resolve_name+0xb6>
 800bf6c:	2767      	movs	r7, #103	@ 0x67
 800bf6e:	e7b5      	b.n	800bedc <rcl_node_resolve_name+0xac>
 800bf70:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf72:	4659      	mov	r1, fp
 800bf74:	47d0      	blx	sl
 800bf76:	4659      	mov	r1, fp
 800bf78:	4638      	mov	r0, r7
 800bf7a:	47d0      	blx	sl
 800bf7c:	e799      	b.n	800beb2 <rcl_node_resolve_name+0x82>
 800bf7e:	bf00      	nop

0800bf80 <rcl_get_zero_initialized_publisher>:
 800bf80:	4b01      	ldr	r3, [pc, #4]	@ (800bf88 <rcl_get_zero_initialized_publisher+0x8>)
 800bf82:	6818      	ldr	r0, [r3, #0]
 800bf84:	4770      	bx	lr
 800bf86:	bf00      	nop
 800bf88:	08018e64 	.word	0x08018e64

0800bf8c <rcl_publisher_init>:
 800bf8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf90:	b088      	sub	sp, #32
 800bf92:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800bf94:	2d00      	cmp	r5, #0
 800bf96:	d069      	beq.n	800c06c <rcl_publisher_init+0xe0>
 800bf98:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800bf9c:	4604      	mov	r4, r0
 800bf9e:	4648      	mov	r0, r9
 800bfa0:	460e      	mov	r6, r1
 800bfa2:	4690      	mov	r8, r2
 800bfa4:	461f      	mov	r7, r3
 800bfa6:	f001 f861 	bl	800d06c <rcutils_allocator_is_valid>
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	d05e      	beq.n	800c06c <rcl_publisher_init+0xe0>
 800bfae:	2c00      	cmp	r4, #0
 800bfb0:	d05c      	beq.n	800c06c <rcl_publisher_init+0xe0>
 800bfb2:	f8d4 a000 	ldr.w	sl, [r4]
 800bfb6:	f1ba 0f00 	cmp.w	sl, #0
 800bfba:	d004      	beq.n	800bfc6 <rcl_publisher_init+0x3a>
 800bfbc:	2764      	movs	r7, #100	@ 0x64
 800bfbe:	4638      	mov	r0, r7
 800bfc0:	b008      	add	sp, #32
 800bfc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfc6:	4630      	mov	r0, r6
 800bfc8:	f7ff fede 	bl	800bd88 <rcl_node_is_valid>
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	d052      	beq.n	800c076 <rcl_publisher_init+0xea>
 800bfd0:	f1b8 0f00 	cmp.w	r8, #0
 800bfd4:	d04a      	beq.n	800c06c <rcl_publisher_init+0xe0>
 800bfd6:	2f00      	cmp	r7, #0
 800bfd8:	d048      	beq.n	800c06c <rcl_publisher_init+0xe0>
 800bfda:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800bfde:	aa07      	add	r2, sp, #28
 800bfe0:	9205      	str	r2, [sp, #20]
 800bfe2:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800bfe6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bfea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800bfee:	f8cd a01c 	str.w	sl, [sp, #28]
 800bff2:	4639      	mov	r1, r7
 800bff4:	e899 000c 	ldmia.w	r9, {r2, r3}
 800bff8:	4630      	mov	r0, r6
 800bffa:	f7ff ff19 	bl	800be30 <rcl_node_resolve_name>
 800bffe:	4607      	mov	r7, r0
 800c000:	2800      	cmp	r0, #0
 800c002:	d14f      	bne.n	800c0a4 <rcl_publisher_init+0x118>
 800c004:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800c006:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c008:	20c8      	movs	r0, #200	@ 0xc8
 800c00a:	4798      	blx	r3
 800c00c:	6020      	str	r0, [r4, #0]
 800c00e:	2800      	cmp	r0, #0
 800c010:	d04e      	beq.n	800c0b0 <rcl_publisher_init+0x124>
 800c012:	4630      	mov	r0, r6
 800c014:	f7ff feda 	bl	800bdcc <rcl_node_get_rmw_handle>
 800c018:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c01c:	9300      	str	r3, [sp, #0]
 800c01e:	9a07      	ldr	r2, [sp, #28]
 800c020:	6827      	ldr	r7, [r4, #0]
 800c022:	462b      	mov	r3, r5
 800c024:	4641      	mov	r1, r8
 800c026:	f002 fa75 	bl	800e514 <rmw_create_publisher>
 800c02a:	6823      	ldr	r3, [r4, #0]
 800c02c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800c030:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c034:	b370      	cbz	r0, 800c094 <rcl_publisher_init+0x108>
 800c036:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800c03a:	f002 fb49 	bl	800e6d0 <rmw_publisher_get_actual_qos>
 800c03e:	6823      	ldr	r3, [r4, #0]
 800c040:	4607      	mov	r7, r0
 800c042:	b9d0      	cbnz	r0, 800c07a <rcl_publisher_init+0xee>
 800c044:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800c048:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800c04c:	4629      	mov	r1, r5
 800c04e:	2270      	movs	r2, #112	@ 0x70
 800c050:	4618      	mov	r0, r3
 800c052:	f00b fca2 	bl	801799a <memcpy>
 800c056:	6832      	ldr	r2, [r6, #0]
 800c058:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800c05c:	9807      	ldr	r0, [sp, #28]
 800c05e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800c060:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c062:	4798      	blx	r3
 800c064:	4638      	mov	r0, r7
 800c066:	b008      	add	sp, #32
 800c068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c06c:	270b      	movs	r7, #11
 800c06e:	4638      	mov	r0, r7
 800c070:	b008      	add	sp, #32
 800c072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c076:	27c8      	movs	r7, #200	@ 0xc8
 800c078:	e7a1      	b.n	800bfbe <rcl_publisher_init+0x32>
 800c07a:	b18b      	cbz	r3, 800c0a0 <rcl_publisher_init+0x114>
 800c07c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c080:	b142      	cbz	r2, 800c094 <rcl_publisher_init+0x108>
 800c082:	4630      	mov	r0, r6
 800c084:	f7ff fea2 	bl	800bdcc <rcl_node_get_rmw_handle>
 800c088:	6823      	ldr	r3, [r4, #0]
 800c08a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800c08e:	f002 fb2f 	bl	800e6f0 <rmw_destroy_publisher>
 800c092:	6823      	ldr	r3, [r4, #0]
 800c094:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800c096:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c098:	4618      	mov	r0, r3
 800c09a:	4790      	blx	r2
 800c09c:	2300      	movs	r3, #0
 800c09e:	6023      	str	r3, [r4, #0]
 800c0a0:	2701      	movs	r7, #1
 800c0a2:	e7db      	b.n	800c05c <rcl_publisher_init+0xd0>
 800c0a4:	2867      	cmp	r0, #103	@ 0x67
 800c0a6:	d0d9      	beq.n	800c05c <rcl_publisher_init+0xd0>
 800c0a8:	2869      	cmp	r0, #105	@ 0x69
 800c0aa:	d003      	beq.n	800c0b4 <rcl_publisher_init+0x128>
 800c0ac:	280a      	cmp	r0, #10
 800c0ae:	d1f7      	bne.n	800c0a0 <rcl_publisher_init+0x114>
 800c0b0:	270a      	movs	r7, #10
 800c0b2:	e7d3      	b.n	800c05c <rcl_publisher_init+0xd0>
 800c0b4:	2767      	movs	r7, #103	@ 0x67
 800c0b6:	e7d1      	b.n	800c05c <rcl_publisher_init+0xd0>

0800c0b8 <rcl_publisher_get_default_options>:
 800c0b8:	b570      	push	{r4, r5, r6, lr}
 800c0ba:	4d14      	ldr	r5, [pc, #80]	@ (800c10c <rcl_publisher_get_default_options+0x54>)
 800c0bc:	4914      	ldr	r1, [pc, #80]	@ (800c110 <rcl_publisher_get_default_options+0x58>)
 800c0be:	b088      	sub	sp, #32
 800c0c0:	4604      	mov	r4, r0
 800c0c2:	2250      	movs	r2, #80	@ 0x50
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	f00b fc68 	bl	801799a <memcpy>
 800c0ca:	a802      	add	r0, sp, #8
 800c0cc:	f000 ffc0 	bl	800d050 <rcutils_get_default_allocator>
 800c0d0:	f10d 0c08 	add.w	ip, sp, #8
 800c0d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c0d8:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800c0dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c0e0:	466e      	mov	r6, sp
 800c0e2:	f8dc 3000 	ldr.w	r3, [ip]
 800c0e6:	f8ce 3000 	str.w	r3, [lr]
 800c0ea:	4630      	mov	r0, r6
 800c0ec:	f001 fba0 	bl	800d830 <rmw_get_default_publisher_options>
 800c0f0:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c0f4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c0f8:	e883 0003 	stmia.w	r3, {r0, r1}
 800c0fc:	2270      	movs	r2, #112	@ 0x70
 800c0fe:	4629      	mov	r1, r5
 800c100:	4620      	mov	r0, r4
 800c102:	f00b fc4a 	bl	801799a <memcpy>
 800c106:	4620      	mov	r0, r4
 800c108:	b008      	add	sp, #32
 800c10a:	bd70      	pop	{r4, r5, r6, pc}
 800c10c:	200065b8 	.word	0x200065b8
 800c110:	08018e68 	.word	0x08018e68

0800c114 <rcl_publish>:
 800c114:	b1f8      	cbz	r0, 800c156 <rcl_publish+0x42>
 800c116:	6803      	ldr	r3, [r0, #0]
 800c118:	b570      	push	{r4, r5, r6, lr}
 800c11a:	4604      	mov	r4, r0
 800c11c:	b1b3      	cbz	r3, 800c14c <rcl_publish+0x38>
 800c11e:	4616      	mov	r6, r2
 800c120:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c124:	b192      	cbz	r2, 800c14c <rcl_publish+0x38>
 800c126:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c12a:	460d      	mov	r5, r1
 800c12c:	f006 fde8 	bl	8012d00 <rcl_context_is_valid>
 800c130:	b160      	cbz	r0, 800c14c <rcl_publish+0x38>
 800c132:	6823      	ldr	r3, [r4, #0]
 800c134:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c138:	b140      	cbz	r0, 800c14c <rcl_publish+0x38>
 800c13a:	b155      	cbz	r5, 800c152 <rcl_publish+0x3e>
 800c13c:	4632      	mov	r2, r6
 800c13e:	4629      	mov	r1, r5
 800c140:	f002 f988 	bl	800e454 <rmw_publish>
 800c144:	3800      	subs	r0, #0
 800c146:	bf18      	it	ne
 800c148:	2001      	movne	r0, #1
 800c14a:	bd70      	pop	{r4, r5, r6, pc}
 800c14c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c150:	bd70      	pop	{r4, r5, r6, pc}
 800c152:	200b      	movs	r0, #11
 800c154:	bd70      	pop	{r4, r5, r6, pc}
 800c156:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c15a:	4770      	bx	lr

0800c15c <rcl_publisher_is_valid>:
 800c15c:	b1a0      	cbz	r0, 800c188 <rcl_publisher_is_valid+0x2c>
 800c15e:	6803      	ldr	r3, [r0, #0]
 800c160:	b510      	push	{r4, lr}
 800c162:	4604      	mov	r4, r0
 800c164:	b173      	cbz	r3, 800c184 <rcl_publisher_is_valid+0x28>
 800c166:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c16a:	b15a      	cbz	r2, 800c184 <rcl_publisher_is_valid+0x28>
 800c16c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c170:	f006 fdc6 	bl	8012d00 <rcl_context_is_valid>
 800c174:	b130      	cbz	r0, 800c184 <rcl_publisher_is_valid+0x28>
 800c176:	6823      	ldr	r3, [r4, #0]
 800c178:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c17c:	3800      	subs	r0, #0
 800c17e:	bf18      	it	ne
 800c180:	2001      	movne	r0, #1
 800c182:	bd10      	pop	{r4, pc}
 800c184:	2000      	movs	r0, #0
 800c186:	bd10      	pop	{r4, pc}
 800c188:	2000      	movs	r0, #0
 800c18a:	4770      	bx	lr

0800c18c <rcl_publisher_is_valid_except_context>:
 800c18c:	b130      	cbz	r0, 800c19c <rcl_publisher_is_valid_except_context+0x10>
 800c18e:	6800      	ldr	r0, [r0, #0]
 800c190:	b120      	cbz	r0, 800c19c <rcl_publisher_is_valid_except_context+0x10>
 800c192:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800c196:	3800      	subs	r0, #0
 800c198:	bf18      	it	ne
 800c19a:	2001      	movne	r0, #1
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop

0800c1a0 <rclc_client_init_default>:
 800c1a0:	b368      	cbz	r0, 800c1fe <rclc_client_init_default+0x5e>
 800c1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1a6:	460d      	mov	r5, r1
 800c1a8:	b09e      	sub	sp, #120	@ 0x78
 800c1aa:	b321      	cbz	r1, 800c1f6 <rclc_client_init_default+0x56>
 800c1ac:	4616      	mov	r6, r2
 800c1ae:	b312      	cbz	r2, 800c1f6 <rclc_client_init_default+0x56>
 800c1b0:	461f      	mov	r7, r3
 800c1b2:	b303      	cbz	r3, 800c1f6 <rclc_client_init_default+0x56>
 800c1b4:	4604      	mov	r4, r0
 800c1b6:	f7ff fa4b 	bl	800b650 <rcl_get_zero_initialized_client>
 800c1ba:	f10d 0810 	add.w	r8, sp, #16
 800c1be:	6020      	str	r0, [r4, #0]
 800c1c0:	4640      	mov	r0, r8
 800c1c2:	f7ff fad9 	bl	800b778 <rcl_client_get_default_options>
 800c1c6:	490f      	ldr	r1, [pc, #60]	@ (800c204 <rclc_client_init_default+0x64>)
 800c1c8:	2250      	movs	r2, #80	@ 0x50
 800c1ca:	4640      	mov	r0, r8
 800c1cc:	f00b fbe5 	bl	801799a <memcpy>
 800c1d0:	f8cd 8000 	str.w	r8, [sp]
 800c1d4:	463b      	mov	r3, r7
 800c1d6:	4632      	mov	r2, r6
 800c1d8:	4629      	mov	r1, r5
 800c1da:	4620      	mov	r0, r4
 800c1dc:	f7ff fa3e 	bl	800b65c <rcl_client_init>
 800c1e0:	b910      	cbnz	r0, 800c1e8 <rclc_client_init_default+0x48>
 800c1e2:	b01e      	add	sp, #120	@ 0x78
 800c1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1e8:	9003      	str	r0, [sp, #12]
 800c1ea:	f001 f821 	bl	800d230 <rcutils_reset_error>
 800c1ee:	9803      	ldr	r0, [sp, #12]
 800c1f0:	b01e      	add	sp, #120	@ 0x78
 800c1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1f6:	200b      	movs	r0, #11
 800c1f8:	b01e      	add	sp, #120	@ 0x78
 800c1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1fe:	200b      	movs	r0, #11
 800c200:	4770      	bx	lr
 800c202:	bf00      	nop
 800c204:	08018eb8 	.word	0x08018eb8

0800c208 <_rclc_check_for_new_data>:
 800c208:	2800      	cmp	r0, #0
 800c20a:	d046      	beq.n	800c29a <_rclc_check_for_new_data+0x92>
 800c20c:	b510      	push	{r4, lr}
 800c20e:	7802      	ldrb	r2, [r0, #0]
 800c210:	b084      	sub	sp, #16
 800c212:	4603      	mov	r3, r0
 800c214:	2a0a      	cmp	r2, #10
 800c216:	d842      	bhi.n	800c29e <_rclc_check_for_new_data+0x96>
 800c218:	e8df f002 	tbb	[pc, r2]
 800c21c:	14181212 	.word	0x14181212
 800c220:	06060614 	.word	0x06060614
 800c224:	2e1a      	.short	0x2e1a
 800c226:	16          	.byte	0x16
 800c227:	00          	.byte	0x00
 800c228:	6a0a      	ldr	r2, [r1, #32]
 800c22a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c22c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c230:	2000      	movs	r0, #0
 800c232:	1a12      	subs	r2, r2, r0
 800c234:	bf18      	it	ne
 800c236:	2201      	movne	r2, #1
 800c238:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c23c:	b004      	add	sp, #16
 800c23e:	bd10      	pop	{r4, pc}
 800c240:	680a      	ldr	r2, [r1, #0]
 800c242:	e7f2      	b.n	800c22a <_rclc_check_for_new_data+0x22>
 800c244:	698a      	ldr	r2, [r1, #24]
 800c246:	e7f0      	b.n	800c22a <_rclc_check_for_new_data+0x22>
 800c248:	688a      	ldr	r2, [r1, #8]
 800c24a:	e7ee      	b.n	800c22a <_rclc_check_for_new_data+0x22>
 800c24c:	690a      	ldr	r2, [r1, #16]
 800c24e:	e7ec      	b.n	800c22a <_rclc_check_for_new_data+0x22>
 800c250:	685c      	ldr	r4, [r3, #4]
 800c252:	4608      	mov	r0, r1
 800c254:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800c258:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800c25c:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800c260:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c264:	9300      	str	r3, [sp, #0]
 800c266:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800c26a:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800c26e:	f104 0110 	add.w	r1, r4, #16
 800c272:	f008 ff69 	bl	8015148 <rcl_action_client_wait_set_get_entities_ready>
 800c276:	e7e1      	b.n	800c23c <_rclc_check_for_new_data+0x34>
 800c278:	685c      	ldr	r4, [r3, #4]
 800c27a:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800c27e:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800c282:	e9cd 3200 	strd	r3, r2, [sp]
 800c286:	4608      	mov	r0, r1
 800c288:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800c28c:	f104 0220 	add.w	r2, r4, #32
 800c290:	f104 0110 	add.w	r1, r4, #16
 800c294:	f009 f970 	bl	8015578 <rcl_action_server_wait_set_get_entities_ready>
 800c298:	e7d0      	b.n	800c23c <_rclc_check_for_new_data+0x34>
 800c29a:	200b      	movs	r0, #11
 800c29c:	4770      	bx	lr
 800c29e:	2001      	movs	r0, #1
 800c2a0:	e7cc      	b.n	800c23c <_rclc_check_for_new_data+0x34>
 800c2a2:	bf00      	nop

0800c2a4 <_rclc_take_new_data>:
 800c2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2a6:	b09b      	sub	sp, #108	@ 0x6c
 800c2a8:	2800      	cmp	r0, #0
 800c2aa:	f000 8088 	beq.w	800c3be <_rclc_take_new_data+0x11a>
 800c2ae:	7803      	ldrb	r3, [r0, #0]
 800c2b0:	4604      	mov	r4, r0
 800c2b2:	2b0a      	cmp	r3, #10
 800c2b4:	f200 8167 	bhi.w	800c586 <_rclc_take_new_data+0x2e2>
 800c2b8:	e8df f003 	tbb	[pc, r3]
 800c2bc:	44152d2d 	.word	0x44152d2d
 800c2c0:	19191944 	.word	0x19191944
 800c2c4:	065a      	.short	0x065a
 800c2c6:	15          	.byte	0x15
 800c2c7:	00          	.byte	0x00
 800c2c8:	6840      	ldr	r0, [r0, #4]
 800c2ca:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	f040 80b2 	bne.w	800c438 <_rclc_take_new_data+0x194>
 800c2d4:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	f040 80e4 	bne.w	800c4a6 <_rclc_take_new_data+0x202>
 800c2de:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d16f      	bne.n	800c3c6 <_rclc_take_new_data+0x122>
 800c2e6:	2500      	movs	r5, #0
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	b01b      	add	sp, #108	@ 0x6c
 800c2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2ee:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c2f0:	6a0b      	ldr	r3, [r1, #32]
 800c2f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d0f5      	beq.n	800c2e6 <_rclc_take_new_data+0x42>
 800c2fa:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c2fe:	f104 0110 	add.w	r1, r4, #16
 800c302:	f007 f9fd 	bl	8013700 <rcl_take_request>
 800c306:	4605      	mov	r5, r0
 800c308:	2800      	cmp	r0, #0
 800c30a:	d0ec      	beq.n	800c2e6 <_rclc_take_new_data+0x42>
 800c30c:	f240 2359 	movw	r3, #601	@ 0x259
 800c310:	4298      	cmp	r0, r3
 800c312:	d013      	beq.n	800c33c <_rclc_take_new_data+0x98>
 800c314:	e029      	b.n	800c36a <_rclc_take_new_data+0xc6>
 800c316:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c318:	680b      	ldr	r3, [r1, #0]
 800c31a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d0e1      	beq.n	800c2e6 <_rclc_take_new_data+0x42>
 800c322:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800c326:	2300      	movs	r3, #0
 800c328:	aa0a      	add	r2, sp, #40	@ 0x28
 800c32a:	f007 fa4b 	bl	80137c4 <rcl_take>
 800c32e:	4605      	mov	r5, r0
 800c330:	2800      	cmp	r0, #0
 800c332:	d0d9      	beq.n	800c2e8 <_rclc_take_new_data+0x44>
 800c334:	f240 1391 	movw	r3, #401	@ 0x191
 800c338:	4298      	cmp	r0, r3
 800c33a:	d116      	bne.n	800c36a <_rclc_take_new_data+0xc6>
 800c33c:	2300      	movs	r3, #0
 800c33e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800c342:	e7d1      	b.n	800c2e8 <_rclc_take_new_data+0x44>
 800c344:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c346:	698b      	ldr	r3, [r1, #24]
 800c348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d0ca      	beq.n	800c2e6 <_rclc_take_new_data+0x42>
 800c350:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c354:	f104 0110 	add.w	r1, r4, #16
 800c358:	f7ff fa6e 	bl	800b838 <rcl_take_response>
 800c35c:	4605      	mov	r5, r0
 800c35e:	2800      	cmp	r0, #0
 800c360:	d0c1      	beq.n	800c2e6 <_rclc_take_new_data+0x42>
 800c362:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800c366:	4298      	cmp	r0, r3
 800c368:	d0be      	beq.n	800c2e8 <_rclc_take_new_data+0x44>
 800c36a:	f000 ff61 	bl	800d230 <rcutils_reset_error>
 800c36e:	e7bb      	b.n	800c2e8 <_rclc_take_new_data+0x44>
 800c370:	6840      	ldr	r0, [r0, #4]
 800c372:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c376:	2b00      	cmp	r3, #0
 800c378:	d17d      	bne.n	800c476 <_rclc_take_new_data+0x1d2>
 800c37a:	69c3      	ldr	r3, [r0, #28]
 800c37c:	b11b      	cbz	r3, 800c386 <_rclc_take_new_data+0xe2>
 800c37e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c382:	2b00      	cmp	r3, #0
 800c384:	d144      	bne.n	800c410 <_rclc_take_new_data+0x16c>
 800c386:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	f040 80ac 	bne.w	800c4e8 <_rclc_take_new_data+0x244>
 800c390:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c394:	2b00      	cmp	r3, #0
 800c396:	d0a6      	beq.n	800c2e6 <_rclc_take_new_data+0x42>
 800c398:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c39a:	a90a      	add	r1, sp, #40	@ 0x28
 800c39c:	3010      	adds	r0, #16
 800c39e:	f008 fdab 	bl	8014ef8 <rcl_action_take_result_response>
 800c3a2:	4605      	mov	r5, r0
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	d1e0      	bne.n	800c36a <_rclc_take_new_data+0xc6>
 800c3a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c3ac:	6860      	ldr	r0, [r4, #4]
 800c3ae:	f009 fa07 	bl	80157c0 <rclc_action_find_handle_by_result_request_sequence_number>
 800c3b2:	2800      	cmp	r0, #0
 800c3b4:	d098      	beq.n	800c2e8 <_rclc_take_new_data+0x44>
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800c3bc:	e794      	b.n	800c2e8 <_rclc_take_new_data+0x44>
 800c3be:	250b      	movs	r5, #11
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	b01b      	add	sp, #108	@ 0x6c
 800c3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3c6:	ae04      	add	r6, sp, #16
 800c3c8:	aa0a      	add	r2, sp, #40	@ 0x28
 800c3ca:	3010      	adds	r0, #16
 800c3cc:	4631      	mov	r1, r6
 800c3ce:	f009 f807 	bl	80153e0 <rcl_action_take_cancel_request>
 800c3d2:	4605      	mov	r5, r0
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	d1c8      	bne.n	800c36a <_rclc_take_new_data+0xc6>
 800c3d8:	6860      	ldr	r0, [r4, #4]
 800c3da:	a90a      	add	r1, sp, #40	@ 0x28
 800c3dc:	f009 f9ae 	bl	801573c <rclc_action_find_goal_handle_by_uuid>
 800c3e0:	4607      	mov	r7, r0
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	f000 80bb 	beq.w	800c55e <_rclc_take_new_data+0x2ba>
 800c3e8:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800c3ec:	2101      	movs	r1, #1
 800c3ee:	f009 f92f 	bl	8015650 <rcl_action_transition_goal_state>
 800c3f2:	2803      	cmp	r0, #3
 800c3f4:	4684      	mov	ip, r0
 800c3f6:	f040 80a7 	bne.w	800c548 <_rclc_take_new_data+0x2a4>
 800c3fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c3fc:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800c400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c402:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c406:	e884 0003 	stmia.w	r4, {r0, r1}
 800c40a:	f887 c008 	strb.w	ip, [r7, #8]
 800c40e:	e76b      	b.n	800c2e8 <_rclc_take_new_data+0x44>
 800c410:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c412:	3010      	adds	r0, #16
 800c414:	f008 fdf0 	bl	8014ff8 <rcl_action_take_feedback>
 800c418:	4605      	mov	r5, r0
 800c41a:	2800      	cmp	r0, #0
 800c41c:	d1a5      	bne.n	800c36a <_rclc_take_new_data+0xc6>
 800c41e:	6860      	ldr	r0, [r4, #4]
 800c420:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c422:	f009 f98b 	bl	801573c <rclc_action_find_goal_handle_by_uuid>
 800c426:	4603      	mov	r3, r0
 800c428:	2800      	cmp	r0, #0
 800c42a:	f000 80a3 	beq.w	800c574 <_rclc_take_new_data+0x2d0>
 800c42e:	2201      	movs	r2, #1
 800c430:	6860      	ldr	r0, [r4, #4]
 800c432:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800c436:	e7a6      	b.n	800c386 <_rclc_take_new_data+0xe2>
 800c438:	f009 f95a 	bl	80156f0 <rclc_action_take_goal_handle>
 800c43c:	4606      	mov	r6, r0
 800c43e:	6860      	ldr	r0, [r4, #4]
 800c440:	2e00      	cmp	r6, #0
 800c442:	f43f af47 	beq.w	800c2d4 <_rclc_take_new_data+0x30>
 800c446:	6070      	str	r0, [r6, #4]
 800c448:	69f2      	ldr	r2, [r6, #28]
 800c44a:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800c44e:	3010      	adds	r0, #16
 800c450:	f008 ff0e 	bl	8015270 <rcl_action_take_goal_request>
 800c454:	4605      	mov	r5, r0
 800c456:	2800      	cmp	r0, #0
 800c458:	f040 808e 	bne.w	800c578 <_rclc_take_new_data+0x2d4>
 800c45c:	69f7      	ldr	r7, [r6, #28]
 800c45e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c460:	7235      	strb	r5, [r6, #8]
 800c462:	f8c6 0009 	str.w	r0, [r6, #9]
 800c466:	f8c6 100d 	str.w	r1, [r6, #13]
 800c46a:	6860      	ldr	r0, [r4, #4]
 800c46c:	f8c6 2011 	str.w	r2, [r6, #17]
 800c470:	f8c6 3015 	str.w	r3, [r6, #21]
 800c474:	e72e      	b.n	800c2d4 <_rclc_take_new_data+0x30>
 800c476:	aa04      	add	r2, sp, #16
 800c478:	a90a      	add	r1, sp, #40	@ 0x28
 800c47a:	3010      	adds	r0, #16
 800c47c:	f008 fcc4 	bl	8014e08 <rcl_action_take_goal_response>
 800c480:	4605      	mov	r5, r0
 800c482:	2800      	cmp	r0, #0
 800c484:	f47f af71 	bne.w	800c36a <_rclc_take_new_data+0xc6>
 800c488:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c48c:	6860      	ldr	r0, [r4, #4]
 800c48e:	f009 f985 	bl	801579c <rclc_action_find_handle_by_goal_request_sequence_number>
 800c492:	b130      	cbz	r0, 800c4a2 <_rclc_take_new_data+0x1fe>
 800c494:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c498:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c49c:	2201      	movs	r2, #1
 800c49e:	f880 2020 	strb.w	r2, [r0, #32]
 800c4a2:	6860      	ldr	r0, [r4, #4]
 800c4a4:	e769      	b.n	800c37a <_rclc_take_new_data+0xd6>
 800c4a6:	aa04      	add	r2, sp, #16
 800c4a8:	3010      	adds	r0, #16
 800c4aa:	a90a      	add	r1, sp, #40	@ 0x28
 800c4ac:	f008 ff58 	bl	8015360 <rcl_action_take_result_request>
 800c4b0:	4605      	mov	r5, r0
 800c4b2:	2800      	cmp	r0, #0
 800c4b4:	f47f af59 	bne.w	800c36a <_rclc_take_new_data+0xc6>
 800c4b8:	6860      	ldr	r0, [r4, #4]
 800c4ba:	a904      	add	r1, sp, #16
 800c4bc:	f009 f93e 	bl	801573c <rclc_action_find_goal_handle_by_uuid>
 800c4c0:	4607      	mov	r7, r0
 800c4c2:	b160      	cbz	r0, 800c4de <_rclc_take_new_data+0x23a>
 800c4c4:	ad0a      	add	r5, sp, #40	@ 0x28
 800c4c6:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800c4ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c4cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c4ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c4d2:	f04f 0c02 	mov.w	ip, #2
 800c4d6:	e886 0003 	stmia.w	r6, {r0, r1}
 800c4da:	f887 c008 	strb.w	ip, [r7, #8]
 800c4de:	6860      	ldr	r0, [r4, #4]
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800c4e6:	e6fa      	b.n	800c2de <_rclc_take_new_data+0x3a>
 800c4e8:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800c4ec:	a90a      	add	r1, sp, #40	@ 0x28
 800c4ee:	3010      	adds	r0, #16
 800c4f0:	f008 fd42 	bl	8014f78 <rcl_action_take_cancel_response>
 800c4f4:	4605      	mov	r5, r0
 800c4f6:	2800      	cmp	r0, #0
 800c4f8:	f47f af37 	bne.w	800c36a <_rclc_take_new_data+0xc6>
 800c4fc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c500:	6860      	ldr	r0, [r4, #4]
 800c502:	f009 f96f 	bl	80157e4 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800c506:	4606      	mov	r6, r0
 800c508:	6860      	ldr	r0, [r4, #4]
 800c50a:	2e00      	cmp	r6, #0
 800c50c:	f43f af40 	beq.w	800c390 <_rclc_take_new_data+0xec>
 800c510:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c512:	2701      	movs	r7, #1
 800c514:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800c516:	2b00      	cmp	r3, #0
 800c518:	f43f af3a 	beq.w	800c390 <_rclc_take_new_data+0xec>
 800c51c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c51e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c522:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c526:	f009 f909 	bl	801573c <rclc_action_find_goal_handle_by_uuid>
 800c52a:	b138      	cbz	r0, 800c53c <_rclc_take_new_data+0x298>
 800c52c:	6860      	ldr	r0, [r4, #4]
 800c52e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c530:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800c534:	3501      	adds	r5, #1
 800c536:	42ab      	cmp	r3, r5
 800c538:	d8f0      	bhi.n	800c51c <_rclc_take_new_data+0x278>
 800c53a:	e729      	b.n	800c390 <_rclc_take_new_data+0xec>
 800c53c:	6860      	ldr	r0, [r4, #4]
 800c53e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c540:	3501      	adds	r5, #1
 800c542:	42ab      	cmp	r3, r5
 800c544:	d8ea      	bhi.n	800c51c <_rclc_take_new_data+0x278>
 800c546:	e723      	b.n	800c390 <_rclc_take_new_data+0xec>
 800c548:	ab06      	add	r3, sp, #24
 800c54a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c54c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c550:	2103      	movs	r1, #3
 800c552:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c556:	6860      	ldr	r0, [r4, #4]
 800c558:	f009 f9ba 	bl	80158d0 <rclc_action_server_goal_cancel_reject>
 800c55c:	e6c4      	b.n	800c2e8 <_rclc_take_new_data+0x44>
 800c55e:	ab06      	add	r3, sp, #24
 800c560:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c562:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c566:	2102      	movs	r1, #2
 800c568:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c56c:	6860      	ldr	r0, [r4, #4]
 800c56e:	f009 f9af 	bl	80158d0 <rclc_action_server_goal_cancel_reject>
 800c572:	e6b9      	b.n	800c2e8 <_rclc_take_new_data+0x44>
 800c574:	6860      	ldr	r0, [r4, #4]
 800c576:	e706      	b.n	800c386 <_rclc_take_new_data+0xe2>
 800c578:	6860      	ldr	r0, [r4, #4]
 800c57a:	4631      	mov	r1, r6
 800c57c:	f009 f8c8 	bl	8015710 <rclc_action_remove_used_goal_handle>
 800c580:	f000 fe56 	bl	800d230 <rcutils_reset_error>
 800c584:	e6b0      	b.n	800c2e8 <_rclc_take_new_data+0x44>
 800c586:	2501      	movs	r5, #1
 800c588:	e6ae      	b.n	800c2e8 <_rclc_take_new_data+0x44>
 800c58a:	bf00      	nop

0800c58c <_rclc_execute.part.0>:
 800c58c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c58e:	7803      	ldrb	r3, [r0, #0]
 800c590:	b087      	sub	sp, #28
 800c592:	4604      	mov	r4, r0
 800c594:	2b0a      	cmp	r3, #10
 800c596:	f200 8136 	bhi.w	800c806 <_rclc_execute.part.0+0x27a>
 800c59a:	e8df f003 	tbb	[pc, r3]
 800c59e:	435e      	.short	0x435e
 800c5a0:	06a1664f 	.word	0x06a1664f
 800c5a4:	6c1e0606 	.word	0x6c1e0606
 800c5a8:	59          	.byte	0x59
 800c5a9:	00          	.byte	0x00
 800c5aa:	2b06      	cmp	r3, #6
 800c5ac:	f000 8122 	beq.w	800c7f4 <_rclc_execute.part.0+0x268>
 800c5b0:	2b07      	cmp	r3, #7
 800c5b2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c5b4:	f040 8118 	bne.w	800c7e8 <_rclc_execute.part.0+0x25c>
 800c5b8:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800c5bc:	6880      	ldr	r0, [r0, #8]
 800c5be:	4798      	blx	r3
 800c5c0:	f104 0110 	add.w	r1, r4, #16
 800c5c4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c5c6:	6860      	ldr	r0, [r4, #4]
 800c5c8:	f007 f8da 	bl	8013780 <rcl_send_response>
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	d033      	beq.n	800c638 <_rclc_execute.part.0+0xac>
 800c5d0:	9005      	str	r0, [sp, #20]
 800c5d2:	f000 fe2d 	bl	800d230 <rcutils_reset_error>
 800c5d6:	9805      	ldr	r0, [sp, #20]
 800c5d8:	e02e      	b.n	800c638 <_rclc_execute.part.0+0xac>
 800c5da:	6840      	ldr	r0, [r0, #4]
 800c5dc:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	f000 8086 	beq.w	800c6f2 <_rclc_execute.part.0+0x166>
 800c5e6:	2600      	movs	r6, #0
 800c5e8:	2701      	movs	r7, #1
 800c5ea:	e004      	b.n	800c5f6 <_rclc_execute.part.0+0x6a>
 800c5ec:	f009 f85a 	bl	80156a4 <rclc_action_send_result_request>
 800c5f0:	b998      	cbnz	r0, 800c61a <_rclc_execute.part.0+0x8e>
 800c5f2:	722f      	strb	r7, [r5, #8]
 800c5f4:	6860      	ldr	r0, [r4, #4]
 800c5f6:	f009 f907 	bl	8015808 <rclc_action_find_first_handle_with_goal_response>
 800c5fa:	4605      	mov	r5, r0
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	d077      	beq.n	800c6f0 <_rclc_execute.part.0+0x164>
 800c600:	6863      	ldr	r3, [r4, #4]
 800c602:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c604:	699b      	ldr	r3, [r3, #24]
 800c606:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800c60a:	f885 6020 	strb.w	r6, [r5, #32]
 800c60e:	4798      	blx	r3
 800c610:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800c614:	4628      	mov	r0, r5
 800c616:	2b00      	cmp	r3, #0
 800c618:	d1e8      	bne.n	800c5ec <_rclc_execute.part.0+0x60>
 800c61a:	6860      	ldr	r0, [r4, #4]
 800c61c:	4629      	mov	r1, r5
 800c61e:	f009 f877 	bl	8015710 <rclc_action_remove_used_goal_handle>
 800c622:	e7e7      	b.n	800c5f4 <_rclc_execute.part.0+0x68>
 800c624:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c628:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800c62c:	2d00      	cmp	r5, #0
 800c62e:	f000 80c9 	beq.w	800c7c4 <_rclc_execute.part.0+0x238>
 800c632:	6880      	ldr	r0, [r0, #8]
 800c634:	4798      	blx	r3
 800c636:	2000      	movs	r0, #0
 800c638:	b007      	add	sp, #28
 800c63a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c63c:	6840      	ldr	r0, [r0, #4]
 800c63e:	f007 fbd1 	bl	8013de4 <rcl_timer_call>
 800c642:	f240 3321 	movw	r3, #801	@ 0x321
 800c646:	4298      	cmp	r0, r3
 800c648:	d004      	beq.n	800c654 <_rclc_execute.part.0+0xc8>
 800c64a:	2800      	cmp	r0, #0
 800c64c:	d0f4      	beq.n	800c638 <_rclc_execute.part.0+0xac>
 800c64e:	e7bf      	b.n	800c5d0 <_rclc_execute.part.0+0x44>
 800c650:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c652:	4798      	blx	r3
 800c654:	2000      	movs	r0, #0
 800c656:	b007      	add	sp, #28
 800c658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c65a:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c65e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c660:	b925      	cbnz	r5, 800c66c <_rclc_execute.part.0+0xe0>
 800c662:	4628      	mov	r0, r5
 800c664:	4798      	blx	r3
 800c666:	4628      	mov	r0, r5
 800c668:	e7e6      	b.n	800c638 <_rclc_execute.part.0+0xac>
 800c66a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c66c:	68a0      	ldr	r0, [r4, #8]
 800c66e:	4798      	blx	r3
 800c670:	2000      	movs	r0, #0
 800c672:	b007      	add	sp, #28
 800c674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c676:	6840      	ldr	r0, [r0, #4]
 800c678:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c67c:	bb3b      	cbnz	r3, 800c6ce <_rclc_execute.part.0+0x142>
 800c67e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d07b      	beq.n	800c77e <_rclc_execute.part.0+0x1f2>
 800c686:	f640 0634 	movw	r6, #2100	@ 0x834
 800c68a:	2701      	movs	r7, #1
 800c68c:	e007      	b.n	800c69e <_rclc_execute.part.0+0x112>
 800c68e:	4628      	mov	r0, r5
 800c690:	f009 f8d2 	bl	8015838 <rclc_action_server_response_goal_request>
 800c694:	6860      	ldr	r0, [r4, #4]
 800c696:	4629      	mov	r1, r5
 800c698:	f009 f83a 	bl	8015710 <rclc_action_remove_used_goal_handle>
 800c69c:	6860      	ldr	r0, [r4, #4]
 800c69e:	2100      	movs	r1, #0
 800c6a0:	f009 f864 	bl	801576c <rclc_action_find_first_handle_by_status>
 800c6a4:	4605      	mov	r5, r0
 800c6a6:	2800      	cmp	r0, #0
 800c6a8:	d066      	beq.n	800c778 <_rclc_execute.part.0+0x1ec>
 800c6aa:	6863      	ldr	r3, [r4, #4]
 800c6ac:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c6ae:	699b      	ldr	r3, [r3, #24]
 800c6b0:	4798      	blx	r3
 800c6b2:	42b0      	cmp	r0, r6
 800c6b4:	f04f 0100 	mov.w	r1, #0
 800c6b8:	d1e9      	bne.n	800c68e <_rclc_execute.part.0+0x102>
 800c6ba:	2101      	movs	r1, #1
 800c6bc:	4628      	mov	r0, r5
 800c6be:	f009 f8bb 	bl	8015838 <rclc_action_server_response_goal_request>
 800c6c2:	722f      	strb	r7, [r5, #8]
 800c6c4:	e7ea      	b.n	800c69c <_rclc_execute.part.0+0x110>
 800c6c6:	6848      	ldr	r0, [r1, #4]
 800c6c8:	f009 f822 	bl	8015710 <rclc_action_remove_used_goal_handle>
 800c6cc:	6860      	ldr	r0, [r4, #4]
 800c6ce:	f009 f859 	bl	8015784 <rclc_action_find_first_terminated_handle>
 800c6d2:	4601      	mov	r1, r0
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	d1f6      	bne.n	800c6c6 <_rclc_execute.part.0+0x13a>
 800c6d8:	6860      	ldr	r0, [r4, #4]
 800c6da:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800c6de:	e7ce      	b.n	800c67e <_rclc_execute.part.0+0xf2>
 800c6e0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c6e2:	6880      	ldr	r0, [r0, #8]
 800c6e4:	f104 0110 	add.w	r1, r4, #16
 800c6e8:	4798      	blx	r3
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	b007      	add	sp, #28
 800c6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6f0:	6860      	ldr	r0, [r4, #4]
 800c6f2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c6f6:	b18b      	cbz	r3, 800c71c <_rclc_execute.part.0+0x190>
 800c6f8:	68c5      	ldr	r5, [r0, #12]
 800c6fa:	b32d      	cbz	r5, 800c748 <_rclc_execute.part.0+0x1bc>
 800c6fc:	2600      	movs	r6, #0
 800c6fe:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800c702:	b143      	cbz	r3, 800c716 <_rclc_execute.part.0+0x18a>
 800c704:	69c3      	ldr	r3, [r0, #28]
 800c706:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800c70a:	b123      	cbz	r3, 800c716 <_rclc_execute.part.0+0x18a>
 800c70c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c70e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c710:	4628      	mov	r0, r5
 800c712:	4798      	blx	r3
 800c714:	6860      	ldr	r0, [r4, #4]
 800c716:	682d      	ldr	r5, [r5, #0]
 800c718:	2d00      	cmp	r5, #0
 800c71a:	d1f0      	bne.n	800c6fe <_rclc_execute.part.0+0x172>
 800c71c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c720:	b193      	cbz	r3, 800c748 <_rclc_execute.part.0+0x1bc>
 800c722:	68c5      	ldr	r5, [r0, #12]
 800c724:	b185      	cbz	r5, 800c748 <_rclc_execute.part.0+0x1bc>
 800c726:	2600      	movs	r6, #0
 800c728:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800c72c:	b14b      	cbz	r3, 800c742 <_rclc_execute.part.0+0x1b6>
 800c72e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c730:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800c734:	b12b      	cbz	r3, 800c742 <_rclc_execute.part.0+0x1b6>
 800c736:	4628      	mov	r0, r5
 800c738:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800c73c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c73e:	4798      	blx	r3
 800c740:	6860      	ldr	r0, [r4, #4]
 800c742:	682d      	ldr	r5, [r5, #0]
 800c744:	2d00      	cmp	r5, #0
 800c746:	d1ef      	bne.n	800c728 <_rclc_execute.part.0+0x19c>
 800c748:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d081      	beq.n	800c654 <_rclc_execute.part.0+0xc8>
 800c750:	2700      	movs	r7, #0
 800c752:	e00b      	b.n	800c76c <_rclc_execute.part.0+0x1e0>
 800c754:	6863      	ldr	r3, [r4, #4]
 800c756:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c758:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c75a:	6a1e      	ldr	r6, [r3, #32]
 800c75c:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800c760:	47b0      	blx	r6
 800c762:	6860      	ldr	r0, [r4, #4]
 800c764:	4629      	mov	r1, r5
 800c766:	f008 ffd3 	bl	8015710 <rclc_action_remove_used_goal_handle>
 800c76a:	6860      	ldr	r0, [r4, #4]
 800c76c:	f009 f858 	bl	8015820 <rclc_action_find_first_handle_with_result_response>
 800c770:	4605      	mov	r5, r0
 800c772:	2800      	cmp	r0, #0
 800c774:	d1ee      	bne.n	800c754 <_rclc_execute.part.0+0x1c8>
 800c776:	e76d      	b.n	800c654 <_rclc_execute.part.0+0xc8>
 800c778:	6860      	ldr	r0, [r4, #4]
 800c77a:	f880 5020 	strb.w	r5, [r0, #32]
 800c77e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c782:	2b00      	cmp	r3, #0
 800c784:	f43f af66 	beq.w	800c654 <_rclc_execute.part.0+0xc8>
 800c788:	68c5      	ldr	r5, [r0, #12]
 800c78a:	b1b5      	cbz	r5, 800c7ba <_rclc_execute.part.0+0x22e>
 800c78c:	2602      	movs	r6, #2
 800c78e:	e001      	b.n	800c794 <_rclc_execute.part.0+0x208>
 800c790:	682d      	ldr	r5, [r5, #0]
 800c792:	b195      	cbz	r5, 800c7ba <_rclc_execute.part.0+0x22e>
 800c794:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800c798:	2b03      	cmp	r3, #3
 800c79a:	d1f9      	bne.n	800c790 <_rclc_execute.part.0+0x204>
 800c79c:	69c3      	ldr	r3, [r0, #28]
 800c79e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c7a0:	4628      	mov	r0, r5
 800c7a2:	4798      	blx	r3
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800c7b0:	b163      	cbz	r3, 800c7cc <_rclc_execute.part.0+0x240>
 800c7b2:	f009 f861 	bl	8015878 <rclc_action_server_goal_cancel_accept>
 800c7b6:	6860      	ldr	r0, [r4, #4]
 800c7b8:	e7ea      	b.n	800c790 <_rclc_execute.part.0+0x204>
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	e739      	b.n	800c638 <_rclc_execute.part.0+0xac>
 800c7c4:	4628      	mov	r0, r5
 800c7c6:	4798      	blx	r3
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	e735      	b.n	800c638 <_rclc_execute.part.0+0xac>
 800c7cc:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c7ce:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c7d2:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800c7d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7da:	6860      	ldr	r0, [r4, #4]
 800c7dc:	2101      	movs	r1, #1
 800c7de:	f009 f877 	bl	80158d0 <rclc_action_server_goal_cancel_reject>
 800c7e2:	722e      	strb	r6, [r5, #8]
 800c7e4:	6860      	ldr	r0, [r4, #4]
 800c7e6:	e7d3      	b.n	800c790 <_rclc_execute.part.0+0x204>
 800c7e8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c7ea:	6880      	ldr	r0, [r0, #8]
 800c7ec:	4798      	blx	r3
 800c7ee:	f104 0110 	add.w	r1, r4, #16
 800c7f2:	e6e7      	b.n	800c5c4 <_rclc_execute.part.0+0x38>
 800c7f4:	f100 0110 	add.w	r1, r0, #16
 800c7f8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c7fa:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800c7fc:	6880      	ldr	r0, [r0, #8]
 800c7fe:	9105      	str	r1, [sp, #20]
 800c800:	4798      	blx	r3
 800c802:	9905      	ldr	r1, [sp, #20]
 800c804:	e6de      	b.n	800c5c4 <_rclc_execute.part.0+0x38>
 800c806:	2001      	movs	r0, #1
 800c808:	e716      	b.n	800c638 <_rclc_execute.part.0+0xac>
 800c80a:	bf00      	nop

0800c80c <rclc_executor_trigger_any>:
 800c80c:	2800      	cmp	r0, #0
 800c80e:	d03f      	beq.n	800c890 <rclc_executor_trigger_any+0x84>
 800c810:	2900      	cmp	r1, #0
 800c812:	d03e      	beq.n	800c892 <rclc_executor_trigger_any+0x86>
 800c814:	4603      	mov	r3, r0
 800c816:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800c81a:	2200      	movs	r2, #0
 800c81c:	2800      	cmp	r0, #0
 800c81e:	d037      	beq.n	800c890 <rclc_executor_trigger_any+0x84>
 800c820:	b430      	push	{r4, r5}
 800c822:	f893 c000 	ldrb.w	ip, [r3]
 800c826:	f1bc 0f08 	cmp.w	ip, #8
 800c82a:	d11e      	bne.n	800c86a <rclc_executor_trigger_any+0x5e>
 800c82c:	685c      	ldr	r4, [r3, #4]
 800c82e:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c830:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800c834:	d105      	bne.n	800c842 <rclc_executor_trigger_any+0x36>
 800c836:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800c83a:	b910      	cbnz	r0, 800c842 <rclc_executor_trigger_any+0x36>
 800c83c:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800c840:	b128      	cbz	r0, 800c84e <rclc_executor_trigger_any+0x42>
 800c842:	bc30      	pop	{r4, r5}
 800c844:	4770      	bx	lr
 800c846:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800c84a:	2800      	cmp	r0, #0
 800c84c:	d1f9      	bne.n	800c842 <rclc_executor_trigger_any+0x36>
 800c84e:	3201      	adds	r2, #1
 800c850:	4291      	cmp	r1, r2
 800c852:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c856:	d018      	beq.n	800c88a <rclc_executor_trigger_any+0x7e>
 800c858:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800c85c:	2800      	cmp	r0, #0
 800c85e:	d0f0      	beq.n	800c842 <rclc_executor_trigger_any+0x36>
 800c860:	f893 c000 	ldrb.w	ip, [r3]
 800c864:	f1bc 0f08 	cmp.w	ip, #8
 800c868:	d0e0      	beq.n	800c82c <rclc_executor_trigger_any+0x20>
 800c86a:	f1bc 0f09 	cmp.w	ip, #9
 800c86e:	d1ea      	bne.n	800c846 <rclc_executor_trigger_any+0x3a>
 800c870:	685c      	ldr	r4, [r3, #4]
 800c872:	6a25      	ldr	r5, [r4, #32]
 800c874:	2d00      	cmp	r5, #0
 800c876:	d1e4      	bne.n	800c842 <rclc_executor_trigger_any+0x36>
 800c878:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800c87c:	2800      	cmp	r0, #0
 800c87e:	d1e0      	bne.n	800c842 <rclc_executor_trigger_any+0x36>
 800c880:	3201      	adds	r2, #1
 800c882:	4291      	cmp	r1, r2
 800c884:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c888:	d1e6      	bne.n	800c858 <rclc_executor_trigger_any+0x4c>
 800c88a:	2000      	movs	r0, #0
 800c88c:	bc30      	pop	{r4, r5}
 800c88e:	4770      	bx	lr
 800c890:	4770      	bx	lr
 800c892:	4608      	mov	r0, r1
 800c894:	4770      	bx	lr
 800c896:	bf00      	nop

0800c898 <rclc_executor_get_zero_initialized_executor>:
 800c898:	b510      	push	{r4, lr}
 800c89a:	4903      	ldr	r1, [pc, #12]	@ (800c8a8 <rclc_executor_get_zero_initialized_executor+0x10>)
 800c89c:	4604      	mov	r4, r0
 800c89e:	2288      	movs	r2, #136	@ 0x88
 800c8a0:	f00b f87b 	bl	801799a <memcpy>
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	bd10      	pop	{r4, pc}
 800c8a8:	08018f08 	.word	0x08018f08
 800c8ac:	00000000 	.word	0x00000000

0800c8b0 <rclc_executor_init>:
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	d05f      	beq.n	800c974 <rclc_executor_init+0xc4>
 800c8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b8:	460c      	mov	r4, r1
 800c8ba:	b0b0      	sub	sp, #192	@ 0xc0
 800c8bc:	2900      	cmp	r1, #0
 800c8be:	d051      	beq.n	800c964 <rclc_executor_init+0xb4>
 800c8c0:	4605      	mov	r5, r0
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	4616      	mov	r6, r2
 800c8c6:	461f      	mov	r7, r3
 800c8c8:	f000 fbd0 	bl	800d06c <rcutils_allocator_is_valid>
 800c8cc:	2800      	cmp	r0, #0
 800c8ce:	d049      	beq.n	800c964 <rclc_executor_init+0xb4>
 800c8d0:	2e00      	cmp	r6, #0
 800c8d2:	d047      	beq.n	800c964 <rclc_executor_init+0xb4>
 800c8d4:	492c      	ldr	r1, [pc, #176]	@ (800c988 <rclc_executor_init+0xd8>)
 800c8d6:	2288      	movs	r2, #136	@ 0x88
 800c8d8:	a80e      	add	r0, sp, #56	@ 0x38
 800c8da:	f00b f85e 	bl	801799a <memcpy>
 800c8de:	a90e      	add	r1, sp, #56	@ 0x38
 800c8e0:	2288      	movs	r2, #136	@ 0x88
 800c8e2:	4628      	mov	r0, r5
 800c8e4:	f00b f859 	bl	801799a <memcpy>
 800c8e8:	602c      	str	r4, [r5, #0]
 800c8ea:	4668      	mov	r0, sp
 800c8ec:	60ae      	str	r6, [r5, #8]
 800c8ee:	466c      	mov	r4, sp
 800c8f0:	f007 fcbc 	bl	801426c <rcl_get_zero_initialized_wait_set>
 800c8f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c8f6:	f105 0c14 	add.w	ip, r5, #20
 800c8fa:	f8d7 8000 	ldr.w	r8, [r7]
 800c8fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c904:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c90a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c90e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800c980 <rclc_executor_init+0xd0>
 800c912:	6823      	ldr	r3, [r4, #0]
 800c914:	f8cc 3000 	str.w	r3, [ip]
 800c918:	6939      	ldr	r1, [r7, #16]
 800c91a:	612f      	str	r7, [r5, #16]
 800c91c:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800c920:	01b0      	lsls	r0, r6, #6
 800c922:	47c0      	blx	r8
 800c924:	6068      	str	r0, [r5, #4]
 800c926:	b338      	cbz	r0, 800c978 <rclc_executor_init+0xc8>
 800c928:	2400      	movs	r4, #0
 800c92a:	e000      	b.n	800c92e <rclc_executor_init+0x7e>
 800c92c:	6868      	ldr	r0, [r5, #4]
 800c92e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800c932:	4631      	mov	r1, r6
 800c934:	3401      	adds	r4, #1
 800c936:	f000 fa6b 	bl	800ce10 <rclc_executor_handle_init>
 800c93a:	42a6      	cmp	r6, r4
 800c93c:	d1f6      	bne.n	800c92c <rclc_executor_init+0x7c>
 800c93e:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800c942:	f000 fa59 	bl	800cdf8 <rclc_executor_handle_counters_zero_init>
 800c946:	4a11      	ldr	r2, [pc, #68]	@ (800c98c <rclc_executor_init+0xdc>)
 800c948:	686b      	ldr	r3, [r5, #4]
 800c94a:	2000      	movs	r0, #0
 800c94c:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800c950:	b163      	cbz	r3, 800c96c <rclc_executor_init+0xbc>
 800c952:	692b      	ldr	r3, [r5, #16]
 800c954:	b153      	cbz	r3, 800c96c <rclc_executor_init+0xbc>
 800c956:	68ab      	ldr	r3, [r5, #8]
 800c958:	b143      	cbz	r3, 800c96c <rclc_executor_init+0xbc>
 800c95a:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800c95e:	b030      	add	sp, #192	@ 0xc0
 800c960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c964:	200b      	movs	r0, #11
 800c966:	b030      	add	sp, #192	@ 0xc0
 800c968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c96c:	4618      	mov	r0, r3
 800c96e:	b030      	add	sp, #192	@ 0xc0
 800c970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c974:	200b      	movs	r0, #11
 800c976:	4770      	bx	lr
 800c978:	200a      	movs	r0, #10
 800c97a:	e7f4      	b.n	800c966 <rclc_executor_init+0xb6>
 800c97c:	f3af 8000 	nop.w
 800c980:	3b9aca00 	.word	0x3b9aca00
 800c984:	00000000 	.word	0x00000000
 800c988:	08018f08 	.word	0x08018f08
 800c98c:	0800c80d 	.word	0x0800c80d

0800c990 <rclc_executor_add_timer>:
 800c990:	b300      	cbz	r0, 800c9d4 <rclc_executor_add_timer+0x44>
 800c992:	b1f9      	cbz	r1, 800c9d4 <rclc_executor_add_timer+0x44>
 800c994:	b538      	push	{r3, r4, r5, lr}
 800c996:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800c99a:	4293      	cmp	r3, r2
 800c99c:	4604      	mov	r4, r0
 800c99e:	d301      	bcc.n	800c9a4 <rclc_executor_add_timer+0x14>
 800c9a0:	2001      	movs	r0, #1
 800c9a2:	bd38      	pop	{r3, r4, r5, pc}
 800c9a4:	6840      	ldr	r0, [r0, #4]
 800c9a6:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800c9aa:	019d      	lsls	r5, r3, #6
 800c9ac:	6051      	str	r1, [r2, #4]
 800c9ae:	2102      	movs	r1, #2
 800c9b0:	5341      	strh	r1, [r0, r5]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	2000      	movs	r0, #0
 800c9b6:	2101      	movs	r1, #1
 800c9b8:	f104 0514 	add.w	r5, r4, #20
 800c9bc:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800c9be:	8711      	strh	r1, [r2, #56]	@ 0x38
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	60e3      	str	r3, [r4, #12]
 800c9c4:	f007 fc66 	bl	8014294 <rcl_wait_set_is_valid>
 800c9c8:	b930      	cbnz	r0, 800c9d8 <rclc_executor_add_timer+0x48>
 800c9ca:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	2000      	movs	r0, #0
 800c9d0:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800c9d2:	bd38      	pop	{r3, r4, r5, pc}
 800c9d4:	200b      	movs	r0, #11
 800c9d6:	4770      	bx	lr
 800c9d8:	4628      	mov	r0, r5
 800c9da:	f007 fc61 	bl	80142a0 <rcl_wait_set_fini>
 800c9de:	2800      	cmp	r0, #0
 800c9e0:	d0f3      	beq.n	800c9ca <rclc_executor_add_timer+0x3a>
 800c9e2:	bd38      	pop	{r3, r4, r5, pc}

0800c9e4 <rclc_executor_prepare>:
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	d044      	beq.n	800ca72 <rclc_executor_prepare+0x8e>
 800c9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9ea:	f100 0514 	add.w	r5, r0, #20
 800c9ee:	b09b      	sub	sp, #108	@ 0x6c
 800c9f0:	4604      	mov	r4, r0
 800c9f2:	4628      	mov	r0, r5
 800c9f4:	f007 fc4e 	bl	8014294 <rcl_wait_set_is_valid>
 800c9f8:	b110      	cbz	r0, 800ca00 <rclc_executor_prepare+0x1c>
 800c9fa:	2000      	movs	r0, #0
 800c9fc:	b01b      	add	sp, #108	@ 0x6c
 800c9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca00:	4628      	mov	r0, r5
 800ca02:	f007 fc4d 	bl	80142a0 <rcl_wait_set_fini>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d130      	bne.n	800ca6c <rclc_executor_prepare+0x88>
 800ca0a:	a80c      	add	r0, sp, #48	@ 0x30
 800ca0c:	f007 fc2e 	bl	801426c <rcl_get_zero_initialized_wait_set>
 800ca10:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800ca14:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ca18:	46ae      	mov	lr, r5
 800ca1a:	6927      	ldr	r7, [r4, #16]
 800ca1c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ca20:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ca24:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ca28:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ca2c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ca30:	f8dc 3000 	ldr.w	r3, [ip]
 800ca34:	f8ce 3000 	str.w	r3, [lr]
 800ca38:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ca3a:	ae04      	add	r6, sp, #16
 800ca3c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	6822      	ldr	r2, [r4, #0]
 800ca42:	6033      	str	r3, [r6, #0]
 800ca44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca46:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800ca48:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800ca4c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800ca50:	e9cd 2100 	strd	r2, r1, [sp]
 800ca54:	4628      	mov	r0, r5
 800ca56:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800ca58:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ca5a:	f007 ff1f 	bl	801489c <rcl_wait_set_init>
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	d0cc      	beq.n	800c9fc <rclc_executor_prepare+0x18>
 800ca62:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ca64:	f000 fbe4 	bl	800d230 <rcutils_reset_error>
 800ca68:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ca6a:	e7c7      	b.n	800c9fc <rclc_executor_prepare+0x18>
 800ca6c:	f000 fbe0 	bl	800d230 <rcutils_reset_error>
 800ca70:	e7cb      	b.n	800ca0a <rclc_executor_prepare+0x26>
 800ca72:	200b      	movs	r0, #11
 800ca74:	4770      	bx	lr
 800ca76:	bf00      	nop

0800ca78 <rclc_executor_spin_some.part.0>:
 800ca78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca7c:	f100 0614 	add.w	r6, r0, #20
 800ca80:	b083      	sub	sp, #12
 800ca82:	4691      	mov	r9, r2
 800ca84:	4698      	mov	r8, r3
 800ca86:	4605      	mov	r5, r0
 800ca88:	f7ff ffac 	bl	800c9e4 <rclc_executor_prepare>
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	f007 fcd3 	bl	8014438 <rcl_wait_set_clear>
 800ca92:	4607      	mov	r7, r0
 800ca94:	2800      	cmp	r0, #0
 800ca96:	f040 80ed 	bne.w	800cc74 <rclc_executor_spin_some.part.0+0x1fc>
 800ca9a:	68ab      	ldr	r3, [r5, #8]
 800ca9c:	4604      	mov	r4, r0
 800ca9e:	b303      	cbz	r3, 800cae2 <rclc_executor_spin_some.part.0+0x6a>
 800caa0:	6869      	ldr	r1, [r5, #4]
 800caa2:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800caa6:	01a2      	lsls	r2, r4, #6
 800caa8:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800caac:	b1cb      	cbz	r3, 800cae2 <rclc_executor_spin_some.part.0+0x6a>
 800caae:	5c8b      	ldrb	r3, [r1, r2]
 800cab0:	2b0a      	cmp	r3, #10
 800cab2:	f200 80d8 	bhi.w	800cc66 <rclc_executor_spin_some.part.0+0x1ee>
 800cab6:	e8df f003 	tbb	[pc, r3]
 800caba:	9c9c      	.short	0x9c9c
 800cabc:	068c8ca7 	.word	0x068c8ca7
 800cac0:	bdc90606 	.word	0xbdc90606
 800cac4:	b2          	.byte	0xb2
 800cac5:	00          	.byte	0x00
 800cac6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800caca:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cace:	4630      	mov	r0, r6
 800cad0:	f007 fffa 	bl	8014ac8 <rcl_wait_set_add_service>
 800cad4:	2800      	cmp	r0, #0
 800cad6:	f040 8086 	bne.w	800cbe6 <rclc_executor_spin_some.part.0+0x16e>
 800cada:	68ab      	ldr	r3, [r5, #8]
 800cadc:	3401      	adds	r4, #1
 800cade:	429c      	cmp	r4, r3
 800cae0:	d3de      	bcc.n	800caa0 <rclc_executor_spin_some.part.0+0x28>
 800cae2:	4643      	mov	r3, r8
 800cae4:	464a      	mov	r2, r9
 800cae6:	4630      	mov	r0, r6
 800cae8:	f008 f81a 	bl	8014b20 <rcl_wait>
 800caec:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	f000 80c7 	beq.w	800cc84 <rclc_executor_spin_some.part.0+0x20c>
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	f040 80b5 	bne.w	800cc66 <rclc_executor_spin_some.part.0+0x1ee>
 800cafc:	68ab      	ldr	r3, [r5, #8]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	f000 8159 	beq.w	800cdb6 <rclc_executor_spin_some.part.0+0x33e>
 800cb04:	2400      	movs	r4, #0
 800cb06:	46a0      	mov	r8, r4
 800cb08:	f240 1991 	movw	r9, #401	@ 0x191
 800cb0c:	e00a      	b.n	800cb24 <rclc_executor_spin_some.part.0+0xac>
 800cb0e:	f7ff fb7b 	bl	800c208 <_rclc_check_for_new_data>
 800cb12:	4604      	mov	r4, r0
 800cb14:	b110      	cbz	r0, 800cb1c <rclc_executor_spin_some.part.0+0xa4>
 800cb16:	4548      	cmp	r0, r9
 800cb18:	f040 80b2 	bne.w	800cc80 <rclc_executor_spin_some.part.0+0x208>
 800cb1c:	68ab      	ldr	r3, [r5, #8]
 800cb1e:	4598      	cmp	r8, r3
 800cb20:	f080 8126 	bcs.w	800cd70 <rclc_executor_spin_some.part.0+0x2f8>
 800cb24:	686a      	ldr	r2, [r5, #4]
 800cb26:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800cb2a:	4631      	mov	r1, r6
 800cb2c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800cb30:	f108 0801 	add.w	r8, r8, #1
 800cb34:	f1bc 0f00 	cmp.w	ip, #0
 800cb38:	d1e9      	bne.n	800cb0e <rclc_executor_spin_some.part.0+0x96>
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	4610      	mov	r0, r2
 800cb3e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800cb42:	4798      	blx	r3
 800cb44:	2800      	cmp	r0, #0
 800cb46:	f000 809b 	beq.w	800cc80 <rclc_executor_spin_some.part.0+0x208>
 800cb4a:	68ab      	ldr	r3, [r5, #8]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	f000 8097 	beq.w	800cc80 <rclc_executor_spin_some.part.0+0x208>
 800cb52:	f04f 0800 	mov.w	r8, #0
 800cb56:	f240 1991 	movw	r9, #401	@ 0x191
 800cb5a:	e009      	b.n	800cb70 <rclc_executor_spin_some.part.0+0xf8>
 800cb5c:	f7ff fba2 	bl	800c2a4 <_rclc_take_new_data>
 800cb60:	4604      	mov	r4, r0
 800cb62:	b110      	cbz	r0, 800cb6a <rclc_executor_spin_some.part.0+0xf2>
 800cb64:	4548      	cmp	r0, r9
 800cb66:	f040 808b 	bne.w	800cc80 <rclc_executor_spin_some.part.0+0x208>
 800cb6a:	68ab      	ldr	r3, [r5, #8]
 800cb6c:	4598      	cmp	r8, r3
 800cb6e:	d209      	bcs.n	800cb84 <rclc_executor_spin_some.part.0+0x10c>
 800cb70:	6868      	ldr	r0, [r5, #4]
 800cb72:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800cb76:	4631      	mov	r1, r6
 800cb78:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800cb7c:	f108 0801 	add.w	r8, r8, #1
 800cb80:	2a00      	cmp	r2, #0
 800cb82:	d1eb      	bne.n	800cb5c <rclc_executor_spin_some.part.0+0xe4>
 800cb84:	2600      	movs	r6, #0
 800cb86:	b97b      	cbnz	r3, 800cba8 <rclc_executor_spin_some.part.0+0x130>
 800cb88:	e07a      	b.n	800cc80 <rclc_executor_spin_some.part.0+0x208>
 800cb8a:	f812 200c 	ldrb.w	r2, [r2, ip]
 800cb8e:	2a08      	cmp	r2, #8
 800cb90:	f000 80fd 	beq.w	800cd8e <rclc_executor_spin_some.part.0+0x316>
 800cb94:	2a09      	cmp	r2, #9
 800cb96:	f000 80ef 	beq.w	800cd78 <rclc_executor_spin_some.part.0+0x300>
 800cb9a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800cb9e:	b98a      	cbnz	r2, 800cbc4 <rclc_executor_spin_some.part.0+0x14c>
 800cba0:	3601      	adds	r6, #1
 800cba2:	429e      	cmp	r6, r3
 800cba4:	d262      	bcs.n	800cc6c <rclc_executor_spin_some.part.0+0x1f4>
 800cba6:	2400      	movs	r4, #0
 800cba8:	686a      	ldr	r2, [r5, #4]
 800cbaa:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800cbae:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800cbb2:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800cbb6:	2900      	cmp	r1, #0
 800cbb8:	d062      	beq.n	800cc80 <rclc_executor_spin_some.part.0+0x208>
 800cbba:	7841      	ldrb	r1, [r0, #1]
 800cbbc:	2900      	cmp	r1, #0
 800cbbe:	d0e4      	beq.n	800cb8a <rclc_executor_spin_some.part.0+0x112>
 800cbc0:	2901      	cmp	r1, #1
 800cbc2:	d1ed      	bne.n	800cba0 <rclc_executor_spin_some.part.0+0x128>
 800cbc4:	f7ff fce2 	bl	800c58c <_rclc_execute.part.0>
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	f040 80b6 	bne.w	800cd3a <rclc_executor_spin_some.part.0+0x2c2>
 800cbce:	68ab      	ldr	r3, [r5, #8]
 800cbd0:	e7e6      	b.n	800cba0 <rclc_executor_spin_some.part.0+0x128>
 800cbd2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cbd6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cbda:	4630      	mov	r0, r6
 800cbdc:	f007 ff48 	bl	8014a70 <rcl_wait_set_add_client>
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	f43f af7a 	beq.w	800cada <rclc_executor_spin_some.part.0+0x62>
 800cbe6:	9001      	str	r0, [sp, #4]
 800cbe8:	f000 fb22 	bl	800d230 <rcutils_reset_error>
 800cbec:	9801      	ldr	r0, [sp, #4]
 800cbee:	4607      	mov	r7, r0
 800cbf0:	e03c      	b.n	800cc6c <rclc_executor_spin_some.part.0+0x1f4>
 800cbf2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cbf6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cbfa:	4630      	mov	r0, r6
 800cbfc:	f007 fbf0 	bl	80143e0 <rcl_wait_set_add_subscription>
 800cc00:	2800      	cmp	r0, #0
 800cc02:	f43f af6a 	beq.w	800cada <rclc_executor_spin_some.part.0+0x62>
 800cc06:	e7ee      	b.n	800cbe6 <rclc_executor_spin_some.part.0+0x16e>
 800cc08:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cc0c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cc10:	4630      	mov	r0, r6
 800cc12:	f007 fefd 	bl	8014a10 <rcl_wait_set_add_timer>
 800cc16:	2800      	cmp	r0, #0
 800cc18:	f43f af5f 	beq.w	800cada <rclc_executor_spin_some.part.0+0x62>
 800cc1c:	e7e3      	b.n	800cbe6 <rclc_executor_spin_some.part.0+0x16e>
 800cc1e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cc22:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cc26:	4630      	mov	r0, r6
 800cc28:	f007 fec6 	bl	80149b8 <rcl_wait_set_add_guard_condition>
 800cc2c:	2800      	cmp	r0, #0
 800cc2e:	f43f af54 	beq.w	800cada <rclc_executor_spin_some.part.0+0x62>
 800cc32:	e7d8      	b.n	800cbe6 <rclc_executor_spin_some.part.0+0x16e>
 800cc34:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cc38:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cc3c:	3110      	adds	r1, #16
 800cc3e:	4630      	mov	r0, r6
 800cc40:	f008 fc46 	bl	80154d0 <rcl_action_wait_set_add_action_server>
 800cc44:	2800      	cmp	r0, #0
 800cc46:	f43f af48 	beq.w	800cada <rclc_executor_spin_some.part.0+0x62>
 800cc4a:	e7cc      	b.n	800cbe6 <rclc_executor_spin_some.part.0+0x16e>
 800cc4c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cc50:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cc54:	3110      	adds	r1, #16
 800cc56:	2300      	movs	r3, #0
 800cc58:	4630      	mov	r0, r6
 800cc5a:	f008 fa11 	bl	8015080 <rcl_action_wait_set_add_action_client>
 800cc5e:	2800      	cmp	r0, #0
 800cc60:	f43f af3b 	beq.w	800cada <rclc_executor_spin_some.part.0+0x62>
 800cc64:	e7bf      	b.n	800cbe6 <rclc_executor_spin_some.part.0+0x16e>
 800cc66:	f000 fae3 	bl	800d230 <rcutils_reset_error>
 800cc6a:	2701      	movs	r7, #1
 800cc6c:	4638      	mov	r0, r7
 800cc6e:	b003      	add	sp, #12
 800cc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc74:	f000 fadc 	bl	800d230 <rcutils_reset_error>
 800cc78:	4638      	mov	r0, r7
 800cc7a:	b003      	add	sp, #12
 800cc7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc80:	4627      	mov	r7, r4
 800cc82:	e7f3      	b.n	800cc6c <rclc_executor_spin_some.part.0+0x1f4>
 800cc84:	68ab      	ldr	r3, [r5, #8]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	f000 8092 	beq.w	800cdb0 <rclc_executor_spin_some.part.0+0x338>
 800cc8c:	2400      	movs	r4, #0
 800cc8e:	46a0      	mov	r8, r4
 800cc90:	f240 1991 	movw	r9, #401	@ 0x191
 800cc94:	e008      	b.n	800cca8 <rclc_executor_spin_some.part.0+0x230>
 800cc96:	f7ff fab7 	bl	800c208 <_rclc_check_for_new_data>
 800cc9a:	4604      	mov	r4, r0
 800cc9c:	b108      	cbz	r0, 800cca2 <rclc_executor_spin_some.part.0+0x22a>
 800cc9e:	4548      	cmp	r0, r9
 800cca0:	d1ee      	bne.n	800cc80 <rclc_executor_spin_some.part.0+0x208>
 800cca2:	68ab      	ldr	r3, [r5, #8]
 800cca4:	4598      	cmp	r8, r3
 800cca6:	d265      	bcs.n	800cd74 <rclc_executor_spin_some.part.0+0x2fc>
 800cca8:	686a      	ldr	r2, [r5, #4]
 800ccaa:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800ccae:	4631      	mov	r1, r6
 800ccb0:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800ccb4:	f108 0801 	add.w	r8, r8, #1
 800ccb8:	f1bc 0f00 	cmp.w	ip, #0
 800ccbc:	d1eb      	bne.n	800cc96 <rclc_executor_spin_some.part.0+0x21e>
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	4610      	mov	r0, r2
 800ccc2:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800ccc6:	4798      	blx	r3
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	d0d9      	beq.n	800cc80 <rclc_executor_spin_some.part.0+0x208>
 800cccc:	68ab      	ldr	r3, [r5, #8]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d0d6      	beq.n	800cc80 <rclc_executor_spin_some.part.0+0x208>
 800ccd2:	f04f 0800 	mov.w	r8, #0
 800ccd6:	f240 1991 	movw	r9, #401	@ 0x191
 800ccda:	f240 2a59 	movw	sl, #601	@ 0x259
 800ccde:	e00e      	b.n	800ccfe <rclc_executor_spin_some.part.0+0x286>
 800cce0:	f813 300b 	ldrb.w	r3, [r3, fp]
 800cce4:	2b08      	cmp	r3, #8
 800cce6:	d033      	beq.n	800cd50 <rclc_executor_spin_some.part.0+0x2d8>
 800cce8:	2b09      	cmp	r3, #9
 800ccea:	d028      	beq.n	800cd3e <rclc_executor_spin_some.part.0+0x2c6>
 800ccec:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800ccf0:	b9fb      	cbnz	r3, 800cd32 <rclc_executor_spin_some.part.0+0x2ba>
 800ccf2:	68ab      	ldr	r3, [r5, #8]
 800ccf4:	f108 0801 	add.w	r8, r8, #1
 800ccf8:	4598      	cmp	r8, r3
 800ccfa:	d2b7      	bcs.n	800cc6c <rclc_executor_spin_some.part.0+0x1f4>
 800ccfc:	2400      	movs	r4, #0
 800ccfe:	6868      	ldr	r0, [r5, #4]
 800cd00:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800cd04:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800cd08:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d0b7      	beq.n	800cc80 <rclc_executor_spin_some.part.0+0x208>
 800cd10:	4631      	mov	r1, r6
 800cd12:	f7ff fac7 	bl	800c2a4 <_rclc_take_new_data>
 800cd16:	b118      	cbz	r0, 800cd20 <rclc_executor_spin_some.part.0+0x2a8>
 800cd18:	4548      	cmp	r0, r9
 800cd1a:	d001      	beq.n	800cd20 <rclc_executor_spin_some.part.0+0x2a8>
 800cd1c:	4550      	cmp	r0, sl
 800cd1e:	d10c      	bne.n	800cd3a <rclc_executor_spin_some.part.0+0x2c2>
 800cd20:	686b      	ldr	r3, [r5, #4]
 800cd22:	eb13 000b 	adds.w	r0, r3, fp
 800cd26:	d021      	beq.n	800cd6c <rclc_executor_spin_some.part.0+0x2f4>
 800cd28:	7842      	ldrb	r2, [r0, #1]
 800cd2a:	2a00      	cmp	r2, #0
 800cd2c:	d0d8      	beq.n	800cce0 <rclc_executor_spin_some.part.0+0x268>
 800cd2e:	2a01      	cmp	r2, #1
 800cd30:	d1df      	bne.n	800ccf2 <rclc_executor_spin_some.part.0+0x27a>
 800cd32:	f7ff fc2b 	bl	800c58c <_rclc_execute.part.0>
 800cd36:	2800      	cmp	r0, #0
 800cd38:	d0db      	beq.n	800ccf2 <rclc_executor_spin_some.part.0+0x27a>
 800cd3a:	4607      	mov	r7, r0
 800cd3c:	e796      	b.n	800cc6c <rclc_executor_spin_some.part.0+0x1f4>
 800cd3e:	6843      	ldr	r3, [r0, #4]
 800cd40:	6a1a      	ldr	r2, [r3, #32]
 800cd42:	2a00      	cmp	r2, #0
 800cd44:	d1f5      	bne.n	800cd32 <rclc_executor_spin_some.part.0+0x2ba>
 800cd46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d0d1      	beq.n	800ccf2 <rclc_executor_spin_some.part.0+0x27a>
 800cd4e:	e7f0      	b.n	800cd32 <rclc_executor_spin_some.part.0+0x2ba>
 800cd50:	6843      	ldr	r3, [r0, #4]
 800cd52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cd54:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800cd58:	d1eb      	bne.n	800cd32 <rclc_executor_spin_some.part.0+0x2ba>
 800cd5a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800cd5e:	2a00      	cmp	r2, #0
 800cd60:	d1e7      	bne.n	800cd32 <rclc_executor_spin_some.part.0+0x2ba>
 800cd62:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d0c3      	beq.n	800ccf2 <rclc_executor_spin_some.part.0+0x27a>
 800cd6a:	e7e2      	b.n	800cd32 <rclc_executor_spin_some.part.0+0x2ba>
 800cd6c:	270b      	movs	r7, #11
 800cd6e:	e77d      	b.n	800cc6c <rclc_executor_spin_some.part.0+0x1f4>
 800cd70:	686a      	ldr	r2, [r5, #4]
 800cd72:	e6e2      	b.n	800cb3a <rclc_executor_spin_some.part.0+0xc2>
 800cd74:	686a      	ldr	r2, [r5, #4]
 800cd76:	e7a2      	b.n	800ccbe <rclc_executor_spin_some.part.0+0x246>
 800cd78:	6842      	ldr	r2, [r0, #4]
 800cd7a:	6a11      	ldr	r1, [r2, #32]
 800cd7c:	2900      	cmp	r1, #0
 800cd7e:	f47f af21 	bne.w	800cbc4 <rclc_executor_spin_some.part.0+0x14c>
 800cd82:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800cd86:	2a00      	cmp	r2, #0
 800cd88:	f43f af0a 	beq.w	800cba0 <rclc_executor_spin_some.part.0+0x128>
 800cd8c:	e71a      	b.n	800cbc4 <rclc_executor_spin_some.part.0+0x14c>
 800cd8e:	6842      	ldr	r2, [r0, #4]
 800cd90:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800cd92:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800cd96:	f47f af15 	bne.w	800cbc4 <rclc_executor_spin_some.part.0+0x14c>
 800cd9a:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800cd9e:	2900      	cmp	r1, #0
 800cda0:	f47f af10 	bne.w	800cbc4 <rclc_executor_spin_some.part.0+0x14c>
 800cda4:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800cda8:	2a00      	cmp	r2, #0
 800cdaa:	f43f aef9 	beq.w	800cba0 <rclc_executor_spin_some.part.0+0x128>
 800cdae:	e709      	b.n	800cbc4 <rclc_executor_spin_some.part.0+0x14c>
 800cdb0:	686a      	ldr	r2, [r5, #4]
 800cdb2:	461c      	mov	r4, r3
 800cdb4:	e783      	b.n	800ccbe <rclc_executor_spin_some.part.0+0x246>
 800cdb6:	686a      	ldr	r2, [r5, #4]
 800cdb8:	461c      	mov	r4, r3
 800cdba:	e6be      	b.n	800cb3a <rclc_executor_spin_some.part.0+0xc2>

0800cdbc <rclc_executor_spin>:
 800cdbc:	b1d0      	cbz	r0, 800cdf4 <rclc_executor_spin+0x38>
 800cdbe:	b510      	push	{r4, lr}
 800cdc0:	4604      	mov	r4, r0
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800cdc8:	6820      	ldr	r0, [r4, #0]
 800cdca:	e9cd 2300 	strd	r2, r3, [sp]
 800cdce:	f005 ff97 	bl	8012d00 <rcl_context_is_valid>
 800cdd2:	4601      	mov	r1, r0
 800cdd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdd8:	4620      	mov	r0, r4
 800cdda:	b131      	cbz	r1, 800cdea <rclc_executor_spin+0x2e>
 800cddc:	f7ff fe4c 	bl	800ca78 <rclc_executor_spin_some.part.0>
 800cde0:	f030 0302 	bics.w	r3, r0, #2
 800cde4:	d0ee      	beq.n	800cdc4 <rclc_executor_spin+0x8>
 800cde6:	b002      	add	sp, #8
 800cde8:	bd10      	pop	{r4, pc}
 800cdea:	f000 fa21 	bl	800d230 <rcutils_reset_error>
 800cdee:	2001      	movs	r0, #1
 800cdf0:	b002      	add	sp, #8
 800cdf2:	bd10      	pop	{r4, pc}
 800cdf4:	200b      	movs	r0, #11
 800cdf6:	4770      	bx	lr

0800cdf8 <rclc_executor_handle_counters_zero_init>:
 800cdf8:	b130      	cbz	r0, 800ce08 <rclc_executor_handle_counters_zero_init+0x10>
 800cdfa:	b508      	push	{r3, lr}
 800cdfc:	2220      	movs	r2, #32
 800cdfe:	2100      	movs	r1, #0
 800ce00:	f00a fd02 	bl	8017808 <memset>
 800ce04:	2000      	movs	r0, #0
 800ce06:	bd08      	pop	{r3, pc}
 800ce08:	200b      	movs	r0, #11
 800ce0a:	4770      	bx	lr
 800ce0c:	0000      	movs	r0, r0
	...

0800ce10 <rclc_executor_handle_init>:
 800ce10:	b168      	cbz	r0, 800ce2e <rclc_executor_handle_init+0x1e>
 800ce12:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800ce38 <rclc_executor_handle_init+0x28>
 800ce16:	2300      	movs	r3, #0
 800ce18:	220b      	movs	r2, #11
 800ce1a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800ce1e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800ce22:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800ce26:	8002      	strh	r2, [r0, #0]
 800ce28:	8703      	strh	r3, [r0, #56]	@ 0x38
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	4770      	bx	lr
 800ce2e:	200b      	movs	r0, #11
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop
 800ce34:	f3af 8000 	nop.w
	...

0800ce40 <rclc_support_init_with_options>:
 800ce40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce44:	b083      	sub	sp, #12
 800ce46:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ce48:	b340      	cbz	r0, 800ce9c <rclc_support_init_with_options+0x5c>
 800ce4a:	461d      	mov	r5, r3
 800ce4c:	b333      	cbz	r3, 800ce9c <rclc_support_init_with_options+0x5c>
 800ce4e:	b32e      	cbz	r6, 800ce9c <rclc_support_init_with_options+0x5c>
 800ce50:	46e9      	mov	r9, sp
 800ce52:	4604      	mov	r4, r0
 800ce54:	4648      	mov	r0, r9
 800ce56:	460f      	mov	r7, r1
 800ce58:	4690      	mov	r8, r2
 800ce5a:	f005 ff47 	bl	8012cec <rcl_get_zero_initialized_context>
 800ce5e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ce62:	462a      	mov	r2, r5
 800ce64:	e884 0003 	stmia.w	r4, {r0, r1}
 800ce68:	4623      	mov	r3, r4
 800ce6a:	4641      	mov	r1, r8
 800ce6c:	4638      	mov	r0, r7
 800ce6e:	f006 fa1f 	bl	80132b0 <rcl_init>
 800ce72:	4605      	mov	r5, r0
 800ce74:	b960      	cbnz	r0, 800ce90 <rclc_support_init_with_options+0x50>
 800ce76:	60a6      	str	r6, [r4, #8]
 800ce78:	4632      	mov	r2, r6
 800ce7a:	f104 010c 	add.w	r1, r4, #12
 800ce7e:	2003      	movs	r0, #3
 800ce80:	f006 fd20 	bl	80138c4 <rcl_clock_init>
 800ce84:	4605      	mov	r5, r0
 800ce86:	b918      	cbnz	r0, 800ce90 <rclc_support_init_with_options+0x50>
 800ce88:	4628      	mov	r0, r5
 800ce8a:	b003      	add	sp, #12
 800ce8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce90:	f000 f9ce 	bl	800d230 <rcutils_reset_error>
 800ce94:	4628      	mov	r0, r5
 800ce96:	b003      	add	sp, #12
 800ce98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce9c:	250b      	movs	r5, #11
 800ce9e:	4628      	mov	r0, r5
 800cea0:	b003      	add	sp, #12
 800cea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cea6:	bf00      	nop

0800cea8 <rclc_node_init_default>:
 800cea8:	b3b8      	cbz	r0, 800cf1a <rclc_node_init_default+0x72>
 800ceaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ceae:	460d      	mov	r5, r1
 800ceb0:	b0a1      	sub	sp, #132	@ 0x84
 800ceb2:	b329      	cbz	r1, 800cf00 <rclc_node_init_default+0x58>
 800ceb4:	4616      	mov	r6, r2
 800ceb6:	b31a      	cbz	r2, 800cf00 <rclc_node_init_default+0x58>
 800ceb8:	461f      	mov	r7, r3
 800ceba:	b30b      	cbz	r3, 800cf00 <rclc_node_init_default+0x58>
 800cebc:	f10d 0810 	add.w	r8, sp, #16
 800cec0:	4604      	mov	r4, r0
 800cec2:	4640      	mov	r0, r8
 800cec4:	f7fe fe10 	bl	800bae8 <rcl_get_zero_initialized_node>
 800cec8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cecc:	f10d 0918 	add.w	r9, sp, #24
 800ced0:	e884 0003 	stmia.w	r4, {r0, r1}
 800ced4:	4648      	mov	r0, r9
 800ced6:	f7fe ff7f 	bl	800bdd8 <rcl_node_get_default_options>
 800ceda:	4640      	mov	r0, r8
 800cedc:	f7fe fe04 	bl	800bae8 <rcl_get_zero_initialized_node>
 800cee0:	f8cd 9000 	str.w	r9, [sp]
 800cee4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cee8:	463b      	mov	r3, r7
 800ceea:	e884 0003 	stmia.w	r4, {r0, r1}
 800ceee:	4632      	mov	r2, r6
 800cef0:	4629      	mov	r1, r5
 800cef2:	4620      	mov	r0, r4
 800cef4:	f7fe fe02 	bl	800bafc <rcl_node_init>
 800cef8:	b930      	cbnz	r0, 800cf08 <rclc_node_init_default+0x60>
 800cefa:	b021      	add	sp, #132	@ 0x84
 800cefc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf00:	200b      	movs	r0, #11
 800cf02:	b021      	add	sp, #132	@ 0x84
 800cf04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf08:	9003      	str	r0, [sp, #12]
 800cf0a:	f000 f991 	bl	800d230 <rcutils_reset_error>
 800cf0e:	f000 f98f 	bl	800d230 <rcutils_reset_error>
 800cf12:	9803      	ldr	r0, [sp, #12]
 800cf14:	b021      	add	sp, #132	@ 0x84
 800cf16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf1a:	200b      	movs	r0, #11
 800cf1c:	4770      	bx	lr
 800cf1e:	bf00      	nop

0800cf20 <rclc_publisher_init_default>:
 800cf20:	b368      	cbz	r0, 800cf7e <rclc_publisher_init_default+0x5e>
 800cf22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf26:	460d      	mov	r5, r1
 800cf28:	b0a0      	sub	sp, #128	@ 0x80
 800cf2a:	b321      	cbz	r1, 800cf76 <rclc_publisher_init_default+0x56>
 800cf2c:	4616      	mov	r6, r2
 800cf2e:	b312      	cbz	r2, 800cf76 <rclc_publisher_init_default+0x56>
 800cf30:	461f      	mov	r7, r3
 800cf32:	b303      	cbz	r3, 800cf76 <rclc_publisher_init_default+0x56>
 800cf34:	4604      	mov	r4, r0
 800cf36:	f7ff f823 	bl	800bf80 <rcl_get_zero_initialized_publisher>
 800cf3a:	f10d 0810 	add.w	r8, sp, #16
 800cf3e:	6020      	str	r0, [r4, #0]
 800cf40:	4640      	mov	r0, r8
 800cf42:	f7ff f8b9 	bl	800c0b8 <rcl_publisher_get_default_options>
 800cf46:	490f      	ldr	r1, [pc, #60]	@ (800cf84 <rclc_publisher_init_default+0x64>)
 800cf48:	2250      	movs	r2, #80	@ 0x50
 800cf4a:	4640      	mov	r0, r8
 800cf4c:	f00a fd25 	bl	801799a <memcpy>
 800cf50:	f8cd 8000 	str.w	r8, [sp]
 800cf54:	463b      	mov	r3, r7
 800cf56:	4632      	mov	r2, r6
 800cf58:	4629      	mov	r1, r5
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	f7ff f816 	bl	800bf8c <rcl_publisher_init>
 800cf60:	b910      	cbnz	r0, 800cf68 <rclc_publisher_init_default+0x48>
 800cf62:	b020      	add	sp, #128	@ 0x80
 800cf64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf68:	9003      	str	r0, [sp, #12]
 800cf6a:	f000 f961 	bl	800d230 <rcutils_reset_error>
 800cf6e:	9803      	ldr	r0, [sp, #12]
 800cf70:	b020      	add	sp, #128	@ 0x80
 800cf72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf76:	200b      	movs	r0, #11
 800cf78:	b020      	add	sp, #128	@ 0x80
 800cf7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf7e:	200b      	movs	r0, #11
 800cf80:	4770      	bx	lr
 800cf82:	bf00      	nop
 800cf84:	08018f90 	.word	0x08018f90

0800cf88 <rclc_timer_init_default>:
 800cf88:	b360      	cbz	r0, 800cfe4 <rclc_timer_init_default+0x5c>
 800cf8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf8e:	460e      	mov	r6, r1
 800cf90:	b08a      	sub	sp, #40	@ 0x28
 800cf92:	b319      	cbz	r1, 800cfdc <rclc_timer_init_default+0x54>
 800cf94:	4690      	mov	r8, r2
 800cf96:	461f      	mov	r7, r3
 800cf98:	4605      	mov	r5, r0
 800cf9a:	f006 fe71 	bl	8013c80 <rcl_get_zero_initialized_timer>
 800cf9e:	68b4      	ldr	r4, [r6, #8]
 800cfa0:	6028      	str	r0, [r5, #0]
 800cfa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cfa4:	f10d 0c0c 	add.w	ip, sp, #12
 800cfa8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cfac:	6823      	ldr	r3, [r4, #0]
 800cfae:	f8cc 3000 	str.w	r3, [ip]
 800cfb2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cfb4:	9302      	str	r3, [sp, #8]
 800cfb6:	e9cd 8700 	strd	r8, r7, [sp]
 800cfba:	4628      	mov	r0, r5
 800cfbc:	4632      	mov	r2, r6
 800cfbe:	f106 010c 	add.w	r1, r6, #12
 800cfc2:	f006 fe65 	bl	8013c90 <rcl_timer_init>
 800cfc6:	b910      	cbnz	r0, 800cfce <rclc_timer_init_default+0x46>
 800cfc8:	b00a      	add	sp, #40	@ 0x28
 800cfca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfce:	9009      	str	r0, [sp, #36]	@ 0x24
 800cfd0:	f000 f92e 	bl	800d230 <rcutils_reset_error>
 800cfd4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cfd6:	b00a      	add	sp, #40	@ 0x28
 800cfd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfdc:	200b      	movs	r0, #11
 800cfde:	b00a      	add	sp, #40	@ 0x28
 800cfe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfe4:	200b      	movs	r0, #11
 800cfe6:	4770      	bx	lr

0800cfe8 <__default_zero_allocate>:
 800cfe8:	f00a b824 	b.w	8017034 <calloc>

0800cfec <__default_reallocate>:
 800cfec:	f00a b9b0 	b.w	8017350 <realloc>

0800cff0 <__default_deallocate>:
 800cff0:	f00a b88c 	b.w	801710c <free>

0800cff4 <__default_allocate>:
 800cff4:	f00a b882 	b.w	80170fc <malloc>

0800cff8 <rcutils_get_zero_initialized_allocator>:
 800cff8:	b510      	push	{r4, lr}
 800cffa:	4c05      	ldr	r4, [pc, #20]	@ (800d010 <rcutils_get_zero_initialized_allocator+0x18>)
 800cffc:	4686      	mov	lr, r0
 800cffe:	4684      	mov	ip, r0
 800d000:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d002:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d006:	6823      	ldr	r3, [r4, #0]
 800d008:	f8cc 3000 	str.w	r3, [ip]
 800d00c:	4670      	mov	r0, lr
 800d00e:	bd10      	pop	{r4, pc}
 800d010:	08018fe0 	.word	0x08018fe0

0800d014 <rcutils_set_default_allocator>:
 800d014:	b1a8      	cbz	r0, 800d042 <rcutils_set_default_allocator+0x2e>
 800d016:	6802      	ldr	r2, [r0, #0]
 800d018:	b1a2      	cbz	r2, 800d044 <rcutils_set_default_allocator+0x30>
 800d01a:	6841      	ldr	r1, [r0, #4]
 800d01c:	b1a1      	cbz	r1, 800d048 <rcutils_set_default_allocator+0x34>
 800d01e:	b410      	push	{r4}
 800d020:	68c4      	ldr	r4, [r0, #12]
 800d022:	b164      	cbz	r4, 800d03e <rcutils_set_default_allocator+0x2a>
 800d024:	6880      	ldr	r0, [r0, #8]
 800d026:	b138      	cbz	r0, 800d038 <rcutils_set_default_allocator+0x24>
 800d028:	4b08      	ldr	r3, [pc, #32]	@ (800d04c <rcutils_set_default_allocator+0x38>)
 800d02a:	601a      	str	r2, [r3, #0]
 800d02c:	2200      	movs	r2, #0
 800d02e:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800d032:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800d036:	2001      	movs	r0, #1
 800d038:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d03c:	4770      	bx	lr
 800d03e:	4620      	mov	r0, r4
 800d040:	e7fa      	b.n	800d038 <rcutils_set_default_allocator+0x24>
 800d042:	4770      	bx	lr
 800d044:	4610      	mov	r0, r2
 800d046:	4770      	bx	lr
 800d048:	4608      	mov	r0, r1
 800d04a:	4770      	bx	lr
 800d04c:	20000310 	.word	0x20000310

0800d050 <rcutils_get_default_allocator>:
 800d050:	b510      	push	{r4, lr}
 800d052:	4c05      	ldr	r4, [pc, #20]	@ (800d068 <rcutils_get_default_allocator+0x18>)
 800d054:	4686      	mov	lr, r0
 800d056:	4684      	mov	ip, r0
 800d058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d05a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d05e:	6823      	ldr	r3, [r4, #0]
 800d060:	f8cc 3000 	str.w	r3, [ip]
 800d064:	4670      	mov	r0, lr
 800d066:	bd10      	pop	{r4, pc}
 800d068:	20000310 	.word	0x20000310

0800d06c <rcutils_allocator_is_valid>:
 800d06c:	b158      	cbz	r0, 800d086 <rcutils_allocator_is_valid+0x1a>
 800d06e:	6803      	ldr	r3, [r0, #0]
 800d070:	b143      	cbz	r3, 800d084 <rcutils_allocator_is_valid+0x18>
 800d072:	6843      	ldr	r3, [r0, #4]
 800d074:	b133      	cbz	r3, 800d084 <rcutils_allocator_is_valid+0x18>
 800d076:	68c3      	ldr	r3, [r0, #12]
 800d078:	b123      	cbz	r3, 800d084 <rcutils_allocator_is_valid+0x18>
 800d07a:	6880      	ldr	r0, [r0, #8]
 800d07c:	3800      	subs	r0, #0
 800d07e:	bf18      	it	ne
 800d080:	2001      	movne	r0, #1
 800d082:	4770      	bx	lr
 800d084:	4618      	mov	r0, r3
 800d086:	4770      	bx	lr

0800d088 <__atomic_load_8>:
 800d088:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800d08c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800d090:	4a15      	ldr	r2, [pc, #84]	@ (800d0e8 <__atomic_load_8+0x60>)
 800d092:	4b16      	ldr	r3, [pc, #88]	@ (800d0ec <__atomic_load_8+0x64>)
 800d094:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800d098:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800d09c:	fb02 f101 	mul.w	r1, r2, r1
 800d0a0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800d0a4:	fba3 2301 	umull	r2, r3, r3, r1
 800d0a8:	091b      	lsrs	r3, r3, #4
 800d0aa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800d0ae:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800d0b2:	b4d0      	push	{r4, r6, r7}
 800d0b4:	4c0e      	ldr	r4, [pc, #56]	@ (800d0f0 <__atomic_load_8+0x68>)
 800d0b6:	1ac9      	subs	r1, r1, r3
 800d0b8:	1862      	adds	r2, r4, r1
 800d0ba:	f04f 0c01 	mov.w	ip, #1
 800d0be:	e8d2 3f4f 	ldrexb	r3, [r2]
 800d0c2:	e8c2 cf46 	strexb	r6, ip, [r2]
 800d0c6:	2e00      	cmp	r6, #0
 800d0c8:	d1f9      	bne.n	800d0be <__atomic_load_8+0x36>
 800d0ca:	f3bf 8f5b 	dmb	ish
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d1f4      	bne.n	800d0be <__atomic_load_8+0x36>
 800d0d4:	e9d0 6700 	ldrd	r6, r7, [r0]
 800d0d8:	f3bf 8f5b 	dmb	ish
 800d0dc:	5463      	strb	r3, [r4, r1]
 800d0de:	4630      	mov	r0, r6
 800d0e0:	4639      	mov	r1, r7
 800d0e2:	bcd0      	pop	{r4, r6, r7}
 800d0e4:	4770      	bx	lr
 800d0e6:	bf00      	nop
 800d0e8:	27d4eb2d 	.word	0x27d4eb2d
 800d0ec:	b21642c9 	.word	0xb21642c9
 800d0f0:	20006628 	.word	0x20006628

0800d0f4 <__atomic_store_8>:
 800d0f4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800d0f8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800d0fc:	b570      	push	{r4, r5, r6, lr}
 800d0fe:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800d102:	4c14      	ldr	r4, [pc, #80]	@ (800d154 <__atomic_store_8+0x60>)
 800d104:	4d14      	ldr	r5, [pc, #80]	@ (800d158 <__atomic_store_8+0x64>)
 800d106:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800d10a:	fb04 f101 	mul.w	r1, r4, r1
 800d10e:	4c13      	ldr	r4, [pc, #76]	@ (800d15c <__atomic_store_8+0x68>)
 800d110:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800d114:	fba4 4e01 	umull	r4, lr, r4, r1
 800d118:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800d11c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800d120:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 800d124:	eba1 0e0e 	sub.w	lr, r1, lr
 800d128:	eb05 0c0e 	add.w	ip, r5, lr
 800d12c:	f04f 0401 	mov.w	r4, #1
 800d130:	e8dc 1f4f 	ldrexb	r1, [ip]
 800d134:	e8cc 4f46 	strexb	r6, r4, [ip]
 800d138:	2e00      	cmp	r6, #0
 800d13a:	d1f9      	bne.n	800d130 <__atomic_store_8+0x3c>
 800d13c:	f3bf 8f5b 	dmb	ish
 800d140:	b2c9      	uxtb	r1, r1
 800d142:	2900      	cmp	r1, #0
 800d144:	d1f4      	bne.n	800d130 <__atomic_store_8+0x3c>
 800d146:	e9c0 2300 	strd	r2, r3, [r0]
 800d14a:	f3bf 8f5b 	dmb	ish
 800d14e:	f805 100e 	strb.w	r1, [r5, lr]
 800d152:	bd70      	pop	{r4, r5, r6, pc}
 800d154:	27d4eb2d 	.word	0x27d4eb2d
 800d158:	20006628 	.word	0x20006628
 800d15c:	b21642c9 	.word	0xb21642c9

0800d160 <__atomic_exchange_8>:
 800d160:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 800d164:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 800d168:	4916      	ldr	r1, [pc, #88]	@ (800d1c4 <__atomic_exchange_8+0x64>)
 800d16a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800d16e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 800d172:	fb01 fc0c 	mul.w	ip, r1, ip
 800d176:	4914      	ldr	r1, [pc, #80]	@ (800d1c8 <__atomic_exchange_8+0x68>)
 800d178:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 800d17c:	b570      	push	{r4, r5, r6, lr}
 800d17e:	4605      	mov	r5, r0
 800d180:	fba1 010c 	umull	r0, r1, r1, ip
 800d184:	0909      	lsrs	r1, r1, #4
 800d186:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800d18a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 800d18e:	4e0f      	ldr	r6, [pc, #60]	@ (800d1cc <__atomic_exchange_8+0x6c>)
 800d190:	ebac 0c01 	sub.w	ip, ip, r1
 800d194:	eb06 010c 	add.w	r1, r6, ip
 800d198:	f04f 0e01 	mov.w	lr, #1
 800d19c:	e8d1 4f4f 	ldrexb	r4, [r1]
 800d1a0:	e8c1 ef40 	strexb	r0, lr, [r1]
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	d1f9      	bne.n	800d19c <__atomic_exchange_8+0x3c>
 800d1a8:	f3bf 8f5b 	dmb	ish
 800d1ac:	b2e4      	uxtb	r4, r4
 800d1ae:	2c00      	cmp	r4, #0
 800d1b0:	d1f4      	bne.n	800d19c <__atomic_exchange_8+0x3c>
 800d1b2:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d1b6:	e9c5 2300 	strd	r2, r3, [r5]
 800d1ba:	f3bf 8f5b 	dmb	ish
 800d1be:	f806 400c 	strb.w	r4, [r6, ip]
 800d1c2:	bd70      	pop	{r4, r5, r6, pc}
 800d1c4:	27d4eb2d 	.word	0x27d4eb2d
 800d1c8:	b21642c9 	.word	0xb21642c9
 800d1cc:	20006628 	.word	0x20006628

0800d1d0 <rcutils_get_env>:
 800d1d0:	b168      	cbz	r0, 800d1ee <rcutils_get_env+0x1e>
 800d1d2:	b510      	push	{r4, lr}
 800d1d4:	460c      	mov	r4, r1
 800d1d6:	b129      	cbz	r1, 800d1e4 <rcutils_get_env+0x14>
 800d1d8:	f009 ff48 	bl	801706c <getenv>
 800d1dc:	b120      	cbz	r0, 800d1e8 <rcutils_get_env+0x18>
 800d1de:	6020      	str	r0, [r4, #0]
 800d1e0:	2000      	movs	r0, #0
 800d1e2:	bd10      	pop	{r4, pc}
 800d1e4:	4803      	ldr	r0, [pc, #12]	@ (800d1f4 <rcutils_get_env+0x24>)
 800d1e6:	bd10      	pop	{r4, pc}
 800d1e8:	4b03      	ldr	r3, [pc, #12]	@ (800d1f8 <rcutils_get_env+0x28>)
 800d1ea:	6023      	str	r3, [r4, #0]
 800d1ec:	bd10      	pop	{r4, pc}
 800d1ee:	4803      	ldr	r0, [pc, #12]	@ (800d1fc <rcutils_get_env+0x2c>)
 800d1f0:	4770      	bx	lr
 800d1f2:	bf00      	nop
 800d1f4:	08019010 	.word	0x08019010
 800d1f8:	08019138 	.word	0x08019138
 800d1fc:	08018ff4 	.word	0x08018ff4

0800d200 <rcutils_get_error_string>:
 800d200:	4b06      	ldr	r3, [pc, #24]	@ (800d21c <rcutils_get_error_string+0x1c>)
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	b13b      	cbz	r3, 800d216 <rcutils_get_error_string+0x16>
 800d206:	4b06      	ldr	r3, [pc, #24]	@ (800d220 <rcutils_get_error_string+0x20>)
 800d208:	781a      	ldrb	r2, [r3, #0]
 800d20a:	b90a      	cbnz	r2, 800d210 <rcutils_get_error_string+0x10>
 800d20c:	2201      	movs	r2, #1
 800d20e:	701a      	strb	r2, [r3, #0]
 800d210:	4b04      	ldr	r3, [pc, #16]	@ (800d224 <rcutils_get_error_string+0x24>)
 800d212:	7818      	ldrb	r0, [r3, #0]
 800d214:	4770      	bx	lr
 800d216:	4b04      	ldr	r3, [pc, #16]	@ (800d228 <rcutils_get_error_string+0x28>)
 800d218:	7818      	ldrb	r0, [r3, #0]
 800d21a:	4770      	bx	lr
 800d21c:	2000663f 	.word	0x2000663f
 800d220:	20006651 	.word	0x20006651
 800d224:	20006650 	.word	0x20006650
 800d228:	0801902c 	.word	0x0801902c
 800d22c:	00000000 	.word	0x00000000

0800d230 <rcutils_reset_error>:
 800d230:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800d250 <rcutils_reset_error+0x20>
 800d234:	4a08      	ldr	r2, [pc, #32]	@ (800d258 <rcutils_reset_error+0x28>)
 800d236:	4809      	ldr	r0, [pc, #36]	@ (800d25c <rcutils_reset_error+0x2c>)
 800d238:	4909      	ldr	r1, [pc, #36]	@ (800d260 <rcutils_reset_error+0x30>)
 800d23a:	2300      	movs	r3, #0
 800d23c:	8013      	strh	r3, [r2, #0]
 800d23e:	ed82 7b02 	vstr	d7, [r2, #8]
 800d242:	4a08      	ldr	r2, [pc, #32]	@ (800d264 <rcutils_reset_error+0x34>)
 800d244:	7003      	strb	r3, [r0, #0]
 800d246:	700b      	strb	r3, [r1, #0]
 800d248:	7013      	strb	r3, [r2, #0]
 800d24a:	4770      	bx	lr
 800d24c:	f3af 8000 	nop.w
	...
 800d258:	20006640 	.word	0x20006640
 800d25c:	20006651 	.word	0x20006651
 800d260:	20006650 	.word	0x20006650
 800d264:	2000663f 	.word	0x2000663f

0800d268 <rcutils_format_string_limit>:
 800d268:	b40f      	push	{r0, r1, r2, r3}
 800d26a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d26c:	b083      	sub	sp, #12
 800d26e:	ac08      	add	r4, sp, #32
 800d270:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800d272:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d276:	b34e      	cbz	r6, 800d2cc <rcutils_format_string_limit+0x64>
 800d278:	a808      	add	r0, sp, #32
 800d27a:	f7ff fef7 	bl	800d06c <rcutils_allocator_is_valid>
 800d27e:	b328      	cbz	r0, 800d2cc <rcutils_format_string_limit+0x64>
 800d280:	2100      	movs	r1, #0
 800d282:	ab0f      	add	r3, sp, #60	@ 0x3c
 800d284:	4632      	mov	r2, r6
 800d286:	4608      	mov	r0, r1
 800d288:	e9cd 3300 	strd	r3, r3, [sp]
 800d28c:	f000 f8f4 	bl	800d478 <rcutils_vsnprintf>
 800d290:	1c43      	adds	r3, r0, #1
 800d292:	4605      	mov	r5, r0
 800d294:	d01a      	beq.n	800d2cc <rcutils_format_string_limit+0x64>
 800d296:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d298:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d29a:	1c47      	adds	r7, r0, #1
 800d29c:	429f      	cmp	r7, r3
 800d29e:	bf84      	itt	hi
 800d2a0:	461f      	movhi	r7, r3
 800d2a2:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800d2a6:	4638      	mov	r0, r7
 800d2a8:	9b08      	ldr	r3, [sp, #32]
 800d2aa:	4798      	blx	r3
 800d2ac:	4604      	mov	r4, r0
 800d2ae:	b168      	cbz	r0, 800d2cc <rcutils_format_string_limit+0x64>
 800d2b0:	9b01      	ldr	r3, [sp, #4]
 800d2b2:	4632      	mov	r2, r6
 800d2b4:	4639      	mov	r1, r7
 800d2b6:	f000 f8df 	bl	800d478 <rcutils_vsnprintf>
 800d2ba:	2800      	cmp	r0, #0
 800d2bc:	db02      	blt.n	800d2c4 <rcutils_format_string_limit+0x5c>
 800d2be:	2300      	movs	r3, #0
 800d2c0:	5563      	strb	r3, [r4, r5]
 800d2c2:	e004      	b.n	800d2ce <rcutils_format_string_limit+0x66>
 800d2c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2c6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	4798      	blx	r3
 800d2cc:	2400      	movs	r4, #0
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	b003      	add	sp, #12
 800d2d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d2d6:	b004      	add	sp, #16
 800d2d8:	4770      	bx	lr
 800d2da:	bf00      	nop

0800d2dc <rcutils_repl_str>:
 800d2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e0:	ed2d 8b02 	vpush	{d8}
 800d2e4:	b087      	sub	sp, #28
 800d2e6:	4680      	mov	r8, r0
 800d2e8:	4608      	mov	r0, r1
 800d2ea:	f8cd 8004 	str.w	r8, [sp, #4]
 800d2ee:	ee08 2a10 	vmov	s16, r2
 800d2f2:	468a      	mov	sl, r1
 800d2f4:	4699      	mov	r9, r3
 800d2f6:	f7f2 ff9d 	bl	8000234 <strlen>
 800d2fa:	2600      	movs	r6, #0
 800d2fc:	4647      	mov	r7, r8
 800d2fe:	9002      	str	r0, [sp, #8]
 800d300:	46b3      	mov	fp, r6
 800d302:	2510      	movs	r5, #16
 800d304:	46b0      	mov	r8, r6
 800d306:	e01d      	b.n	800d344 <rcutils_repl_str+0x68>
 800d308:	f10b 0b01 	add.w	fp, fp, #1
 800d30c:	455e      	cmp	r6, fp
 800d30e:	d211      	bcs.n	800d334 <rcutils_repl_str+0x58>
 800d310:	442e      	add	r6, r5
 800d312:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d316:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d31a:	00b1      	lsls	r1, r6, #2
 800d31c:	4798      	blx	r3
 800d31e:	2800      	cmp	r0, #0
 800d320:	f000 8088 	beq.w	800d434 <rcutils_repl_str+0x158>
 800d324:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d328:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800d32c:	4680      	mov	r8, r0
 800d32e:	bf28      	it	cs
 800d330:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800d334:	9a01      	ldr	r2, [sp, #4]
 800d336:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800d33a:	1aa2      	subs	r2, r4, r2
 800d33c:	f843 2c04 	str.w	r2, [r3, #-4]
 800d340:	9b02      	ldr	r3, [sp, #8]
 800d342:	18e7      	adds	r7, r4, r3
 800d344:	4651      	mov	r1, sl
 800d346:	4638      	mov	r0, r7
 800d348:	f00a fa85 	bl	8017856 <strstr>
 800d34c:	4604      	mov	r4, r0
 800d34e:	4640      	mov	r0, r8
 800d350:	2c00      	cmp	r4, #0
 800d352:	d1d9      	bne.n	800d308 <rcutils_repl_str+0x2c>
 800d354:	46b8      	mov	r8, r7
 800d356:	4607      	mov	r7, r0
 800d358:	4640      	mov	r0, r8
 800d35a:	f7f2 ff6b 	bl	8000234 <strlen>
 800d35e:	9b01      	ldr	r3, [sp, #4]
 800d360:	eba8 0303 	sub.w	r3, r8, r3
 800d364:	181c      	adds	r4, r3, r0
 800d366:	9404      	str	r4, [sp, #16]
 800d368:	f1bb 0f00 	cmp.w	fp, #0
 800d36c:	d04a      	beq.n	800d404 <rcutils_repl_str+0x128>
 800d36e:	ee18 0a10 	vmov	r0, s16
 800d372:	f7f2 ff5f 	bl	8000234 <strlen>
 800d376:	9b02      	ldr	r3, [sp, #8]
 800d378:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800d37c:	1ac3      	subs	r3, r0, r3
 800d37e:	fb0b 4303 	mla	r3, fp, r3, r4
 800d382:	461a      	mov	r2, r3
 800d384:	9305      	str	r3, [sp, #20]
 800d386:	4606      	mov	r6, r0
 800d388:	f8d9 3000 	ldr.w	r3, [r9]
 800d38c:	1c50      	adds	r0, r2, #1
 800d38e:	4798      	blx	r3
 800d390:	9003      	str	r0, [sp, #12]
 800d392:	2800      	cmp	r0, #0
 800d394:	d04f      	beq.n	800d436 <rcutils_repl_str+0x15a>
 800d396:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d39a:	683a      	ldr	r2, [r7, #0]
 800d39c:	4641      	mov	r1, r8
 800d39e:	f00a fafc 	bl	801799a <memcpy>
 800d3a2:	683d      	ldr	r5, [r7, #0]
 800d3a4:	9b03      	ldr	r3, [sp, #12]
 800d3a6:	9701      	str	r7, [sp, #4]
 800d3a8:	46ba      	mov	sl, r7
 800d3aa:	441d      	add	r5, r3
 800d3ac:	9f02      	ldr	r7, [sp, #8]
 800d3ae:	f8cd 9008 	str.w	r9, [sp, #8]
 800d3b2:	2401      	movs	r4, #1
 800d3b4:	46d1      	mov	r9, sl
 800d3b6:	ee18 aa10 	vmov	sl, s16
 800d3ba:	e00a      	b.n	800d3d2 <rcutils_repl_str+0xf6>
 800d3bc:	f8d9 5000 	ldr.w	r5, [r9]
 800d3c0:	1aaa      	subs	r2, r5, r2
 800d3c2:	1885      	adds	r5, r0, r2
 800d3c4:	f00a fae9 	bl	801799a <memcpy>
 800d3c8:	45a3      	cmp	fp, r4
 800d3ca:	f104 0201 	add.w	r2, r4, #1
 800d3ce:	d935      	bls.n	800d43c <rcutils_repl_str+0x160>
 800d3d0:	4614      	mov	r4, r2
 800d3d2:	4632      	mov	r2, r6
 800d3d4:	4651      	mov	r1, sl
 800d3d6:	4628      	mov	r0, r5
 800d3d8:	f00a fadf 	bl	801799a <memcpy>
 800d3dc:	f859 2b04 	ldr.w	r2, [r9], #4
 800d3e0:	45a3      	cmp	fp, r4
 800d3e2:	443a      	add	r2, r7
 800d3e4:	eb05 0006 	add.w	r0, r5, r6
 800d3e8:	eb08 0102 	add.w	r1, r8, r2
 800d3ec:	d1e6      	bne.n	800d3bc <rcutils_repl_str+0xe0>
 800d3ee:	9b04      	ldr	r3, [sp, #16]
 800d3f0:	1a9a      	subs	r2, r3, r2
 800d3f2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800d3f6:	f00a fad0 	bl	801799a <memcpy>
 800d3fa:	9a03      	ldr	r2, [sp, #12]
 800d3fc:	9905      	ldr	r1, [sp, #20]
 800d3fe:	2300      	movs	r3, #0
 800d400:	5453      	strb	r3, [r2, r1]
 800d402:	e00b      	b.n	800d41c <rcutils_repl_str+0x140>
 800d404:	4620      	mov	r0, r4
 800d406:	f8d9 3000 	ldr.w	r3, [r9]
 800d40a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800d40e:	3001      	adds	r0, #1
 800d410:	4798      	blx	r3
 800d412:	9003      	str	r0, [sp, #12]
 800d414:	b110      	cbz	r0, 800d41c <rcutils_repl_str+0x140>
 800d416:	9901      	ldr	r1, [sp, #4]
 800d418:	f00a fab7 	bl	801798a <strcpy>
 800d41c:	4638      	mov	r0, r7
 800d41e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d422:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800d426:	4798      	blx	r3
 800d428:	9803      	ldr	r0, [sp, #12]
 800d42a:	b007      	add	sp, #28
 800d42c:	ecbd 8b02 	vpop	{d8}
 800d430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d434:	4647      	mov	r7, r8
 800d436:	2300      	movs	r3, #0
 800d438:	9303      	str	r3, [sp, #12]
 800d43a:	e7ef      	b.n	800d41c <rcutils_repl_str+0x140>
 800d43c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800d440:	e7db      	b.n	800d3fa <rcutils_repl_str+0x11e>
 800d442:	bf00      	nop

0800d444 <rcutils_snprintf>:
 800d444:	b40c      	push	{r2, r3}
 800d446:	b530      	push	{r4, r5, lr}
 800d448:	b083      	sub	sp, #12
 800d44a:	ab06      	add	r3, sp, #24
 800d44c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d450:	9301      	str	r3, [sp, #4]
 800d452:	b152      	cbz	r2, 800d46a <rcutils_snprintf+0x26>
 800d454:	b138      	cbz	r0, 800d466 <rcutils_snprintf+0x22>
 800d456:	b141      	cbz	r1, 800d46a <rcutils_snprintf+0x26>
 800d458:	f00a f99e 	bl	8017798 <vsniprintf>
 800d45c:	b003      	add	sp, #12
 800d45e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d462:	b002      	add	sp, #8
 800d464:	4770      	bx	lr
 800d466:	2900      	cmp	r1, #0
 800d468:	d0f6      	beq.n	800d458 <rcutils_snprintf+0x14>
 800d46a:	f00a fa61 	bl	8017930 <__errno>
 800d46e:	2316      	movs	r3, #22
 800d470:	6003      	str	r3, [r0, #0]
 800d472:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d476:	e7f1      	b.n	800d45c <rcutils_snprintf+0x18>

0800d478 <rcutils_vsnprintf>:
 800d478:	b570      	push	{r4, r5, r6, lr}
 800d47a:	b13a      	cbz	r2, 800d48c <rcutils_vsnprintf+0x14>
 800d47c:	b120      	cbz	r0, 800d488 <rcutils_vsnprintf+0x10>
 800d47e:	b129      	cbz	r1, 800d48c <rcutils_vsnprintf+0x14>
 800d480:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d484:	f00a b988 	b.w	8017798 <vsniprintf>
 800d488:	2900      	cmp	r1, #0
 800d48a:	d0f9      	beq.n	800d480 <rcutils_vsnprintf+0x8>
 800d48c:	f00a fa50 	bl	8017930 <__errno>
 800d490:	2316      	movs	r3, #22
 800d492:	6003      	str	r3, [r0, #0]
 800d494:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d498:	bd70      	pop	{r4, r5, r6, pc}
 800d49a:	bf00      	nop

0800d49c <rcutils_strdup>:
 800d49c:	b084      	sub	sp, #16
 800d49e:	b570      	push	{r4, r5, r6, lr}
 800d4a0:	b082      	sub	sp, #8
 800d4a2:	ac07      	add	r4, sp, #28
 800d4a4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800d4a8:	4605      	mov	r5, r0
 800d4aa:	b1b0      	cbz	r0, 800d4da <rcutils_strdup+0x3e>
 800d4ac:	f7f2 fec2 	bl	8000234 <strlen>
 800d4b0:	1c42      	adds	r2, r0, #1
 800d4b2:	9b07      	ldr	r3, [sp, #28]
 800d4b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d4b6:	9201      	str	r2, [sp, #4]
 800d4b8:	4606      	mov	r6, r0
 800d4ba:	4610      	mov	r0, r2
 800d4bc:	4798      	blx	r3
 800d4be:	4604      	mov	r4, r0
 800d4c0:	b128      	cbz	r0, 800d4ce <rcutils_strdup+0x32>
 800d4c2:	9a01      	ldr	r2, [sp, #4]
 800d4c4:	4629      	mov	r1, r5
 800d4c6:	f00a fa68 	bl	801799a <memcpy>
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	55a3      	strb	r3, [r4, r6]
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	b002      	add	sp, #8
 800d4d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d4d6:	b004      	add	sp, #16
 800d4d8:	4770      	bx	lr
 800d4da:	4604      	mov	r4, r0
 800d4dc:	e7f7      	b.n	800d4ce <rcutils_strdup+0x32>
 800d4de:	bf00      	nop

0800d4e0 <rcutils_strndup>:
 800d4e0:	b082      	sub	sp, #8
 800d4e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4e4:	ac06      	add	r4, sp, #24
 800d4e6:	e884 000c 	stmia.w	r4, {r2, r3}
 800d4ea:	4605      	mov	r5, r0
 800d4ec:	b188      	cbz	r0, 800d512 <rcutils_strndup+0x32>
 800d4ee:	1c4f      	adds	r7, r1, #1
 800d4f0:	460e      	mov	r6, r1
 800d4f2:	4638      	mov	r0, r7
 800d4f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4f6:	4790      	blx	r2
 800d4f8:	4604      	mov	r4, r0
 800d4fa:	b128      	cbz	r0, 800d508 <rcutils_strndup+0x28>
 800d4fc:	463a      	mov	r2, r7
 800d4fe:	4629      	mov	r1, r5
 800d500:	f00a fa4b 	bl	801799a <memcpy>
 800d504:	2300      	movs	r3, #0
 800d506:	55a3      	strb	r3, [r4, r6]
 800d508:	4620      	mov	r0, r4
 800d50a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d50e:	b002      	add	sp, #8
 800d510:	4770      	bx	lr
 800d512:	4604      	mov	r4, r0
 800d514:	e7f8      	b.n	800d508 <rcutils_strndup+0x28>
 800d516:	bf00      	nop

0800d518 <rcutils_get_zero_initialized_string_map>:
 800d518:	4b01      	ldr	r3, [pc, #4]	@ (800d520 <rcutils_get_zero_initialized_string_map+0x8>)
 800d51a:	2000      	movs	r0, #0
 800d51c:	6018      	str	r0, [r3, #0]
 800d51e:	4770      	bx	lr
 800d520:	20006654 	.word	0x20006654

0800d524 <rcutils_string_map_reserve>:
 800d524:	2800      	cmp	r0, #0
 800d526:	d05f      	beq.n	800d5e8 <rcutils_string_map_reserve+0xc4>
 800d528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d52c:	460c      	mov	r4, r1
 800d52e:	6801      	ldr	r1, [r0, #0]
 800d530:	b082      	sub	sp, #8
 800d532:	4605      	mov	r5, r0
 800d534:	b129      	cbz	r1, 800d542 <rcutils_string_map_reserve+0x1e>
 800d536:	68cb      	ldr	r3, [r1, #12]
 800d538:	42a3      	cmp	r3, r4
 800d53a:	d906      	bls.n	800d54a <rcutils_string_map_reserve+0x26>
 800d53c:	461c      	mov	r4, r3
 800d53e:	2900      	cmp	r1, #0
 800d540:	d1f9      	bne.n	800d536 <rcutils_string_map_reserve+0x12>
 800d542:	201f      	movs	r0, #31
 800d544:	b002      	add	sp, #8
 800d546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d54a:	688b      	ldr	r3, [r1, #8]
 800d54c:	42a3      	cmp	r3, r4
 800d54e:	d047      	beq.n	800d5e0 <rcutils_string_map_reserve+0xbc>
 800d550:	6a0e      	ldr	r6, [r1, #32]
 800d552:	2c00      	cmp	r4, #0
 800d554:	d034      	beq.n	800d5c0 <rcutils_string_map_reserve+0x9c>
 800d556:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800d55a:	d243      	bcs.n	800d5e4 <rcutils_string_map_reserve+0xc0>
 800d55c:	00a7      	lsls	r7, r4, #2
 800d55e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800d562:	6808      	ldr	r0, [r1, #0]
 800d564:	4632      	mov	r2, r6
 800d566:	4639      	mov	r1, r7
 800d568:	47c0      	blx	r8
 800d56a:	2800      	cmp	r0, #0
 800d56c:	d03a      	beq.n	800d5e4 <rcutils_string_map_reserve+0xc0>
 800d56e:	682b      	ldr	r3, [r5, #0]
 800d570:	4632      	mov	r2, r6
 800d572:	6018      	str	r0, [r3, #0]
 800d574:	4639      	mov	r1, r7
 800d576:	6858      	ldr	r0, [r3, #4]
 800d578:	47c0      	blx	r8
 800d57a:	2800      	cmp	r0, #0
 800d57c:	d032      	beq.n	800d5e4 <rcutils_string_map_reserve+0xc0>
 800d57e:	682d      	ldr	r5, [r5, #0]
 800d580:	68ab      	ldr	r3, [r5, #8]
 800d582:	6068      	str	r0, [r5, #4]
 800d584:	42a3      	cmp	r3, r4
 800d586:	d226      	bcs.n	800d5d6 <rcutils_string_map_reserve+0xb2>
 800d588:	682a      	ldr	r2, [r5, #0]
 800d58a:	eb00 0c07 	add.w	ip, r0, r7
 800d58e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800d592:	45e6      	cmp	lr, ip
 800d594:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800d598:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800d59c:	d203      	bcs.n	800d5a6 <rcutils_string_map_reserve+0x82>
 800d59e:	eb02 0c07 	add.w	ip, r2, r7
 800d5a2:	4566      	cmp	r6, ip
 800d5a4:	d322      	bcc.n	800d5ec <rcutils_string_map_reserve+0xc8>
 800d5a6:	1ae3      	subs	r3, r4, r3
 800d5a8:	009a      	lsls	r2, r3, #2
 800d5aa:	4670      	mov	r0, lr
 800d5ac:	2100      	movs	r1, #0
 800d5ae:	9201      	str	r2, [sp, #4]
 800d5b0:	f00a f92a 	bl	8017808 <memset>
 800d5b4:	9a01      	ldr	r2, [sp, #4]
 800d5b6:	2100      	movs	r1, #0
 800d5b8:	4630      	mov	r0, r6
 800d5ba:	f00a f925 	bl	8017808 <memset>
 800d5be:	e00a      	b.n	800d5d6 <rcutils_string_map_reserve+0xb2>
 800d5c0:	694f      	ldr	r7, [r1, #20]
 800d5c2:	6808      	ldr	r0, [r1, #0]
 800d5c4:	4631      	mov	r1, r6
 800d5c6:	47b8      	blx	r7
 800d5c8:	682b      	ldr	r3, [r5, #0]
 800d5ca:	4631      	mov	r1, r6
 800d5cc:	6858      	ldr	r0, [r3, #4]
 800d5ce:	601c      	str	r4, [r3, #0]
 800d5d0:	47b8      	blx	r7
 800d5d2:	682d      	ldr	r5, [r5, #0]
 800d5d4:	606c      	str	r4, [r5, #4]
 800d5d6:	2000      	movs	r0, #0
 800d5d8:	60ac      	str	r4, [r5, #8]
 800d5da:	b002      	add	sp, #8
 800d5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5e0:	2000      	movs	r0, #0
 800d5e2:	e7af      	b.n	800d544 <rcutils_string_map_reserve+0x20>
 800d5e4:	200a      	movs	r0, #10
 800d5e6:	e7ad      	b.n	800d544 <rcutils_string_map_reserve+0x20>
 800d5e8:	200b      	movs	r0, #11
 800d5ea:	4770      	bx	lr
 800d5ec:	1f0b      	subs	r3, r1, #4
 800d5ee:	4418      	add	r0, r3
 800d5f0:	4413      	add	r3, r2
 800d5f2:	3a04      	subs	r2, #4
 800d5f4:	4417      	add	r7, r2
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f843 2f04 	str.w	r2, [r3, #4]!
 800d5fc:	42bb      	cmp	r3, r7
 800d5fe:	f840 2f04 	str.w	r2, [r0, #4]!
 800d602:	d1f9      	bne.n	800d5f8 <rcutils_string_map_reserve+0xd4>
 800d604:	e7e7      	b.n	800d5d6 <rcutils_string_map_reserve+0xb2>
 800d606:	bf00      	nop

0800d608 <rcutils_string_map_init>:
 800d608:	b082      	sub	sp, #8
 800d60a:	b570      	push	{r4, r5, r6, lr}
 800d60c:	ac04      	add	r4, sp, #16
 800d60e:	e884 000c 	stmia.w	r4, {r2, r3}
 800d612:	b380      	cbz	r0, 800d676 <rcutils_string_map_init+0x6e>
 800d614:	6806      	ldr	r6, [r0, #0]
 800d616:	4604      	mov	r4, r0
 800d618:	b12e      	cbz	r6, 800d626 <rcutils_string_map_init+0x1e>
 800d61a:	251e      	movs	r5, #30
 800d61c:	4628      	mov	r0, r5
 800d61e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d622:	b002      	add	sp, #8
 800d624:	4770      	bx	lr
 800d626:	a804      	add	r0, sp, #16
 800d628:	460d      	mov	r5, r1
 800d62a:	f7ff fd1f 	bl	800d06c <rcutils_allocator_is_valid>
 800d62e:	b310      	cbz	r0, 800d676 <rcutils_string_map_init+0x6e>
 800d630:	9b04      	ldr	r3, [sp, #16]
 800d632:	9908      	ldr	r1, [sp, #32]
 800d634:	2024      	movs	r0, #36	@ 0x24
 800d636:	4798      	blx	r3
 800d638:	6020      	str	r0, [r4, #0]
 800d63a:	b310      	cbz	r0, 800d682 <rcutils_string_map_init+0x7a>
 800d63c:	f10d 0e10 	add.w	lr, sp, #16
 800d640:	e9c0 6600 	strd	r6, r6, [r0]
 800d644:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800d648:	f100 0c10 	add.w	ip, r0, #16
 800d64c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d650:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d654:	f8de 3000 	ldr.w	r3, [lr]
 800d658:	f8cc 3000 	str.w	r3, [ip]
 800d65c:	4629      	mov	r1, r5
 800d65e:	4620      	mov	r0, r4
 800d660:	f7ff ff60 	bl	800d524 <rcutils_string_map_reserve>
 800d664:	4605      	mov	r5, r0
 800d666:	2800      	cmp	r0, #0
 800d668:	d0d8      	beq.n	800d61c <rcutils_string_map_init+0x14>
 800d66a:	9b05      	ldr	r3, [sp, #20]
 800d66c:	9908      	ldr	r1, [sp, #32]
 800d66e:	6820      	ldr	r0, [r4, #0]
 800d670:	4798      	blx	r3
 800d672:	6026      	str	r6, [r4, #0]
 800d674:	e7d2      	b.n	800d61c <rcutils_string_map_init+0x14>
 800d676:	250b      	movs	r5, #11
 800d678:	4628      	mov	r0, r5
 800d67a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d67e:	b002      	add	sp, #8
 800d680:	4770      	bx	lr
 800d682:	250a      	movs	r5, #10
 800d684:	e7ca      	b.n	800d61c <rcutils_string_map_init+0x14>
 800d686:	bf00      	nop

0800d688 <rcutils_string_map_fini>:
 800d688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d68c:	b082      	sub	sp, #8
 800d68e:	2800      	cmp	r0, #0
 800d690:	d03a      	beq.n	800d708 <rcutils_string_map_fini+0x80>
 800d692:	6804      	ldr	r4, [r0, #0]
 800d694:	4606      	mov	r6, r0
 800d696:	2c00      	cmp	r4, #0
 800d698:	d032      	beq.n	800d700 <rcutils_string_map_fini+0x78>
 800d69a:	68a3      	ldr	r3, [r4, #8]
 800d69c:	b32b      	cbz	r3, 800d6ea <rcutils_string_map_fini+0x62>
 800d69e:	2500      	movs	r5, #0
 800d6a0:	6822      	ldr	r2, [r4, #0]
 800d6a2:	462f      	mov	r7, r5
 800d6a4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800d6a8:	b1e0      	cbz	r0, 800d6e4 <rcutils_string_map_fini+0x5c>
 800d6aa:	6a21      	ldr	r1, [r4, #32]
 800d6ac:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800d6b0:	9101      	str	r1, [sp, #4]
 800d6b2:	47c0      	blx	r8
 800d6b4:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d6b8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800d6bc:	9901      	ldr	r1, [sp, #4]
 800d6be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d6c2:	47c0      	blx	r8
 800d6c4:	68e3      	ldr	r3, [r4, #12]
 800d6c6:	6862      	ldr	r2, [r4, #4]
 800d6c8:	3b01      	subs	r3, #1
 800d6ca:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800d6ce:	60e3      	str	r3, [r4, #12]
 800d6d0:	6834      	ldr	r4, [r6, #0]
 800d6d2:	68a3      	ldr	r3, [r4, #8]
 800d6d4:	3501      	adds	r5, #1
 800d6d6:	429d      	cmp	r5, r3
 800d6d8:	d207      	bcs.n	800d6ea <rcutils_string_map_fini+0x62>
 800d6da:	6822      	ldr	r2, [r4, #0]
 800d6dc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	d1e2      	bne.n	800d6aa <rcutils_string_map_fini+0x22>
 800d6e4:	3501      	adds	r5, #1
 800d6e6:	429d      	cmp	r5, r3
 800d6e8:	d3dc      	bcc.n	800d6a4 <rcutils_string_map_fini+0x1c>
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	f7ff ff19 	bl	800d524 <rcutils_string_map_reserve>
 800d6f2:	4604      	mov	r4, r0
 800d6f4:	b920      	cbnz	r0, 800d700 <rcutils_string_map_fini+0x78>
 800d6f6:	6830      	ldr	r0, [r6, #0]
 800d6f8:	6943      	ldr	r3, [r0, #20]
 800d6fa:	6a01      	ldr	r1, [r0, #32]
 800d6fc:	4798      	blx	r3
 800d6fe:	6034      	str	r4, [r6, #0]
 800d700:	4620      	mov	r0, r4
 800d702:	b002      	add	sp, #8
 800d704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d708:	240b      	movs	r4, #11
 800d70a:	4620      	mov	r0, r4
 800d70c:	b002      	add	sp, #8
 800d70e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d712:	bf00      	nop

0800d714 <rcutils_string_map_getn>:
 800d714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d718:	b300      	cbz	r0, 800d75c <rcutils_string_map_getn+0x48>
 800d71a:	6807      	ldr	r7, [r0, #0]
 800d71c:	b1ff      	cbz	r7, 800d75e <rcutils_string_map_getn+0x4a>
 800d71e:	4688      	mov	r8, r1
 800d720:	b1e1      	cbz	r1, 800d75c <rcutils_string_map_getn+0x48>
 800d722:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800d726:	683e      	ldr	r6, [r7, #0]
 800d728:	f1ba 0f00 	cmp.w	sl, #0
 800d72c:	d016      	beq.n	800d75c <rcutils_string_map_getn+0x48>
 800d72e:	4691      	mov	r9, r2
 800d730:	3e04      	subs	r6, #4
 800d732:	2400      	movs	r4, #0
 800d734:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800d738:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d73c:	4628      	mov	r0, r5
 800d73e:	3401      	adds	r4, #1
 800d740:	b155      	cbz	r5, 800d758 <rcutils_string_map_getn+0x44>
 800d742:	f7f2 fd77 	bl	8000234 <strlen>
 800d746:	4548      	cmp	r0, r9
 800d748:	4602      	mov	r2, r0
 800d74a:	4629      	mov	r1, r5
 800d74c:	bf38      	it	cc
 800d74e:	464a      	movcc	r2, r9
 800d750:	4640      	mov	r0, r8
 800d752:	f00a f86e 	bl	8017832 <strncmp>
 800d756:	b128      	cbz	r0, 800d764 <rcutils_string_map_getn+0x50>
 800d758:	45a2      	cmp	sl, r4
 800d75a:	d1eb      	bne.n	800d734 <rcutils_string_map_getn+0x20>
 800d75c:	2700      	movs	r7, #0
 800d75e:	4638      	mov	r0, r7
 800d760:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f853 700b 	ldr.w	r7, [r3, fp]
 800d76a:	4638      	mov	r0, r7
 800d76c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d770 <rcutils_system_time_now>:
 800d770:	b308      	cbz	r0, 800d7b6 <rcutils_system_time_now+0x46>
 800d772:	b570      	push	{r4, r5, r6, lr}
 800d774:	b084      	sub	sp, #16
 800d776:	4604      	mov	r4, r0
 800d778:	4669      	mov	r1, sp
 800d77a:	2001      	movs	r0, #1
 800d77c:	f7f4 f924 	bl	80019c8 <clock_gettime>
 800d780:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d784:	2d00      	cmp	r5, #0
 800d786:	db13      	blt.n	800d7b0 <rcutils_system_time_now+0x40>
 800d788:	9902      	ldr	r1, [sp, #8]
 800d78a:	2900      	cmp	r1, #0
 800d78c:	db0d      	blt.n	800d7aa <rcutils_system_time_now+0x3a>
 800d78e:	4e0b      	ldr	r6, [pc, #44]	@ (800d7bc <rcutils_system_time_now+0x4c>)
 800d790:	fba3 3206 	umull	r3, r2, r3, r6
 800d794:	185b      	adds	r3, r3, r1
 800d796:	fb06 2205 	mla	r2, r6, r5, r2
 800d79a:	f04f 0000 	mov.w	r0, #0
 800d79e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d7a2:	e9c4 3200 	strd	r3, r2, [r4]
 800d7a6:	b004      	add	sp, #16
 800d7a8:	bd70      	pop	{r4, r5, r6, pc}
 800d7aa:	ea53 0205 	orrs.w	r2, r3, r5
 800d7ae:	d1ee      	bne.n	800d78e <rcutils_system_time_now+0x1e>
 800d7b0:	2002      	movs	r0, #2
 800d7b2:	b004      	add	sp, #16
 800d7b4:	bd70      	pop	{r4, r5, r6, pc}
 800d7b6:	200b      	movs	r0, #11
 800d7b8:	4770      	bx	lr
 800d7ba:	bf00      	nop
 800d7bc:	3b9aca00 	.word	0x3b9aca00

0800d7c0 <rcutils_steady_time_now>:
 800d7c0:	b308      	cbz	r0, 800d806 <rcutils_steady_time_now+0x46>
 800d7c2:	b570      	push	{r4, r5, r6, lr}
 800d7c4:	b084      	sub	sp, #16
 800d7c6:	4604      	mov	r4, r0
 800d7c8:	4669      	mov	r1, sp
 800d7ca:	2000      	movs	r0, #0
 800d7cc:	f7f4 f8fc 	bl	80019c8 <clock_gettime>
 800d7d0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d7d4:	2d00      	cmp	r5, #0
 800d7d6:	db13      	blt.n	800d800 <rcutils_steady_time_now+0x40>
 800d7d8:	9902      	ldr	r1, [sp, #8]
 800d7da:	2900      	cmp	r1, #0
 800d7dc:	db0d      	blt.n	800d7fa <rcutils_steady_time_now+0x3a>
 800d7de:	4e0b      	ldr	r6, [pc, #44]	@ (800d80c <rcutils_steady_time_now+0x4c>)
 800d7e0:	fba3 3206 	umull	r3, r2, r3, r6
 800d7e4:	185b      	adds	r3, r3, r1
 800d7e6:	fb06 2205 	mla	r2, r6, r5, r2
 800d7ea:	f04f 0000 	mov.w	r0, #0
 800d7ee:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d7f2:	e9c4 3200 	strd	r3, r2, [r4]
 800d7f6:	b004      	add	sp, #16
 800d7f8:	bd70      	pop	{r4, r5, r6, pc}
 800d7fa:	ea53 0205 	orrs.w	r2, r3, r5
 800d7fe:	d1ee      	bne.n	800d7de <rcutils_steady_time_now+0x1e>
 800d800:	2002      	movs	r0, #2
 800d802:	b004      	add	sp, #16
 800d804:	bd70      	pop	{r4, r5, r6, pc}
 800d806:	200b      	movs	r0, #11
 800d808:	4770      	bx	lr
 800d80a:	bf00      	nop
 800d80c:	3b9aca00 	.word	0x3b9aca00

0800d810 <rmw_get_zero_initialized_init_options>:
 800d810:	b510      	push	{r4, lr}
 800d812:	2238      	movs	r2, #56	@ 0x38
 800d814:	4604      	mov	r4, r0
 800d816:	2100      	movs	r1, #0
 800d818:	f009 fff6 	bl	8017808 <memset>
 800d81c:	f104 0010 	add.w	r0, r4, #16
 800d820:	f000 f80a 	bl	800d838 <rmw_get_default_security_options>
 800d824:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d828:	60e3      	str	r3, [r4, #12]
 800d82a:	4620      	mov	r0, r4
 800d82c:	bd10      	pop	{r4, pc}
 800d82e:	bf00      	nop

0800d830 <rmw_get_default_publisher_options>:
 800d830:	2200      	movs	r2, #0
 800d832:	6002      	str	r2, [r0, #0]
 800d834:	7102      	strb	r2, [r0, #4]
 800d836:	4770      	bx	lr

0800d838 <rmw_get_default_security_options>:
 800d838:	2200      	movs	r2, #0
 800d83a:	7002      	strb	r2, [r0, #0]
 800d83c:	6042      	str	r2, [r0, #4]
 800d83e:	4770      	bx	lr

0800d840 <rmw_validate_full_topic_name>:
 800d840:	2800      	cmp	r0, #0
 800d842:	d057      	beq.n	800d8f4 <rmw_validate_full_topic_name+0xb4>
 800d844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d848:	460d      	mov	r5, r1
 800d84a:	2900      	cmp	r1, #0
 800d84c:	d054      	beq.n	800d8f8 <rmw_validate_full_topic_name+0xb8>
 800d84e:	4616      	mov	r6, r2
 800d850:	4604      	mov	r4, r0
 800d852:	f7f2 fcef 	bl	8000234 <strlen>
 800d856:	b148      	cbz	r0, 800d86c <rmw_validate_full_topic_name+0x2c>
 800d858:	7823      	ldrb	r3, [r4, #0]
 800d85a:	2b2f      	cmp	r3, #47	@ 0x2f
 800d85c:	d00d      	beq.n	800d87a <rmw_validate_full_topic_name+0x3a>
 800d85e:	2302      	movs	r3, #2
 800d860:	602b      	str	r3, [r5, #0]
 800d862:	b13e      	cbz	r6, 800d874 <rmw_validate_full_topic_name+0x34>
 800d864:	2000      	movs	r0, #0
 800d866:	6030      	str	r0, [r6, #0]
 800d868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d86c:	2301      	movs	r3, #1
 800d86e:	602b      	str	r3, [r5, #0]
 800d870:	2e00      	cmp	r6, #0
 800d872:	d1f7      	bne.n	800d864 <rmw_validate_full_topic_name+0x24>
 800d874:	2000      	movs	r0, #0
 800d876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d87a:	1e43      	subs	r3, r0, #1
 800d87c:	5ce2      	ldrb	r2, [r4, r3]
 800d87e:	2a2f      	cmp	r2, #47	@ 0x2f
 800d880:	d03c      	beq.n	800d8fc <rmw_validate_full_topic_name+0xbc>
 800d882:	1e63      	subs	r3, r4, #1
 800d884:	eb03 0800 	add.w	r8, r3, r0
 800d888:	f1c4 0e01 	rsb	lr, r4, #1
 800d88c:	eb0e 0703 	add.w	r7, lr, r3
 800d890:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800d894:	f021 0220 	bic.w	r2, r1, #32
 800d898:	3a41      	subs	r2, #65	@ 0x41
 800d89a:	2a19      	cmp	r2, #25
 800d89c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800d8a0:	d90b      	bls.n	800d8ba <rmw_validate_full_topic_name+0x7a>
 800d8a2:	295f      	cmp	r1, #95	@ 0x5f
 800d8a4:	d009      	beq.n	800d8ba <rmw_validate_full_topic_name+0x7a>
 800d8a6:	f1bc 0f0a 	cmp.w	ip, #10
 800d8aa:	d906      	bls.n	800d8ba <rmw_validate_full_topic_name+0x7a>
 800d8ac:	2304      	movs	r3, #4
 800d8ae:	602b      	str	r3, [r5, #0]
 800d8b0:	2e00      	cmp	r6, #0
 800d8b2:	d0df      	beq.n	800d874 <rmw_validate_full_topic_name+0x34>
 800d8b4:	6037      	str	r7, [r6, #0]
 800d8b6:	2000      	movs	r0, #0
 800d8b8:	e7d6      	b.n	800d868 <rmw_validate_full_topic_name+0x28>
 800d8ba:	4543      	cmp	r3, r8
 800d8bc:	d1e6      	bne.n	800d88c <rmw_validate_full_topic_name+0x4c>
 800d8be:	4f1a      	ldr	r7, [pc, #104]	@ (800d928 <rmw_validate_full_topic_name+0xe8>)
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	e004      	b.n	800d8ce <rmw_validate_full_topic_name+0x8e>
 800d8c4:	4298      	cmp	r0, r3
 800d8c6:	f104 0401 	add.w	r4, r4, #1
 800d8ca:	d91c      	bls.n	800d906 <rmw_validate_full_topic_name+0xc6>
 800d8cc:	4613      	mov	r3, r2
 800d8ce:	4298      	cmp	r0, r3
 800d8d0:	f103 0201 	add.w	r2, r3, #1
 800d8d4:	d0f6      	beq.n	800d8c4 <rmw_validate_full_topic_name+0x84>
 800d8d6:	7821      	ldrb	r1, [r4, #0]
 800d8d8:	292f      	cmp	r1, #47	@ 0x2f
 800d8da:	d1f3      	bne.n	800d8c4 <rmw_validate_full_topic_name+0x84>
 800d8dc:	7861      	ldrb	r1, [r4, #1]
 800d8de:	292f      	cmp	r1, #47	@ 0x2f
 800d8e0:	d01c      	beq.n	800d91c <rmw_validate_full_topic_name+0xdc>
 800d8e2:	5dc9      	ldrb	r1, [r1, r7]
 800d8e4:	0749      	lsls	r1, r1, #29
 800d8e6:	d5ed      	bpl.n	800d8c4 <rmw_validate_full_topic_name+0x84>
 800d8e8:	2206      	movs	r2, #6
 800d8ea:	602a      	str	r2, [r5, #0]
 800d8ec:	2e00      	cmp	r6, #0
 800d8ee:	d0c1      	beq.n	800d874 <rmw_validate_full_topic_name+0x34>
 800d8f0:	6033      	str	r3, [r6, #0]
 800d8f2:	e7bf      	b.n	800d874 <rmw_validate_full_topic_name+0x34>
 800d8f4:	200b      	movs	r0, #11
 800d8f6:	4770      	bx	lr
 800d8f8:	200b      	movs	r0, #11
 800d8fa:	e7b5      	b.n	800d868 <rmw_validate_full_topic_name+0x28>
 800d8fc:	2203      	movs	r2, #3
 800d8fe:	602a      	str	r2, [r5, #0]
 800d900:	2e00      	cmp	r6, #0
 800d902:	d1f5      	bne.n	800d8f0 <rmw_validate_full_topic_name+0xb0>
 800d904:	e7b6      	b.n	800d874 <rmw_validate_full_topic_name+0x34>
 800d906:	28f7      	cmp	r0, #247	@ 0xf7
 800d908:	d802      	bhi.n	800d910 <rmw_validate_full_topic_name+0xd0>
 800d90a:	2000      	movs	r0, #0
 800d90c:	6028      	str	r0, [r5, #0]
 800d90e:	e7ab      	b.n	800d868 <rmw_validate_full_topic_name+0x28>
 800d910:	2307      	movs	r3, #7
 800d912:	602b      	str	r3, [r5, #0]
 800d914:	2e00      	cmp	r6, #0
 800d916:	d0ad      	beq.n	800d874 <rmw_validate_full_topic_name+0x34>
 800d918:	23f6      	movs	r3, #246	@ 0xf6
 800d91a:	e7e9      	b.n	800d8f0 <rmw_validate_full_topic_name+0xb0>
 800d91c:	2205      	movs	r2, #5
 800d91e:	602a      	str	r2, [r5, #0]
 800d920:	2e00      	cmp	r6, #0
 800d922:	d1e5      	bne.n	800d8f0 <rmw_validate_full_topic_name+0xb0>
 800d924:	e7a6      	b.n	800d874 <rmw_validate_full_topic_name+0x34>
 800d926:	bf00      	nop
 800d928:	08019842 	.word	0x08019842

0800d92c <rmw_validate_namespace_with_size>:
 800d92c:	b340      	cbz	r0, 800d980 <rmw_validate_namespace_with_size+0x54>
 800d92e:	b570      	push	{r4, r5, r6, lr}
 800d930:	4614      	mov	r4, r2
 800d932:	b0c2      	sub	sp, #264	@ 0x108
 800d934:	b332      	cbz	r2, 800d984 <rmw_validate_namespace_with_size+0x58>
 800d936:	2901      	cmp	r1, #1
 800d938:	460d      	mov	r5, r1
 800d93a:	461e      	mov	r6, r3
 800d93c:	d102      	bne.n	800d944 <rmw_validate_namespace_with_size+0x18>
 800d93e:	7803      	ldrb	r3, [r0, #0]
 800d940:	2b2f      	cmp	r3, #47	@ 0x2f
 800d942:	d012      	beq.n	800d96a <rmw_validate_namespace_with_size+0x3e>
 800d944:	aa01      	add	r2, sp, #4
 800d946:	4669      	mov	r1, sp
 800d948:	f7ff ff7a 	bl	800d840 <rmw_validate_full_topic_name>
 800d94c:	b978      	cbnz	r0, 800d96e <rmw_validate_namespace_with_size+0x42>
 800d94e:	9b00      	ldr	r3, [sp, #0]
 800d950:	b14b      	cbz	r3, 800d966 <rmw_validate_namespace_with_size+0x3a>
 800d952:	2b07      	cmp	r3, #7
 800d954:	d007      	beq.n	800d966 <rmw_validate_namespace_with_size+0x3a>
 800d956:	1e5a      	subs	r2, r3, #1
 800d958:	2a05      	cmp	r2, #5
 800d95a:	d82b      	bhi.n	800d9b4 <rmw_validate_namespace_with_size+0x88>
 800d95c:	e8df f002 	tbb	[pc, r2]
 800d960:	1e212427 	.word	0x1e212427
 800d964:	141b      	.short	0x141b
 800d966:	2df5      	cmp	r5, #245	@ 0xf5
 800d968:	d803      	bhi.n	800d972 <rmw_validate_namespace_with_size+0x46>
 800d96a:	2000      	movs	r0, #0
 800d96c:	6020      	str	r0, [r4, #0]
 800d96e:	b042      	add	sp, #264	@ 0x108
 800d970:	bd70      	pop	{r4, r5, r6, pc}
 800d972:	2307      	movs	r3, #7
 800d974:	6023      	str	r3, [r4, #0]
 800d976:	2e00      	cmp	r6, #0
 800d978:	d0f9      	beq.n	800d96e <rmw_validate_namespace_with_size+0x42>
 800d97a:	23f4      	movs	r3, #244	@ 0xf4
 800d97c:	6033      	str	r3, [r6, #0]
 800d97e:	e7f6      	b.n	800d96e <rmw_validate_namespace_with_size+0x42>
 800d980:	200b      	movs	r0, #11
 800d982:	4770      	bx	lr
 800d984:	200b      	movs	r0, #11
 800d986:	e7f2      	b.n	800d96e <rmw_validate_namespace_with_size+0x42>
 800d988:	2306      	movs	r3, #6
 800d98a:	6023      	str	r3, [r4, #0]
 800d98c:	2e00      	cmp	r6, #0
 800d98e:	d0ee      	beq.n	800d96e <rmw_validate_namespace_with_size+0x42>
 800d990:	9b01      	ldr	r3, [sp, #4]
 800d992:	6033      	str	r3, [r6, #0]
 800d994:	e7eb      	b.n	800d96e <rmw_validate_namespace_with_size+0x42>
 800d996:	2305      	movs	r3, #5
 800d998:	6023      	str	r3, [r4, #0]
 800d99a:	e7f7      	b.n	800d98c <rmw_validate_namespace_with_size+0x60>
 800d99c:	2304      	movs	r3, #4
 800d99e:	6023      	str	r3, [r4, #0]
 800d9a0:	e7f4      	b.n	800d98c <rmw_validate_namespace_with_size+0x60>
 800d9a2:	2303      	movs	r3, #3
 800d9a4:	6023      	str	r3, [r4, #0]
 800d9a6:	e7f1      	b.n	800d98c <rmw_validate_namespace_with_size+0x60>
 800d9a8:	2302      	movs	r3, #2
 800d9aa:	6023      	str	r3, [r4, #0]
 800d9ac:	e7ee      	b.n	800d98c <rmw_validate_namespace_with_size+0x60>
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	6023      	str	r3, [r4, #0]
 800d9b2:	e7eb      	b.n	800d98c <rmw_validate_namespace_with_size+0x60>
 800d9b4:	4a03      	ldr	r2, [pc, #12]	@ (800d9c4 <rmw_validate_namespace_with_size+0x98>)
 800d9b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d9ba:	a802      	add	r0, sp, #8
 800d9bc:	f7ff fd42 	bl	800d444 <rcutils_snprintf>
 800d9c0:	2001      	movs	r0, #1
 800d9c2:	e7d4      	b.n	800d96e <rmw_validate_namespace_with_size+0x42>
 800d9c4:	08019030 	.word	0x08019030

0800d9c8 <rmw_validate_namespace>:
 800d9c8:	b168      	cbz	r0, 800d9e6 <rmw_validate_namespace+0x1e>
 800d9ca:	b570      	push	{r4, r5, r6, lr}
 800d9cc:	460d      	mov	r5, r1
 800d9ce:	4616      	mov	r6, r2
 800d9d0:	4604      	mov	r4, r0
 800d9d2:	f7f2 fc2f 	bl	8000234 <strlen>
 800d9d6:	4633      	mov	r3, r6
 800d9d8:	4601      	mov	r1, r0
 800d9da:	462a      	mov	r2, r5
 800d9dc:	4620      	mov	r0, r4
 800d9de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d9e2:	f7ff bfa3 	b.w	800d92c <rmw_validate_namespace_with_size>
 800d9e6:	200b      	movs	r0, #11
 800d9e8:	4770      	bx	lr
 800d9ea:	bf00      	nop

0800d9ec <rmw_namespace_validation_result_string>:
 800d9ec:	2807      	cmp	r0, #7
 800d9ee:	bf9a      	itte	ls
 800d9f0:	4b02      	ldrls	r3, [pc, #8]	@ (800d9fc <rmw_namespace_validation_result_string+0x10>)
 800d9f2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800d9f6:	4802      	ldrhi	r0, [pc, #8]	@ (800da00 <rmw_namespace_validation_result_string+0x14>)
 800d9f8:	4770      	bx	lr
 800d9fa:	bf00      	nop
 800d9fc:	08019228 	.word	0x08019228
 800da00:	08019080 	.word	0x08019080

0800da04 <rmw_validate_node_name>:
 800da04:	2800      	cmp	r0, #0
 800da06:	d03b      	beq.n	800da80 <rmw_validate_node_name+0x7c>
 800da08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da0c:	460d      	mov	r5, r1
 800da0e:	2900      	cmp	r1, #0
 800da10:	d038      	beq.n	800da84 <rmw_validate_node_name+0x80>
 800da12:	4616      	mov	r6, r2
 800da14:	4604      	mov	r4, r0
 800da16:	f7f2 fc0d 	bl	8000234 <strlen>
 800da1a:	b1e0      	cbz	r0, 800da56 <rmw_validate_node_name+0x52>
 800da1c:	1e63      	subs	r3, r4, #1
 800da1e:	eb03 0800 	add.w	r8, r3, r0
 800da22:	f1c4 0101 	rsb	r1, r4, #1
 800da26:	18cf      	adds	r7, r1, r3
 800da28:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800da2c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800da30:	f02e 0c20 	bic.w	ip, lr, #32
 800da34:	2a09      	cmp	r2, #9
 800da36:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800da3a:	d914      	bls.n	800da66 <rmw_validate_node_name+0x62>
 800da3c:	f1bc 0f19 	cmp.w	ip, #25
 800da40:	d911      	bls.n	800da66 <rmw_validate_node_name+0x62>
 800da42:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800da46:	d00e      	beq.n	800da66 <rmw_validate_node_name+0x62>
 800da48:	2302      	movs	r3, #2
 800da4a:	602b      	str	r3, [r5, #0]
 800da4c:	b106      	cbz	r6, 800da50 <rmw_validate_node_name+0x4c>
 800da4e:	6037      	str	r7, [r6, #0]
 800da50:	2000      	movs	r0, #0
 800da52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da56:	2301      	movs	r3, #1
 800da58:	602b      	str	r3, [r5, #0]
 800da5a:	2e00      	cmp	r6, #0
 800da5c:	d0f8      	beq.n	800da50 <rmw_validate_node_name+0x4c>
 800da5e:	2000      	movs	r0, #0
 800da60:	6030      	str	r0, [r6, #0]
 800da62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da66:	4543      	cmp	r3, r8
 800da68:	d1dd      	bne.n	800da26 <rmw_validate_node_name+0x22>
 800da6a:	7822      	ldrb	r2, [r4, #0]
 800da6c:	4b0d      	ldr	r3, [pc, #52]	@ (800daa4 <rmw_validate_node_name+0xa0>)
 800da6e:	5cd3      	ldrb	r3, [r2, r3]
 800da70:	f013 0304 	ands.w	r3, r3, #4
 800da74:	d110      	bne.n	800da98 <rmw_validate_node_name+0x94>
 800da76:	28ff      	cmp	r0, #255	@ 0xff
 800da78:	d806      	bhi.n	800da88 <rmw_validate_node_name+0x84>
 800da7a:	602b      	str	r3, [r5, #0]
 800da7c:	4618      	mov	r0, r3
 800da7e:	e7e8      	b.n	800da52 <rmw_validate_node_name+0x4e>
 800da80:	200b      	movs	r0, #11
 800da82:	4770      	bx	lr
 800da84:	200b      	movs	r0, #11
 800da86:	e7e4      	b.n	800da52 <rmw_validate_node_name+0x4e>
 800da88:	2204      	movs	r2, #4
 800da8a:	602a      	str	r2, [r5, #0]
 800da8c:	2e00      	cmp	r6, #0
 800da8e:	d0df      	beq.n	800da50 <rmw_validate_node_name+0x4c>
 800da90:	22fe      	movs	r2, #254	@ 0xfe
 800da92:	6032      	str	r2, [r6, #0]
 800da94:	4618      	mov	r0, r3
 800da96:	e7dc      	b.n	800da52 <rmw_validate_node_name+0x4e>
 800da98:	2303      	movs	r3, #3
 800da9a:	602b      	str	r3, [r5, #0]
 800da9c:	2e00      	cmp	r6, #0
 800da9e:	d1de      	bne.n	800da5e <rmw_validate_node_name+0x5a>
 800daa0:	e7d6      	b.n	800da50 <rmw_validate_node_name+0x4c>
 800daa2:	bf00      	nop
 800daa4:	08019842 	.word	0x08019842

0800daa8 <rmw_node_name_validation_result_string>:
 800daa8:	2804      	cmp	r0, #4
 800daaa:	bf9a      	itte	ls
 800daac:	4b02      	ldrls	r3, [pc, #8]	@ (800dab8 <rmw_node_name_validation_result_string+0x10>)
 800daae:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800dab2:	4802      	ldrhi	r0, [pc, #8]	@ (800dabc <rmw_node_name_validation_result_string+0x14>)
 800dab4:	4770      	bx	lr
 800dab6:	bf00      	nop
 800dab8:	08019334 	.word	0x08019334
 800dabc:	08019248 	.word	0x08019248

0800dac0 <rmw_uros_set_custom_transport>:
 800dac0:	b470      	push	{r4, r5, r6}
 800dac2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800dac6:	b162      	cbz	r2, 800dae2 <rmw_uros_set_custom_transport+0x22>
 800dac8:	b15b      	cbz	r3, 800dae2 <rmw_uros_set_custom_transport+0x22>
 800daca:	b155      	cbz	r5, 800dae2 <rmw_uros_set_custom_transport+0x22>
 800dacc:	b14e      	cbz	r6, 800dae2 <rmw_uros_set_custom_transport+0x22>
 800dace:	4c06      	ldr	r4, [pc, #24]	@ (800dae8 <rmw_uros_set_custom_transport+0x28>)
 800dad0:	7020      	strb	r0, [r4, #0]
 800dad2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800dad6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800dada:	6166      	str	r6, [r4, #20]
 800dadc:	2000      	movs	r0, #0
 800dade:	bc70      	pop	{r4, r5, r6}
 800dae0:	4770      	bx	lr
 800dae2:	200b      	movs	r0, #11
 800dae4:	bc70      	pop	{r4, r5, r6}
 800dae6:	4770      	bx	lr
 800dae8:	20006658 	.word	0x20006658

0800daec <rmw_create_client>:
 800daec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf0:	b091      	sub	sp, #68	@ 0x44
 800daf2:	2800      	cmp	r0, #0
 800daf4:	f000 80ba 	beq.w	800dc6c <rmw_create_client+0x180>
 800daf8:	4689      	mov	r9, r1
 800dafa:	2900      	cmp	r1, #0
 800dafc:	f000 80b6 	beq.w	800dc6c <rmw_create_client+0x180>
 800db00:	4606      	mov	r6, r0
 800db02:	6800      	ldr	r0, [r0, #0]
 800db04:	4614      	mov	r4, r2
 800db06:	461d      	mov	r5, r3
 800db08:	f001 fc42 	bl	800f390 <is_uxrce_rmw_identifier_valid>
 800db0c:	2800      	cmp	r0, #0
 800db0e:	f000 80ad 	beq.w	800dc6c <rmw_create_client+0x180>
 800db12:	2c00      	cmp	r4, #0
 800db14:	f000 80aa 	beq.w	800dc6c <rmw_create_client+0x180>
 800db18:	7823      	ldrb	r3, [r4, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	f000 80a6 	beq.w	800dc6c <rmw_create_client+0x180>
 800db20:	2d00      	cmp	r5, #0
 800db22:	f000 80a3 	beq.w	800dc6c <rmw_create_client+0x180>
 800db26:	4854      	ldr	r0, [pc, #336]	@ (800dc78 <rmw_create_client+0x18c>)
 800db28:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800db2c:	f008 f884 	bl	8015c38 <get_memory>
 800db30:	4606      	mov	r6, r0
 800db32:	2800      	cmp	r0, #0
 800db34:	f000 809b 	beq.w	800dc6e <rmw_create_client+0x182>
 800db38:	6887      	ldr	r7, [r0, #8]
 800db3a:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800db3e:	f000 f90b 	bl	800dd58 <rmw_get_implementation_identifier>
 800db42:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 800db46:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800db48:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800db4c:	4620      	mov	r0, r4
 800db4e:	f7f2 fb71 	bl	8000234 <strlen>
 800db52:	1c42      	adds	r2, r0, #1
 800db54:	2a3c      	cmp	r2, #60	@ 0x3c
 800db56:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 800db5a:	f200 8084 	bhi.w	800dc66 <rmw_create_client+0x17a>
 800db5e:	4621      	mov	r1, r4
 800db60:	4650      	mov	r0, sl
 800db62:	f009 ff1a 	bl	801799a <memcpy>
 800db66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800db6a:	4629      	mov	r1, r5
 800db6c:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 800db70:	677b      	str	r3, [r7, #116]	@ 0x74
 800db72:	2250      	movs	r2, #80	@ 0x50
 800db74:	f107 0020 	add.w	r0, r7, #32
 800db78:	f009 ff0f 	bl	801799a <memcpy>
 800db7c:	493f      	ldr	r1, [pc, #252]	@ (800dc7c <rmw_create_client+0x190>)
 800db7e:	4648      	mov	r0, r9
 800db80:	f001 fc20 	bl	800f3c4 <get_service_typesupport_handle>
 800db84:	2800      	cmp	r0, #0
 800db86:	d06e      	beq.n	800dc66 <rmw_create_client+0x17a>
 800db88:	6843      	ldr	r3, [r0, #4]
 800db8a:	617b      	str	r3, [r7, #20]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d06a      	beq.n	800dc66 <rmw_create_client+0x17a>
 800db90:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800db94:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 800dc84 <rmw_create_client+0x198>
 800db98:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 800dc88 <rmw_create_client+0x19c>
 800db9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dba0:	2107      	movs	r1, #7
 800dba2:	f8b3 05a0 	ldrh.w	r0, [r3, #1440]	@ 0x5a0
 800dba6:	1c42      	adds	r2, r0, #1
 800dba8:	f8a3 25a0 	strh.w	r2, [r3, #1440]	@ 0x5a0
 800dbac:	f001 fefe 	bl	800f9ac <uxr_object_id>
 800dbb0:	2364      	movs	r3, #100	@ 0x64
 800dbb2:	6138      	str	r0, [r7, #16]
 800dbb4:	4652      	mov	r2, sl
 800dbb6:	6978      	ldr	r0, [r7, #20]
 800dbb8:	4649      	mov	r1, r9
 800dbba:	f001 fb37 	bl	800f22c <generate_service_types>
 800dbbe:	2800      	cmp	r0, #0
 800dbc0:	d051      	beq.n	800dc66 <rmw_create_client+0x17a>
 800dbc2:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 800dc8c <rmw_create_client+0x1a0>
 800dbc6:	4a2e      	ldr	r2, [pc, #184]	@ (800dc80 <rmw_create_client+0x194>)
 800dbc8:	233c      	movs	r3, #60	@ 0x3c
 800dbca:	4659      	mov	r1, fp
 800dbcc:	4620      	mov	r0, r4
 800dbce:	f001 fafb 	bl	800f1c8 <generate_service_topics>
 800dbd2:	2800      	cmp	r0, #0
 800dbd4:	d047      	beq.n	800dc66 <rmw_create_client+0x17a>
 800dbd6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800dbda:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800dbde:	a80c      	add	r0, sp, #48	@ 0x30
 800dbe0:	4629      	mov	r1, r5
 800dbe2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dbe6:	f001 fad5 	bl	800f194 <convert_qos_profile>
 800dbea:	4a25      	ldr	r2, [pc, #148]	@ (800dc80 <rmw_create_client+0x194>)
 800dbec:	9400      	str	r4, [sp, #0]
 800dbee:	e9cd b203 	strd	fp, r2, [sp, #12]
 800dbf2:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 800dbf6:	a80c      	add	r0, sp, #48	@ 0x30
 800dbf8:	c803      	ldmia	r0, {r0, r1}
 800dbfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbfc:	9005      	str	r0, [sp, #20]
 800dbfe:	9a08      	ldr	r2, [sp, #32]
 800dc00:	f8ad 1018 	strh.w	r1, [sp, #24]
 800dc04:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800dc08:	2306      	movs	r3, #6
 800dc0a:	9307      	str	r3, [sp, #28]
 800dc0c:	6811      	ldr	r1, [r2, #0]
 800dc0e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800dc12:	693a      	ldr	r2, [r7, #16]
 800dc14:	f001 fdce 	bl	800f7b4 <uxr_buffer_create_requester_bin>
 800dc18:	4602      	mov	r2, r0
 800dc1a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800dc1e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800dc22:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800dc26:	f001 fa99 	bl	800f15c <run_xrce_session>
 800dc2a:	b1e0      	cbz	r0, 800dc66 <rmw_create_client+0x17a>
 800dc2c:	7a2b      	ldrb	r3, [r5, #8]
 800dc2e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800dc32:	2200      	movs	r2, #0
 800dc34:	2b02      	cmp	r3, #2
 800dc36:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800dc3a:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 800dc3e:	bf0c      	ite	eq
 800dc40:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 800dc44:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 800dc48:	673a      	str	r2, [r7, #112]	@ 0x70
 800dc4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc4c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800dc50:	ab0e      	add	r3, sp, #56	@ 0x38
 800dc52:	9300      	str	r3, [sp, #0]
 800dc54:	6811      	ldr	r1, [r2, #0]
 800dc56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc58:	693a      	ldr	r2, [r7, #16]
 800dc5a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dc5e:	f001 fed5 	bl	800fa0c <uxr_buffer_request_data>
 800dc62:	8338      	strh	r0, [r7, #24]
 800dc64:	e003      	b.n	800dc6e <rmw_create_client+0x182>
 800dc66:	4630      	mov	r0, r6
 800dc68:	f001 f962 	bl	800ef30 <rmw_uxrce_fini_client_memory>
 800dc6c:	2600      	movs	r6, #0
 800dc6e:	4630      	mov	r0, r6
 800dc70:	b011      	add	sp, #68	@ 0x44
 800dc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc76:	bf00      	nop
 800dc78:	200067f0 	.word	0x200067f0
 800dc7c:	0801895c 	.word	0x0801895c
 800dc80:	20006714 	.word	0x20006714
 800dc84:	20006750 	.word	0x20006750
 800dc88:	200066b0 	.word	0x200066b0
 800dc8c:	20006674 	.word	0x20006674

0800dc90 <rmw_destroy_client>:
 800dc90:	b570      	push	{r4, r5, r6, lr}
 800dc92:	b128      	cbz	r0, 800dca0 <rmw_destroy_client+0x10>
 800dc94:	4604      	mov	r4, r0
 800dc96:	6800      	ldr	r0, [r0, #0]
 800dc98:	460d      	mov	r5, r1
 800dc9a:	f001 fb79 	bl	800f390 <is_uxrce_rmw_identifier_valid>
 800dc9e:	b910      	cbnz	r0, 800dca6 <rmw_destroy_client+0x16>
 800dca0:	2401      	movs	r4, #1
 800dca2:	4620      	mov	r0, r4
 800dca4:	bd70      	pop	{r4, r5, r6, pc}
 800dca6:	6863      	ldr	r3, [r4, #4]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d0f9      	beq.n	800dca0 <rmw_destroy_client+0x10>
 800dcac:	2d00      	cmp	r5, #0
 800dcae:	d0f7      	beq.n	800dca0 <rmw_destroy_client+0x10>
 800dcb0:	6828      	ldr	r0, [r5, #0]
 800dcb2:	f001 fb6d 	bl	800f390 <is_uxrce_rmw_identifier_valid>
 800dcb6:	2800      	cmp	r0, #0
 800dcb8:	d0f2      	beq.n	800dca0 <rmw_destroy_client+0x10>
 800dcba:	686e      	ldr	r6, [r5, #4]
 800dcbc:	2e00      	cmp	r6, #0
 800dcbe:	d0ef      	beq.n	800dca0 <rmw_destroy_client+0x10>
 800dcc0:	6864      	ldr	r4, [r4, #4]
 800dcc2:	6932      	ldr	r2, [r6, #16]
 800dcc4:	6920      	ldr	r0, [r4, #16]
 800dcc6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800dcca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dcce:	6819      	ldr	r1, [r3, #0]
 800dcd0:	f001 fed6 	bl	800fa80 <uxr_buffer_cancel_data>
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	6920      	ldr	r0, [r4, #16]
 800dcd8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800dcdc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800dce0:	f001 fa3c 	bl	800f15c <run_xrce_session>
 800dce4:	6920      	ldr	r0, [r4, #16]
 800dce6:	6932      	ldr	r2, [r6, #16]
 800dce8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800dcec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dcf0:	6819      	ldr	r1, [r3, #0]
 800dcf2:	f001 fc05 	bl	800f500 <uxr_buffer_delete_entity>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	6920      	ldr	r0, [r4, #16]
 800dcfa:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800dcfe:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800dd02:	f001 fa2b 	bl	800f15c <run_xrce_session>
 800dd06:	2800      	cmp	r0, #0
 800dd08:	4628      	mov	r0, r5
 800dd0a:	bf14      	ite	ne
 800dd0c:	2400      	movne	r4, #0
 800dd0e:	2402      	moveq	r4, #2
 800dd10:	f001 f90e 	bl	800ef30 <rmw_uxrce_fini_client_memory>
 800dd14:	e7c5      	b.n	800dca2 <rmw_destroy_client+0x12>
 800dd16:	bf00      	nop

0800dd18 <rmw_client_request_publisher_get_actual_qos>:
 800dd18:	b150      	cbz	r0, 800dd30 <rmw_client_request_publisher_get_actual_qos+0x18>
 800dd1a:	b508      	push	{r3, lr}
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	b149      	cbz	r1, 800dd34 <rmw_client_request_publisher_get_actual_qos+0x1c>
 800dd20:	6841      	ldr	r1, [r0, #4]
 800dd22:	2250      	movs	r2, #80	@ 0x50
 800dd24:	3120      	adds	r1, #32
 800dd26:	4618      	mov	r0, r3
 800dd28:	f009 fe37 	bl	801799a <memcpy>
 800dd2c:	2000      	movs	r0, #0
 800dd2e:	bd08      	pop	{r3, pc}
 800dd30:	200b      	movs	r0, #11
 800dd32:	4770      	bx	lr
 800dd34:	200b      	movs	r0, #11
 800dd36:	bd08      	pop	{r3, pc}

0800dd38 <rmw_client_response_subscription_get_actual_qos>:
 800dd38:	b150      	cbz	r0, 800dd50 <rmw_client_response_subscription_get_actual_qos+0x18>
 800dd3a:	b508      	push	{r3, lr}
 800dd3c:	460b      	mov	r3, r1
 800dd3e:	b149      	cbz	r1, 800dd54 <rmw_client_response_subscription_get_actual_qos+0x1c>
 800dd40:	6841      	ldr	r1, [r0, #4]
 800dd42:	2250      	movs	r2, #80	@ 0x50
 800dd44:	3120      	adds	r1, #32
 800dd46:	4618      	mov	r0, r3
 800dd48:	f009 fe27 	bl	801799a <memcpy>
 800dd4c:	2000      	movs	r0, #0
 800dd4e:	bd08      	pop	{r3, pc}
 800dd50:	200b      	movs	r0, #11
 800dd52:	4770      	bx	lr
 800dd54:	200b      	movs	r0, #11
 800dd56:	bd08      	pop	{r3, pc}

0800dd58 <rmw_get_implementation_identifier>:
 800dd58:	4b01      	ldr	r3, [pc, #4]	@ (800dd60 <rmw_get_implementation_identifier+0x8>)
 800dd5a:	6818      	ldr	r0, [r3, #0]
 800dd5c:	4770      	bx	lr
 800dd5e:	bf00      	nop
 800dd60:	080197c0 	.word	0x080197c0

0800dd64 <rmw_init_options_init>:
 800dd64:	b084      	sub	sp, #16
 800dd66:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd68:	b083      	sub	sp, #12
 800dd6a:	ad09      	add	r5, sp, #36	@ 0x24
 800dd6c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800dd70:	b130      	cbz	r0, 800dd80 <rmw_init_options_init+0x1c>
 800dd72:	4604      	mov	r4, r0
 800dd74:	4628      	mov	r0, r5
 800dd76:	f7ff f979 	bl	800d06c <rcutils_allocator_is_valid>
 800dd7a:	b108      	cbz	r0, 800dd80 <rmw_init_options_init+0x1c>
 800dd7c:	68a6      	ldr	r6, [r4, #8]
 800dd7e:	b12e      	cbz	r6, 800dd8c <rmw_init_options_init+0x28>
 800dd80:	200b      	movs	r0, #11
 800dd82:	b003      	add	sp, #12
 800dd84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dd88:	b004      	add	sp, #16
 800dd8a:	4770      	bx	lr
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	2300      	movs	r3, #0
 800dd90:	e9c4 2300 	strd	r2, r3, [r4]
 800dd94:	4b22      	ldr	r3, [pc, #136]	@ (800de20 <rmw_init_options_init+0xbc>)
 800dd96:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800de30 <rmw_init_options_init+0xcc>
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	60a3      	str	r3, [r4, #8]
 800dd9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dda0:	f104 0c20 	add.w	ip, r4, #32
 800dda4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dda8:	466f      	mov	r7, sp
 800ddaa:	682b      	ldr	r3, [r5, #0]
 800ddac:	f8cc 3000 	str.w	r3, [ip]
 800ddb0:	4638      	mov	r0, r7
 800ddb2:	f8c4 e01c 	str.w	lr, [r4, #28]
 800ddb6:	60e6      	str	r6, [r4, #12]
 800ddb8:	f7ff fd3e 	bl	800d838 <rmw_get_default_security_options>
 800ddbc:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ddc0:	f104 0310 	add.w	r3, r4, #16
 800ddc4:	e883 0003 	stmia.w	r3, {r0, r1}
 800ddc8:	2203      	movs	r2, #3
 800ddca:	4816      	ldr	r0, [pc, #88]	@ (800de24 <rmw_init_options_init+0xc0>)
 800ddcc:	4916      	ldr	r1, [pc, #88]	@ (800de28 <rmw_init_options_init+0xc4>)
 800ddce:	7626      	strb	r6, [r4, #24]
 800ddd0:	f000 ffee 	bl	800edb0 <rmw_uxrce_init_init_options_impl_memory>
 800ddd4:	4813      	ldr	r0, [pc, #76]	@ (800de24 <rmw_init_options_init+0xc0>)
 800ddd6:	f007 ff2f 	bl	8015c38 <get_memory>
 800ddda:	b1f0      	cbz	r0, 800de1a <rmw_init_options_init+0xb6>
 800dddc:	4a13      	ldr	r2, [pc, #76]	@ (800de2c <rmw_init_options_init+0xc8>)
 800ddde:	6883      	ldr	r3, [r0, #8]
 800dde0:	6851      	ldr	r1, [r2, #4]
 800dde2:	7810      	ldrb	r0, [r2, #0]
 800dde4:	6363      	str	r3, [r4, #52]	@ 0x34
 800dde6:	7418      	strb	r0, [r3, #16]
 800dde8:	6159      	str	r1, [r3, #20]
 800ddea:	68d1      	ldr	r1, [r2, #12]
 800ddec:	61d9      	str	r1, [r3, #28]
 800ddee:	6911      	ldr	r1, [r2, #16]
 800ddf0:	6219      	str	r1, [r3, #32]
 800ddf2:	6951      	ldr	r1, [r2, #20]
 800ddf4:	6892      	ldr	r2, [r2, #8]
 800ddf6:	619a      	str	r2, [r3, #24]
 800ddf8:	6259      	str	r1, [r3, #36]	@ 0x24
 800ddfa:	f003 fdf3 	bl	80119e4 <uxr_nanos>
 800ddfe:	f009 fa3b 	bl	8017278 <srand>
 800de02:	f009 fa67 	bl	80172d4 <rand>
 800de06:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800de08:	6298      	str	r0, [r3, #40]	@ 0x28
 800de0a:	2800      	cmp	r0, #0
 800de0c:	d0f9      	beq.n	800de02 <rmw_init_options_init+0x9e>
 800de0e:	2000      	movs	r0, #0
 800de10:	b003      	add	sp, #12
 800de12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800de16:	b004      	add	sp, #16
 800de18:	4770      	bx	lr
 800de1a:	2001      	movs	r0, #1
 800de1c:	e7b1      	b.n	800dd82 <rmw_init_options_init+0x1e>
 800de1e:	bf00      	nop
 800de20:	080197c0 	.word	0x080197c0
 800de24:	2000b0ac 	.word	0x2000b0ac
 800de28:	20006948 	.word	0x20006948
 800de2c:	20006658 	.word	0x20006658
 800de30:	08018e44 	.word	0x08018e44

0800de34 <rmw_init_options_copy>:
 800de34:	b570      	push	{r4, r5, r6, lr}
 800de36:	b158      	cbz	r0, 800de50 <rmw_init_options_copy+0x1c>
 800de38:	460d      	mov	r5, r1
 800de3a:	b149      	cbz	r1, 800de50 <rmw_init_options_copy+0x1c>
 800de3c:	4604      	mov	r4, r0
 800de3e:	6880      	ldr	r0, [r0, #8]
 800de40:	b120      	cbz	r0, 800de4c <rmw_init_options_copy+0x18>
 800de42:	4b1e      	ldr	r3, [pc, #120]	@ (800debc <rmw_init_options_copy+0x88>)
 800de44:	6819      	ldr	r1, [r3, #0]
 800de46:	f7f2 f9eb 	bl	8000220 <strcmp>
 800de4a:	bb90      	cbnz	r0, 800deb2 <rmw_init_options_copy+0x7e>
 800de4c:	68ab      	ldr	r3, [r5, #8]
 800de4e:	b113      	cbz	r3, 800de56 <rmw_init_options_copy+0x22>
 800de50:	250b      	movs	r5, #11
 800de52:	4628      	mov	r0, r5
 800de54:	bd70      	pop	{r4, r5, r6, pc}
 800de56:	4623      	mov	r3, r4
 800de58:	462a      	mov	r2, r5
 800de5a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800de5e:	f8d3 c000 	ldr.w	ip, [r3]
 800de62:	6858      	ldr	r0, [r3, #4]
 800de64:	6899      	ldr	r1, [r3, #8]
 800de66:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800de6a:	f8c2 e00c 	str.w	lr, [r2, #12]
 800de6e:	3310      	adds	r3, #16
 800de70:	42b3      	cmp	r3, r6
 800de72:	f8c2 c000 	str.w	ip, [r2]
 800de76:	6050      	str	r0, [r2, #4]
 800de78:	6091      	str	r1, [r2, #8]
 800de7a:	f102 0210 	add.w	r2, r2, #16
 800de7e:	d1ee      	bne.n	800de5e <rmw_init_options_copy+0x2a>
 800de80:	6819      	ldr	r1, [r3, #0]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	480e      	ldr	r0, [pc, #56]	@ (800dec0 <rmw_init_options_copy+0x8c>)
 800de86:	6053      	str	r3, [r2, #4]
 800de88:	6011      	str	r1, [r2, #0]
 800de8a:	f007 fed5 	bl	8015c38 <get_memory>
 800de8e:	b198      	cbz	r0, 800deb8 <rmw_init_options_copy+0x84>
 800de90:	6883      	ldr	r3, [r0, #8]
 800de92:	636b      	str	r3, [r5, #52]	@ 0x34
 800de94:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800de96:	f102 0c10 	add.w	ip, r2, #16
 800de9a:	f103 0410 	add.w	r4, r3, #16
 800de9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dea4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800dea8:	2500      	movs	r5, #0
 800deaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800deae:	4628      	mov	r0, r5
 800deb0:	bd70      	pop	{r4, r5, r6, pc}
 800deb2:	250c      	movs	r5, #12
 800deb4:	4628      	mov	r0, r5
 800deb6:	bd70      	pop	{r4, r5, r6, pc}
 800deb8:	2501      	movs	r5, #1
 800deba:	e7ca      	b.n	800de52 <rmw_init_options_copy+0x1e>
 800debc:	080197c0 	.word	0x080197c0
 800dec0:	2000b0ac 	.word	0x2000b0ac

0800dec4 <rmw_init_options_fini>:
 800dec4:	2800      	cmp	r0, #0
 800dec6:	d03d      	beq.n	800df44 <rmw_init_options_fini+0x80>
 800dec8:	b510      	push	{r4, lr}
 800deca:	4604      	mov	r4, r0
 800decc:	b08e      	sub	sp, #56	@ 0x38
 800dece:	3020      	adds	r0, #32
 800ded0:	f7ff f8cc 	bl	800d06c <rcutils_allocator_is_valid>
 800ded4:	b360      	cbz	r0, 800df30 <rmw_init_options_fini+0x6c>
 800ded6:	68a0      	ldr	r0, [r4, #8]
 800ded8:	b120      	cbz	r0, 800dee4 <rmw_init_options_fini+0x20>
 800deda:	4b1c      	ldr	r3, [pc, #112]	@ (800df4c <rmw_init_options_fini+0x88>)
 800dedc:	6819      	ldr	r1, [r3, #0]
 800dede:	f7f2 f99f 	bl	8000220 <strcmp>
 800dee2:	bb68      	cbnz	r0, 800df40 <rmw_init_options_fini+0x7c>
 800dee4:	4b1a      	ldr	r3, [pc, #104]	@ (800df50 <rmw_init_options_fini+0x8c>)
 800dee6:	6819      	ldr	r1, [r3, #0]
 800dee8:	b331      	cbz	r1, 800df38 <rmw_init_options_fini+0x74>
 800deea:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800deec:	e001      	b.n	800def2 <rmw_init_options_fini+0x2e>
 800deee:	6849      	ldr	r1, [r1, #4]
 800def0:	b311      	cbz	r1, 800df38 <rmw_init_options_fini+0x74>
 800def2:	688b      	ldr	r3, [r1, #8]
 800def4:	429a      	cmp	r2, r3
 800def6:	d1fa      	bne.n	800deee <rmw_init_options_fini+0x2a>
 800def8:	4815      	ldr	r0, [pc, #84]	@ (800df50 <rmw_init_options_fini+0x8c>)
 800defa:	f007 fead 	bl	8015c58 <put_memory>
 800defe:	4668      	mov	r0, sp
 800df00:	f7ff fc86 	bl	800d810 <rmw_get_zero_initialized_init_options>
 800df04:	46ee      	mov	lr, sp
 800df06:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800df0a:	46a4      	mov	ip, r4
 800df0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800df10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800df14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800df18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800df1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800df20:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800df24:	e88c 0003 	stmia.w	ip, {r0, r1}
 800df28:	2300      	movs	r3, #0
 800df2a:	4618      	mov	r0, r3
 800df2c:	b00e      	add	sp, #56	@ 0x38
 800df2e:	bd10      	pop	{r4, pc}
 800df30:	230b      	movs	r3, #11
 800df32:	4618      	mov	r0, r3
 800df34:	b00e      	add	sp, #56	@ 0x38
 800df36:	bd10      	pop	{r4, pc}
 800df38:	2301      	movs	r3, #1
 800df3a:	4618      	mov	r0, r3
 800df3c:	b00e      	add	sp, #56	@ 0x38
 800df3e:	bd10      	pop	{r4, pc}
 800df40:	230c      	movs	r3, #12
 800df42:	e7f2      	b.n	800df2a <rmw_init_options_fini+0x66>
 800df44:	230b      	movs	r3, #11
 800df46:	4618      	mov	r0, r3
 800df48:	4770      	bx	lr
 800df4a:	bf00      	nop
 800df4c:	080197c0 	.word	0x080197c0
 800df50:	2000b0ac 	.word	0x2000b0ac

0800df54 <rmw_init>:
 800df54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df58:	b083      	sub	sp, #12
 800df5a:	2800      	cmp	r0, #0
 800df5c:	f000 80d3 	beq.w	800e106 <rmw_init+0x1b2>
 800df60:	460e      	mov	r6, r1
 800df62:	2900      	cmp	r1, #0
 800df64:	f000 80cf 	beq.w	800e106 <rmw_init+0x1b2>
 800df68:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800df6a:	4605      	mov	r5, r0
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	f000 80ca 	beq.w	800e106 <rmw_init+0x1b2>
 800df72:	4b78      	ldr	r3, [pc, #480]	@ (800e154 <rmw_init+0x200>)
 800df74:	6880      	ldr	r0, [r0, #8]
 800df76:	681f      	ldr	r7, [r3, #0]
 800df78:	b128      	cbz	r0, 800df86 <rmw_init+0x32>
 800df7a:	4639      	mov	r1, r7
 800df7c:	f7f2 f950 	bl	8000220 <strcmp>
 800df80:	2800      	cmp	r0, #0
 800df82:	f040 80ca 	bne.w	800e11a <rmw_init+0x1c6>
 800df86:	e9d5 2300 	ldrd	r2, r3, [r5]
 800df8a:	4c73      	ldr	r4, [pc, #460]	@ (800e158 <rmw_init+0x204>)
 800df8c:	4973      	ldr	r1, [pc, #460]	@ (800e15c <rmw_init+0x208>)
 800df8e:	4874      	ldr	r0, [pc, #464]	@ (800e160 <rmw_init+0x20c>)
 800df90:	60b7      	str	r7, [r6, #8]
 800df92:	e9c6 2300 	strd	r2, r3, [r6]
 800df96:	68eb      	ldr	r3, [r5, #12]
 800df98:	64b3      	str	r3, [r6, #72]	@ 0x48
 800df9a:	2201      	movs	r2, #1
 800df9c:	f000 fea8 	bl	800ecf0 <rmw_uxrce_init_session_memory>
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	4970      	ldr	r1, [pc, #448]	@ (800e164 <rmw_init+0x210>)
 800dfa4:	2204      	movs	r2, #4
 800dfa6:	f000 fee3 	bl	800ed70 <rmw_uxrce_init_static_input_buffer_memory>
 800dfaa:	f04f 0800 	mov.w	r8, #0
 800dfae:	486c      	ldr	r0, [pc, #432]	@ (800e160 <rmw_init+0x20c>)
 800dfb0:	f884 800d 	strb.w	r8, [r4, #13]
 800dfb4:	f007 fe40 	bl	8015c38 <get_memory>
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	f000 80a9 	beq.w	800e110 <rmw_init+0x1bc>
 800dfbe:	6884      	ldr	r4, [r0, #8]
 800dfc0:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800dfc2:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800dfc4:	f890 c010 	ldrb.w	ip, [r0, #16]
 800dfc8:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800dfcc:	9101      	str	r1, [sp, #4]
 800dfce:	6a00      	ldr	r0, [r0, #32]
 800dfd0:	9000      	str	r0, [sp, #0]
 800dfd2:	f104 0910 	add.w	r9, r4, #16
 800dfd6:	4661      	mov	r1, ip
 800dfd8:	4648      	mov	r0, r9
 800dfda:	f001 fca1 	bl	800f920 <uxr_set_custom_transport_callbacks>
 800dfde:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800dfe2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800dfe6:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800dfea:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800dfee:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800dff2:	495d      	ldr	r1, [pc, #372]	@ (800e168 <rmw_init+0x214>)
 800dff4:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800dff8:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800dffc:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800e000:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800e004:	4859      	ldr	r0, [pc, #356]	@ (800e16c <rmw_init+0x218>)
 800e006:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800e00a:	2201      	movs	r2, #1
 800e00c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800e00e:	f000 fe4f 	bl	800ecb0 <rmw_uxrce_init_node_memory>
 800e012:	4957      	ldr	r1, [pc, #348]	@ (800e170 <rmw_init+0x21c>)
 800e014:	4857      	ldr	r0, [pc, #348]	@ (800e174 <rmw_init+0x220>)
 800e016:	2205      	movs	r2, #5
 800e018:	f000 fe2a 	bl	800ec70 <rmw_uxrce_init_subscription_memory>
 800e01c:	4956      	ldr	r1, [pc, #344]	@ (800e178 <rmw_init+0x224>)
 800e01e:	4857      	ldr	r0, [pc, #348]	@ (800e17c <rmw_init+0x228>)
 800e020:	220a      	movs	r2, #10
 800e022:	f000 fe05 	bl	800ec30 <rmw_uxrce_init_publisher_memory>
 800e026:	4956      	ldr	r1, [pc, #344]	@ (800e180 <rmw_init+0x22c>)
 800e028:	4856      	ldr	r0, [pc, #344]	@ (800e184 <rmw_init+0x230>)
 800e02a:	2201      	movs	r2, #1
 800e02c:	f000 fdc0 	bl	800ebb0 <rmw_uxrce_init_service_memory>
 800e030:	4955      	ldr	r1, [pc, #340]	@ (800e188 <rmw_init+0x234>)
 800e032:	4856      	ldr	r0, [pc, #344]	@ (800e18c <rmw_init+0x238>)
 800e034:	2201      	movs	r2, #1
 800e036:	f000 fddb 	bl	800ebf0 <rmw_uxrce_init_client_memory>
 800e03a:	4955      	ldr	r1, [pc, #340]	@ (800e190 <rmw_init+0x23c>)
 800e03c:	4855      	ldr	r0, [pc, #340]	@ (800e194 <rmw_init+0x240>)
 800e03e:	220f      	movs	r2, #15
 800e040:	f000 fe76 	bl	800ed30 <rmw_uxrce_init_topic_memory>
 800e044:	4954      	ldr	r1, [pc, #336]	@ (800e198 <rmw_init+0x244>)
 800e046:	4855      	ldr	r0, [pc, #340]	@ (800e19c <rmw_init+0x248>)
 800e048:	2203      	movs	r2, #3
 800e04a:	f000 feb1 	bl	800edb0 <rmw_uxrce_init_init_options_impl_memory>
 800e04e:	4954      	ldr	r1, [pc, #336]	@ (800e1a0 <rmw_init+0x24c>)
 800e050:	4854      	ldr	r0, [pc, #336]	@ (800e1a4 <rmw_init+0x250>)
 800e052:	2204      	movs	r2, #4
 800e054:	f000 fecc 	bl	800edf0 <rmw_uxrce_init_wait_set_memory>
 800e058:	4953      	ldr	r1, [pc, #332]	@ (800e1a8 <rmw_init+0x254>)
 800e05a:	4854      	ldr	r0, [pc, #336]	@ (800e1ac <rmw_init+0x258>)
 800e05c:	2204      	movs	r2, #4
 800e05e:	f000 fee7 	bl	800ee30 <rmw_uxrce_init_guard_condition_memory>
 800e062:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800e064:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800e066:	4642      	mov	r2, r8
 800e068:	f000 fd8a 	bl	800eb80 <rmw_uxrce_transport_init>
 800e06c:	4607      	mov	r7, r0
 800e06e:	2800      	cmp	r0, #0
 800e070:	d158      	bne.n	800e124 <rmw_init+0x1d0>
 800e072:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800e074:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800e078:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e07a:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800e07e:	4628      	mov	r0, r5
 800e080:	f001 fe82 	bl	800fd88 <uxr_init_session>
 800e084:	494a      	ldr	r1, [pc, #296]	@ (800e1b0 <rmw_init+0x25c>)
 800e086:	4622      	mov	r2, r4
 800e088:	4628      	mov	r0, r5
 800e08a:	f001 fea1 	bl	800fdd0 <uxr_set_topic_callback>
 800e08e:	4949      	ldr	r1, [pc, #292]	@ (800e1b4 <rmw_init+0x260>)
 800e090:	463a      	mov	r2, r7
 800e092:	4628      	mov	r0, r5
 800e094:	f001 fe98 	bl	800fdc8 <uxr_set_status_callback>
 800e098:	4947      	ldr	r1, [pc, #284]	@ (800e1b8 <rmw_init+0x264>)
 800e09a:	463a      	mov	r2, r7
 800e09c:	4628      	mov	r0, r5
 800e09e:	f001 fe9b 	bl	800fdd8 <uxr_set_request_callback>
 800e0a2:	4946      	ldr	r1, [pc, #280]	@ (800e1bc <rmw_init+0x268>)
 800e0a4:	463a      	mov	r2, r7
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	f001 fe9a 	bl	800fde0 <uxr_set_reply_callback>
 800e0ac:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e0b0:	2304      	movs	r3, #4
 800e0b2:	0092      	lsls	r2, r2, #2
 800e0b4:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800e0b8:	4628      	mov	r0, r5
 800e0ba:	f001 fecf 	bl	800fe5c <uxr_create_input_reliable_stream>
 800e0be:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e0c2:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800e0c6:	0092      	lsls	r2, r2, #2
 800e0c8:	2304      	movs	r3, #4
 800e0ca:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800e0ce:	4628      	mov	r0, r5
 800e0d0:	f001 fe9c 	bl	800fe0c <uxr_create_output_reliable_stream>
 800e0d4:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800e0d8:	4628      	mov	r0, r5
 800e0da:	f001 feb9 	bl	800fe50 <uxr_create_input_best_effort_stream>
 800e0de:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800e0e2:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800e0e6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e0ea:	3114      	adds	r1, #20
 800e0ec:	4628      	mov	r0, r5
 800e0ee:	f001 fe7b 	bl	800fde8 <uxr_create_output_best_effort_stream>
 800e0f2:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800e0f6:	4628      	mov	r0, r5
 800e0f8:	f002 fc06 	bl	8010908 <uxr_create_session>
 800e0fc:	b1f8      	cbz	r0, 800e13e <rmw_init+0x1ea>
 800e0fe:	4638      	mov	r0, r7
 800e100:	b003      	add	sp, #12
 800e102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e106:	270b      	movs	r7, #11
 800e108:	4638      	mov	r0, r7
 800e10a:	b003      	add	sp, #12
 800e10c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e110:	2701      	movs	r7, #1
 800e112:	4638      	mov	r0, r7
 800e114:	b003      	add	sp, #12
 800e116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e11a:	270c      	movs	r7, #12
 800e11c:	4638      	mov	r0, r7
 800e11e:	b003      	add	sp, #12
 800e120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e124:	4648      	mov	r0, r9
 800e126:	f001 fc3d 	bl	800f9a4 <uxr_close_custom_transport>
 800e12a:	480d      	ldr	r0, [pc, #52]	@ (800e160 <rmw_init+0x20c>)
 800e12c:	4621      	mov	r1, r4
 800e12e:	f007 fd93 	bl	8015c58 <put_memory>
 800e132:	4638      	mov	r0, r7
 800e134:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800e138:	b003      	add	sp, #12
 800e13a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e13e:	4648      	mov	r0, r9
 800e140:	f001 fc30 	bl	800f9a4 <uxr_close_custom_transport>
 800e144:	4806      	ldr	r0, [pc, #24]	@ (800e160 <rmw_init+0x20c>)
 800e146:	4621      	mov	r1, r4
 800e148:	f007 fd86 	bl	8015c58 <put_memory>
 800e14c:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800e14e:	2701      	movs	r7, #1
 800e150:	e7d5      	b.n	800e0fe <rmw_init+0x1aa>
 800e152:	bf00      	nop
 800e154:	080197c0 	.word	0x080197c0
 800e158:	2000b0fc 	.word	0x2000b0fc
 800e15c:	200073a8 	.word	0x200073a8
 800e160:	2000b0ec 	.word	0x2000b0ec
 800e164:	20008950 	.word	0x20008950
 800e168:	200069cc 	.word	0x200069cc
 800e16c:	2000b0bc 	.word	0x2000b0bc
 800e170:	2000aa50 	.word	0x2000aa50
 800e174:	2000b10c 	.word	0x2000b10c
 800e178:	20006a70 	.word	0x20006a70
 800e17c:	2000b0cc 	.word	0x2000b0cc
 800e180:	200072e0 	.word	0x200072e0
 800e184:	2000b0dc 	.word	0x2000b0dc
 800e188:	20006800 	.word	0x20006800
 800e18c:	200067f0 	.word	0x200067f0
 800e190:	2000ae88 	.word	0x2000ae88
 800e194:	2000b11c 	.word	0x2000b11c
 800e198:	20006948 	.word	0x20006948
 800e19c:	2000b0ac 	.word	0x2000b0ac
 800e1a0:	2000b02c 	.word	0x2000b02c
 800e1a4:	2000b12c 	.word	0x2000b12c
 800e1a8:	200068c8 	.word	0x200068c8
 800e1ac:	2000b09c 	.word	0x2000b09c
 800e1b0:	08015a71 	.word	0x08015a71
 800e1b4:	08015a69 	.word	0x08015a69
 800e1b8:	08015b09 	.word	0x08015b09
 800e1bc:	08015ba5 	.word	0x08015ba5

0800e1c0 <rmw_context_fini>:
 800e1c0:	4b17      	ldr	r3, [pc, #92]	@ (800e220 <rmw_context_fini+0x60>)
 800e1c2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800e1c4:	b570      	push	{r4, r5, r6, lr}
 800e1c6:	681c      	ldr	r4, [r3, #0]
 800e1c8:	4605      	mov	r5, r0
 800e1ca:	b334      	cbz	r4, 800e21a <rmw_context_fini+0x5a>
 800e1cc:	2600      	movs	r6, #0
 800e1ce:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800e1d2:	6902      	ldr	r2, [r0, #16]
 800e1d4:	428a      	cmp	r2, r1
 800e1d6:	d018      	beq.n	800e20a <rmw_context_fini+0x4a>
 800e1d8:	2c00      	cmp	r4, #0
 800e1da:	d1f8      	bne.n	800e1ce <rmw_context_fini+0xe>
 800e1dc:	b189      	cbz	r1, 800e202 <rmw_context_fini+0x42>
 800e1de:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800e1e2:	789b      	ldrb	r3, [r3, #2]
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800e1ea:	bf14      	ite	ne
 800e1ec:	210a      	movne	r1, #10
 800e1ee:	2100      	moveq	r1, #0
 800e1f0:	f002 fb62 	bl	80108b8 <uxr_delete_session_retries>
 800e1f4:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800e1f6:	f000 fe3b 	bl	800ee70 <rmw_uxrce_fini_session_memory>
 800e1fa:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800e1fc:	3010      	adds	r0, #16
 800e1fe:	f001 fbd1 	bl	800f9a4 <uxr_close_custom_transport>
 800e202:	2300      	movs	r3, #0
 800e204:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800e206:	4630      	mov	r0, r6
 800e208:	bd70      	pop	{r4, r5, r6, pc}
 800e20a:	3018      	adds	r0, #24
 800e20c:	f000 f89c 	bl	800e348 <rmw_destroy_node>
 800e210:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800e212:	4606      	mov	r6, r0
 800e214:	2c00      	cmp	r4, #0
 800e216:	d1da      	bne.n	800e1ce <rmw_context_fini+0xe>
 800e218:	e7e0      	b.n	800e1dc <rmw_context_fini+0x1c>
 800e21a:	4626      	mov	r6, r4
 800e21c:	e7de      	b.n	800e1dc <rmw_context_fini+0x1c>
 800e21e:	bf00      	nop
 800e220:	2000b0bc 	.word	0x2000b0bc

0800e224 <create_node>:
 800e224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e228:	b083      	sub	sp, #12
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d05f      	beq.n	800e2ee <create_node+0xca>
 800e22e:	4606      	mov	r6, r0
 800e230:	4835      	ldr	r0, [pc, #212]	@ (800e308 <create_node+0xe4>)
 800e232:	460f      	mov	r7, r1
 800e234:	4690      	mov	r8, r2
 800e236:	461d      	mov	r5, r3
 800e238:	f007 fcfe 	bl	8015c38 <get_memory>
 800e23c:	2800      	cmp	r0, #0
 800e23e:	d056      	beq.n	800e2ee <create_node+0xca>
 800e240:	6884      	ldr	r4, [r0, #8]
 800e242:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800e244:	6123      	str	r3, [r4, #16]
 800e246:	f7ff fd87 	bl	800dd58 <rmw_get_implementation_identifier>
 800e24a:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800e24e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800e252:	f8c4 9020 	str.w	r9, [r4, #32]
 800e256:	4630      	mov	r0, r6
 800e258:	f7f1 ffec 	bl	8000234 <strlen>
 800e25c:	1c42      	adds	r2, r0, #1
 800e25e:	2a3c      	cmp	r2, #60	@ 0x3c
 800e260:	f104 0518 	add.w	r5, r4, #24
 800e264:	d840      	bhi.n	800e2e8 <create_node+0xc4>
 800e266:	4648      	mov	r0, r9
 800e268:	4631      	mov	r1, r6
 800e26a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800e26e:	f009 fb94 	bl	801799a <memcpy>
 800e272:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800e276:	4638      	mov	r0, r7
 800e278:	f7f1 ffdc 	bl	8000234 <strlen>
 800e27c:	1c42      	adds	r2, r0, #1
 800e27e:	2a3c      	cmp	r2, #60	@ 0x3c
 800e280:	d832      	bhi.n	800e2e8 <create_node+0xc4>
 800e282:	4639      	mov	r1, r7
 800e284:	4648      	mov	r0, r9
 800e286:	f009 fb88 	bl	801799a <memcpy>
 800e28a:	6923      	ldr	r3, [r4, #16]
 800e28c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e290:	2101      	movs	r1, #1
 800e292:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800e296:	1842      	adds	r2, r0, r1
 800e298:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800e29c:	f001 fb86 	bl	800f9ac <uxr_object_id>
 800e2a0:	6160      	str	r0, [r4, #20]
 800e2a2:	783b      	ldrb	r3, [r7, #0]
 800e2a4:	2b2f      	cmp	r3, #47	@ 0x2f
 800e2a6:	d127      	bne.n	800e2f8 <create_node+0xd4>
 800e2a8:	787b      	ldrb	r3, [r7, #1]
 800e2aa:	bb2b      	cbnz	r3, 800e2f8 <create_node+0xd4>
 800e2ac:	4a17      	ldr	r2, [pc, #92]	@ (800e30c <create_node+0xe8>)
 800e2ae:	4818      	ldr	r0, [pc, #96]	@ (800e310 <create_node+0xec>)
 800e2b0:	4633      	mov	r3, r6
 800e2b2:	213c      	movs	r1, #60	@ 0x3c
 800e2b4:	f009 f9ce 	bl	8017654 <sniprintf>
 800e2b8:	6920      	ldr	r0, [r4, #16]
 800e2ba:	4915      	ldr	r1, [pc, #84]	@ (800e310 <create_node+0xec>)
 800e2bc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800e2c0:	9100      	str	r1, [sp, #0]
 800e2c2:	2106      	movs	r1, #6
 800e2c4:	9101      	str	r1, [sp, #4]
 800e2c6:	6811      	ldr	r1, [r2, #0]
 800e2c8:	6962      	ldr	r2, [r4, #20]
 800e2ca:	fa1f f388 	uxth.w	r3, r8
 800e2ce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e2d2:	f001 f961 	bl	800f598 <uxr_buffer_create_participant_bin>
 800e2d6:	4602      	mov	r2, r0
 800e2d8:	6920      	ldr	r0, [r4, #16]
 800e2da:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e2de:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e2e2:	f000 ff3b 	bl	800f15c <run_xrce_session>
 800e2e6:	b918      	cbnz	r0, 800e2f0 <create_node+0xcc>
 800e2e8:	4628      	mov	r0, r5
 800e2ea:	f000 fdc7 	bl	800ee7c <rmw_uxrce_fini_node_memory>
 800e2ee:	2500      	movs	r5, #0
 800e2f0:	4628      	mov	r0, r5
 800e2f2:	b003      	add	sp, #12
 800e2f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2f8:	4a06      	ldr	r2, [pc, #24]	@ (800e314 <create_node+0xf0>)
 800e2fa:	9600      	str	r6, [sp, #0]
 800e2fc:	463b      	mov	r3, r7
 800e2fe:	213c      	movs	r1, #60	@ 0x3c
 800e300:	4803      	ldr	r0, [pc, #12]	@ (800e310 <create_node+0xec>)
 800e302:	f009 f9a7 	bl	8017654 <sniprintf>
 800e306:	e7d7      	b.n	800e2b8 <create_node+0x94>
 800e308:	2000b0bc 	.word	0x2000b0bc
 800e30c:	08019358 	.word	0x08019358
 800e310:	200067b4 	.word	0x200067b4
 800e314:	08018e54 	.word	0x08018e54

0800e318 <rmw_create_node>:
 800e318:	b199      	cbz	r1, 800e342 <rmw_create_node+0x2a>
 800e31a:	780b      	ldrb	r3, [r1, #0]
 800e31c:	468c      	mov	ip, r1
 800e31e:	b183      	cbz	r3, 800e342 <rmw_create_node+0x2a>
 800e320:	b410      	push	{r4}
 800e322:	4614      	mov	r4, r2
 800e324:	b14a      	cbz	r2, 800e33a <rmw_create_node+0x22>
 800e326:	7813      	ldrb	r3, [r2, #0]
 800e328:	b13b      	cbz	r3, 800e33a <rmw_create_node+0x22>
 800e32a:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800e32c:	4603      	mov	r3, r0
 800e32e:	4621      	mov	r1, r4
 800e330:	4660      	mov	r0, ip
 800e332:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e336:	f7ff bf75 	b.w	800e224 <create_node>
 800e33a:	2000      	movs	r0, #0
 800e33c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e340:	4770      	bx	lr
 800e342:	2000      	movs	r0, #0
 800e344:	4770      	bx	lr
 800e346:	bf00      	nop

0800e348 <rmw_destroy_node>:
 800e348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e34a:	b328      	cbz	r0, 800e398 <rmw_destroy_node+0x50>
 800e34c:	4607      	mov	r7, r0
 800e34e:	6800      	ldr	r0, [r0, #0]
 800e350:	b120      	cbz	r0, 800e35c <rmw_destroy_node+0x14>
 800e352:	4b36      	ldr	r3, [pc, #216]	@ (800e42c <rmw_destroy_node+0xe4>)
 800e354:	6819      	ldr	r1, [r3, #0]
 800e356:	f7f1 ff63 	bl	8000220 <strcmp>
 800e35a:	b9e8      	cbnz	r0, 800e398 <rmw_destroy_node+0x50>
 800e35c:	687d      	ldr	r5, [r7, #4]
 800e35e:	b1dd      	cbz	r5, 800e398 <rmw_destroy_node+0x50>
 800e360:	4b33      	ldr	r3, [pc, #204]	@ (800e430 <rmw_destroy_node+0xe8>)
 800e362:	681c      	ldr	r4, [r3, #0]
 800e364:	2c00      	cmp	r4, #0
 800e366:	d05f      	beq.n	800e428 <rmw_destroy_node+0xe0>
 800e368:	2600      	movs	r6, #0
 800e36a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e36e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800e372:	429d      	cmp	r5, r3
 800e374:	d013      	beq.n	800e39e <rmw_destroy_node+0x56>
 800e376:	2c00      	cmp	r4, #0
 800e378:	d1f7      	bne.n	800e36a <rmw_destroy_node+0x22>
 800e37a:	4b2e      	ldr	r3, [pc, #184]	@ (800e434 <rmw_destroy_node+0xec>)
 800e37c:	681c      	ldr	r4, [r3, #0]
 800e37e:	b1c4      	cbz	r4, 800e3b2 <rmw_destroy_node+0x6a>
 800e380:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e384:	6a0b      	ldr	r3, [r1, #32]
 800e386:	429d      	cmp	r5, r3
 800e388:	d1f9      	bne.n	800e37e <rmw_destroy_node+0x36>
 800e38a:	317c      	adds	r1, #124	@ 0x7c
 800e38c:	4638      	mov	r0, r7
 800e38e:	f000 fb97 	bl	800eac0 <rmw_destroy_subscription>
 800e392:	2801      	cmp	r0, #1
 800e394:	4606      	mov	r6, r0
 800e396:	d1f2      	bne.n	800e37e <rmw_destroy_node+0x36>
 800e398:	2601      	movs	r6, #1
 800e39a:	4630      	mov	r0, r6
 800e39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e39e:	3184      	adds	r1, #132	@ 0x84
 800e3a0:	4638      	mov	r0, r7
 800e3a2:	f000 f9a5 	bl	800e6f0 <rmw_destroy_publisher>
 800e3a6:	2801      	cmp	r0, #1
 800e3a8:	4606      	mov	r6, r0
 800e3aa:	d0f5      	beq.n	800e398 <rmw_destroy_node+0x50>
 800e3ac:	2c00      	cmp	r4, #0
 800e3ae:	d1dc      	bne.n	800e36a <rmw_destroy_node+0x22>
 800e3b0:	e7e3      	b.n	800e37a <rmw_destroy_node+0x32>
 800e3b2:	4b21      	ldr	r3, [pc, #132]	@ (800e438 <rmw_destroy_node+0xf0>)
 800e3b4:	681c      	ldr	r4, [r3, #0]
 800e3b6:	b16c      	cbz	r4, 800e3d4 <rmw_destroy_node+0x8c>
 800e3b8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e3bc:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e3be:	429d      	cmp	r5, r3
 800e3c0:	d1f9      	bne.n	800e3b6 <rmw_destroy_node+0x6e>
 800e3c2:	317c      	adds	r1, #124	@ 0x7c
 800e3c4:	4638      	mov	r0, r7
 800e3c6:	f000 fb37 	bl	800ea38 <rmw_destroy_service>
 800e3ca:	2801      	cmp	r0, #1
 800e3cc:	4606      	mov	r6, r0
 800e3ce:	d0e3      	beq.n	800e398 <rmw_destroy_node+0x50>
 800e3d0:	2c00      	cmp	r4, #0
 800e3d2:	d1f1      	bne.n	800e3b8 <rmw_destroy_node+0x70>
 800e3d4:	4b19      	ldr	r3, [pc, #100]	@ (800e43c <rmw_destroy_node+0xf4>)
 800e3d6:	681c      	ldr	r4, [r3, #0]
 800e3d8:	b16c      	cbz	r4, 800e3f6 <rmw_destroy_node+0xae>
 800e3da:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e3de:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e3e0:	429d      	cmp	r5, r3
 800e3e2:	d1f9      	bne.n	800e3d8 <rmw_destroy_node+0x90>
 800e3e4:	317c      	adds	r1, #124	@ 0x7c
 800e3e6:	4638      	mov	r0, r7
 800e3e8:	f7ff fc52 	bl	800dc90 <rmw_destroy_client>
 800e3ec:	2801      	cmp	r0, #1
 800e3ee:	4606      	mov	r6, r0
 800e3f0:	d0d2      	beq.n	800e398 <rmw_destroy_node+0x50>
 800e3f2:	2c00      	cmp	r4, #0
 800e3f4:	d1f1      	bne.n	800e3da <rmw_destroy_node+0x92>
 800e3f6:	6928      	ldr	r0, [r5, #16]
 800e3f8:	696a      	ldr	r2, [r5, #20]
 800e3fa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e3fe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e402:	6819      	ldr	r1, [r3, #0]
 800e404:	f001 f87c 	bl	800f500 <uxr_buffer_delete_entity>
 800e408:	4602      	mov	r2, r0
 800e40a:	6928      	ldr	r0, [r5, #16]
 800e40c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e410:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e414:	f000 fea2 	bl	800f15c <run_xrce_session>
 800e418:	2800      	cmp	r0, #0
 800e41a:	bf08      	it	eq
 800e41c:	2602      	moveq	r6, #2
 800e41e:	4638      	mov	r0, r7
 800e420:	f000 fd2c 	bl	800ee7c <rmw_uxrce_fini_node_memory>
 800e424:	4630      	mov	r0, r6
 800e426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e428:	4626      	mov	r6, r4
 800e42a:	e7a6      	b.n	800e37a <rmw_destroy_node+0x32>
 800e42c:	080197c0 	.word	0x080197c0
 800e430:	2000b0cc 	.word	0x2000b0cc
 800e434:	2000b10c 	.word	0x2000b10c
 800e438:	2000b0dc 	.word	0x2000b0dc
 800e43c:	200067f0 	.word	0x200067f0

0800e440 <rmw_node_get_graph_guard_condition>:
 800e440:	6843      	ldr	r3, [r0, #4]
 800e442:	6918      	ldr	r0, [r3, #16]
 800e444:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800e448:	4770      	bx	lr
 800e44a:	bf00      	nop

0800e44c <flush_session>:
 800e44c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800e44e:	f002 b8eb 	b.w	8010628 <uxr_run_session_until_confirm_delivery>
 800e452:	bf00      	nop

0800e454 <rmw_publish>:
 800e454:	2800      	cmp	r0, #0
 800e456:	d053      	beq.n	800e500 <rmw_publish+0xac>
 800e458:	b570      	push	{r4, r5, r6, lr}
 800e45a:	460d      	mov	r5, r1
 800e45c:	b08e      	sub	sp, #56	@ 0x38
 800e45e:	2900      	cmp	r1, #0
 800e460:	d04b      	beq.n	800e4fa <rmw_publish+0xa6>
 800e462:	4604      	mov	r4, r0
 800e464:	6800      	ldr	r0, [r0, #0]
 800e466:	f000 ff93 	bl	800f390 <is_uxrce_rmw_identifier_valid>
 800e46a:	2800      	cmp	r0, #0
 800e46c:	d045      	beq.n	800e4fa <rmw_publish+0xa6>
 800e46e:	6866      	ldr	r6, [r4, #4]
 800e470:	2e00      	cmp	r6, #0
 800e472:	d042      	beq.n	800e4fa <rmw_publish+0xa6>
 800e474:	69b4      	ldr	r4, [r6, #24]
 800e476:	4628      	mov	r0, r5
 800e478:	6923      	ldr	r3, [r4, #16]
 800e47a:	4798      	blx	r3
 800e47c:	69f3      	ldr	r3, [r6, #28]
 800e47e:	9005      	str	r0, [sp, #20]
 800e480:	b113      	cbz	r3, 800e488 <rmw_publish+0x34>
 800e482:	a805      	add	r0, sp, #20
 800e484:	4798      	blx	r3
 800e486:	9805      	ldr	r0, [sp, #20]
 800e488:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e48c:	691b      	ldr	r3, [r3, #16]
 800e48e:	9000      	str	r0, [sp, #0]
 800e490:	6972      	ldr	r2, [r6, #20]
 800e492:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e494:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e498:	ab06      	add	r3, sp, #24
 800e49a:	f003 fb43 	bl	8011b24 <uxr_prepare_output_stream>
 800e49e:	b1d8      	cbz	r0, 800e4d8 <rmw_publish+0x84>
 800e4a0:	68a3      	ldr	r3, [r4, #8]
 800e4a2:	a906      	add	r1, sp, #24
 800e4a4:	4628      	mov	r0, r5
 800e4a6:	4798      	blx	r3
 800e4a8:	6a33      	ldr	r3, [r6, #32]
 800e4aa:	4604      	mov	r4, r0
 800e4ac:	b10b      	cbz	r3, 800e4b2 <rmw_publish+0x5e>
 800e4ae:	a806      	add	r0, sp, #24
 800e4b0:	4798      	blx	r3
 800e4b2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800e4b6:	2b01      	cmp	r3, #1
 800e4b8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e4bc:	d022      	beq.n	800e504 <rmw_publish+0xb0>
 800e4be:	6918      	ldr	r0, [r3, #16]
 800e4c0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800e4c2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e4c6:	f002 f8af 	bl	8010628 <uxr_run_session_until_confirm_delivery>
 800e4ca:	4020      	ands	r0, r4
 800e4cc:	b2c4      	uxtb	r4, r0
 800e4ce:	f084 0001 	eor.w	r0, r4, #1
 800e4d2:	b2c0      	uxtb	r0, r0
 800e4d4:	b00e      	add	sp, #56	@ 0x38
 800e4d6:	bd70      	pop	{r4, r5, r6, pc}
 800e4d8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e4dc:	6918      	ldr	r0, [r3, #16]
 800e4de:	9b05      	ldr	r3, [sp, #20]
 800e4e0:	9300      	str	r3, [sp, #0]
 800e4e2:	4b0b      	ldr	r3, [pc, #44]	@ (800e510 <rmw_publish+0xbc>)
 800e4e4:	9301      	str	r3, [sp, #4]
 800e4e6:	9602      	str	r6, [sp, #8]
 800e4e8:	6972      	ldr	r2, [r6, #20]
 800e4ea:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e4ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e4f0:	ab06      	add	r3, sp, #24
 800e4f2:	f003 fb47 	bl	8011b84 <uxr_prepare_output_stream_fragmented>
 800e4f6:	2800      	cmp	r0, #0
 800e4f8:	d1d2      	bne.n	800e4a0 <rmw_publish+0x4c>
 800e4fa:	2001      	movs	r0, #1
 800e4fc:	b00e      	add	sp, #56	@ 0x38
 800e4fe:	bd70      	pop	{r4, r5, r6, pc}
 800e500:	2001      	movs	r0, #1
 800e502:	4770      	bx	lr
 800e504:	6918      	ldr	r0, [r3, #16]
 800e506:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e50a:	f001 fccd 	bl	800fea8 <uxr_flash_output_streams>
 800e50e:	e7de      	b.n	800e4ce <rmw_publish+0x7a>
 800e510:	0800e44d 	.word	0x0800e44d

0800e514 <rmw_create_publisher>:
 800e514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e518:	b087      	sub	sp, #28
 800e51a:	2800      	cmp	r0, #0
 800e51c:	f000 80cc 	beq.w	800e6b8 <rmw_create_publisher+0x1a4>
 800e520:	460e      	mov	r6, r1
 800e522:	2900      	cmp	r1, #0
 800e524:	f000 80c8 	beq.w	800e6b8 <rmw_create_publisher+0x1a4>
 800e528:	4604      	mov	r4, r0
 800e52a:	6800      	ldr	r0, [r0, #0]
 800e52c:	4615      	mov	r5, r2
 800e52e:	4698      	mov	r8, r3
 800e530:	f000 ff2e 	bl	800f390 <is_uxrce_rmw_identifier_valid>
 800e534:	2800      	cmp	r0, #0
 800e536:	f000 80bf 	beq.w	800e6b8 <rmw_create_publisher+0x1a4>
 800e53a:	2d00      	cmp	r5, #0
 800e53c:	f000 80bc 	beq.w	800e6b8 <rmw_create_publisher+0x1a4>
 800e540:	782b      	ldrb	r3, [r5, #0]
 800e542:	2b00      	cmp	r3, #0
 800e544:	f000 80b8 	beq.w	800e6b8 <rmw_create_publisher+0x1a4>
 800e548:	f1b8 0f00 	cmp.w	r8, #0
 800e54c:	f000 80b4 	beq.w	800e6b8 <rmw_create_publisher+0x1a4>
 800e550:	485c      	ldr	r0, [pc, #368]	@ (800e6c4 <rmw_create_publisher+0x1b0>)
 800e552:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e556:	f007 fb6f 	bl	8015c38 <get_memory>
 800e55a:	2800      	cmp	r0, #0
 800e55c:	f000 80ac 	beq.w	800e6b8 <rmw_create_publisher+0x1a4>
 800e560:	6884      	ldr	r4, [r0, #8]
 800e562:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800e566:	f7ff fbf7 	bl	800dd58 <rmw_get_implementation_identifier>
 800e56a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800e56e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800e572:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800e576:	4628      	mov	r0, r5
 800e578:	f7f1 fe5c 	bl	8000234 <strlen>
 800e57c:	3001      	adds	r0, #1
 800e57e:	283c      	cmp	r0, #60	@ 0x3c
 800e580:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800e584:	f200 8091 	bhi.w	800e6aa <rmw_create_publisher+0x196>
 800e588:	4a4f      	ldr	r2, [pc, #316]	@ (800e6c8 <rmw_create_publisher+0x1b4>)
 800e58a:	462b      	mov	r3, r5
 800e58c:	213c      	movs	r1, #60	@ 0x3c
 800e58e:	4650      	mov	r0, sl
 800e590:	f009 f860 	bl	8017654 <sniprintf>
 800e594:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e598:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800e59a:	4641      	mov	r1, r8
 800e59c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800e5a0:	2250      	movs	r2, #80	@ 0x50
 800e5a2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e5a6:	f009 f9f8 	bl	801799a <memcpy>
 800e5aa:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e5ae:	4947      	ldr	r1, [pc, #284]	@ (800e6cc <rmw_create_publisher+0x1b8>)
 800e5b0:	2b02      	cmp	r3, #2
 800e5b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e5b6:	bf0c      	ite	eq
 800e5b8:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800e5bc:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800e5c0:	67a3      	str	r3, [r4, #120]	@ 0x78
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800e5c8:	4630      	mov	r0, r6
 800e5ca:	f000 feef 	bl	800f3ac <get_message_typesupport_handle>
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	d06b      	beq.n	800e6aa <rmw_create_publisher+0x196>
 800e5d2:	6842      	ldr	r2, [r0, #4]
 800e5d4:	61a2      	str	r2, [r4, #24]
 800e5d6:	2a00      	cmp	r2, #0
 800e5d8:	d067      	beq.n	800e6aa <rmw_create_publisher+0x196>
 800e5da:	4629      	mov	r1, r5
 800e5dc:	4643      	mov	r3, r8
 800e5de:	4648      	mov	r0, r9
 800e5e0:	f007 fb76 	bl	8015cd0 <create_topic>
 800e5e4:	6260      	str	r0, [r4, #36]	@ 0x24
 800e5e6:	2800      	cmp	r0, #0
 800e5e8:	d063      	beq.n	800e6b2 <rmw_create_publisher+0x19e>
 800e5ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e5ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e5f2:	2103      	movs	r1, #3
 800e5f4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800e5f8:	1c42      	adds	r2, r0, #1
 800e5fa:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800e5fe:	f001 f9d5 	bl	800f9ac <uxr_object_id>
 800e602:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800e606:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e60a:	6120      	str	r0, [r4, #16]
 800e60c:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800e610:	6910      	ldr	r0, [r2, #16]
 800e612:	2506      	movs	r5, #6
 800e614:	9500      	str	r5, [sp, #0]
 800e616:	6819      	ldr	r1, [r3, #0]
 800e618:	6922      	ldr	r2, [r4, #16]
 800e61a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e61e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e622:	f001 f821 	bl	800f668 <uxr_buffer_create_publisher_bin>
 800e626:	4602      	mov	r2, r0
 800e628:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e62c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e630:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e634:	f000 fd92 	bl	800f15c <run_xrce_session>
 800e638:	b3b8      	cbz	r0, 800e6aa <rmw_create_publisher+0x196>
 800e63a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e63e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e642:	2105      	movs	r1, #5
 800e644:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800e648:	1c42      	adds	r2, r0, #1
 800e64a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800e64e:	f001 f9ad 	bl	800f9ac <uxr_object_id>
 800e652:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e656:	6160      	str	r0, [r4, #20]
 800e658:	691e      	ldr	r6, [r3, #16]
 800e65a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e65e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800e662:	f10d 0a10 	add.w	sl, sp, #16
 800e666:	4641      	mov	r1, r8
 800e668:	4650      	mov	r0, sl
 800e66a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800e66e:	f000 fd91 	bl	800f194 <convert_qos_profile>
 800e672:	9503      	str	r5, [sp, #12]
 800e674:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800e678:	9001      	str	r0, [sp, #4]
 800e67a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e67e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e682:	9300      	str	r3, [sp, #0]
 800e684:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800e688:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e68c:	f8d8 1000 	ldr.w	r1, [r8]
 800e690:	4630      	mov	r0, r6
 800e692:	f001 f819 	bl	800f6c8 <uxr_buffer_create_datawriter_bin>
 800e696:	4602      	mov	r2, r0
 800e698:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e69c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e6a0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e6a4:	f000 fd5a 	bl	800f15c <run_xrce_session>
 800e6a8:	b938      	cbnz	r0, 800e6ba <rmw_create_publisher+0x1a6>
 800e6aa:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e6ac:	b108      	cbz	r0, 800e6b2 <rmw_create_publisher+0x19e>
 800e6ae:	f000 fc55 	bl	800ef5c <rmw_uxrce_fini_topic_memory>
 800e6b2:	4638      	mov	r0, r7
 800e6b4:	f000 fbfa 	bl	800eeac <rmw_uxrce_fini_publisher_memory>
 800e6b8:	2700      	movs	r7, #0
 800e6ba:	4638      	mov	r0, r7
 800e6bc:	b007      	add	sp, #28
 800e6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6c2:	bf00      	nop
 800e6c4:	2000b0cc 	.word	0x2000b0cc
 800e6c8:	08019358 	.word	0x08019358
 800e6cc:	0801895c 	.word	0x0801895c

0800e6d0 <rmw_publisher_get_actual_qos>:
 800e6d0:	b150      	cbz	r0, 800e6e8 <rmw_publisher_get_actual_qos+0x18>
 800e6d2:	b508      	push	{r3, lr}
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	b149      	cbz	r1, 800e6ec <rmw_publisher_get_actual_qos+0x1c>
 800e6d8:	6841      	ldr	r1, [r0, #4]
 800e6da:	2250      	movs	r2, #80	@ 0x50
 800e6dc:	3128      	adds	r1, #40	@ 0x28
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f009 f95b 	bl	801799a <memcpy>
 800e6e4:	2000      	movs	r0, #0
 800e6e6:	bd08      	pop	{r3, pc}
 800e6e8:	200b      	movs	r0, #11
 800e6ea:	4770      	bx	lr
 800e6ec:	200b      	movs	r0, #11
 800e6ee:	bd08      	pop	{r3, pc}

0800e6f0 <rmw_destroy_publisher>:
 800e6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6f2:	b128      	cbz	r0, 800e700 <rmw_destroy_publisher+0x10>
 800e6f4:	4604      	mov	r4, r0
 800e6f6:	6800      	ldr	r0, [r0, #0]
 800e6f8:	460d      	mov	r5, r1
 800e6fa:	f000 fe49 	bl	800f390 <is_uxrce_rmw_identifier_valid>
 800e6fe:	b910      	cbnz	r0, 800e706 <rmw_destroy_publisher+0x16>
 800e700:	2401      	movs	r4, #1
 800e702:	4620      	mov	r0, r4
 800e704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e706:	6863      	ldr	r3, [r4, #4]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d0f9      	beq.n	800e700 <rmw_destroy_publisher+0x10>
 800e70c:	2d00      	cmp	r5, #0
 800e70e:	d0f7      	beq.n	800e700 <rmw_destroy_publisher+0x10>
 800e710:	6828      	ldr	r0, [r5, #0]
 800e712:	f000 fe3d 	bl	800f390 <is_uxrce_rmw_identifier_valid>
 800e716:	2800      	cmp	r0, #0
 800e718:	d0f2      	beq.n	800e700 <rmw_destroy_publisher+0x10>
 800e71a:	686c      	ldr	r4, [r5, #4]
 800e71c:	2c00      	cmp	r4, #0
 800e71e:	d0ef      	beq.n	800e700 <rmw_destroy_publisher+0x10>
 800e720:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e722:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800e726:	f007 fb23 	bl	8015d70 <destroy_topic>
 800e72a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e72e:	6962      	ldr	r2, [r4, #20]
 800e730:	6918      	ldr	r0, [r3, #16]
 800e732:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e736:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e73a:	6819      	ldr	r1, [r3, #0]
 800e73c:	f000 fee0 	bl	800f500 <uxr_buffer_delete_entity>
 800e740:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e744:	6922      	ldr	r2, [r4, #16]
 800e746:	691b      	ldr	r3, [r3, #16]
 800e748:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e74c:	4604      	mov	r4, r0
 800e74e:	6809      	ldr	r1, [r1, #0]
 800e750:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e754:	f000 fed4 	bl	800f500 <uxr_buffer_delete_entity>
 800e758:	693e      	ldr	r6, [r7, #16]
 800e75a:	4622      	mov	r2, r4
 800e75c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e760:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e764:	4604      	mov	r4, r0
 800e766:	4630      	mov	r0, r6
 800e768:	f000 fcf8 	bl	800f15c <run_xrce_session>
 800e76c:	693e      	ldr	r6, [r7, #16]
 800e76e:	4622      	mov	r2, r4
 800e770:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e774:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e778:	4604      	mov	r4, r0
 800e77a:	4630      	mov	r0, r6
 800e77c:	f000 fcee 	bl	800f15c <run_xrce_session>
 800e780:	b12c      	cbz	r4, 800e78e <rmw_destroy_publisher+0x9e>
 800e782:	b120      	cbz	r0, 800e78e <rmw_destroy_publisher+0x9e>
 800e784:	2400      	movs	r4, #0
 800e786:	4628      	mov	r0, r5
 800e788:	f000 fb90 	bl	800eeac <rmw_uxrce_fini_publisher_memory>
 800e78c:	e7b9      	b.n	800e702 <rmw_destroy_publisher+0x12>
 800e78e:	2402      	movs	r4, #2
 800e790:	e7f9      	b.n	800e786 <rmw_destroy_publisher+0x96>
 800e792:	bf00      	nop

0800e794 <rmw_send_request>:
 800e794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e798:	4604      	mov	r4, r0
 800e79a:	6800      	ldr	r0, [r0, #0]
 800e79c:	b08b      	sub	sp, #44	@ 0x2c
 800e79e:	460e      	mov	r6, r1
 800e7a0:	4615      	mov	r5, r2
 800e7a2:	b128      	cbz	r0, 800e7b0 <rmw_send_request+0x1c>
 800e7a4:	4b21      	ldr	r3, [pc, #132]	@ (800e82c <rmw_send_request+0x98>)
 800e7a6:	6819      	ldr	r1, [r3, #0]
 800e7a8:	f7f1 fd3a 	bl	8000220 <strcmp>
 800e7ac:	2800      	cmp	r0, #0
 800e7ae:	d139      	bne.n	800e824 <rmw_send_request+0x90>
 800e7b0:	6864      	ldr	r4, [r4, #4]
 800e7b2:	6963      	ldr	r3, [r4, #20]
 800e7b4:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 800e7b8:	689b      	ldr	r3, [r3, #8]
 800e7ba:	4798      	blx	r3
 800e7bc:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800e7c0:	4630      	mov	r0, r6
 800e7c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e7c6:	4798      	blx	r3
 800e7c8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e7cc:	9000      	str	r0, [sp, #0]
 800e7ce:	6922      	ldr	r2, [r4, #16]
 800e7d0:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800e7d2:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e7d6:	ab02      	add	r3, sp, #8
 800e7d8:	f003 f9a4 	bl	8011b24 <uxr_prepare_output_stream>
 800e7dc:	2700      	movs	r7, #0
 800e7de:	6028      	str	r0, [r5, #0]
 800e7e0:	606f      	str	r7, [r5, #4]
 800e7e2:	b198      	cbz	r0, 800e80c <rmw_send_request+0x78>
 800e7e4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e7e8:	a902      	add	r1, sp, #8
 800e7ea:	4630      	mov	r0, r6
 800e7ec:	4798      	blx	r3
 800e7ee:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 800e7f2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800e7f6:	2b01      	cmp	r3, #1
 800e7f8:	d00c      	beq.n	800e814 <rmw_send_request+0x80>
 800e7fa:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800e7fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e800:	f001 ff12 	bl	8010628 <uxr_run_session_until_confirm_delivery>
 800e804:	4638      	mov	r0, r7
 800e806:	b00b      	add	sp, #44	@ 0x2c
 800e808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e80c:	2001      	movs	r0, #1
 800e80e:	b00b      	add	sp, #44	@ 0x2c
 800e810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e814:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e818:	f001 fb46 	bl	800fea8 <uxr_flash_output_streams>
 800e81c:	4638      	mov	r0, r7
 800e81e:	b00b      	add	sp, #44	@ 0x2c
 800e820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e824:	200c      	movs	r0, #12
 800e826:	b00b      	add	sp, #44	@ 0x2c
 800e828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e82c:	080197c0 	.word	0x080197c0

0800e830 <rmw_take_request>:
 800e830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e834:	4605      	mov	r5, r0
 800e836:	6800      	ldr	r0, [r0, #0]
 800e838:	b089      	sub	sp, #36	@ 0x24
 800e83a:	460c      	mov	r4, r1
 800e83c:	4690      	mov	r8, r2
 800e83e:	461e      	mov	r6, r3
 800e840:	b128      	cbz	r0, 800e84e <rmw_take_request+0x1e>
 800e842:	4b28      	ldr	r3, [pc, #160]	@ (800e8e4 <rmw_take_request+0xb4>)
 800e844:	6819      	ldr	r1, [r3, #0]
 800e846:	f7f1 fceb 	bl	8000220 <strcmp>
 800e84a:	2800      	cmp	r0, #0
 800e84c:	d146      	bne.n	800e8dc <rmw_take_request+0xac>
 800e84e:	b10e      	cbz	r6, 800e854 <rmw_take_request+0x24>
 800e850:	2300      	movs	r3, #0
 800e852:	7033      	strb	r3, [r6, #0]
 800e854:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800e858:	f000 fc02 	bl	800f060 <rmw_uxrce_clean_expired_static_input_buffer>
 800e85c:	4648      	mov	r0, r9
 800e85e:	f000 fbd9 	bl	800f014 <rmw_uxrce_find_static_input_buffer_by_owner>
 800e862:	4607      	mov	r7, r0
 800e864:	b3b0      	cbz	r0, 800e8d4 <rmw_take_request+0xa4>
 800e866:	6885      	ldr	r5, [r0, #8]
 800e868:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 800e86c:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 800e870:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800e874:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 800e878:	7423      	strb	r3, [r4, #16]
 800e87a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 800e87e:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 800e882:	74e2      	strb	r2, [r4, #19]
 800e884:	f8a4 3011 	strh.w	r3, [r4, #17]
 800e888:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 800e88c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 800e890:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 800e894:	61e1      	str	r1, [r4, #28]
 800e896:	6162      	str	r2, [r4, #20]
 800e898:	61a3      	str	r3, [r4, #24]
 800e89a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e89e:	689b      	ldr	r3, [r3, #8]
 800e8a0:	4798      	blx	r3
 800e8a2:	6844      	ldr	r4, [r0, #4]
 800e8a4:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 800e8a8:	f105 0110 	add.w	r1, r5, #16
 800e8ac:	4668      	mov	r0, sp
 800e8ae:	f7fc fe5f 	bl	800b570 <ucdr_init_buffer>
 800e8b2:	68e3      	ldr	r3, [r4, #12]
 800e8b4:	4641      	mov	r1, r8
 800e8b6:	4668      	mov	r0, sp
 800e8b8:	4798      	blx	r3
 800e8ba:	4639      	mov	r1, r7
 800e8bc:	4604      	mov	r4, r0
 800e8be:	480a      	ldr	r0, [pc, #40]	@ (800e8e8 <rmw_take_request+0xb8>)
 800e8c0:	f007 f9ca 	bl	8015c58 <put_memory>
 800e8c4:	b106      	cbz	r6, 800e8c8 <rmw_take_request+0x98>
 800e8c6:	7034      	strb	r4, [r6, #0]
 800e8c8:	f084 0001 	eor.w	r0, r4, #1
 800e8cc:	b2c0      	uxtb	r0, r0
 800e8ce:	b009      	add	sp, #36	@ 0x24
 800e8d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8d4:	2001      	movs	r0, #1
 800e8d6:	b009      	add	sp, #36	@ 0x24
 800e8d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8dc:	200c      	movs	r0, #12
 800e8de:	b009      	add	sp, #36	@ 0x24
 800e8e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8e4:	080197c0 	.word	0x080197c0
 800e8e8:	2000b0fc 	.word	0x2000b0fc

0800e8ec <rmw_send_response>:
 800e8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8ee:	4605      	mov	r5, r0
 800e8f0:	6800      	ldr	r0, [r0, #0]
 800e8f2:	b091      	sub	sp, #68	@ 0x44
 800e8f4:	460c      	mov	r4, r1
 800e8f6:	4616      	mov	r6, r2
 800e8f8:	b128      	cbz	r0, 800e906 <rmw_send_response+0x1a>
 800e8fa:	4b29      	ldr	r3, [pc, #164]	@ (800e9a0 <rmw_send_response+0xb4>)
 800e8fc:	6819      	ldr	r1, [r3, #0]
 800e8fe:	f7f1 fc8f 	bl	8000220 <strcmp>
 800e902:	2800      	cmp	r0, #0
 800e904:	d141      	bne.n	800e98a <rmw_send_response+0x9e>
 800e906:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800e90a:	9306      	str	r3, [sp, #24]
 800e90c:	4623      	mov	r3, r4
 800e90e:	9207      	str	r2, [sp, #28]
 800e910:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e914:	686d      	ldr	r5, [r5, #4]
 800e916:	789b      	ldrb	r3, [r3, #2]
 800e918:	68a1      	ldr	r1, [r4, #8]
 800e91a:	f88d 2017 	strb.w	r2, [sp, #23]
 800e91e:	f88d 3016 	strb.w	r3, [sp, #22]
 800e922:	68e2      	ldr	r2, [r4, #12]
 800e924:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 800e928:	6860      	ldr	r0, [r4, #4]
 800e92a:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e92e:	ab02      	add	r3, sp, #8
 800e930:	c307      	stmia	r3!, {r0, r1, r2}
 800e932:	696b      	ldr	r3, [r5, #20]
 800e934:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 800e936:	68db      	ldr	r3, [r3, #12]
 800e938:	4798      	blx	r3
 800e93a:	6844      	ldr	r4, [r0, #4]
 800e93c:	4630      	mov	r0, r6
 800e93e:	6923      	ldr	r3, [r4, #16]
 800e940:	4798      	blx	r3
 800e942:	f100 0318 	add.w	r3, r0, #24
 800e946:	6938      	ldr	r0, [r7, #16]
 800e948:	9300      	str	r3, [sp, #0]
 800e94a:	692a      	ldr	r2, [r5, #16]
 800e94c:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 800e94e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e952:	ab08      	add	r3, sp, #32
 800e954:	f003 f8e6 	bl	8011b24 <uxr_prepare_output_stream>
 800e958:	b910      	cbnz	r0, 800e960 <rmw_send_response+0x74>
 800e95a:	2001      	movs	r0, #1
 800e95c:	b011      	add	sp, #68	@ 0x44
 800e95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e960:	a902      	add	r1, sp, #8
 800e962:	a808      	add	r0, sp, #32
 800e964:	f004 f95e 	bl	8012c24 <uxr_serialize_SampleIdentity>
 800e968:	68a3      	ldr	r3, [r4, #8]
 800e96a:	a908      	add	r1, sp, #32
 800e96c:	4630      	mov	r0, r6
 800e96e:	4798      	blx	r3
 800e970:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 800e974:	6938      	ldr	r0, [r7, #16]
 800e976:	2b01      	cmp	r3, #1
 800e978:	d00a      	beq.n	800e990 <rmw_send_response+0xa4>
 800e97a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800e97c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e980:	f001 fe52 	bl	8010628 <uxr_run_session_until_confirm_delivery>
 800e984:	2000      	movs	r0, #0
 800e986:	b011      	add	sp, #68	@ 0x44
 800e988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e98a:	200c      	movs	r0, #12
 800e98c:	b011      	add	sp, #68	@ 0x44
 800e98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e990:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e994:	f001 fa88 	bl	800fea8 <uxr_flash_output_streams>
 800e998:	2000      	movs	r0, #0
 800e99a:	b011      	add	sp, #68	@ 0x44
 800e99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	080197c0 	.word	0x080197c0

0800e9a4 <rmw_take_response>:
 800e9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9a8:	4604      	mov	r4, r0
 800e9aa:	6800      	ldr	r0, [r0, #0]
 800e9ac:	b088      	sub	sp, #32
 800e9ae:	4688      	mov	r8, r1
 800e9b0:	4617      	mov	r7, r2
 800e9b2:	461d      	mov	r5, r3
 800e9b4:	b120      	cbz	r0, 800e9c0 <rmw_take_response+0x1c>
 800e9b6:	4b1e      	ldr	r3, [pc, #120]	@ (800ea30 <rmw_take_response+0x8c>)
 800e9b8:	6819      	ldr	r1, [r3, #0]
 800e9ba:	f7f1 fc31 	bl	8000220 <strcmp>
 800e9be:	bb78      	cbnz	r0, 800ea20 <rmw_take_response+0x7c>
 800e9c0:	b10d      	cbz	r5, 800e9c6 <rmw_take_response+0x22>
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	702b      	strb	r3, [r5, #0]
 800e9c6:	6864      	ldr	r4, [r4, #4]
 800e9c8:	f000 fb4a 	bl	800f060 <rmw_uxrce_clean_expired_static_input_buffer>
 800e9cc:	4620      	mov	r0, r4
 800e9ce:	f000 fb21 	bl	800f014 <rmw_uxrce_find_static_input_buffer_by_owner>
 800e9d2:	4606      	mov	r6, r0
 800e9d4:	b340      	cbz	r0, 800ea28 <rmw_take_response+0x84>
 800e9d6:	6963      	ldr	r3, [r4, #20]
 800e9d8:	6884      	ldr	r4, [r0, #8]
 800e9da:	68db      	ldr	r3, [r3, #12]
 800e9dc:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 800e9e0:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 800e9e4:	e9c8 0108 	strd	r0, r1, [r8, #32]
 800e9e8:	4798      	blx	r3
 800e9ea:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800e9ee:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 800e9f2:	f104 0110 	add.w	r1, r4, #16
 800e9f6:	4668      	mov	r0, sp
 800e9f8:	f7fc fdba 	bl	800b570 <ucdr_init_buffer>
 800e9fc:	4639      	mov	r1, r7
 800e9fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ea02:	4668      	mov	r0, sp
 800ea04:	4798      	blx	r3
 800ea06:	4631      	mov	r1, r6
 800ea08:	4604      	mov	r4, r0
 800ea0a:	480a      	ldr	r0, [pc, #40]	@ (800ea34 <rmw_take_response+0x90>)
 800ea0c:	f007 f924 	bl	8015c58 <put_memory>
 800ea10:	b105      	cbz	r5, 800ea14 <rmw_take_response+0x70>
 800ea12:	702c      	strb	r4, [r5, #0]
 800ea14:	f084 0001 	eor.w	r0, r4, #1
 800ea18:	b2c0      	uxtb	r0, r0
 800ea1a:	b008      	add	sp, #32
 800ea1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea20:	200c      	movs	r0, #12
 800ea22:	b008      	add	sp, #32
 800ea24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea28:	2001      	movs	r0, #1
 800ea2a:	b008      	add	sp, #32
 800ea2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea30:	080197c0 	.word	0x080197c0
 800ea34:	2000b0fc 	.word	0x2000b0fc

0800ea38 <rmw_destroy_service>:
 800ea38:	b570      	push	{r4, r5, r6, lr}
 800ea3a:	b128      	cbz	r0, 800ea48 <rmw_destroy_service+0x10>
 800ea3c:	4604      	mov	r4, r0
 800ea3e:	6800      	ldr	r0, [r0, #0]
 800ea40:	460d      	mov	r5, r1
 800ea42:	f000 fca5 	bl	800f390 <is_uxrce_rmw_identifier_valid>
 800ea46:	b910      	cbnz	r0, 800ea4e <rmw_destroy_service+0x16>
 800ea48:	2401      	movs	r4, #1
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	bd70      	pop	{r4, r5, r6, pc}
 800ea4e:	6863      	ldr	r3, [r4, #4]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d0f9      	beq.n	800ea48 <rmw_destroy_service+0x10>
 800ea54:	2d00      	cmp	r5, #0
 800ea56:	d0f7      	beq.n	800ea48 <rmw_destroy_service+0x10>
 800ea58:	6828      	ldr	r0, [r5, #0]
 800ea5a:	f000 fc99 	bl	800f390 <is_uxrce_rmw_identifier_valid>
 800ea5e:	2800      	cmp	r0, #0
 800ea60:	d0f2      	beq.n	800ea48 <rmw_destroy_service+0x10>
 800ea62:	686e      	ldr	r6, [r5, #4]
 800ea64:	2e00      	cmp	r6, #0
 800ea66:	d0ef      	beq.n	800ea48 <rmw_destroy_service+0x10>
 800ea68:	6864      	ldr	r4, [r4, #4]
 800ea6a:	6932      	ldr	r2, [r6, #16]
 800ea6c:	6920      	ldr	r0, [r4, #16]
 800ea6e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ea72:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ea76:	6819      	ldr	r1, [r3, #0]
 800ea78:	f001 f802 	bl	800fa80 <uxr_buffer_cancel_data>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	6920      	ldr	r0, [r4, #16]
 800ea80:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ea84:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ea88:	f000 fb68 	bl	800f15c <run_xrce_session>
 800ea8c:	6920      	ldr	r0, [r4, #16]
 800ea8e:	6932      	ldr	r2, [r6, #16]
 800ea90:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ea94:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ea98:	6819      	ldr	r1, [r3, #0]
 800ea9a:	f000 fd31 	bl	800f500 <uxr_buffer_delete_entity>
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	6920      	ldr	r0, [r4, #16]
 800eaa2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800eaa6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800eaaa:	f000 fb57 	bl	800f15c <run_xrce_session>
 800eaae:	2800      	cmp	r0, #0
 800eab0:	4628      	mov	r0, r5
 800eab2:	bf14      	ite	ne
 800eab4:	2400      	movne	r4, #0
 800eab6:	2402      	moveq	r4, #2
 800eab8:	f000 fa24 	bl	800ef04 <rmw_uxrce_fini_service_memory>
 800eabc:	e7c5      	b.n	800ea4a <rmw_destroy_service+0x12>
 800eabe:	bf00      	nop

0800eac0 <rmw_destroy_subscription>:
 800eac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eac2:	b128      	cbz	r0, 800ead0 <rmw_destroy_subscription+0x10>
 800eac4:	4604      	mov	r4, r0
 800eac6:	6800      	ldr	r0, [r0, #0]
 800eac8:	460d      	mov	r5, r1
 800eaca:	f000 fc61 	bl	800f390 <is_uxrce_rmw_identifier_valid>
 800eace:	b910      	cbnz	r0, 800ead6 <rmw_destroy_subscription+0x16>
 800ead0:	2401      	movs	r4, #1
 800ead2:	4620      	mov	r0, r4
 800ead4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ead6:	6863      	ldr	r3, [r4, #4]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d0f9      	beq.n	800ead0 <rmw_destroy_subscription+0x10>
 800eadc:	2d00      	cmp	r5, #0
 800eade:	d0f7      	beq.n	800ead0 <rmw_destroy_subscription+0x10>
 800eae0:	6828      	ldr	r0, [r5, #0]
 800eae2:	f000 fc55 	bl	800f390 <is_uxrce_rmw_identifier_valid>
 800eae6:	2800      	cmp	r0, #0
 800eae8:	d0f2      	beq.n	800ead0 <rmw_destroy_subscription+0x10>
 800eaea:	686c      	ldr	r4, [r5, #4]
 800eaec:	2c00      	cmp	r4, #0
 800eaee:	d0ef      	beq.n	800ead0 <rmw_destroy_subscription+0x10>
 800eaf0:	6a26      	ldr	r6, [r4, #32]
 800eaf2:	6962      	ldr	r2, [r4, #20]
 800eaf4:	6930      	ldr	r0, [r6, #16]
 800eaf6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800eafa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eafe:	6819      	ldr	r1, [r3, #0]
 800eb00:	f000 ffbe 	bl	800fa80 <uxr_buffer_cancel_data>
 800eb04:	4602      	mov	r2, r0
 800eb06:	6930      	ldr	r0, [r6, #16]
 800eb08:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800eb0c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800eb10:	f000 fb24 	bl	800f15c <run_xrce_session>
 800eb14:	69e0      	ldr	r0, [r4, #28]
 800eb16:	f007 f92b 	bl	8015d70 <destroy_topic>
 800eb1a:	6a23      	ldr	r3, [r4, #32]
 800eb1c:	6962      	ldr	r2, [r4, #20]
 800eb1e:	6918      	ldr	r0, [r3, #16]
 800eb20:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800eb24:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eb28:	6819      	ldr	r1, [r3, #0]
 800eb2a:	f000 fce9 	bl	800f500 <uxr_buffer_delete_entity>
 800eb2e:	6a23      	ldr	r3, [r4, #32]
 800eb30:	6922      	ldr	r2, [r4, #16]
 800eb32:	691b      	ldr	r3, [r3, #16]
 800eb34:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800eb38:	4604      	mov	r4, r0
 800eb3a:	6809      	ldr	r1, [r1, #0]
 800eb3c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800eb40:	f000 fcde 	bl	800f500 <uxr_buffer_delete_entity>
 800eb44:	6937      	ldr	r7, [r6, #16]
 800eb46:	4622      	mov	r2, r4
 800eb48:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800eb4c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800eb50:	4604      	mov	r4, r0
 800eb52:	4638      	mov	r0, r7
 800eb54:	f000 fb02 	bl	800f15c <run_xrce_session>
 800eb58:	6936      	ldr	r6, [r6, #16]
 800eb5a:	4622      	mov	r2, r4
 800eb5c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800eb60:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800eb64:	4604      	mov	r4, r0
 800eb66:	4630      	mov	r0, r6
 800eb68:	f000 faf8 	bl	800f15c <run_xrce_session>
 800eb6c:	b12c      	cbz	r4, 800eb7a <rmw_destroy_subscription+0xba>
 800eb6e:	b120      	cbz	r0, 800eb7a <rmw_destroy_subscription+0xba>
 800eb70:	2400      	movs	r4, #0
 800eb72:	4628      	mov	r0, r5
 800eb74:	f000 f9b0 	bl	800eed8 <rmw_uxrce_fini_subscription_memory>
 800eb78:	e7ab      	b.n	800ead2 <rmw_destroy_subscription+0x12>
 800eb7a:	2402      	movs	r4, #2
 800eb7c:	e7f9      	b.n	800eb72 <rmw_destroy_subscription+0xb2>
 800eb7e:	bf00      	nop

0800eb80 <rmw_uxrce_transport_init>:
 800eb80:	b508      	push	{r3, lr}
 800eb82:	b108      	cbz	r0, 800eb88 <rmw_uxrce_transport_init+0x8>
 800eb84:	f100 0210 	add.w	r2, r0, #16
 800eb88:	b139      	cbz	r1, 800eb9a <rmw_uxrce_transport_init+0x1a>
 800eb8a:	6949      	ldr	r1, [r1, #20]
 800eb8c:	4610      	mov	r0, r2
 800eb8e:	f000 fed5 	bl	800f93c <uxr_init_custom_transport>
 800eb92:	f080 0001 	eor.w	r0, r0, #1
 800eb96:	b2c0      	uxtb	r0, r0
 800eb98:	bd08      	pop	{r3, pc}
 800eb9a:	4b04      	ldr	r3, [pc, #16]	@ (800ebac <rmw_uxrce_transport_init+0x2c>)
 800eb9c:	4610      	mov	r0, r2
 800eb9e:	6859      	ldr	r1, [r3, #4]
 800eba0:	f000 fecc 	bl	800f93c <uxr_init_custom_transport>
 800eba4:	f080 0001 	eor.w	r0, r0, #1
 800eba8:	b2c0      	uxtb	r0, r0
 800ebaa:	bd08      	pop	{r3, pc}
 800ebac:	20006658 	.word	0x20006658

0800ebb0 <rmw_uxrce_init_service_memory>:
 800ebb0:	b1e2      	cbz	r2, 800ebec <rmw_uxrce_init_service_memory+0x3c>
 800ebb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebb6:	7b05      	ldrb	r5, [r0, #12]
 800ebb8:	4606      	mov	r6, r0
 800ebba:	b9ad      	cbnz	r5, 800ebe8 <rmw_uxrce_init_service_memory+0x38>
 800ebbc:	23c8      	movs	r3, #200	@ 0xc8
 800ebbe:	e9c0 5500 	strd	r5, r5, [r0]
 800ebc2:	6083      	str	r3, [r0, #8]
 800ebc4:	f240 1301 	movw	r3, #257	@ 0x101
 800ebc8:	4617      	mov	r7, r2
 800ebca:	8183      	strh	r3, [r0, #12]
 800ebcc:	460c      	mov	r4, r1
 800ebce:	46a8      	mov	r8, r5
 800ebd0:	4621      	mov	r1, r4
 800ebd2:	4630      	mov	r0, r6
 800ebd4:	3501      	adds	r5, #1
 800ebd6:	f007 f83f 	bl	8015c58 <put_memory>
 800ebda:	42af      	cmp	r7, r5
 800ebdc:	60a4      	str	r4, [r4, #8]
 800ebde:	f884 800c 	strb.w	r8, [r4, #12]
 800ebe2:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ebe6:	d1f3      	bne.n	800ebd0 <rmw_uxrce_init_service_memory+0x20>
 800ebe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebec:	4770      	bx	lr
 800ebee:	bf00      	nop

0800ebf0 <rmw_uxrce_init_client_memory>:
 800ebf0:	b1e2      	cbz	r2, 800ec2c <rmw_uxrce_init_client_memory+0x3c>
 800ebf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebf6:	7b05      	ldrb	r5, [r0, #12]
 800ebf8:	4606      	mov	r6, r0
 800ebfa:	b9ad      	cbnz	r5, 800ec28 <rmw_uxrce_init_client_memory+0x38>
 800ebfc:	23c8      	movs	r3, #200	@ 0xc8
 800ebfe:	e9c0 5500 	strd	r5, r5, [r0]
 800ec02:	6083      	str	r3, [r0, #8]
 800ec04:	f240 1301 	movw	r3, #257	@ 0x101
 800ec08:	4617      	mov	r7, r2
 800ec0a:	8183      	strh	r3, [r0, #12]
 800ec0c:	460c      	mov	r4, r1
 800ec0e:	46a8      	mov	r8, r5
 800ec10:	4621      	mov	r1, r4
 800ec12:	4630      	mov	r0, r6
 800ec14:	3501      	adds	r5, #1
 800ec16:	f007 f81f 	bl	8015c58 <put_memory>
 800ec1a:	42af      	cmp	r7, r5
 800ec1c:	60a4      	str	r4, [r4, #8]
 800ec1e:	f884 800c 	strb.w	r8, [r4, #12]
 800ec22:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ec26:	d1f3      	bne.n	800ec10 <rmw_uxrce_init_client_memory+0x20>
 800ec28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec2c:	4770      	bx	lr
 800ec2e:	bf00      	nop

0800ec30 <rmw_uxrce_init_publisher_memory>:
 800ec30:	b1e2      	cbz	r2, 800ec6c <rmw_uxrce_init_publisher_memory+0x3c>
 800ec32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec36:	7b05      	ldrb	r5, [r0, #12]
 800ec38:	4606      	mov	r6, r0
 800ec3a:	b9ad      	cbnz	r5, 800ec68 <rmw_uxrce_init_publisher_memory+0x38>
 800ec3c:	23d8      	movs	r3, #216	@ 0xd8
 800ec3e:	e9c0 5500 	strd	r5, r5, [r0]
 800ec42:	6083      	str	r3, [r0, #8]
 800ec44:	f240 1301 	movw	r3, #257	@ 0x101
 800ec48:	4617      	mov	r7, r2
 800ec4a:	8183      	strh	r3, [r0, #12]
 800ec4c:	460c      	mov	r4, r1
 800ec4e:	46a8      	mov	r8, r5
 800ec50:	4621      	mov	r1, r4
 800ec52:	4630      	mov	r0, r6
 800ec54:	3501      	adds	r5, #1
 800ec56:	f006 ffff 	bl	8015c58 <put_memory>
 800ec5a:	42af      	cmp	r7, r5
 800ec5c:	60a4      	str	r4, [r4, #8]
 800ec5e:	f884 800c 	strb.w	r8, [r4, #12]
 800ec62:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ec66:	d1f3      	bne.n	800ec50 <rmw_uxrce_init_publisher_memory+0x20>
 800ec68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec6c:	4770      	bx	lr
 800ec6e:	bf00      	nop

0800ec70 <rmw_uxrce_init_subscription_memory>:
 800ec70:	b1e2      	cbz	r2, 800ecac <rmw_uxrce_init_subscription_memory+0x3c>
 800ec72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec76:	7b05      	ldrb	r5, [r0, #12]
 800ec78:	4606      	mov	r6, r0
 800ec7a:	b9ad      	cbnz	r5, 800eca8 <rmw_uxrce_init_subscription_memory+0x38>
 800ec7c:	23d8      	movs	r3, #216	@ 0xd8
 800ec7e:	e9c0 5500 	strd	r5, r5, [r0]
 800ec82:	6083      	str	r3, [r0, #8]
 800ec84:	f240 1301 	movw	r3, #257	@ 0x101
 800ec88:	4617      	mov	r7, r2
 800ec8a:	8183      	strh	r3, [r0, #12]
 800ec8c:	460c      	mov	r4, r1
 800ec8e:	46a8      	mov	r8, r5
 800ec90:	4621      	mov	r1, r4
 800ec92:	4630      	mov	r0, r6
 800ec94:	3501      	adds	r5, #1
 800ec96:	f006 ffdf 	bl	8015c58 <put_memory>
 800ec9a:	42af      	cmp	r7, r5
 800ec9c:	60a4      	str	r4, [r4, #8]
 800ec9e:	f884 800c 	strb.w	r8, [r4, #12]
 800eca2:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800eca6:	d1f3      	bne.n	800ec90 <rmw_uxrce_init_subscription_memory+0x20>
 800eca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecac:	4770      	bx	lr
 800ecae:	bf00      	nop

0800ecb0 <rmw_uxrce_init_node_memory>:
 800ecb0:	b1e2      	cbz	r2, 800ecec <rmw_uxrce_init_node_memory+0x3c>
 800ecb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecb6:	7b05      	ldrb	r5, [r0, #12]
 800ecb8:	4606      	mov	r6, r0
 800ecba:	b9ad      	cbnz	r5, 800ece8 <rmw_uxrce_init_node_memory+0x38>
 800ecbc:	23a4      	movs	r3, #164	@ 0xa4
 800ecbe:	e9c0 5500 	strd	r5, r5, [r0]
 800ecc2:	6083      	str	r3, [r0, #8]
 800ecc4:	f240 1301 	movw	r3, #257	@ 0x101
 800ecc8:	4617      	mov	r7, r2
 800ecca:	8183      	strh	r3, [r0, #12]
 800eccc:	460c      	mov	r4, r1
 800ecce:	46a8      	mov	r8, r5
 800ecd0:	4621      	mov	r1, r4
 800ecd2:	4630      	mov	r0, r6
 800ecd4:	3501      	adds	r5, #1
 800ecd6:	f006 ffbf 	bl	8015c58 <put_memory>
 800ecda:	42af      	cmp	r7, r5
 800ecdc:	60a4      	str	r4, [r4, #8]
 800ecde:	f884 800c 	strb.w	r8, [r4, #12]
 800ece2:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800ece6:	d1f3      	bne.n	800ecd0 <rmw_uxrce_init_node_memory+0x20>
 800ece8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecec:	4770      	bx	lr
 800ecee:	bf00      	nop

0800ecf0 <rmw_uxrce_init_session_memory>:
 800ecf0:	b1ea      	cbz	r2, 800ed2e <rmw_uxrce_init_session_memory+0x3e>
 800ecf2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecf6:	7b05      	ldrb	r5, [r0, #12]
 800ecf8:	4606      	mov	r6, r0
 800ecfa:	b9b5      	cbnz	r5, 800ed2a <rmw_uxrce_init_session_memory+0x3a>
 800ecfc:	e9c0 5500 	strd	r5, r5, [r0]
 800ed00:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800ed04:	f240 1301 	movw	r3, #257	@ 0x101
 800ed08:	4617      	mov	r7, r2
 800ed0a:	f8c0 8008 	str.w	r8, [r0, #8]
 800ed0e:	460c      	mov	r4, r1
 800ed10:	8183      	strh	r3, [r0, #12]
 800ed12:	46a9      	mov	r9, r5
 800ed14:	4621      	mov	r1, r4
 800ed16:	4630      	mov	r0, r6
 800ed18:	3501      	adds	r5, #1
 800ed1a:	f006 ff9d 	bl	8015c58 <put_memory>
 800ed1e:	42af      	cmp	r7, r5
 800ed20:	60a4      	str	r4, [r4, #8]
 800ed22:	f884 900c 	strb.w	r9, [r4, #12]
 800ed26:	4444      	add	r4, r8
 800ed28:	d1f4      	bne.n	800ed14 <rmw_uxrce_init_session_memory+0x24>
 800ed2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed2e:	4770      	bx	lr

0800ed30 <rmw_uxrce_init_topic_memory>:
 800ed30:	b1e2      	cbz	r2, 800ed6c <rmw_uxrce_init_topic_memory+0x3c>
 800ed32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed36:	7b05      	ldrb	r5, [r0, #12]
 800ed38:	4606      	mov	r6, r0
 800ed3a:	b9ad      	cbnz	r5, 800ed68 <rmw_uxrce_init_topic_memory+0x38>
 800ed3c:	231c      	movs	r3, #28
 800ed3e:	e9c0 5500 	strd	r5, r5, [r0]
 800ed42:	6083      	str	r3, [r0, #8]
 800ed44:	f240 1301 	movw	r3, #257	@ 0x101
 800ed48:	4617      	mov	r7, r2
 800ed4a:	8183      	strh	r3, [r0, #12]
 800ed4c:	460c      	mov	r4, r1
 800ed4e:	46a8      	mov	r8, r5
 800ed50:	4621      	mov	r1, r4
 800ed52:	4630      	mov	r0, r6
 800ed54:	3501      	adds	r5, #1
 800ed56:	f006 ff7f 	bl	8015c58 <put_memory>
 800ed5a:	42af      	cmp	r7, r5
 800ed5c:	60a4      	str	r4, [r4, #8]
 800ed5e:	f884 800c 	strb.w	r8, [r4, #12]
 800ed62:	f104 041c 	add.w	r4, r4, #28
 800ed66:	d1f3      	bne.n	800ed50 <rmw_uxrce_init_topic_memory+0x20>
 800ed68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed6c:	4770      	bx	lr
 800ed6e:	bf00      	nop

0800ed70 <rmw_uxrce_init_static_input_buffer_memory>:
 800ed70:	b1ea      	cbz	r2, 800edae <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ed72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed76:	7b05      	ldrb	r5, [r0, #12]
 800ed78:	4606      	mov	r6, r0
 800ed7a:	b9b5      	cbnz	r5, 800edaa <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ed7c:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800ed80:	e9c0 5500 	strd	r5, r5, [r0]
 800ed84:	6083      	str	r3, [r0, #8]
 800ed86:	f240 1301 	movw	r3, #257	@ 0x101
 800ed8a:	4617      	mov	r7, r2
 800ed8c:	8183      	strh	r3, [r0, #12]
 800ed8e:	460c      	mov	r4, r1
 800ed90:	46a8      	mov	r8, r5
 800ed92:	4621      	mov	r1, r4
 800ed94:	4630      	mov	r0, r6
 800ed96:	3501      	adds	r5, #1
 800ed98:	f006 ff5e 	bl	8015c58 <put_memory>
 800ed9c:	42af      	cmp	r7, r5
 800ed9e:	60a4      	str	r4, [r4, #8]
 800eda0:	f884 800c 	strb.w	r8, [r4, #12]
 800eda4:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800eda8:	d1f3      	bne.n	800ed92 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800edaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edae:	4770      	bx	lr

0800edb0 <rmw_uxrce_init_init_options_impl_memory>:
 800edb0:	b1e2      	cbz	r2, 800edec <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800edb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edb6:	7b05      	ldrb	r5, [r0, #12]
 800edb8:	4606      	mov	r6, r0
 800edba:	b9ad      	cbnz	r5, 800ede8 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800edbc:	232c      	movs	r3, #44	@ 0x2c
 800edbe:	e9c0 5500 	strd	r5, r5, [r0]
 800edc2:	6083      	str	r3, [r0, #8]
 800edc4:	f240 1301 	movw	r3, #257	@ 0x101
 800edc8:	4617      	mov	r7, r2
 800edca:	8183      	strh	r3, [r0, #12]
 800edcc:	460c      	mov	r4, r1
 800edce:	46a8      	mov	r8, r5
 800edd0:	4621      	mov	r1, r4
 800edd2:	4630      	mov	r0, r6
 800edd4:	3501      	adds	r5, #1
 800edd6:	f006 ff3f 	bl	8015c58 <put_memory>
 800edda:	42af      	cmp	r7, r5
 800eddc:	60a4      	str	r4, [r4, #8]
 800edde:	f884 800c 	strb.w	r8, [r4, #12]
 800ede2:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800ede6:	d1f3      	bne.n	800edd0 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800ede8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edec:	4770      	bx	lr
 800edee:	bf00      	nop

0800edf0 <rmw_uxrce_init_wait_set_memory>:
 800edf0:	b1e2      	cbz	r2, 800ee2c <rmw_uxrce_init_wait_set_memory+0x3c>
 800edf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edf6:	7b05      	ldrb	r5, [r0, #12]
 800edf8:	4606      	mov	r6, r0
 800edfa:	b9ad      	cbnz	r5, 800ee28 <rmw_uxrce_init_wait_set_memory+0x38>
 800edfc:	231c      	movs	r3, #28
 800edfe:	e9c0 5500 	strd	r5, r5, [r0]
 800ee02:	6083      	str	r3, [r0, #8]
 800ee04:	f240 1301 	movw	r3, #257	@ 0x101
 800ee08:	4617      	mov	r7, r2
 800ee0a:	8183      	strh	r3, [r0, #12]
 800ee0c:	460c      	mov	r4, r1
 800ee0e:	46a8      	mov	r8, r5
 800ee10:	4621      	mov	r1, r4
 800ee12:	4630      	mov	r0, r6
 800ee14:	3501      	adds	r5, #1
 800ee16:	f006 ff1f 	bl	8015c58 <put_memory>
 800ee1a:	42af      	cmp	r7, r5
 800ee1c:	60a4      	str	r4, [r4, #8]
 800ee1e:	f884 800c 	strb.w	r8, [r4, #12]
 800ee22:	f104 041c 	add.w	r4, r4, #28
 800ee26:	d1f3      	bne.n	800ee10 <rmw_uxrce_init_wait_set_memory+0x20>
 800ee28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee2c:	4770      	bx	lr
 800ee2e:	bf00      	nop

0800ee30 <rmw_uxrce_init_guard_condition_memory>:
 800ee30:	b1e2      	cbz	r2, 800ee6c <rmw_uxrce_init_guard_condition_memory+0x3c>
 800ee32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee36:	7b05      	ldrb	r5, [r0, #12]
 800ee38:	4606      	mov	r6, r0
 800ee3a:	b9ad      	cbnz	r5, 800ee68 <rmw_uxrce_init_guard_condition_memory+0x38>
 800ee3c:	2320      	movs	r3, #32
 800ee3e:	e9c0 5500 	strd	r5, r5, [r0]
 800ee42:	6083      	str	r3, [r0, #8]
 800ee44:	f240 1301 	movw	r3, #257	@ 0x101
 800ee48:	4617      	mov	r7, r2
 800ee4a:	8183      	strh	r3, [r0, #12]
 800ee4c:	460c      	mov	r4, r1
 800ee4e:	46a8      	mov	r8, r5
 800ee50:	4621      	mov	r1, r4
 800ee52:	4630      	mov	r0, r6
 800ee54:	3501      	adds	r5, #1
 800ee56:	f006 feff 	bl	8015c58 <put_memory>
 800ee5a:	42af      	cmp	r7, r5
 800ee5c:	60a4      	str	r4, [r4, #8]
 800ee5e:	f884 800c 	strb.w	r8, [r4, #12]
 800ee62:	f104 0420 	add.w	r4, r4, #32
 800ee66:	d1f3      	bne.n	800ee50 <rmw_uxrce_init_guard_condition_memory+0x20>
 800ee68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee6c:	4770      	bx	lr
 800ee6e:	bf00      	nop

0800ee70 <rmw_uxrce_fini_session_memory>:
 800ee70:	4601      	mov	r1, r0
 800ee72:	4801      	ldr	r0, [pc, #4]	@ (800ee78 <rmw_uxrce_fini_session_memory+0x8>)
 800ee74:	f006 bef0 	b.w	8015c58 <put_memory>
 800ee78:	2000b0ec 	.word	0x2000b0ec

0800ee7c <rmw_uxrce_fini_node_memory>:
 800ee7c:	b538      	push	{r3, r4, r5, lr}
 800ee7e:	4604      	mov	r4, r0
 800ee80:	6800      	ldr	r0, [r0, #0]
 800ee82:	b128      	cbz	r0, 800ee90 <rmw_uxrce_fini_node_memory+0x14>
 800ee84:	4b07      	ldr	r3, [pc, #28]	@ (800eea4 <rmw_uxrce_fini_node_memory+0x28>)
 800ee86:	6819      	ldr	r1, [r3, #0]
 800ee88:	f7f1 f9ca 	bl	8000220 <strcmp>
 800ee8c:	b940      	cbnz	r0, 800eea0 <rmw_uxrce_fini_node_memory+0x24>
 800ee8e:	6020      	str	r0, [r4, #0]
 800ee90:	6861      	ldr	r1, [r4, #4]
 800ee92:	b129      	cbz	r1, 800eea0 <rmw_uxrce_fini_node_memory+0x24>
 800ee94:	2500      	movs	r5, #0
 800ee96:	4804      	ldr	r0, [pc, #16]	@ (800eea8 <rmw_uxrce_fini_node_memory+0x2c>)
 800ee98:	610d      	str	r5, [r1, #16]
 800ee9a:	f006 fedd 	bl	8015c58 <put_memory>
 800ee9e:	6065      	str	r5, [r4, #4]
 800eea0:	bd38      	pop	{r3, r4, r5, pc}
 800eea2:	bf00      	nop
 800eea4:	080197c0 	.word	0x080197c0
 800eea8:	2000b0bc 	.word	0x2000b0bc

0800eeac <rmw_uxrce_fini_publisher_memory>:
 800eeac:	b510      	push	{r4, lr}
 800eeae:	4604      	mov	r4, r0
 800eeb0:	6800      	ldr	r0, [r0, #0]
 800eeb2:	b128      	cbz	r0, 800eec0 <rmw_uxrce_fini_publisher_memory+0x14>
 800eeb4:	4b06      	ldr	r3, [pc, #24]	@ (800eed0 <rmw_uxrce_fini_publisher_memory+0x24>)
 800eeb6:	6819      	ldr	r1, [r3, #0]
 800eeb8:	f7f1 f9b2 	bl	8000220 <strcmp>
 800eebc:	b938      	cbnz	r0, 800eece <rmw_uxrce_fini_publisher_memory+0x22>
 800eebe:	6020      	str	r0, [r4, #0]
 800eec0:	6861      	ldr	r1, [r4, #4]
 800eec2:	b121      	cbz	r1, 800eece <rmw_uxrce_fini_publisher_memory+0x22>
 800eec4:	4803      	ldr	r0, [pc, #12]	@ (800eed4 <rmw_uxrce_fini_publisher_memory+0x28>)
 800eec6:	f006 fec7 	bl	8015c58 <put_memory>
 800eeca:	2300      	movs	r3, #0
 800eecc:	6063      	str	r3, [r4, #4]
 800eece:	bd10      	pop	{r4, pc}
 800eed0:	080197c0 	.word	0x080197c0
 800eed4:	2000b0cc 	.word	0x2000b0cc

0800eed8 <rmw_uxrce_fini_subscription_memory>:
 800eed8:	b510      	push	{r4, lr}
 800eeda:	4604      	mov	r4, r0
 800eedc:	6800      	ldr	r0, [r0, #0]
 800eede:	b128      	cbz	r0, 800eeec <rmw_uxrce_fini_subscription_memory+0x14>
 800eee0:	4b06      	ldr	r3, [pc, #24]	@ (800eefc <rmw_uxrce_fini_subscription_memory+0x24>)
 800eee2:	6819      	ldr	r1, [r3, #0]
 800eee4:	f7f1 f99c 	bl	8000220 <strcmp>
 800eee8:	b938      	cbnz	r0, 800eefa <rmw_uxrce_fini_subscription_memory+0x22>
 800eeea:	6020      	str	r0, [r4, #0]
 800eeec:	6861      	ldr	r1, [r4, #4]
 800eeee:	b121      	cbz	r1, 800eefa <rmw_uxrce_fini_subscription_memory+0x22>
 800eef0:	4803      	ldr	r0, [pc, #12]	@ (800ef00 <rmw_uxrce_fini_subscription_memory+0x28>)
 800eef2:	f006 feb1 	bl	8015c58 <put_memory>
 800eef6:	2300      	movs	r3, #0
 800eef8:	6063      	str	r3, [r4, #4]
 800eefa:	bd10      	pop	{r4, pc}
 800eefc:	080197c0 	.word	0x080197c0
 800ef00:	2000b10c 	.word	0x2000b10c

0800ef04 <rmw_uxrce_fini_service_memory>:
 800ef04:	b510      	push	{r4, lr}
 800ef06:	4604      	mov	r4, r0
 800ef08:	6800      	ldr	r0, [r0, #0]
 800ef0a:	b128      	cbz	r0, 800ef18 <rmw_uxrce_fini_service_memory+0x14>
 800ef0c:	4b06      	ldr	r3, [pc, #24]	@ (800ef28 <rmw_uxrce_fini_service_memory+0x24>)
 800ef0e:	6819      	ldr	r1, [r3, #0]
 800ef10:	f7f1 f986 	bl	8000220 <strcmp>
 800ef14:	b938      	cbnz	r0, 800ef26 <rmw_uxrce_fini_service_memory+0x22>
 800ef16:	6020      	str	r0, [r4, #0]
 800ef18:	6861      	ldr	r1, [r4, #4]
 800ef1a:	b121      	cbz	r1, 800ef26 <rmw_uxrce_fini_service_memory+0x22>
 800ef1c:	4803      	ldr	r0, [pc, #12]	@ (800ef2c <rmw_uxrce_fini_service_memory+0x28>)
 800ef1e:	f006 fe9b 	bl	8015c58 <put_memory>
 800ef22:	2300      	movs	r3, #0
 800ef24:	6063      	str	r3, [r4, #4]
 800ef26:	bd10      	pop	{r4, pc}
 800ef28:	080197c0 	.word	0x080197c0
 800ef2c:	2000b0dc 	.word	0x2000b0dc

0800ef30 <rmw_uxrce_fini_client_memory>:
 800ef30:	b510      	push	{r4, lr}
 800ef32:	4604      	mov	r4, r0
 800ef34:	6800      	ldr	r0, [r0, #0]
 800ef36:	b128      	cbz	r0, 800ef44 <rmw_uxrce_fini_client_memory+0x14>
 800ef38:	4b06      	ldr	r3, [pc, #24]	@ (800ef54 <rmw_uxrce_fini_client_memory+0x24>)
 800ef3a:	6819      	ldr	r1, [r3, #0]
 800ef3c:	f7f1 f970 	bl	8000220 <strcmp>
 800ef40:	b938      	cbnz	r0, 800ef52 <rmw_uxrce_fini_client_memory+0x22>
 800ef42:	6020      	str	r0, [r4, #0]
 800ef44:	6861      	ldr	r1, [r4, #4]
 800ef46:	b121      	cbz	r1, 800ef52 <rmw_uxrce_fini_client_memory+0x22>
 800ef48:	4803      	ldr	r0, [pc, #12]	@ (800ef58 <rmw_uxrce_fini_client_memory+0x28>)
 800ef4a:	f006 fe85 	bl	8015c58 <put_memory>
 800ef4e:	2300      	movs	r3, #0
 800ef50:	6063      	str	r3, [r4, #4]
 800ef52:	bd10      	pop	{r4, pc}
 800ef54:	080197c0 	.word	0x080197c0
 800ef58:	200067f0 	.word	0x200067f0

0800ef5c <rmw_uxrce_fini_topic_memory>:
 800ef5c:	b510      	push	{r4, lr}
 800ef5e:	4604      	mov	r4, r0
 800ef60:	4621      	mov	r1, r4
 800ef62:	4803      	ldr	r0, [pc, #12]	@ (800ef70 <rmw_uxrce_fini_topic_memory+0x14>)
 800ef64:	f006 fe78 	bl	8015c58 <put_memory>
 800ef68:	2300      	movs	r3, #0
 800ef6a:	61a3      	str	r3, [r4, #24]
 800ef6c:	bd10      	pop	{r4, pc}
 800ef6e:	bf00      	nop
 800ef70:	2000b11c 	.word	0x2000b11c

0800ef74 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ef74:	b082      	sub	sp, #8
 800ef76:	b530      	push	{r4, r5, lr}
 800ef78:	4925      	ldr	r1, [pc, #148]	@ (800f010 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ef7a:	680d      	ldr	r5, [r1, #0]
 800ef7c:	ac03      	add	r4, sp, #12
 800ef7e:	e884 000c 	stmia.w	r4, {r2, r3}
 800ef82:	461c      	mov	r4, r3
 800ef84:	2d00      	cmp	r5, #0
 800ef86:	d041      	beq.n	800f00c <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800ef88:	462b      	mov	r3, r5
 800ef8a:	2100      	movs	r1, #0
 800ef8c:	689a      	ldr	r2, [r3, #8]
 800ef8e:	685b      	ldr	r3, [r3, #4]
 800ef90:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800ef94:	4290      	cmp	r0, r2
 800ef96:	bf08      	it	eq
 800ef98:	3101      	addeq	r1, #1
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d1f6      	bne.n	800ef8c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800ef9e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800efa2:	2b02      	cmp	r3, #2
 800efa4:	d029      	beq.n	800effa <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800efa6:	d907      	bls.n	800efb8 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800efa8:	2b03      	cmp	r3, #3
 800efaa:	d005      	beq.n	800efb8 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800efac:	2100      	movs	r1, #0
 800efae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800efb2:	4608      	mov	r0, r1
 800efb4:	b002      	add	sp, #8
 800efb6:	4770      	bx	lr
 800efb8:	b314      	cbz	r4, 800f000 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800efba:	428c      	cmp	r4, r1
 800efbc:	d820      	bhi.n	800f000 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800efbe:	2d00      	cmp	r5, #0
 800efc0:	d0f4      	beq.n	800efac <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800efc2:	2100      	movs	r1, #0
 800efc4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800efc8:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800efcc:	e002      	b.n	800efd4 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800efce:	686d      	ldr	r5, [r5, #4]
 800efd0:	2d00      	cmp	r5, #0
 800efd2:	d0ec      	beq.n	800efae <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800efd4:	68ab      	ldr	r3, [r5, #8]
 800efd6:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800efda:	4290      	cmp	r0, r2
 800efdc:	d1f7      	bne.n	800efce <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800efde:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800efe2:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800efe6:	4562      	cmp	r2, ip
 800efe8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800efec:	eb73 0e04 	sbcs.w	lr, r3, r4
 800eff0:	daed      	bge.n	800efce <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800eff2:	4694      	mov	ip, r2
 800eff4:	461c      	mov	r4, r3
 800eff6:	4629      	mov	r1, r5
 800eff8:	e7e9      	b.n	800efce <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800effa:	b10c      	cbz	r4, 800f000 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800effc:	428c      	cmp	r4, r1
 800effe:	d9d5      	bls.n	800efac <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800f000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f004:	4802      	ldr	r0, [pc, #8]	@ (800f010 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800f006:	b002      	add	sp, #8
 800f008:	f006 be16 	b.w	8015c38 <get_memory>
 800f00c:	4629      	mov	r1, r5
 800f00e:	e7c6      	b.n	800ef9e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800f010:	2000b0fc 	.word	0x2000b0fc

0800f014 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800f014:	4b11      	ldr	r3, [pc, #68]	@ (800f05c <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	b530      	push	{r4, r5, lr}
 800f01a:	b1e3      	cbz	r3, 800f056 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800f01c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800f020:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800f024:	2400      	movs	r4, #0
 800f026:	e001      	b.n	800f02c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f028:	685b      	ldr	r3, [r3, #4]
 800f02a:	b193      	cbz	r3, 800f052 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800f02c:	689a      	ldr	r2, [r3, #8]
 800f02e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800f032:	4288      	cmp	r0, r1
 800f034:	d1f8      	bne.n	800f028 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f036:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800f03a:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800f03e:	4571      	cmp	r1, lr
 800f040:	eb72 050c 	sbcs.w	r5, r2, ip
 800f044:	daf0      	bge.n	800f028 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f046:	461c      	mov	r4, r3
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	468e      	mov	lr, r1
 800f04c:	4694      	mov	ip, r2
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d1ec      	bne.n	800f02c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f052:	4620      	mov	r0, r4
 800f054:	bd30      	pop	{r4, r5, pc}
 800f056:	461c      	mov	r4, r3
 800f058:	4620      	mov	r0, r4
 800f05a:	bd30      	pop	{r4, r5, pc}
 800f05c:	2000b0fc 	.word	0x2000b0fc

0800f060 <rmw_uxrce_clean_expired_static_input_buffer>:
 800f060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f064:	4b3c      	ldr	r3, [pc, #240]	@ (800f158 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f066:	ed2d 8b06 	vpush	{d8-d10}
 800f06a:	681f      	ldr	r7, [r3, #0]
 800f06c:	b08d      	sub	sp, #52	@ 0x34
 800f06e:	f007 f89b 	bl	80161a8 <rmw_uros_epoch_nanos>
 800f072:	2f00      	cmp	r7, #0
 800f074:	d05d      	beq.n	800f132 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800f076:	46b8      	mov	r8, r7
 800f078:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800f140 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800f07c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f080:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800f084:	2b04      	cmp	r3, #4
 800f086:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800f148 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800f08a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800f150 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800f08e:	4681      	mov	r9, r0
 800f090:	468a      	mov	sl, r1
 800f092:	ac04      	add	r4, sp, #16
 800f094:	d03f      	beq.n	800f116 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f096:	2b05      	cmp	r3, #5
 800f098:	d044      	beq.n	800f124 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800f09a:	2b03      	cmp	r3, #3
 800f09c:	d03b      	beq.n	800f116 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f09e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f0a2:	ed8d ab06 	vstr	d10, [sp, #24]
 800f0a6:	ed8d 8b08 	vstr	d8, [sp, #32]
 800f0aa:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800f0ae:	ab08      	add	r3, sp, #32
 800f0b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f0b2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f0b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f0ba:	f006 fc49 	bl	8015950 <rmw_time_equal>
 800f0be:	b118      	cbz	r0, 800f0c8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800f0c0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800f0c4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f0c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f0cc:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800f0d0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800f0d4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800f0d8:	f006 fc8e 	bl	80159f8 <rmw_time_total_nsec>
 800f0dc:	1830      	adds	r0, r6, r0
 800f0de:	eb47 0101 	adc.w	r1, r7, r1
 800f0e2:	4548      	cmp	r0, r9
 800f0e4:	eb71 030a 	sbcs.w	r3, r1, sl
 800f0e8:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800f0ec:	db05      	blt.n	800f0fa <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800f0ee:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800f0f2:	4591      	cmp	r9, r2
 800f0f4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800f0f8:	da03      	bge.n	800f102 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800f0fa:	4817      	ldr	r0, [pc, #92]	@ (800f158 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f0fc:	4641      	mov	r1, r8
 800f0fe:	f006 fdab 	bl	8015c58 <put_memory>
 800f102:	f1bb 0f00 	cmp.w	fp, #0
 800f106:	d014      	beq.n	800f132 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800f108:	46d8      	mov	r8, fp
 800f10a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f10e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800f112:	2b04      	cmp	r3, #4
 800f114:	d1bf      	bne.n	800f096 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800f116:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800f11a:	3340      	adds	r3, #64	@ 0x40
 800f11c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f11e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f122:	e7c0      	b.n	800f0a6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800f124:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800f128:	3348      	adds	r3, #72	@ 0x48
 800f12a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f12c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f130:	e7b9      	b.n	800f0a6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800f132:	b00d      	add	sp, #52	@ 0x34
 800f134:	ecbd 8b06 	vpop	{d8-d10}
 800f138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f13c:	f3af 8000 	nop.w
	...
 800f148:	00000001 	.word	0x00000001
 800f14c:	00000000 	.word	0x00000000
 800f150:	0000001e 	.word	0x0000001e
 800f154:	00000000 	.word	0x00000000
 800f158:	2000b0fc 	.word	0x2000b0fc

0800f15c <run_xrce_session>:
 800f15c:	b510      	push	{r4, lr}
 800f15e:	788c      	ldrb	r4, [r1, #2]
 800f160:	b086      	sub	sp, #24
 800f162:	2c01      	cmp	r4, #1
 800f164:	f8ad 200e 	strh.w	r2, [sp, #14]
 800f168:	d00c      	beq.n	800f184 <run_xrce_session+0x28>
 800f16a:	4619      	mov	r1, r3
 800f16c:	2301      	movs	r3, #1
 800f16e:	9300      	str	r3, [sp, #0]
 800f170:	f10d 020e 	add.w	r2, sp, #14
 800f174:	f10d 0317 	add.w	r3, sp, #23
 800f178:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f17c:	f001 fa7a 	bl	8010674 <uxr_run_session_until_all_status>
 800f180:	b006      	add	sp, #24
 800f182:	bd10      	pop	{r4, pc}
 800f184:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f188:	f000 fe8e 	bl	800fea8 <uxr_flash_output_streams>
 800f18c:	4620      	mov	r0, r4
 800f18e:	b006      	add	sp, #24
 800f190:	bd10      	pop	{r4, pc}
 800f192:	bf00      	nop

0800f194 <convert_qos_profile>:
 800f194:	7a4a      	ldrb	r2, [r1, #9]
 800f196:	f891 c008 	ldrb.w	ip, [r1, #8]
 800f19a:	2a02      	cmp	r2, #2
 800f19c:	bf18      	it	ne
 800f19e:	2200      	movne	r2, #0
 800f1a0:	7002      	strb	r2, [r0, #0]
 800f1a2:	780a      	ldrb	r2, [r1, #0]
 800f1a4:	8889      	ldrh	r1, [r1, #4]
 800f1a6:	8081      	strh	r1, [r0, #4]
 800f1a8:	f1ac 0c02 	sub.w	ip, ip, #2
 800f1ac:	f1a2 0202 	sub.w	r2, r2, #2
 800f1b0:	fabc fc8c 	clz	ip, ip
 800f1b4:	fab2 f282 	clz	r2, r2
 800f1b8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800f1bc:	0952      	lsrs	r2, r2, #5
 800f1be:	f880 c001 	strb.w	ip, [r0, #1]
 800f1c2:	7082      	strb	r2, [r0, #2]
 800f1c4:	4770      	bx	lr
 800f1c6:	bf00      	nop

0800f1c8 <generate_service_topics>:
 800f1c8:	b570      	push	{r4, r5, r6, lr}
 800f1ca:	b082      	sub	sp, #8
 800f1cc:	461c      	mov	r4, r3
 800f1ce:	4b12      	ldr	r3, [pc, #72]	@ (800f218 <generate_service_topics+0x50>)
 800f1d0:	9301      	str	r3, [sp, #4]
 800f1d2:	4605      	mov	r5, r0
 800f1d4:	4b11      	ldr	r3, [pc, #68]	@ (800f21c <generate_service_topics+0x54>)
 800f1d6:	9000      	str	r0, [sp, #0]
 800f1d8:	4616      	mov	r6, r2
 800f1da:	4608      	mov	r0, r1
 800f1dc:	4a10      	ldr	r2, [pc, #64]	@ (800f220 <generate_service_topics+0x58>)
 800f1de:	4621      	mov	r1, r4
 800f1e0:	f008 fa38 	bl	8017654 <sniprintf>
 800f1e4:	4b0f      	ldr	r3, [pc, #60]	@ (800f224 <generate_service_topics+0x5c>)
 800f1e6:	9301      	str	r3, [sp, #4]
 800f1e8:	4601      	mov	r1, r0
 800f1ea:	9500      	str	r5, [sp, #0]
 800f1ec:	4b0e      	ldr	r3, [pc, #56]	@ (800f228 <generate_service_topics+0x60>)
 800f1ee:	4a0c      	ldr	r2, [pc, #48]	@ (800f220 <generate_service_topics+0x58>)
 800f1f0:	460d      	mov	r5, r1
 800f1f2:	4630      	mov	r0, r6
 800f1f4:	4621      	mov	r1, r4
 800f1f6:	f008 fa2d 	bl	8017654 <sniprintf>
 800f1fa:	2d00      	cmp	r5, #0
 800f1fc:	db01      	blt.n	800f202 <generate_service_topics+0x3a>
 800f1fe:	42ac      	cmp	r4, r5
 800f200:	dc02      	bgt.n	800f208 <generate_service_topics+0x40>
 800f202:	2000      	movs	r0, #0
 800f204:	b002      	add	sp, #8
 800f206:	bd70      	pop	{r4, r5, r6, pc}
 800f208:	2800      	cmp	r0, #0
 800f20a:	dbfa      	blt.n	800f202 <generate_service_topics+0x3a>
 800f20c:	4284      	cmp	r4, r0
 800f20e:	bfd4      	ite	le
 800f210:	2000      	movle	r0, #0
 800f212:	2001      	movgt	r0, #1
 800f214:	b002      	add	sp, #8
 800f216:	bd70      	pop	{r4, r5, r6, pc}
 800f218:	08019374 	.word	0x08019374
 800f21c:	08019370 	.word	0x08019370
 800f220:	08019354 	.word	0x08019354
 800f224:	08019368 	.word	0x08019368
 800f228:	08019364 	.word	0x08019364

0800f22c <generate_service_types>:
 800f22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f230:	4605      	mov	r5, r0
 800f232:	b086      	sub	sp, #24
 800f234:	6880      	ldr	r0, [r0, #8]
 800f236:	460c      	mov	r4, r1
 800f238:	4617      	mov	r7, r2
 800f23a:	461e      	mov	r6, r3
 800f23c:	4780      	blx	r0
 800f23e:	68eb      	ldr	r3, [r5, #12]
 800f240:	4680      	mov	r8, r0
 800f242:	4798      	blx	r3
 800f244:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800f248:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800f24c:	2300      	movs	r3, #0
 800f24e:	7023      	strb	r3, [r4, #0]
 800f250:	6813      	ldr	r3, [r2, #0]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d042      	beq.n	800f2dc <generate_service_types+0xb0>
 800f256:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800f2f0 <generate_service_types+0xc4>
 800f25a:	4641      	mov	r1, r8
 800f25c:	4620      	mov	r0, r4
 800f25e:	4c22      	ldr	r4, [pc, #136]	@ (800f2e8 <generate_service_types+0xbc>)
 800f260:	9405      	str	r4, [sp, #20]
 800f262:	6852      	ldr	r2, [r2, #4]
 800f264:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800f2f8 <generate_service_types+0xcc>
 800f268:	9204      	str	r2, [sp, #16]
 800f26a:	9100      	str	r1, [sp, #0]
 800f26c:	e9cd 4802 	strd	r4, r8, [sp, #8]
 800f270:	4a1e      	ldr	r2, [pc, #120]	@ (800f2ec <generate_service_types+0xc0>)
 800f272:	f8cd a004 	str.w	sl, [sp, #4]
 800f276:	4631      	mov	r1, r6
 800f278:	f008 f9ec 	bl	8017654 <sniprintf>
 800f27c:	2800      	cmp	r0, #0
 800f27e:	db1f      	blt.n	800f2c0 <generate_service_types+0x94>
 800f280:	2300      	movs	r3, #0
 800f282:	703b      	strb	r3, [r7, #0]
 800f284:	f8d9 3000 	ldr.w	r3, [r9]
 800f288:	42b0      	cmp	r0, r6
 800f28a:	bfac      	ite	ge
 800f28c:	2500      	movge	r5, #0
 800f28e:	2501      	movlt	r5, #1
 800f290:	b1eb      	cbz	r3, 800f2ce <generate_service_types+0xa2>
 800f292:	4a17      	ldr	r2, [pc, #92]	@ (800f2f0 <generate_service_types+0xc4>)
 800f294:	9405      	str	r4, [sp, #20]
 800f296:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f29a:	9200      	str	r2, [sp, #0]
 800f29c:	e9cd 8103 	strd	r8, r1, [sp, #12]
 800f2a0:	e9cd a401 	strd	sl, r4, [sp, #4]
 800f2a4:	4a11      	ldr	r2, [pc, #68]	@ (800f2ec <generate_service_types+0xc0>)
 800f2a6:	4638      	mov	r0, r7
 800f2a8:	4631      	mov	r1, r6
 800f2aa:	f008 f9d3 	bl	8017654 <sniprintf>
 800f2ae:	2800      	cmp	r0, #0
 800f2b0:	db10      	blt.n	800f2d4 <generate_service_types+0xa8>
 800f2b2:	42b0      	cmp	r0, r6
 800f2b4:	bfb4      	ite	lt
 800f2b6:	4628      	movlt	r0, r5
 800f2b8:	2000      	movge	r0, #0
 800f2ba:	b006      	add	sp, #24
 800f2bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	703b      	strb	r3, [r7, #0]
 800f2c4:	f8d9 3000 	ldr.w	r3, [r9]
 800f2c8:	2500      	movs	r5, #0
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d1e1      	bne.n	800f292 <generate_service_types+0x66>
 800f2ce:	4b09      	ldr	r3, [pc, #36]	@ (800f2f4 <generate_service_types+0xc8>)
 800f2d0:	461a      	mov	r2, r3
 800f2d2:	e7df      	b.n	800f294 <generate_service_types+0x68>
 800f2d4:	2000      	movs	r0, #0
 800f2d6:	b006      	add	sp, #24
 800f2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2dc:	4b05      	ldr	r3, [pc, #20]	@ (800f2f4 <generate_service_types+0xc8>)
 800f2de:	f8df 8010 	ldr.w	r8, [pc, #16]	@ 800f2f0 <generate_service_types+0xc4>
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	e7ba      	b.n	800f25c <generate_service_types+0x30>
 800f2e6:	bf00      	nop
 800f2e8:	0801935c 	.word	0x0801935c
 800f2ec:	0801934c 	.word	0x0801934c
 800f2f0:	08019348 	.word	0x08019348
 800f2f4:	08019138 	.word	0x08019138
 800f2f8:	08019360 	.word	0x08019360

0800f2fc <generate_type_name>:
 800f2fc:	b530      	push	{r4, r5, lr}
 800f2fe:	2300      	movs	r3, #0
 800f300:	700b      	strb	r3, [r1, #0]
 800f302:	6803      	ldr	r3, [r0, #0]
 800f304:	b087      	sub	sp, #28
 800f306:	4614      	mov	r4, r2
 800f308:	b1d3      	cbz	r3, 800f340 <generate_type_name+0x44>
 800f30a:	4a0f      	ldr	r2, [pc, #60]	@ (800f348 <generate_type_name+0x4c>)
 800f30c:	4615      	mov	r5, r2
 800f30e:	9203      	str	r2, [sp, #12]
 800f310:	9500      	str	r5, [sp, #0]
 800f312:	6842      	ldr	r2, [r0, #4]
 800f314:	480d      	ldr	r0, [pc, #52]	@ (800f34c <generate_type_name+0x50>)
 800f316:	9001      	str	r0, [sp, #4]
 800f318:	4608      	mov	r0, r1
 800f31a:	490d      	ldr	r1, [pc, #52]	@ (800f350 <generate_type_name+0x54>)
 800f31c:	9204      	str	r2, [sp, #16]
 800f31e:	9105      	str	r1, [sp, #20]
 800f320:	9102      	str	r1, [sp, #8]
 800f322:	4a0c      	ldr	r2, [pc, #48]	@ (800f354 <generate_type_name+0x58>)
 800f324:	4621      	mov	r1, r4
 800f326:	f008 f995 	bl	8017654 <sniprintf>
 800f32a:	2800      	cmp	r0, #0
 800f32c:	db05      	blt.n	800f33a <generate_type_name+0x3e>
 800f32e:	4284      	cmp	r4, r0
 800f330:	bfd4      	ite	le
 800f332:	2000      	movle	r0, #0
 800f334:	2001      	movgt	r0, #1
 800f336:	b007      	add	sp, #28
 800f338:	bd30      	pop	{r4, r5, pc}
 800f33a:	2000      	movs	r0, #0
 800f33c:	b007      	add	sp, #28
 800f33e:	bd30      	pop	{r4, r5, pc}
 800f340:	4b05      	ldr	r3, [pc, #20]	@ (800f358 <generate_type_name+0x5c>)
 800f342:	4a01      	ldr	r2, [pc, #4]	@ (800f348 <generate_type_name+0x4c>)
 800f344:	461d      	mov	r5, r3
 800f346:	e7e2      	b.n	800f30e <generate_type_name+0x12>
 800f348:	08019348 	.word	0x08019348
 800f34c:	08019360 	.word	0x08019360
 800f350:	0801935c 	.word	0x0801935c
 800f354:	0801934c 	.word	0x0801934c
 800f358:	08019138 	.word	0x08019138

0800f35c <generate_topic_name>:
 800f35c:	b510      	push	{r4, lr}
 800f35e:	b082      	sub	sp, #8
 800f360:	4614      	mov	r4, r2
 800f362:	9000      	str	r0, [sp, #0]
 800f364:	4b08      	ldr	r3, [pc, #32]	@ (800f388 <generate_topic_name+0x2c>)
 800f366:	4a09      	ldr	r2, [pc, #36]	@ (800f38c <generate_topic_name+0x30>)
 800f368:	4608      	mov	r0, r1
 800f36a:	4621      	mov	r1, r4
 800f36c:	f008 f972 	bl	8017654 <sniprintf>
 800f370:	2800      	cmp	r0, #0
 800f372:	db05      	blt.n	800f380 <generate_topic_name+0x24>
 800f374:	4284      	cmp	r4, r0
 800f376:	bfd4      	ite	le
 800f378:	2000      	movle	r0, #0
 800f37a:	2001      	movgt	r0, #1
 800f37c:	b002      	add	sp, #8
 800f37e:	bd10      	pop	{r4, pc}
 800f380:	2000      	movs	r0, #0
 800f382:	b002      	add	sp, #8
 800f384:	bd10      	pop	{r4, pc}
 800f386:	bf00      	nop
 800f388:	0801937c 	.word	0x0801937c
 800f38c:	08018e4c 	.word	0x08018e4c

0800f390 <is_uxrce_rmw_identifier_valid>:
 800f390:	b510      	push	{r4, lr}
 800f392:	4604      	mov	r4, r0
 800f394:	b140      	cbz	r0, 800f3a8 <is_uxrce_rmw_identifier_valid+0x18>
 800f396:	f7fe fcdf 	bl	800dd58 <rmw_get_implementation_identifier>
 800f39a:	4601      	mov	r1, r0
 800f39c:	4620      	mov	r0, r4
 800f39e:	f7f0 ff3f 	bl	8000220 <strcmp>
 800f3a2:	fab0 f080 	clz	r0, r0
 800f3a6:	0940      	lsrs	r0, r0, #5
 800f3a8:	bd10      	pop	{r4, pc}
 800f3aa:	bf00      	nop

0800f3ac <get_message_typesupport_handle>:
 800f3ac:	6883      	ldr	r3, [r0, #8]
 800f3ae:	4718      	bx	r3

0800f3b0 <get_message_typesupport_handle_function>:
 800f3b0:	b510      	push	{r4, lr}
 800f3b2:	4604      	mov	r4, r0
 800f3b4:	6800      	ldr	r0, [r0, #0]
 800f3b6:	f7f0 ff33 	bl	8000220 <strcmp>
 800f3ba:	2800      	cmp	r0, #0
 800f3bc:	bf0c      	ite	eq
 800f3be:	4620      	moveq	r0, r4
 800f3c0:	2000      	movne	r0, #0
 800f3c2:	bd10      	pop	{r4, pc}

0800f3c4 <get_service_typesupport_handle>:
 800f3c4:	6883      	ldr	r3, [r0, #8]
 800f3c6:	4718      	bx	r3

0800f3c8 <get_service_typesupport_handle_function>:
 800f3c8:	b510      	push	{r4, lr}
 800f3ca:	4604      	mov	r4, r0
 800f3cc:	6800      	ldr	r0, [r0, #0]
 800f3ce:	f7f0 ff27 	bl	8000220 <strcmp>
 800f3d2:	2800      	cmp	r0, #0
 800f3d4:	bf0c      	ite	eq
 800f3d6:	4620      	moveq	r0, r4
 800f3d8:	2000      	movne	r0, #0
 800f3da:	bd10      	pop	{r4, pc}

0800f3dc <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800f3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3e0:	6805      	ldr	r5, [r0, #0]
 800f3e2:	4604      	mov	r4, r0
 800f3e4:	4628      	mov	r0, r5
 800f3e6:	460e      	mov	r6, r1
 800f3e8:	f7f0 ff1a 	bl	8000220 <strcmp>
 800f3ec:	b1c8      	cbz	r0, 800f422 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800f3ee:	4b11      	ldr	r3, [pc, #68]	@ (800f434 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	429d      	cmp	r5, r3
 800f3f4:	d112      	bne.n	800f41c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f3f6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f3fa:	f8d8 4000 	ldr.w	r4, [r8]
 800f3fe:	b16c      	cbz	r4, 800f41c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f400:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f404:	2700      	movs	r7, #0
 800f406:	3d04      	subs	r5, #4
 800f408:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f40c:	4631      	mov	r1, r6
 800f40e:	f7f0 ff07 	bl	8000220 <strcmp>
 800f412:	00bb      	lsls	r3, r7, #2
 800f414:	b140      	cbz	r0, 800f428 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800f416:	3701      	adds	r7, #1
 800f418:	42bc      	cmp	r4, r7
 800f41a:	d1f5      	bne.n	800f408 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800f41c:	2000      	movs	r0, #0
 800f41e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f422:	4620      	mov	r0, r4
 800f424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f428:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f42c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f430:	58d3      	ldr	r3, [r2, r3]
 800f432:	4718      	bx	r3
 800f434:	20000324 	.word	0x20000324

0800f438 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800f438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f43c:	6805      	ldr	r5, [r0, #0]
 800f43e:	4604      	mov	r4, r0
 800f440:	4628      	mov	r0, r5
 800f442:	460e      	mov	r6, r1
 800f444:	f7f0 feec 	bl	8000220 <strcmp>
 800f448:	b1c8      	cbz	r0, 800f47e <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800f44a:	4b11      	ldr	r3, [pc, #68]	@ (800f490 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	429d      	cmp	r5, r3
 800f450:	d112      	bne.n	800f478 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800f452:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f456:	f8d8 4000 	ldr.w	r4, [r8]
 800f45a:	b16c      	cbz	r4, 800f478 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800f45c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f460:	2700      	movs	r7, #0
 800f462:	3d04      	subs	r5, #4
 800f464:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f468:	4631      	mov	r1, r6
 800f46a:	f7f0 fed9 	bl	8000220 <strcmp>
 800f46e:	00bb      	lsls	r3, r7, #2
 800f470:	b140      	cbz	r0, 800f484 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800f472:	3701      	adds	r7, #1
 800f474:	42bc      	cmp	r4, r7
 800f476:	d1f5      	bne.n	800f464 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800f478:	2000      	movs	r0, #0
 800f47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f47e:	4620      	mov	r0, r4
 800f480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f484:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f48c:	58d3      	ldr	r3, [r2, r3]
 800f48e:	4718      	bx	r3
 800f490:	20000324 	.word	0x20000324

0800f494 <geometry_msgs__msg__Twist__init>:
 800f494:	b570      	push	{r4, r5, r6, lr}
 800f496:	4605      	mov	r5, r0
 800f498:	b1a8      	cbz	r0, 800f4c6 <geometry_msgs__msg__Twist__init+0x32>
 800f49a:	f000 f82b 	bl	800f4f4 <geometry_msgs__msg__Vector3__init>
 800f49e:	4604      	mov	r4, r0
 800f4a0:	b140      	cbz	r0, 800f4b4 <geometry_msgs__msg__Twist__init+0x20>
 800f4a2:	f105 0618 	add.w	r6, r5, #24
 800f4a6:	4630      	mov	r0, r6
 800f4a8:	f000 f824 	bl	800f4f4 <geometry_msgs__msg__Vector3__init>
 800f4ac:	4604      	mov	r4, r0
 800f4ae:	b168      	cbz	r0, 800f4cc <geometry_msgs__msg__Twist__init+0x38>
 800f4b0:	4620      	mov	r0, r4
 800f4b2:	bd70      	pop	{r4, r5, r6, pc}
 800f4b4:	4628      	mov	r0, r5
 800f4b6:	f000 f821 	bl	800f4fc <geometry_msgs__msg__Vector3__fini>
 800f4ba:	f105 0018 	add.w	r0, r5, #24
 800f4be:	f000 f81d 	bl	800f4fc <geometry_msgs__msg__Vector3__fini>
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	bd70      	pop	{r4, r5, r6, pc}
 800f4c6:	4604      	mov	r4, r0
 800f4c8:	4620      	mov	r0, r4
 800f4ca:	bd70      	pop	{r4, r5, r6, pc}
 800f4cc:	4628      	mov	r0, r5
 800f4ce:	f000 f815 	bl	800f4fc <geometry_msgs__msg__Vector3__fini>
 800f4d2:	4630      	mov	r0, r6
 800f4d4:	f000 f812 	bl	800f4fc <geometry_msgs__msg__Vector3__fini>
 800f4d8:	e7ea      	b.n	800f4b0 <geometry_msgs__msg__Twist__init+0x1c>
 800f4da:	bf00      	nop

0800f4dc <geometry_msgs__msg__Twist__fini>:
 800f4dc:	b148      	cbz	r0, 800f4f2 <geometry_msgs__msg__Twist__fini+0x16>
 800f4de:	b510      	push	{r4, lr}
 800f4e0:	4604      	mov	r4, r0
 800f4e2:	f000 f80b 	bl	800f4fc <geometry_msgs__msg__Vector3__fini>
 800f4e6:	f104 0018 	add.w	r0, r4, #24
 800f4ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4ee:	f000 b805 	b.w	800f4fc <geometry_msgs__msg__Vector3__fini>
 800f4f2:	4770      	bx	lr

0800f4f4 <geometry_msgs__msg__Vector3__init>:
 800f4f4:	3800      	subs	r0, #0
 800f4f6:	bf18      	it	ne
 800f4f8:	2001      	movne	r0, #1
 800f4fa:	4770      	bx	lr

0800f4fc <geometry_msgs__msg__Vector3__fini>:
 800f4fc:	4770      	bx	lr
 800f4fe:	bf00      	nop

0800f500 <uxr_buffer_delete_entity>:
 800f500:	b510      	push	{r4, lr}
 800f502:	2300      	movs	r3, #0
 800f504:	b08e      	sub	sp, #56	@ 0x38
 800f506:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f50a:	2303      	movs	r3, #3
 800f50c:	9300      	str	r3, [sp, #0]
 800f50e:	2204      	movs	r2, #4
 800f510:	ab06      	add	r3, sp, #24
 800f512:	4604      	mov	r4, r0
 800f514:	9103      	str	r1, [sp, #12]
 800f516:	f001 fad5 	bl	8010ac4 <uxr_prepare_stream_to_write_submessage>
 800f51a:	b918      	cbnz	r0, 800f524 <uxr_buffer_delete_entity+0x24>
 800f51c:	4604      	mov	r4, r0
 800f51e:	4620      	mov	r0, r4
 800f520:	b00e      	add	sp, #56	@ 0x38
 800f522:	bd10      	pop	{r4, pc}
 800f524:	9902      	ldr	r1, [sp, #8]
 800f526:	aa05      	add	r2, sp, #20
 800f528:	4620      	mov	r0, r4
 800f52a:	f001 fc01 	bl	8010d30 <uxr_init_base_object_request>
 800f52e:	a905      	add	r1, sp, #20
 800f530:	4604      	mov	r4, r0
 800f532:	a806      	add	r0, sp, #24
 800f534:	f003 fa2c 	bl	8012990 <uxr_serialize_DELETE_Payload>
 800f538:	4620      	mov	r0, r4
 800f53a:	b00e      	add	sp, #56	@ 0x38
 800f53c:	bd10      	pop	{r4, pc}
 800f53e:	bf00      	nop

0800f540 <uxr_common_create_entity>:
 800f540:	b510      	push	{r4, lr}
 800f542:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f546:	b08c      	sub	sp, #48	@ 0x30
 800f548:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f54c:	f1bc 0f01 	cmp.w	ip, #1
 800f550:	bf0c      	ite	eq
 800f552:	f003 0201 	andeq.w	r2, r3, #1
 800f556:	2200      	movne	r2, #0
 800f558:	330e      	adds	r3, #14
 800f55a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800f55e:	9101      	str	r1, [sp, #4]
 800f560:	441a      	add	r2, r3
 800f562:	2301      	movs	r3, #1
 800f564:	9300      	str	r3, [sp, #0]
 800f566:	9903      	ldr	r1, [sp, #12]
 800f568:	ab04      	add	r3, sp, #16
 800f56a:	b292      	uxth	r2, r2
 800f56c:	4604      	mov	r4, r0
 800f56e:	f001 faa9 	bl	8010ac4 <uxr_prepare_stream_to_write_submessage>
 800f572:	b918      	cbnz	r0, 800f57c <uxr_common_create_entity+0x3c>
 800f574:	4604      	mov	r4, r0
 800f576:	4620      	mov	r0, r4
 800f578:	b00c      	add	sp, #48	@ 0x30
 800f57a:	bd10      	pop	{r4, pc}
 800f57c:	9902      	ldr	r1, [sp, #8]
 800f57e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f580:	4620      	mov	r0, r4
 800f582:	f001 fbd5 	bl	8010d30 <uxr_init_base_object_request>
 800f586:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f588:	4604      	mov	r4, r0
 800f58a:	a804      	add	r0, sp, #16
 800f58c:	f003 f95c 	bl	8012848 <uxr_serialize_CREATE_Payload>
 800f590:	4620      	mov	r0, r4
 800f592:	b00c      	add	sp, #48	@ 0x30
 800f594:	bd10      	pop	{r4, pc}
 800f596:	bf00      	nop

0800f598 <uxr_buffer_create_participant_bin>:
 800f598:	b570      	push	{r4, r5, r6, lr}
 800f59a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800f59e:	ac11      	add	r4, sp, #68	@ 0x44
 800f5a0:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800f5a4:	2303      	movs	r3, #3
 800f5a6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f5aa:	7223      	strb	r3, [r4, #8]
 800f5ac:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800f5ae:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	2100      	movs	r1, #0
 800f5b6:	4605      	mov	r5, r0
 800f5b8:	7122      	strb	r2, [r4, #4]
 800f5ba:	f88d 1014 	strb.w	r1, [sp, #20]
 800f5be:	b1cb      	cbz	r3, 800f5f4 <uxr_buffer_create_participant_bin+0x5c>
 800f5c0:	f88d 201c 	strb.w	r2, [sp, #28]
 800f5c4:	9308      	str	r3, [sp, #32]
 800f5c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f5ca:	a915      	add	r1, sp, #84	@ 0x54
 800f5cc:	a809      	add	r0, sp, #36	@ 0x24
 800f5ce:	f7fb ffcf 	bl	800b570 <ucdr_init_buffer>
 800f5d2:	a905      	add	r1, sp, #20
 800f5d4:	a809      	add	r0, sp, #36	@ 0x24
 800f5d6:	f002 fdd1 	bl	801217c <uxr_serialize_OBJK_DomainParticipant_Binary>
 800f5da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f5dc:	9600      	str	r6, [sp, #0]
 800f5de:	9401      	str	r4, [sp, #4]
 800f5e0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f5e4:	60e3      	str	r3, [r4, #12]
 800f5e6:	4628      	mov	r0, r5
 800f5e8:	b29b      	uxth	r3, r3
 800f5ea:	f7ff ffa9 	bl	800f540 <uxr_common_create_entity>
 800f5ee:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800f5f2:	bd70      	pop	{r4, r5, r6, pc}
 800f5f4:	f88d 301c 	strb.w	r3, [sp, #28]
 800f5f8:	e7e5      	b.n	800f5c6 <uxr_buffer_create_participant_bin+0x2e>
 800f5fa:	bf00      	nop

0800f5fc <uxr_buffer_create_topic_bin>:
 800f5fc:	b570      	push	{r4, r5, r6, lr}
 800f5fe:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800f602:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f606:	9105      	str	r1, [sp, #20]
 800f608:	4605      	mov	r5, r0
 800f60a:	a997      	add	r1, sp, #604	@ 0x25c
 800f60c:	4618      	mov	r0, r3
 800f60e:	2302      	movs	r3, #2
 800f610:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800f614:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800f618:	f000 f9ea 	bl	800f9f0 <uxr_object_id_to_raw>
 800f61c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800f61e:	9306      	str	r3, [sp, #24]
 800f620:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800f622:	930a      	str	r3, [sp, #40]	@ 0x28
 800f624:	2303      	movs	r3, #3
 800f626:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f62a:	2301      	movs	r3, #1
 800f62c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f630:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800f634:	a917      	add	r1, sp, #92	@ 0x5c
 800f636:	2300      	movs	r3, #0
 800f638:	a80b      	add	r0, sp, #44	@ 0x2c
 800f63a:	f88d 301c 	strb.w	r3, [sp, #28]
 800f63e:	f7fb ff97 	bl	800b570 <ucdr_init_buffer>
 800f642:	a906      	add	r1, sp, #24
 800f644:	a80b      	add	r0, sp, #44	@ 0x2c
 800f646:	f002 fdbb 	bl	80121c0 <uxr_serialize_OBJK_Topic_Binary>
 800f64a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f64c:	9316      	str	r3, [sp, #88]	@ 0x58
 800f64e:	ac13      	add	r4, sp, #76	@ 0x4c
 800f650:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f654:	9600      	str	r6, [sp, #0]
 800f656:	9401      	str	r4, [sp, #4]
 800f658:	b29b      	uxth	r3, r3
 800f65a:	4628      	mov	r0, r5
 800f65c:	f7ff ff70 	bl	800f540 <uxr_common_create_entity>
 800f660:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800f664:	bd70      	pop	{r4, r5, r6, pc}
 800f666:	bf00      	nop

0800f668 <uxr_buffer_create_publisher_bin>:
 800f668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f66a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800f66e:	4605      	mov	r5, r0
 800f670:	9105      	str	r1, [sp, #20]
 800f672:	4618      	mov	r0, r3
 800f674:	2603      	movs	r6, #3
 800f676:	a992      	add	r1, sp, #584	@ 0x248
 800f678:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f67c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800f680:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800f684:	f000 f9b4 	bl	800f9f0 <uxr_object_id_to_raw>
 800f688:	2300      	movs	r3, #0
 800f68a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f68e:	a912      	add	r1, sp, #72	@ 0x48
 800f690:	a806      	add	r0, sp, #24
 800f692:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800f696:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800f69a:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800f69e:	f7fb ff67 	bl	800b570 <ucdr_init_buffer>
 800f6a2:	a993      	add	r1, sp, #588	@ 0x24c
 800f6a4:	a806      	add	r0, sp, #24
 800f6a6:	f002 fe3f 	bl	8012328 <uxr_serialize_OBJK_Publisher_Binary>
 800f6aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6ac:	9311      	str	r3, [sp, #68]	@ 0x44
 800f6ae:	ac0e      	add	r4, sp, #56	@ 0x38
 800f6b0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f6b4:	9700      	str	r7, [sp, #0]
 800f6b6:	9401      	str	r4, [sp, #4]
 800f6b8:	b29b      	uxth	r3, r3
 800f6ba:	4628      	mov	r0, r5
 800f6bc:	f7ff ff40 	bl	800f540 <uxr_common_create_entity>
 800f6c0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800f6c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6c6:	bf00      	nop

0800f6c8 <uxr_buffer_create_datawriter_bin>:
 800f6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6cc:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800f6d0:	ac1d      	add	r4, sp, #116	@ 0x74
 800f6d2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f6d6:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800f6da:	9105      	str	r1, [sp, #20]
 800f6dc:	4606      	mov	r6, r0
 800f6de:	a9a1      	add	r1, sp, #644	@ 0x284
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	2305      	movs	r3, #5
 800f6e4:	7123      	strb	r3, [r4, #4]
 800f6e6:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800f6ea:	2703      	movs	r7, #3
 800f6ec:	f000 f980 	bl	800f9f0 <uxr_object_id_to_raw>
 800f6f0:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800f6f2:	7227      	strb	r7, [r4, #8]
 800f6f4:	a90e      	add	r1, sp, #56	@ 0x38
 800f6f6:	f000 f97b 	bl	800f9f0 <uxr_object_id_to_raw>
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800f700:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800f704:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800f708:	3d00      	subs	r5, #0
 800f70a:	bf18      	it	ne
 800f70c:	2501      	movne	r5, #1
 800f70e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800f712:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800f716:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f71a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f71e:	2301      	movs	r3, #1
 800f720:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800f724:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800f728:	bb8a      	cbnz	r2, 800f78e <uxr_buffer_create_datawriter_bin+0xc6>
 800f72a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f72e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800f732:	f04f 0c13 	mov.w	ip, #19
 800f736:	250b      	movs	r5, #11
 800f738:	2221      	movs	r2, #33	@ 0x21
 800f73a:	2111      	movs	r1, #17
 800f73c:	2009      	movs	r0, #9
 800f73e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800f742:	b923      	cbnz	r3, 800f74e <uxr_buffer_create_datawriter_bin+0x86>
 800f744:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800f748:	4672      	mov	r2, lr
 800f74a:	4661      	mov	r1, ip
 800f74c:	4628      	mov	r0, r5
 800f74e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800f752:	2b01      	cmp	r3, #1
 800f754:	d025      	beq.n	800f7a2 <uxr_buffer_create_datawriter_bin+0xda>
 800f756:	2b03      	cmp	r3, #3
 800f758:	d029      	beq.n	800f7ae <uxr_buffer_create_datawriter_bin+0xe6>
 800f75a:	b32b      	cbz	r3, 800f7a8 <uxr_buffer_create_datawriter_bin+0xe0>
 800f75c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f760:	a921      	add	r1, sp, #132	@ 0x84
 800f762:	a806      	add	r0, sp, #24
 800f764:	f7fb ff04 	bl	800b570 <ucdr_init_buffer>
 800f768:	a90e      	add	r1, sp, #56	@ 0x38
 800f76a:	a806      	add	r0, sp, #24
 800f76c:	f002 fe52 	bl	8012414 <uxr_serialize_OBJK_DataWriter_Binary>
 800f770:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f772:	f8cd 8000 	str.w	r8, [sp]
 800f776:	9401      	str	r4, [sp, #4]
 800f778:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f77c:	60e3      	str	r3, [r4, #12]
 800f77e:	4630      	mov	r0, r6
 800f780:	b29b      	uxth	r3, r3
 800f782:	f7ff fedd 	bl	800f540 <uxr_common_create_entity>
 800f786:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800f78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f78e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800f792:	f04f 0c12 	mov.w	ip, #18
 800f796:	250a      	movs	r5, #10
 800f798:	2220      	movs	r2, #32
 800f79a:	2110      	movs	r1, #16
 800f79c:	2008      	movs	r0, #8
 800f79e:	2702      	movs	r7, #2
 800f7a0:	e7cd      	b.n	800f73e <uxr_buffer_create_datawriter_bin+0x76>
 800f7a2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800f7a6:	e7d9      	b.n	800f75c <uxr_buffer_create_datawriter_bin+0x94>
 800f7a8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800f7ac:	e7d6      	b.n	800f75c <uxr_buffer_create_datawriter_bin+0x94>
 800f7ae:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800f7b2:	e7d3      	b.n	800f75c <uxr_buffer_create_datawriter_bin+0x94>

0800f7b4 <uxr_buffer_create_requester_bin>:
 800f7b4:	b570      	push	{r4, r5, r6, lr}
 800f7b6:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 800f7ba:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f7be:	9105      	str	r1, [sp, #20]
 800f7c0:	4605      	mov	r5, r0
 800f7c2:	a999      	add	r1, sp, #612	@ 0x264
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	2307      	movs	r3, #7
 800f7c8:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 800f7cc:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 800f7d0:	f000 f90e 	bl	800f9f0 <uxr_object_id_to_raw>
 800f7d4:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 800f7d6:	9306      	str	r3, [sp, #24]
 800f7d8:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 800f7da:	9307      	str	r3, [sp, #28]
 800f7dc:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 800f7de:	9308      	str	r3, [sp, #32]
 800f7e0:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800f7e2:	930c      	str	r3, [sp, #48]	@ 0x30
 800f7e4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f7e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f7ee:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800f7f2:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800f7f6:	a919      	add	r1, sp, #100	@ 0x64
 800f7f8:	2303      	movs	r3, #3
 800f7fa:	a80d      	add	r0, sp, #52	@ 0x34
 800f7fc:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 800f800:	f7fb feb6 	bl	800b570 <ucdr_init_buffer>
 800f804:	a906      	add	r1, sp, #24
 800f806:	a80d      	add	r0, sp, #52	@ 0x34
 800f808:	f002 fe30 	bl	801246c <uxr_serialize_OBJK_Requester_Binary>
 800f80c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f80e:	9318      	str	r3, [sp, #96]	@ 0x60
 800f810:	ac15      	add	r4, sp, #84	@ 0x54
 800f812:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f816:	9600      	str	r6, [sp, #0]
 800f818:	9401      	str	r4, [sp, #4]
 800f81a:	b29b      	uxth	r3, r3
 800f81c:	4628      	mov	r0, r5
 800f81e:	f7ff fe8f 	bl	800f540 <uxr_common_create_entity>
 800f822:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 800f826:	bd70      	pop	{r4, r5, r6, pc}

0800f828 <get_custom_error>:
 800f828:	4b01      	ldr	r3, [pc, #4]	@ (800f830 <get_custom_error+0x8>)
 800f82a:	7818      	ldrb	r0, [r3, #0]
 800f82c:	4770      	bx	lr
 800f82e:	bf00      	nop
 800f830:	2000b13c 	.word	0x2000b13c

0800f834 <recv_custom_msg>:
 800f834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f838:	4693      	mov	fp, r2
 800f83a:	b089      	sub	sp, #36	@ 0x24
 800f83c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800f840:	9305      	str	r3, [sp, #20]
 800f842:	468a      	mov	sl, r1
 800f844:	2100      	movs	r1, #0
 800f846:	4604      	mov	r4, r0
 800f848:	f88d 101e 	strb.w	r1, [sp, #30]
 800f84c:	b322      	cbz	r2, 800f898 <recv_custom_msg+0x64>
 800f84e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800f852:	f10d 081f 	add.w	r8, sp, #31
 800f856:	af05      	add	r7, sp, #20
 800f858:	f10d 061e 	add.w	r6, sp, #30
 800f85c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800f860:	e002      	b.n	800f868 <recv_custom_msg+0x34>
 800f862:	9b05      	ldr	r3, [sp, #20]
 800f864:	2b00      	cmp	r3, #0
 800f866:	dd0f      	ble.n	800f888 <recv_custom_msg+0x54>
 800f868:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800f86c:	4623      	mov	r3, r4
 800f86e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800f872:	e9cd 5600 	strd	r5, r6, [sp]
 800f876:	4622      	mov	r2, r4
 800f878:	4648      	mov	r0, r9
 800f87a:	f001 fc87 	bl	801118c <uxr_read_framed_msg>
 800f87e:	2800      	cmp	r0, #0
 800f880:	d0ef      	beq.n	800f862 <recv_custom_msg+0x2e>
 800f882:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f886:	b1b3      	cbz	r3, 800f8b6 <recv_custom_msg+0x82>
 800f888:	4b0f      	ldr	r3, [pc, #60]	@ (800f8c8 <recv_custom_msg+0x94>)
 800f88a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800f88e:	701a      	strb	r2, [r3, #0]
 800f890:	2000      	movs	r0, #0
 800f892:	b009      	add	sp, #36	@ 0x24
 800f894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f898:	f10d 021f 	add.w	r2, sp, #31
 800f89c:	9200      	str	r2, [sp, #0]
 800f89e:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800f8a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f8a6:	4601      	mov	r1, r0
 800f8a8:	47a8      	blx	r5
 800f8aa:	2800      	cmp	r0, #0
 800f8ac:	d0ec      	beq.n	800f888 <recv_custom_msg+0x54>
 800f8ae:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d1e8      	bne.n	800f888 <recv_custom_msg+0x54>
 800f8b6:	f8cb 0000 	str.w	r0, [fp]
 800f8ba:	2001      	movs	r0, #1
 800f8bc:	f8ca 4000 	str.w	r4, [sl]
 800f8c0:	b009      	add	sp, #36	@ 0x24
 800f8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8c6:	bf00      	nop
 800f8c8:	2000b13c 	.word	0x2000b13c

0800f8cc <send_custom_msg>:
 800f8cc:	b530      	push	{r4, r5, lr}
 800f8ce:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800f8d2:	b087      	sub	sp, #28
 800f8d4:	4615      	mov	r5, r2
 800f8d6:	b974      	cbnz	r4, 800f8f6 <send_custom_msg+0x2a>
 800f8d8:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800f8dc:	f10d 0317 	add.w	r3, sp, #23
 800f8e0:	47a0      	blx	r4
 800f8e2:	b108      	cbz	r0, 800f8e8 <send_custom_msg+0x1c>
 800f8e4:	42a8      	cmp	r0, r5
 800f8e6:	d015      	beq.n	800f914 <send_custom_msg+0x48>
 800f8e8:	4b0c      	ldr	r3, [pc, #48]	@ (800f91c <send_custom_msg+0x50>)
 800f8ea:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800f8ee:	701a      	strb	r2, [r3, #0]
 800f8f0:	2000      	movs	r0, #0
 800f8f2:	b007      	add	sp, #28
 800f8f4:	bd30      	pop	{r4, r5, pc}
 800f8f6:	460b      	mov	r3, r1
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	f10d 0117 	add.w	r1, sp, #23
 800f8fe:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800f902:	4602      	mov	r2, r0
 800f904:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800f908:	9500      	str	r5, [sp, #0]
 800f90a:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800f90e:	f001 fa45 	bl	8010d9c <uxr_write_framed_msg>
 800f912:	e7e6      	b.n	800f8e2 <send_custom_msg+0x16>
 800f914:	2001      	movs	r0, #1
 800f916:	b007      	add	sp, #28
 800f918:	bd30      	pop	{r4, r5, pc}
 800f91a:	bf00      	nop
 800f91c:	2000b13c 	.word	0x2000b13c

0800f920 <uxr_set_custom_transport_callbacks>:
 800f920:	b410      	push	{r4}
 800f922:	9c01      	ldr	r4, [sp, #4]
 800f924:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800f928:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800f92c:	9b02      	ldr	r3, [sp, #8]
 800f92e:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800f932:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f936:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800f93a:	4770      	bx	lr

0800f93c <uxr_init_custom_transport>:
 800f93c:	b538      	push	{r3, r4, r5, lr}
 800f93e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800f942:	b303      	cbz	r3, 800f986 <uxr_init_custom_transport+0x4a>
 800f944:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800f948:	4604      	mov	r4, r0
 800f94a:	b1e2      	cbz	r2, 800f986 <uxr_init_custom_transport+0x4a>
 800f94c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800f950:	b1ca      	cbz	r2, 800f986 <uxr_init_custom_transport+0x4a>
 800f952:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800f956:	b1b2      	cbz	r2, 800f986 <uxr_init_custom_transport+0x4a>
 800f958:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800f95c:	4798      	blx	r3
 800f95e:	4605      	mov	r5, r0
 800f960:	b188      	cbz	r0, 800f986 <uxr_init_custom_transport+0x4a>
 800f962:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800f966:	b98b      	cbnz	r3, 800f98c <uxr_init_custom_transport+0x50>
 800f968:	490b      	ldr	r1, [pc, #44]	@ (800f998 <uxr_init_custom_transport+0x5c>)
 800f96a:	4b0c      	ldr	r3, [pc, #48]	@ (800f99c <uxr_init_custom_transport+0x60>)
 800f96c:	4a0c      	ldr	r2, [pc, #48]	@ (800f9a0 <uxr_init_custom_transport+0x64>)
 800f96e:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800f972:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f976:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800f97a:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800f97e:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800f982:	4628      	mov	r0, r5
 800f984:	bd38      	pop	{r3, r4, r5, pc}
 800f986:	2500      	movs	r5, #0
 800f988:	4628      	mov	r0, r5
 800f98a:	bd38      	pop	{r3, r4, r5, pc}
 800f98c:	2100      	movs	r1, #0
 800f98e:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800f992:	f001 f9fd 	bl	8010d90 <uxr_init_framing_io>
 800f996:	e7e7      	b.n	800f968 <uxr_init_custom_transport+0x2c>
 800f998:	0800f8cd 	.word	0x0800f8cd
 800f99c:	0800f835 	.word	0x0800f835
 800f9a0:	0800f829 	.word	0x0800f829

0800f9a4 <uxr_close_custom_transport>:
 800f9a4:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800f9a8:	4718      	bx	r3
 800f9aa:	bf00      	nop

0800f9ac <uxr_object_id>:
 800f9ac:	b082      	sub	sp, #8
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	f88d 1006 	strb.w	r1, [sp, #6]
 800f9b4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f9b8:	f360 030f 	bfi	r3, r0, #0, #16
 800f9bc:	f362 431f 	bfi	r3, r2, #16, #16
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	b002      	add	sp, #8
 800f9c4:	4770      	bx	lr
 800f9c6:	bf00      	nop

0800f9c8 <uxr_object_id_from_raw>:
 800f9c8:	7843      	ldrb	r3, [r0, #1]
 800f9ca:	7801      	ldrb	r1, [r0, #0]
 800f9cc:	b082      	sub	sp, #8
 800f9ce:	f003 020f 	and.w	r2, r3, #15
 800f9d2:	f88d 2006 	strb.w	r2, [sp, #6]
 800f9d6:	091b      	lsrs	r3, r3, #4
 800f9d8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f9dc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800f9e0:	2000      	movs	r0, #0
 800f9e2:	f363 000f 	bfi	r0, r3, #0, #16
 800f9e6:	f362 401f 	bfi	r0, r2, #16, #16
 800f9ea:	b002      	add	sp, #8
 800f9ec:	4770      	bx	lr
 800f9ee:	bf00      	nop

0800f9f0 <uxr_object_id_to_raw>:
 800f9f0:	4602      	mov	r2, r0
 800f9f2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800f9fc:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800fa00:	f881 c000 	strb.w	ip, [r1]
 800fa04:	7048      	strb	r0, [r1, #1]
 800fa06:	b002      	add	sp, #8
 800fa08:	4770      	bx	lr
 800fa0a:	bf00      	nop

0800fa0c <uxr_buffer_request_data>:
 800fa0c:	b530      	push	{r4, r5, lr}
 800fa0e:	b095      	sub	sp, #84	@ 0x54
 800fa10:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800fa14:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800fa16:	9303      	str	r3, [sp, #12]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	2d00      	cmp	r5, #0
 800fa1c:	bf14      	ite	ne
 800fa1e:	2101      	movne	r1, #1
 800fa20:	4611      	moveq	r1, r2
 800fa22:	4604      	mov	r4, r0
 800fa24:	f88d 301c 	strb.w	r3, [sp, #28]
 800fa28:	f88d 201d 	strb.w	r2, [sp, #29]
 800fa2c:	f88d 201e 	strb.w	r2, [sp, #30]
 800fa30:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800fa34:	d021      	beq.n	800fa7a <uxr_buffer_request_data+0x6e>
 800fa36:	682a      	ldr	r2, [r5, #0]
 800fa38:	686b      	ldr	r3, [r5, #4]
 800fa3a:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 800fa3e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800fa42:	2210      	movs	r2, #16
 800fa44:	2308      	movs	r3, #8
 800fa46:	2100      	movs	r1, #0
 800fa48:	e9cd 3100 	strd	r3, r1, [sp]
 800fa4c:	4620      	mov	r0, r4
 800fa4e:	9905      	ldr	r1, [sp, #20]
 800fa50:	ab0c      	add	r3, sp, #48	@ 0x30
 800fa52:	f001 f837 	bl	8010ac4 <uxr_prepare_stream_to_write_submessage>
 800fa56:	b918      	cbnz	r0, 800fa60 <uxr_buffer_request_data+0x54>
 800fa58:	4604      	mov	r4, r0
 800fa5a:	4620      	mov	r0, r4
 800fa5c:	b015      	add	sp, #84	@ 0x54
 800fa5e:	bd30      	pop	{r4, r5, pc}
 800fa60:	9904      	ldr	r1, [sp, #16]
 800fa62:	aa06      	add	r2, sp, #24
 800fa64:	4620      	mov	r0, r4
 800fa66:	f001 f963 	bl	8010d30 <uxr_init_base_object_request>
 800fa6a:	a906      	add	r1, sp, #24
 800fa6c:	4604      	mov	r4, r0
 800fa6e:	a80c      	add	r0, sp, #48	@ 0x30
 800fa70:	f003 f838 	bl	8012ae4 <uxr_serialize_READ_DATA_Payload>
 800fa74:	4620      	mov	r0, r4
 800fa76:	b015      	add	sp, #84	@ 0x54
 800fa78:	bd30      	pop	{r4, r5, pc}
 800fa7a:	2208      	movs	r2, #8
 800fa7c:	e7e2      	b.n	800fa44 <uxr_buffer_request_data+0x38>
 800fa7e:	bf00      	nop

0800fa80 <uxr_buffer_cancel_data>:
 800fa80:	b510      	push	{r4, lr}
 800fa82:	b094      	sub	sp, #80	@ 0x50
 800fa84:	2300      	movs	r3, #0
 800fa86:	9202      	str	r2, [sp, #8]
 800fa88:	9205      	str	r2, [sp, #20]
 800fa8a:	9301      	str	r3, [sp, #4]
 800fa8c:	2201      	movs	r2, #1
 800fa8e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800fa92:	f88d 301e 	strb.w	r3, [sp, #30]
 800fa96:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800fa9a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800fa9e:	2308      	movs	r3, #8
 800faa0:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800faa4:	9300      	str	r3, [sp, #0]
 800faa6:	2210      	movs	r2, #16
 800faa8:	ab0c      	add	r3, sp, #48	@ 0x30
 800faaa:	4604      	mov	r4, r0
 800faac:	9103      	str	r1, [sp, #12]
 800faae:	f001 f809 	bl	8010ac4 <uxr_prepare_stream_to_write_submessage>
 800fab2:	b918      	cbnz	r0, 800fabc <uxr_buffer_cancel_data+0x3c>
 800fab4:	4604      	mov	r4, r0
 800fab6:	4620      	mov	r0, r4
 800fab8:	b014      	add	sp, #80	@ 0x50
 800faba:	bd10      	pop	{r4, pc}
 800fabc:	9905      	ldr	r1, [sp, #20]
 800fabe:	aa06      	add	r2, sp, #24
 800fac0:	4620      	mov	r0, r4
 800fac2:	f001 f935 	bl	8010d30 <uxr_init_base_object_request>
 800fac6:	a906      	add	r1, sp, #24
 800fac8:	4604      	mov	r4, r0
 800faca:	a80c      	add	r0, sp, #48	@ 0x30
 800facc:	f003 f80a 	bl	8012ae4 <uxr_serialize_READ_DATA_Payload>
 800fad0:	4620      	mov	r0, r4
 800fad2:	b014      	add	sp, #80	@ 0x50
 800fad4:	bd10      	pop	{r4, pc}
 800fad6:	bf00      	nop

0800fad8 <read_submessage_format>:
 800fad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fadc:	b095      	sub	sp, #84	@ 0x54
 800fade:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800fae2:	b113      	cbz	r3, 800faea <read_submessage_format+0x12>
 800fae4:	b015      	add	sp, #84	@ 0x54
 800fae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800faea:	460c      	mov	r4, r1
 800faec:	4615      	mov	r5, r2
 800faee:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800faf2:	4607      	mov	r7, r0
 800faf4:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800faf6:	9004      	str	r0, [sp, #16]
 800faf8:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800fafa:	9005      	str	r0, [sp, #20]
 800fafc:	1a52      	subs	r2, r2, r1
 800fafe:	a80c      	add	r0, sp, #48	@ 0x30
 800fb00:	4699      	mov	r9, r3
 800fb02:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800fb06:	f7fb fd33 	bl	800b570 <ucdr_init_buffer>
 800fb0a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800fb0e:	a80c      	add	r0, sp, #48	@ 0x30
 800fb10:	f7fb fd02 	bl	800b518 <ucdr_set_on_full_buffer_callback>
 800fb14:	69e2      	ldr	r2, [r4, #28]
 800fb16:	b19a      	cbz	r2, 800fb40 <read_submessage_format+0x68>
 800fb18:	f1b8 0f07 	cmp.w	r8, #7
 800fb1c:	f882 9014 	strb.w	r9, [r2, #20]
 800fb20:	d040      	beq.n	800fba4 <read_submessage_format+0xcc>
 800fb22:	f1b8 0f08 	cmp.w	r8, #8
 800fb26:	d02e      	beq.n	800fb86 <read_submessage_format+0xae>
 800fb28:	f1b8 0f06 	cmp.w	r8, #6
 800fb2c:	d011      	beq.n	800fb52 <read_submessage_format+0x7a>
 800fb2e:	2301      	movs	r3, #1
 800fb30:	7513      	strb	r3, [r2, #20]
 800fb32:	4629      	mov	r1, r5
 800fb34:	4620      	mov	r0, r4
 800fb36:	f7fb fd6b 	bl	800b610 <ucdr_advance_buffer>
 800fb3a:	b015      	add	sp, #84	@ 0x54
 800fb3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb40:	f1b8 0f07 	cmp.w	r8, #7
 800fb44:	d02e      	beq.n	800fba4 <read_submessage_format+0xcc>
 800fb46:	f1b8 0f08 	cmp.w	r8, #8
 800fb4a:	d01c      	beq.n	800fb86 <read_submessage_format+0xae>
 800fb4c:	f1b8 0f06 	cmp.w	r8, #6
 800fb50:	d1ef      	bne.n	800fb32 <read_submessage_format+0x5a>
 800fb52:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800fb56:	f1b8 0f00 	cmp.w	r8, #0
 800fb5a:	d011      	beq.n	800fb80 <read_submessage_format+0xa8>
 800fb5c:	ab0c      	add	r3, sp, #48	@ 0x30
 800fb5e:	e9cd 3500 	strd	r3, r5, [sp]
 800fb62:	2306      	movs	r3, #6
 800fb64:	f88d 3016 	strb.w	r3, [sp, #22]
 800fb68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fb6c:	9302      	str	r3, [sp, #8]
 800fb6e:	4632      	mov	r2, r6
 800fb70:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800fb74:	4638      	mov	r0, r7
 800fb76:	47c0      	blx	r8
 800fb78:	2301      	movs	r3, #1
 800fb7a:	69e2      	ldr	r2, [r4, #28]
 800fb7c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800fb80:	2a00      	cmp	r2, #0
 800fb82:	d1d4      	bne.n	800fb2e <read_submessage_format+0x56>
 800fb84:	e7d5      	b.n	800fb32 <read_submessage_format+0x5a>
 800fb86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d0f8      	beq.n	800fb80 <read_submessage_format+0xa8>
 800fb8e:	a906      	add	r1, sp, #24
 800fb90:	a80c      	add	r0, sp, #48	@ 0x30
 800fb92:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800fb96:	f003 f86b 	bl	8012c70 <uxr_deserialize_SampleIdentity>
 800fb9a:	b9a0      	cbnz	r0, 800fbc6 <read_submessage_format+0xee>
 800fb9c:	69e2      	ldr	r2, [r4, #28]
 800fb9e:	2a00      	cmp	r2, #0
 800fba0:	d1c5      	bne.n	800fb2e <read_submessage_format+0x56>
 800fba2:	e7c6      	b.n	800fb32 <read_submessage_format+0x5a>
 800fba4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fba8:	b13b      	cbz	r3, 800fbba <read_submessage_format+0xe2>
 800fbaa:	a906      	add	r1, sp, #24
 800fbac:	a80c      	add	r0, sp, #48	@ 0x30
 800fbae:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800fbb2:	f002 fd31 	bl	8012618 <uxr_deserialize_BaseObjectRequest>
 800fbb6:	bb60      	cbnz	r0, 800fc12 <read_submessage_format+0x13a>
 800fbb8:	69e2      	ldr	r2, [r4, #28]
 800fbba:	68a3      	ldr	r3, [r4, #8]
 800fbbc:	442b      	add	r3, r5
 800fbbe:	60a3      	str	r3, [r4, #8]
 800fbc0:	2a00      	cmp	r2, #0
 800fbc2:	d1b4      	bne.n	800fb2e <read_submessage_format+0x56>
 800fbc4:	e7b5      	b.n	800fb32 <read_submessage_format+0x5a>
 800fbc6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800fbca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fbcc:	1a52      	subs	r2, r2, r1
 800fbce:	eba8 0803 	sub.w	r8, r8, r3
 800fbd2:	a80c      	add	r0, sp, #48	@ 0x30
 800fbd4:	f7fb fccc 	bl	800b570 <ucdr_init_buffer>
 800fbd8:	44a8      	add	r8, r5
 800fbda:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800fbde:	a80c      	add	r0, sp, #48	@ 0x30
 800fbe0:	f7fb fc9a 	bl	800b518 <ucdr_set_on_full_buffer_callback>
 800fbe4:	fa1f f888 	uxth.w	r8, r8
 800fbe8:	ab0c      	add	r3, sp, #48	@ 0x30
 800fbea:	9300      	str	r3, [sp, #0]
 800fbec:	f8cd 8004 	str.w	r8, [sp, #4]
 800fbf0:	2108      	movs	r1, #8
 800fbf2:	f88d 1016 	strb.w	r1, [sp, #22]
 800fbf6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800fbfa:	9102      	str	r1, [sp, #8]
 800fbfc:	ab06      	add	r3, sp, #24
 800fbfe:	4632      	mov	r2, r6
 800fc00:	9905      	ldr	r1, [sp, #20]
 800fc02:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800fc06:	4638      	mov	r0, r7
 800fc08:	47b0      	blx	r6
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800fc10:	e7c4      	b.n	800fb9c <read_submessage_format+0xc4>
 800fc12:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800fc16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fc18:	1a52      	subs	r2, r2, r1
 800fc1a:	a80c      	add	r0, sp, #48	@ 0x30
 800fc1c:	eba8 0803 	sub.w	r8, r8, r3
 800fc20:	f7fb fca6 	bl	800b570 <ucdr_init_buffer>
 800fc24:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800fc28:	a80c      	add	r0, sp, #48	@ 0x30
 800fc2a:	f7fb fc75 	bl	800b518 <ucdr_set_on_full_buffer_callback>
 800fc2e:	ab0c      	add	r3, sp, #48	@ 0x30
 800fc30:	9300      	str	r3, [sp, #0]
 800fc32:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800fc36:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fc3a:	44a8      	add	r8, r5
 800fc3c:	fa1f f888 	uxth.w	r8, r8
 800fc40:	f8cd 8004 	str.w	r8, [sp, #4]
 800fc44:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800fc48:	2107      	movs	r1, #7
 800fc4a:	f88d 1016 	strb.w	r1, [sp, #22]
 800fc4e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800fc52:	9102      	str	r1, [sp, #8]
 800fc54:	4632      	mov	r2, r6
 800fc56:	b29b      	uxth	r3, r3
 800fc58:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800fc5c:	9905      	ldr	r1, [sp, #20]
 800fc5e:	4638      	mov	r0, r7
 800fc60:	47b0      	blx	r6
 800fc62:	2301      	movs	r3, #1
 800fc64:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800fc68:	e7a6      	b.n	800fbb8 <read_submessage_format+0xe0>
 800fc6a:	bf00      	nop

0800fc6c <on_get_fragmentation_info>:
 800fc6c:	b500      	push	{lr}
 800fc6e:	b08b      	sub	sp, #44	@ 0x2c
 800fc70:	4601      	mov	r1, r0
 800fc72:	2204      	movs	r2, #4
 800fc74:	a802      	add	r0, sp, #8
 800fc76:	f7fb fc7b 	bl	800b570 <ucdr_init_buffer>
 800fc7a:	f10d 0305 	add.w	r3, sp, #5
 800fc7e:	f10d 0206 	add.w	r2, sp, #6
 800fc82:	a901      	add	r1, sp, #4
 800fc84:	a802      	add	r0, sp, #8
 800fc86:	f001 fe67 	bl	8011958 <uxr_read_submessage_header>
 800fc8a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fc8e:	2b0d      	cmp	r3, #13
 800fc90:	d003      	beq.n	800fc9a <on_get_fragmentation_info+0x2e>
 800fc92:	2000      	movs	r0, #0
 800fc94:	b00b      	add	sp, #44	@ 0x2c
 800fc96:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc9a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fc9e:	f013 0f02 	tst.w	r3, #2
 800fca2:	bf14      	ite	ne
 800fca4:	2002      	movne	r0, #2
 800fca6:	2001      	moveq	r0, #1
 800fca8:	b00b      	add	sp, #44	@ 0x2c
 800fcaa:	f85d fb04 	ldr.w	pc, [sp], #4
 800fcae:	bf00      	nop

0800fcb0 <read_submessage_get_info>:
 800fcb0:	b570      	push	{r4, r5, r6, lr}
 800fcb2:	2500      	movs	r5, #0
 800fcb4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800fcb8:	4604      	mov	r4, r0
 800fcba:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800fcbe:	460e      	mov	r6, r1
 800fcc0:	a810      	add	r0, sp, #64	@ 0x40
 800fcc2:	4629      	mov	r1, r5
 800fcc4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800fcc8:	f007 fd9e 	bl	8017808 <memset>
 800fccc:	a903      	add	r1, sp, #12
 800fcce:	4630      	mov	r0, r6
 800fcd0:	f002 fe4a 	bl	8012968 <uxr_deserialize_GET_INFO_Payload>
 800fcd4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800fcd8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fcdc:	4620      	mov	r0, r4
 800fcde:	f001 f81f 	bl	8010d20 <uxr_session_header_offset>
 800fce2:	462b      	mov	r3, r5
 800fce4:	9000      	str	r0, [sp, #0]
 800fce6:	220c      	movs	r2, #12
 800fce8:	a905      	add	r1, sp, #20
 800fcea:	a808      	add	r0, sp, #32
 800fcec:	f7fb fc2e 	bl	800b54c <ucdr_init_buffer_origin_offset>
 800fcf0:	a910      	add	r1, sp, #64	@ 0x40
 800fcf2:	a808      	add	r0, sp, #32
 800fcf4:	f002 feaa 	bl	8012a4c <uxr_serialize_INFO_Payload>
 800fcf8:	9b08      	ldr	r3, [sp, #32]
 800fcfa:	462a      	mov	r2, r5
 800fcfc:	4629      	mov	r1, r5
 800fcfe:	4620      	mov	r0, r4
 800fd00:	f000 ffb8 	bl	8010c74 <uxr_stamp_session_header>
 800fd04:	a808      	add	r0, sp, #32
 800fd06:	f7fb fc5f 	bl	800b5c8 <ucdr_buffer_length>
 800fd0a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fd0c:	4602      	mov	r2, r0
 800fd0e:	a905      	add	r1, sp, #20
 800fd10:	e9d3 0400 	ldrd	r0, r4, [r3]
 800fd14:	47a0      	blx	r4
 800fd16:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800fd1a:	bd70      	pop	{r4, r5, r6, pc}

0800fd1c <write_submessage_acknack.isra.0>:
 800fd1c:	b570      	push	{r4, r5, r6, lr}
 800fd1e:	b092      	sub	sp, #72	@ 0x48
 800fd20:	4605      	mov	r5, r0
 800fd22:	460e      	mov	r6, r1
 800fd24:	4614      	mov	r4, r2
 800fd26:	f000 fffb 	bl	8010d20 <uxr_session_header_offset>
 800fd2a:	a905      	add	r1, sp, #20
 800fd2c:	9000      	str	r0, [sp, #0]
 800fd2e:	2300      	movs	r3, #0
 800fd30:	a80a      	add	r0, sp, #40	@ 0x28
 800fd32:	2211      	movs	r2, #17
 800fd34:	f7fb fc0a 	bl	800b54c <ucdr_init_buffer_origin_offset>
 800fd38:	2218      	movs	r2, #24
 800fd3a:	fb02 5404 	mla	r4, r2, r4, r5
 800fd3e:	2300      	movs	r3, #0
 800fd40:	2205      	movs	r2, #5
 800fd42:	3450      	adds	r4, #80	@ 0x50
 800fd44:	210a      	movs	r1, #10
 800fd46:	a80a      	add	r0, sp, #40	@ 0x28
 800fd48:	f001 fdec 	bl	8011924 <uxr_buffer_submessage_header>
 800fd4c:	a903      	add	r1, sp, #12
 800fd4e:	4620      	mov	r0, r4
 800fd50:	f006 fd76 	bl	8016840 <uxr_compute_acknack>
 800fd54:	ba40      	rev16	r0, r0
 800fd56:	f8ad 000e 	strh.w	r0, [sp, #14]
 800fd5a:	a903      	add	r1, sp, #12
 800fd5c:	a80a      	add	r0, sp, #40	@ 0x28
 800fd5e:	f88d 6010 	strb.w	r6, [sp, #16]
 800fd62:	f002 fee3 	bl	8012b2c <uxr_serialize_ACKNACK_Payload>
 800fd66:	2200      	movs	r2, #0
 800fd68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd6a:	4611      	mov	r1, r2
 800fd6c:	4628      	mov	r0, r5
 800fd6e:	f000 ff81 	bl	8010c74 <uxr_stamp_session_header>
 800fd72:	a80a      	add	r0, sp, #40	@ 0x28
 800fd74:	f7fb fc28 	bl	800b5c8 <ucdr_buffer_length>
 800fd78:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800fd7a:	4602      	mov	r2, r0
 800fd7c:	a905      	add	r1, sp, #20
 800fd7e:	e9d3 0400 	ldrd	r0, r4, [r3]
 800fd82:	47a0      	blx	r4
 800fd84:	b012      	add	sp, #72	@ 0x48
 800fd86:	bd70      	pop	{r4, r5, r6, pc}

0800fd88 <uxr_init_session>:
 800fd88:	b510      	push	{r4, lr}
 800fd8a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800fdc0 <uxr_init_session+0x38>
 800fd8e:	2300      	movs	r3, #0
 800fd90:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800fd94:	4604      	mov	r4, r0
 800fd96:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800fd9a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800fd9e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800fda2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800fda6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800fdaa:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800fdae:	2181      	movs	r1, #129	@ 0x81
 800fdb0:	f000 fecc 	bl	8010b4c <uxr_init_session_info>
 800fdb4:	f104 0008 	add.w	r0, r4, #8
 800fdb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdbc:	f001 bcce 	b.w	801175c <uxr_init_stream_storage>
	...

0800fdc8 <uxr_set_status_callback>:
 800fdc8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800fdcc:	4770      	bx	lr
 800fdce:	bf00      	nop

0800fdd0 <uxr_set_topic_callback>:
 800fdd0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800fdd4:	4770      	bx	lr
 800fdd6:	bf00      	nop

0800fdd8 <uxr_set_request_callback>:
 800fdd8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800fddc:	4770      	bx	lr
 800fdde:	bf00      	nop

0800fde0 <uxr_set_reply_callback>:
 800fde0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800fde4:	4770      	bx	lr
 800fde6:	bf00      	nop

0800fde8 <uxr_create_output_best_effort_stream>:
 800fde8:	b510      	push	{r4, lr}
 800fdea:	b084      	sub	sp, #16
 800fdec:	e9cd 2100 	strd	r2, r1, [sp]
 800fdf0:	4604      	mov	r4, r0
 800fdf2:	f000 ff95 	bl	8010d20 <uxr_session_header_offset>
 800fdf6:	e9dd 2100 	ldrd	r2, r1, [sp]
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	f104 0008 	add.w	r0, r4, #8
 800fe00:	b004      	add	sp, #16
 800fe02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe06:	f001 bcf3 	b.w	80117f0 <uxr_add_output_best_effort_buffer>
 800fe0a:	bf00      	nop

0800fe0c <uxr_create_output_reliable_stream>:
 800fe0c:	b510      	push	{r4, lr}
 800fe0e:	b088      	sub	sp, #32
 800fe10:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800fe14:	4604      	mov	r4, r0
 800fe16:	9303      	str	r3, [sp, #12]
 800fe18:	f000 ff82 	bl	8010d20 <uxr_session_header_offset>
 800fe1c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800fe20:	9000      	str	r0, [sp, #0]
 800fe22:	9905      	ldr	r1, [sp, #20]
 800fe24:	f104 0008 	add.w	r0, r4, #8
 800fe28:	f001 fcf6 	bl	8011818 <uxr_add_output_reliable_buffer>
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	b2c3      	uxtb	r3, r0
 800fe30:	f363 0207 	bfi	r2, r3, #0, #8
 800fe34:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800fe38:	f363 220f 	bfi	r2, r3, #8, #8
 800fe3c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800fe40:	f363 4217 	bfi	r2, r3, #16, #8
 800fe44:	0e03      	lsrs	r3, r0, #24
 800fe46:	f363 621f 	bfi	r2, r3, #24, #8
 800fe4a:	4610      	mov	r0, r2
 800fe4c:	b008      	add	sp, #32
 800fe4e:	bd10      	pop	{r4, pc}

0800fe50 <uxr_create_input_best_effort_stream>:
 800fe50:	b082      	sub	sp, #8
 800fe52:	3008      	adds	r0, #8
 800fe54:	b002      	add	sp, #8
 800fe56:	f001 bcf9 	b.w	801184c <uxr_add_input_best_effort_buffer>
 800fe5a:	bf00      	nop

0800fe5c <uxr_create_input_reliable_stream>:
 800fe5c:	b510      	push	{r4, lr}
 800fe5e:	b084      	sub	sp, #16
 800fe60:	4c0b      	ldr	r4, [pc, #44]	@ (800fe90 <uxr_create_input_reliable_stream+0x34>)
 800fe62:	9400      	str	r4, [sp, #0]
 800fe64:	3008      	adds	r0, #8
 800fe66:	f001 fd07 	bl	8011878 <uxr_add_input_reliable_buffer>
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	b2c3      	uxtb	r3, r0
 800fe6e:	f363 0207 	bfi	r2, r3, #0, #8
 800fe72:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800fe76:	f363 220f 	bfi	r2, r3, #8, #8
 800fe7a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800fe7e:	f363 4217 	bfi	r2, r3, #16, #8
 800fe82:	0e03      	lsrs	r3, r0, #24
 800fe84:	f363 621f 	bfi	r2, r3, #24, #8
 800fe88:	4610      	mov	r0, r2
 800fe8a:	b004      	add	sp, #16
 800fe8c:	bd10      	pop	{r4, pc}
 800fe8e:	bf00      	nop
 800fe90:	0800fc6d 	.word	0x0800fc6d

0800fe94 <uxr_epoch_nanos>:
 800fe94:	b510      	push	{r4, lr}
 800fe96:	4604      	mov	r4, r0
 800fe98:	f001 fda4 	bl	80119e4 <uxr_nanos>
 800fe9c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800fea0:	1ac0      	subs	r0, r0, r3
 800fea2:	eb61 0102 	sbc.w	r1, r1, r2
 800fea6:	bd10      	pop	{r4, pc}

0800fea8 <uxr_flash_output_streams>:
 800fea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800feac:	7e03      	ldrb	r3, [r0, #24]
 800feae:	b084      	sub	sp, #16
 800feb0:	4604      	mov	r4, r0
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d035      	beq.n	800ff22 <uxr_flash_output_streams+0x7a>
 800feb6:	f04f 0900 	mov.w	r9, #0
 800feba:	4648      	mov	r0, r9
 800febc:	f10d 0802 	add.w	r8, sp, #2
 800fec0:	af03      	add	r7, sp, #12
 800fec2:	ae02      	add	r6, sp, #8
 800fec4:	e006      	b.n	800fed4 <uxr_flash_output_streams+0x2c>
 800fec6:	7e23      	ldrb	r3, [r4, #24]
 800fec8:	f109 0901 	add.w	r9, r9, #1
 800fecc:	fa5f f089 	uxtb.w	r0, r9
 800fed0:	4283      	cmp	r3, r0
 800fed2:	d926      	bls.n	800ff22 <uxr_flash_output_streams+0x7a>
 800fed4:	2201      	movs	r2, #1
 800fed6:	4611      	mov	r1, r2
 800fed8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800fedc:	f001 fbea 	bl	80116b4 <uxr_stream_id>
 800fee0:	3508      	adds	r5, #8
 800fee2:	4684      	mov	ip, r0
 800fee4:	4643      	mov	r3, r8
 800fee6:	463a      	mov	r2, r7
 800fee8:	4631      	mov	r1, r6
 800feea:	4628      	mov	r0, r5
 800feec:	f8cd c004 	str.w	ip, [sp, #4]
 800fef0:	f006 fd2c 	bl	801694c <uxr_prepare_best_effort_buffer_to_send>
 800fef4:	2800      	cmp	r0, #0
 800fef6:	d0e6      	beq.n	800fec6 <uxr_flash_output_streams+0x1e>
 800fef8:	9b02      	ldr	r3, [sp, #8]
 800fefa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800fefe:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ff02:	4620      	mov	r0, r4
 800ff04:	f000 feb6 	bl	8010c74 <uxr_stamp_session_header>
 800ff08:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ff0a:	9a03      	ldr	r2, [sp, #12]
 800ff0c:	685d      	ldr	r5, [r3, #4]
 800ff0e:	6818      	ldr	r0, [r3, #0]
 800ff10:	9902      	ldr	r1, [sp, #8]
 800ff12:	47a8      	blx	r5
 800ff14:	f109 0901 	add.w	r9, r9, #1
 800ff18:	7e23      	ldrb	r3, [r4, #24]
 800ff1a:	fa5f f089 	uxtb.w	r0, r9
 800ff1e:	4283      	cmp	r3, r0
 800ff20:	d8d8      	bhi.n	800fed4 <uxr_flash_output_streams+0x2c>
 800ff22:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ff26:	b38b      	cbz	r3, 800ff8c <uxr_flash_output_streams+0xe4>
 800ff28:	f04f 0900 	mov.w	r9, #0
 800ff2c:	f10d 0802 	add.w	r8, sp, #2
 800ff30:	af03      	add	r7, sp, #12
 800ff32:	ae02      	add	r6, sp, #8
 800ff34:	4648      	mov	r0, r9
 800ff36:	2201      	movs	r2, #1
 800ff38:	2102      	movs	r1, #2
 800ff3a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800ff3e:	f001 fbb9 	bl	80116b4 <uxr_stream_id>
 800ff42:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800ff46:	3520      	adds	r5, #32
 800ff48:	9001      	str	r0, [sp, #4]
 800ff4a:	e00d      	b.n	800ff68 <uxr_flash_output_streams+0xc0>
 800ff4c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ff50:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ff54:	9b02      	ldr	r3, [sp, #8]
 800ff56:	f000 fe8d 	bl	8010c74 <uxr_stamp_session_header>
 800ff5a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ff5c:	9a03      	ldr	r2, [sp, #12]
 800ff5e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800ff62:	9902      	ldr	r1, [sp, #8]
 800ff64:	6818      	ldr	r0, [r3, #0]
 800ff66:	47d0      	blx	sl
 800ff68:	4643      	mov	r3, r8
 800ff6a:	463a      	mov	r2, r7
 800ff6c:	4631      	mov	r1, r6
 800ff6e:	4628      	mov	r0, r5
 800ff70:	f006 ff0a 	bl	8016d88 <uxr_prepare_next_reliable_buffer_to_send>
 800ff74:	4603      	mov	r3, r0
 800ff76:	4620      	mov	r0, r4
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d1e7      	bne.n	800ff4c <uxr_flash_output_streams+0xa4>
 800ff7c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ff80:	f109 0901 	add.w	r9, r9, #1
 800ff84:	fa5f f089 	uxtb.w	r0, r9
 800ff88:	4283      	cmp	r3, r0
 800ff8a:	d8d4      	bhi.n	800ff36 <uxr_flash_output_streams+0x8e>
 800ff8c:	b004      	add	sp, #16
 800ff8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff92:	bf00      	nop

0800ff94 <read_submessage_info>:
 800ff94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff98:	460d      	mov	r5, r1
 800ff9a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800ff9e:	4669      	mov	r1, sp
 800ffa0:	4607      	mov	r7, r0
 800ffa2:	4628      	mov	r0, r5
 800ffa4:	f002 fbee 	bl	8012784 <uxr_deserialize_BaseObjectReply>
 800ffa8:	a902      	add	r1, sp, #8
 800ffaa:	4604      	mov	r4, r0
 800ffac:	4628      	mov	r0, r5
 800ffae:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800ffb2:	f7fa f983 	bl	800a2bc <ucdr_deserialize_bool>
 800ffb6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ffba:	4004      	ands	r4, r0
 800ffbc:	b2e4      	uxtb	r4, r4
 800ffbe:	b95b      	cbnz	r3, 800ffd8 <read_submessage_info+0x44>
 800ffc0:	a987      	add	r1, sp, #540	@ 0x21c
 800ffc2:	4628      	mov	r0, r5
 800ffc4:	f7fa f97a 	bl	800a2bc <ucdr_deserialize_bool>
 800ffc8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800ffcc:	4606      	mov	r6, r0
 800ffce:	b94b      	cbnz	r3, 800ffe4 <read_submessage_info+0x50>
 800ffd0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800ffd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffd8:	a903      	add	r1, sp, #12
 800ffda:	4628      	mov	r0, r5
 800ffdc:	f002 fa7a 	bl	80124d4 <uxr_deserialize_ObjectVariant>
 800ffe0:	4004      	ands	r4, r0
 800ffe2:	e7ed      	b.n	800ffc0 <read_submessage_info+0x2c>
 800ffe4:	a988      	add	r1, sp, #544	@ 0x220
 800ffe6:	4628      	mov	r0, r5
 800ffe8:	f7fa f996 	bl	800a318 <ucdr_deserialize_uint8_t>
 800ffec:	4234      	tst	r4, r6
 800ffee:	d0ef      	beq.n	800ffd0 <read_submessage_info+0x3c>
 800fff0:	2800      	cmp	r0, #0
 800fff2:	d0ed      	beq.n	800ffd0 <read_submessage_info+0x3c>
 800fff4:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800fff8:	2b0d      	cmp	r3, #13
 800fffa:	d1e9      	bne.n	800ffd0 <read_submessage_info+0x3c>
 800fffc:	a98a      	add	r1, sp, #552	@ 0x228
 800fffe:	4628      	mov	r0, r5
 8010000:	f7fa ff30 	bl	800ae64 <ucdr_deserialize_int16_t>
 8010004:	b140      	cbz	r0, 8010018 <read_submessage_info+0x84>
 8010006:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801000a:	2b00      	cmp	r3, #0
 801000c:	dd07      	ble.n	801001e <read_submessage_info+0x8a>
 801000e:	f1b8 0f00 	cmp.w	r8, #0
 8010012:	bf14      	ite	ne
 8010014:	2001      	movne	r0, #1
 8010016:	2002      	moveq	r0, #2
 8010018:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 801001c:	e7d8      	b.n	800ffd0 <read_submessage_info+0x3c>
 801001e:	2000      	movs	r0, #0
 8010020:	e7fa      	b.n	8010018 <read_submessage_info+0x84>
 8010022:	bf00      	nop

08010024 <read_submessage_list>:
 8010024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010028:	b097      	sub	sp, #92	@ 0x5c
 801002a:	4ec1      	ldr	r6, [pc, #772]	@ (8010330 <read_submessage_list+0x30c>)
 801002c:	9209      	str	r2, [sp, #36]	@ 0x24
 801002e:	4604      	mov	r4, r0
 8010030:	460d      	mov	r5, r1
 8010032:	f04f 0801 	mov.w	r8, #1
 8010036:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801003a:	aa0c      	add	r2, sp, #48	@ 0x30
 801003c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8010040:	4628      	mov	r0, r5
 8010042:	f001 fc89 	bl	8011958 <uxr_read_submessage_header>
 8010046:	2800      	cmp	r0, #0
 8010048:	f000 813e 	beq.w	80102c8 <read_submessage_list+0x2a4>
 801004c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8010050:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8010054:	3b02      	subs	r3, #2
 8010056:	2b0d      	cmp	r3, #13
 8010058:	d8ed      	bhi.n	8010036 <read_submessage_list+0x12>
 801005a:	a101      	add	r1, pc, #4	@ (adr r1, 8010060 <read_submessage_list+0x3c>)
 801005c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010060:	080102bf 	.word	0x080102bf
 8010064:	08010037 	.word	0x08010037
 8010068:	080102af 	.word	0x080102af
 801006c:	0801024d 	.word	0x0801024d
 8010070:	08010243 	.word	0x08010243
 8010074:	08010037 	.word	0x08010037
 8010078:	08010037 	.word	0x08010037
 801007c:	080101a3 	.word	0x080101a3
 8010080:	08010133 	.word	0x08010133
 8010084:	080100f3 	.word	0x080100f3
 8010088:	08010037 	.word	0x08010037
 801008c:	08010037 	.word	0x08010037
 8010090:	08010037 	.word	0x08010037
 8010094:	08010099 	.word	0x08010099
 8010098:	a910      	add	r1, sp, #64	@ 0x40
 801009a:	4628      	mov	r0, r5
 801009c:	f002 fd96 	bl	8012bcc <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80100a0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 80100a4:	f1b9 0f00 	cmp.w	r9, #0
 80100a8:	f000 8116 	beq.w	80102d8 <read_submessage_list+0x2b4>
 80100ac:	f001 fc9a 	bl	80119e4 <uxr_nanos>
 80100b0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80100b2:	4602      	mov	r2, r0
 80100b4:	460b      	mov	r3, r1
 80100b6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80100b8:	2100      	movs	r1, #0
 80100ba:	468c      	mov	ip, r1
 80100bc:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80100c0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 80100c4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80100c6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80100c8:	468c      	mov	ip, r1
 80100ca:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80100ce:	46e2      	mov	sl, ip
 80100d0:	46bc      	mov	ip, r7
 80100d2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 80100d6:	fbc0 7106 	smlal	r7, r1, r0, r6
 80100da:	e9cd ca02 	strd	ip, sl, [sp, #8]
 80100de:	e9cd 7100 	strd	r7, r1, [sp]
 80100e2:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80100e6:	9106      	str	r1, [sp, #24]
 80100e8:	4620      	mov	r0, r4
 80100ea:	47c8      	blx	r9
 80100ec:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 80100f0:	e7a1      	b.n	8010036 <read_submessage_list+0x12>
 80100f2:	a910      	add	r1, sp, #64	@ 0x40
 80100f4:	4628      	mov	r0, r5
 80100f6:	f002 fd57 	bl	8012ba8 <uxr_deserialize_HEARTBEAT_Payload>
 80100fa:	2100      	movs	r1, #0
 80100fc:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010100:	f001 fb02 	bl	8011708 <uxr_stream_id_from_raw>
 8010104:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8010108:	900f      	str	r0, [sp, #60]	@ 0x3c
 801010a:	4639      	mov	r1, r7
 801010c:	f104 0008 	add.w	r0, r4, #8
 8010110:	f001 fbe8 	bl	80118e4 <uxr_get_input_reliable_stream>
 8010114:	2800      	cmp	r0, #0
 8010116:	d08e      	beq.n	8010036 <read_submessage_list+0x12>
 8010118:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801011c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8010120:	f006 fb82 	bl	8016828 <uxr_process_heartbeat>
 8010124:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8010128:	463a      	mov	r2, r7
 801012a:	4620      	mov	r0, r4
 801012c:	f7ff fdf6 	bl	800fd1c <write_submessage_acknack.isra.0>
 8010130:	e781      	b.n	8010036 <read_submessage_list+0x12>
 8010132:	a910      	add	r1, sp, #64	@ 0x40
 8010134:	4628      	mov	r0, r5
 8010136:	f002 fd0f 	bl	8012b58 <uxr_deserialize_ACKNACK_Payload>
 801013a:	2100      	movs	r1, #0
 801013c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010140:	f001 fae2 	bl	8011708 <uxr_stream_id_from_raw>
 8010144:	900d      	str	r0, [sp, #52]	@ 0x34
 8010146:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801014a:	f104 0008 	add.w	r0, r4, #8
 801014e:	f001 fbb5 	bl	80118bc <uxr_get_output_reliable_stream>
 8010152:	4607      	mov	r7, r0
 8010154:	2800      	cmp	r0, #0
 8010156:	f43f af6e 	beq.w	8010036 <read_submessage_list+0x12>
 801015a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 801015e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8010162:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8010166:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801016a:	b289      	uxth	r1, r1
 801016c:	f006 feb6 	bl	8016edc <uxr_process_acknack>
 8010170:	4638      	mov	r0, r7
 8010172:	f006 fe73 	bl	8016e5c <uxr_begin_output_nack_buffer_it>
 8010176:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801017a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801017e:	e006      	b.n	801018e <read_submessage_list+0x16a>
 8010180:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010182:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010184:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8010188:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801018a:	6818      	ldr	r0, [r3, #0]
 801018c:	47c8      	blx	r9
 801018e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8010192:	aa0f      	add	r2, sp, #60	@ 0x3c
 8010194:	4651      	mov	r1, sl
 8010196:	4638      	mov	r0, r7
 8010198:	f006 fe62 	bl	8016e60 <uxr_next_reliable_nack_buffer_to_send>
 801019c:	2800      	cmp	r0, #0
 801019e:	d1ef      	bne.n	8010180 <read_submessage_list+0x15c>
 80101a0:	e749      	b.n	8010036 <read_submessage_list+0x12>
 80101a2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80101a6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 80101aa:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80101ae:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80101b2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 80101b6:	4651      	mov	r1, sl
 80101b8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80101bc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 80101c0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 80101c4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 80101c8:	4628      	mov	r0, r5
 80101ca:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 80101ce:	f002 fa23 	bl	8012618 <uxr_deserialize_BaseObjectRequest>
 80101d2:	4650      	mov	r0, sl
 80101d4:	a90f      	add	r1, sp, #60	@ 0x3c
 80101d6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80101da:	f000 fdc7 	bl	8010d6c <uxr_parse_base_object_request>
 80101de:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 80101e2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80101e4:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 80101e8:	9110      	str	r1, [sp, #64]	@ 0x40
 80101ea:	3f04      	subs	r7, #4
 80101ec:	f009 090e 	and.w	r9, r9, #14
 80101f0:	b2bf      	uxth	r7, r7
 80101f2:	f1bb 0f00 	cmp.w	fp, #0
 80101f6:	d006      	beq.n	8010206 <read_submessage_list+0x1e2>
 80101f8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80101fc:	9300      	str	r3, [sp, #0]
 80101fe:	4652      	mov	r2, sl
 8010200:	2300      	movs	r3, #0
 8010202:	4620      	mov	r0, r4
 8010204:	47d8      	blx	fp
 8010206:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8010208:	b16a      	cbz	r2, 8010226 <read_submessage_list+0x202>
 801020a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801020c:	2100      	movs	r1, #0
 801020e:	3802      	subs	r0, #2
 8010210:	e002      	b.n	8010218 <read_submessage_list+0x1f4>
 8010212:	3101      	adds	r1, #1
 8010214:	4291      	cmp	r1, r2
 8010216:	d006      	beq.n	8010226 <read_submessage_list+0x202>
 8010218:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801021c:	4553      	cmp	r3, sl
 801021e:	d1f8      	bne.n	8010212 <read_submessage_list+0x1ee>
 8010220:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010222:	2200      	movs	r2, #0
 8010224:	545a      	strb	r2, [r3, r1]
 8010226:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801022a:	9102      	str	r1, [sp, #8]
 801022c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801022e:	9101      	str	r1, [sp, #4]
 8010230:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8010232:	9100      	str	r1, [sp, #0]
 8010234:	464b      	mov	r3, r9
 8010236:	463a      	mov	r2, r7
 8010238:	4629      	mov	r1, r5
 801023a:	4620      	mov	r0, r4
 801023c:	f7ff fc4c 	bl	800fad8 <read_submessage_format>
 8010240:	e6f9      	b.n	8010036 <read_submessage_list+0x12>
 8010242:	4629      	mov	r1, r5
 8010244:	4620      	mov	r0, r4
 8010246:	f7ff fea5 	bl	800ff94 <read_submessage_info>
 801024a:	e6f4      	b.n	8010036 <read_submessage_list+0x12>
 801024c:	2a00      	cmp	r2, #0
 801024e:	d03e      	beq.n	80102ce <read_submessage_list+0x2aa>
 8010250:	a910      	add	r1, sp, #64	@ 0x40
 8010252:	4628      	mov	r0, r5
 8010254:	f002 fbdc 	bl	8012a10 <uxr_deserialize_STATUS_Payload>
 8010258:	a90e      	add	r1, sp, #56	@ 0x38
 801025a:	aa0d      	add	r2, sp, #52	@ 0x34
 801025c:	a810      	add	r0, sp, #64	@ 0x40
 801025e:	f000 fd85 	bl	8010d6c <uxr_parse_base_object_request>
 8010262:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8010266:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010268:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 801026c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8010270:	910f      	str	r1, [sp, #60]	@ 0x3c
 8010272:	f1ba 0f00 	cmp.w	sl, #0
 8010276:	d006      	beq.n	8010286 <read_submessage_list+0x262>
 8010278:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801027c:	9300      	str	r3, [sp, #0]
 801027e:	463a      	mov	r2, r7
 8010280:	464b      	mov	r3, r9
 8010282:	4620      	mov	r0, r4
 8010284:	47d0      	blx	sl
 8010286:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8010288:	2a00      	cmp	r2, #0
 801028a:	f43f aed4 	beq.w	8010036 <read_submessage_list+0x12>
 801028e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8010290:	2100      	movs	r1, #0
 8010292:	3802      	subs	r0, #2
 8010294:	e003      	b.n	801029e <read_submessage_list+0x27a>
 8010296:	3101      	adds	r1, #1
 8010298:	4291      	cmp	r1, r2
 801029a:	f43f aecc 	beq.w	8010036 <read_submessage_list+0x12>
 801029e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80102a2:	42bb      	cmp	r3, r7
 80102a4:	d1f7      	bne.n	8010296 <read_submessage_list+0x272>
 80102a6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80102a8:	f803 9001 	strb.w	r9, [r3, r1]
 80102ac:	e6c3      	b.n	8010036 <read_submessage_list+0x12>
 80102ae:	2a00      	cmp	r2, #0
 80102b0:	f47f aec1 	bne.w	8010036 <read_submessage_list+0x12>
 80102b4:	4629      	mov	r1, r5
 80102b6:	4620      	mov	r0, r4
 80102b8:	f000 fc9e 	bl	8010bf8 <uxr_read_create_session_status>
 80102bc:	e6bb      	b.n	8010036 <read_submessage_list+0x12>
 80102be:	4629      	mov	r1, r5
 80102c0:	4620      	mov	r0, r4
 80102c2:	f7ff fcf5 	bl	800fcb0 <read_submessage_get_info>
 80102c6:	e6b6      	b.n	8010036 <read_submessage_list+0x12>
 80102c8:	b017      	add	sp, #92	@ 0x5c
 80102ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102ce:	4629      	mov	r1, r5
 80102d0:	4620      	mov	r0, r4
 80102d2:	f000 fc9d 	bl	8010c10 <uxr_read_delete_session_status>
 80102d6:	e6ae      	b.n	8010036 <read_submessage_list+0x12>
 80102d8:	f001 fb84 	bl	80119e4 <uxr_nanos>
 80102dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80102de:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80102e0:	464f      	mov	r7, r9
 80102e2:	fbc3 2706 	smlal	r2, r7, r3, r6
 80102e6:	1812      	adds	r2, r2, r0
 80102e8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80102ea:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80102ec:	eb47 0101 	adc.w	r1, r7, r1
 80102f0:	464f      	mov	r7, r9
 80102f2:	fbc3 0706 	smlal	r0, r7, r3, r6
 80102f6:	463b      	mov	r3, r7
 80102f8:	4684      	mov	ip, r0
 80102fa:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80102fe:	fbc7 0906 	smlal	r0, r9, r7, r6
 8010302:	eb1c 0c00 	adds.w	ip, ip, r0
 8010306:	464f      	mov	r7, r9
 8010308:	eb43 0307 	adc.w	r3, r3, r7
 801030c:	ebb2 0c0c 	subs.w	ip, r2, ip
 8010310:	eb61 0303 	sbc.w	r3, r1, r3
 8010314:	0fda      	lsrs	r2, r3, #31
 8010316:	eb12 020c 	adds.w	r2, r2, ip
 801031a:	f143 0300 	adc.w	r3, r3, #0
 801031e:	0852      	lsrs	r2, r2, #1
 8010320:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8010324:	105b      	asrs	r3, r3, #1
 8010326:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 801032a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 801032e:	e6dd      	b.n	80100ec <read_submessage_list+0xc8>
 8010330:	3b9aca00 	.word	0x3b9aca00

08010334 <listen_message_reliably>:
 8010334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010338:	1e0b      	subs	r3, r1, #0
 801033a:	b09d      	sub	sp, #116	@ 0x74
 801033c:	bfb8      	it	lt
 801033e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8010342:	4680      	mov	r8, r0
 8010344:	9305      	str	r3, [sp, #20]
 8010346:	f001 fb33 	bl	80119b0 <uxr_millis>
 801034a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801034e:	4681      	mov	r9, r0
 8010350:	2a00      	cmp	r2, #0
 8010352:	f000 80a1 	beq.w	8010498 <listen_message_reliably+0x164>
 8010356:	2600      	movs	r6, #0
 8010358:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801035c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8010360:	9303      	str	r3, [sp, #12]
 8010362:	4630      	mov	r0, r6
 8010364:	460f      	mov	r7, r1
 8010366:	e00f      	b.n	8010388 <listen_message_reliably+0x54>
 8010368:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801036c:	9903      	ldr	r1, [sp, #12]
 801036e:	455a      	cmp	r2, fp
 8010370:	f106 0601 	add.w	r6, r6, #1
 8010374:	eb73 0101 	sbcs.w	r1, r3, r1
 8010378:	b2f0      	uxtb	r0, r6
 801037a:	da01      	bge.n	8010380 <listen_message_reliably+0x4c>
 801037c:	4693      	mov	fp, r2
 801037e:	9303      	str	r3, [sp, #12]
 8010380:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8010384:	4283      	cmp	r3, r0
 8010386:	d960      	bls.n	801044a <listen_message_reliably+0x116>
 8010388:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801038c:	2102      	movs	r1, #2
 801038e:	2201      	movs	r2, #1
 8010390:	f001 f990 	bl	80116b4 <uxr_stream_id>
 8010394:	00e4      	lsls	r4, r4, #3
 8010396:	f104 0520 	add.w	r5, r4, #32
 801039a:	4445      	add	r5, r8
 801039c:	4601      	mov	r1, r0
 801039e:	463b      	mov	r3, r7
 80103a0:	464a      	mov	r2, r9
 80103a2:	4628      	mov	r0, r5
 80103a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80103a6:	f006 fd2f 	bl	8016e08 <uxr_update_output_stream_heartbeat_timestamp>
 80103aa:	eb08 0304 	add.w	r3, r8, r4
 80103ae:	2800      	cmp	r0, #0
 80103b0:	d0da      	beq.n	8010368 <listen_message_reliably+0x34>
 80103b2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80103b6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 80103ba:	9304      	str	r3, [sp, #16]
 80103bc:	4640      	mov	r0, r8
 80103be:	f000 fcaf 	bl	8010d20 <uxr_session_header_offset>
 80103c2:	3501      	adds	r5, #1
 80103c4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 80103c8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80103cc:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80103d0:	2300      	movs	r3, #0
 80103d2:	2211      	movs	r2, #17
 80103d4:	9000      	str	r0, [sp, #0]
 80103d6:	a90c      	add	r1, sp, #48	@ 0x30
 80103d8:	4650      	mov	r0, sl
 80103da:	f7fb f8b7 	bl	800b54c <ucdr_init_buffer_origin_offset>
 80103de:	2300      	movs	r3, #0
 80103e0:	2205      	movs	r2, #5
 80103e2:	210b      	movs	r1, #11
 80103e4:	4650      	mov	r0, sl
 80103e6:	f001 fa9d 	bl	8011924 <uxr_buffer_submessage_header>
 80103ea:	8968      	ldrh	r0, [r5, #10]
 80103ec:	2101      	movs	r1, #1
 80103ee:	f006 fdcd 	bl	8016f8c <uxr_seq_num_add>
 80103f2:	892b      	ldrh	r3, [r5, #8]
 80103f4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80103f8:	4602      	mov	r2, r0
 80103fa:	9b04      	ldr	r3, [sp, #16]
 80103fc:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010400:	a90a      	add	r1, sp, #40	@ 0x28
 8010402:	4650      	mov	r0, sl
 8010404:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8010408:	f002 fbba 	bl	8012b80 <uxr_serialize_HEARTBEAT_Payload>
 801040c:	2200      	movs	r2, #0
 801040e:	4611      	mov	r1, r2
 8010410:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010412:	4640      	mov	r0, r8
 8010414:	f000 fc2e 	bl	8010c74 <uxr_stamp_session_header>
 8010418:	4650      	mov	r0, sl
 801041a:	f7fb f8d5 	bl	800b5c8 <ucdr_buffer_length>
 801041e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8010422:	4602      	mov	r2, r0
 8010424:	a90c      	add	r1, sp, #48	@ 0x30
 8010426:	e9d3 0500 	ldrd	r0, r5, [r3]
 801042a:	4444      	add	r4, r8
 801042c:	47a8      	blx	r5
 801042e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8010432:	9903      	ldr	r1, [sp, #12]
 8010434:	455a      	cmp	r2, fp
 8010436:	f106 0601 	add.w	r6, r6, #1
 801043a:	eb73 0101 	sbcs.w	r1, r3, r1
 801043e:	b2f0      	uxtb	r0, r6
 8010440:	db9c      	blt.n	801037c <listen_message_reliably+0x48>
 8010442:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8010446:	4283      	cmp	r3, r0
 8010448:	d89e      	bhi.n	8010388 <listen_message_reliably+0x54>
 801044a:	9a03      	ldr	r2, [sp, #12]
 801044c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010450:	429a      	cmp	r2, r3
 8010452:	bf08      	it	eq
 8010454:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8010458:	d01e      	beq.n	8010498 <listen_message_reliably+0x164>
 801045a:	ebab 0309 	sub.w	r3, fp, r9
 801045e:	9905      	ldr	r1, [sp, #20]
 8010460:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8010464:	2b00      	cmp	r3, #0
 8010466:	bf08      	it	eq
 8010468:	2301      	moveq	r3, #1
 801046a:	4299      	cmp	r1, r3
 801046c:	bfa8      	it	ge
 801046e:	4619      	movge	r1, r3
 8010470:	6894      	ldr	r4, [r2, #8]
 8010472:	6810      	ldr	r0, [r2, #0]
 8010474:	4689      	mov	r9, r1
 8010476:	460b      	mov	r3, r1
 8010478:	aa08      	add	r2, sp, #32
 801047a:	a907      	add	r1, sp, #28
 801047c:	47a0      	blx	r4
 801047e:	b968      	cbnz	r0, 801049c <listen_message_reliably+0x168>
 8010480:	9b05      	ldr	r3, [sp, #20]
 8010482:	eba3 0309 	sub.w	r3, r3, r9
 8010486:	2b00      	cmp	r3, #0
 8010488:	9305      	str	r3, [sp, #20]
 801048a:	f73f af5c 	bgt.w	8010346 <listen_message_reliably+0x12>
 801048e:	4604      	mov	r4, r0
 8010490:	4620      	mov	r0, r4
 8010492:	b01d      	add	sp, #116	@ 0x74
 8010494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010498:	9b05      	ldr	r3, [sp, #20]
 801049a:	e7e0      	b.n	801045e <listen_message_reliably+0x12a>
 801049c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80104a0:	4604      	mov	r4, r0
 80104a2:	a80c      	add	r0, sp, #48	@ 0x30
 80104a4:	f7fb f864 	bl	800b570 <ucdr_init_buffer>
 80104a8:	2500      	movs	r5, #0
 80104aa:	f10d 031a 	add.w	r3, sp, #26
 80104ae:	aa06      	add	r2, sp, #24
 80104b0:	a90c      	add	r1, sp, #48	@ 0x30
 80104b2:	4640      	mov	r0, r8
 80104b4:	f88d 5018 	strb.w	r5, [sp, #24]
 80104b8:	f000 fbf0 	bl	8010c9c <uxr_read_session_header>
 80104bc:	b918      	cbnz	r0, 80104c6 <listen_message_reliably+0x192>
 80104be:	4620      	mov	r0, r4
 80104c0:	b01d      	add	sp, #116	@ 0x74
 80104c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104c6:	4629      	mov	r1, r5
 80104c8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80104cc:	f001 f91c 	bl	8011708 <uxr_stream_id_from_raw>
 80104d0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 80104d4:	2d01      	cmp	r5, #1
 80104d6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80104da:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80104de:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80104e2:	d04b      	beq.n	801057c <listen_message_reliably+0x248>
 80104e4:	2d02      	cmp	r5, #2
 80104e6:	d00f      	beq.n	8010508 <listen_message_reliably+0x1d4>
 80104e8:	2d00      	cmp	r5, #0
 80104ea:	d1e8      	bne.n	80104be <listen_message_reliably+0x18a>
 80104ec:	4629      	mov	r1, r5
 80104ee:	4628      	mov	r0, r5
 80104f0:	f001 f90a 	bl	8011708 <uxr_stream_id_from_raw>
 80104f4:	a90c      	add	r1, sp, #48	@ 0x30
 80104f6:	4602      	mov	r2, r0
 80104f8:	4640      	mov	r0, r8
 80104fa:	920a      	str	r2, [sp, #40]	@ 0x28
 80104fc:	f7ff fd92 	bl	8010024 <read_submessage_list>
 8010500:	4620      	mov	r0, r4
 8010502:	b01d      	add	sp, #116	@ 0x74
 8010504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010508:	4631      	mov	r1, r6
 801050a:	f108 0008 	add.w	r0, r8, #8
 801050e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8010512:	f001 f9e7 	bl	80118e4 <uxr_get_input_reliable_stream>
 8010516:	4607      	mov	r7, r0
 8010518:	b338      	cbz	r0, 801056a <listen_message_reliably+0x236>
 801051a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801051c:	9203      	str	r2, [sp, #12]
 801051e:	a80c      	add	r0, sp, #48	@ 0x30
 8010520:	f7fb f856 	bl	800b5d0 <ucdr_buffer_remaining>
 8010524:	4603      	mov	r3, r0
 8010526:	f10d 0019 	add.w	r0, sp, #25
 801052a:	9000      	str	r0, [sp, #0]
 801052c:	9a03      	ldr	r2, [sp, #12]
 801052e:	4651      	mov	r1, sl
 8010530:	4638      	mov	r0, r7
 8010532:	f006 f87f 	bl	8016634 <uxr_receive_reliable_message>
 8010536:	b1c0      	cbz	r0, 801056a <listen_message_reliably+0x236>
 8010538:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801053c:	b393      	cbz	r3, 80105a4 <listen_message_reliably+0x270>
 801053e:	ad14      	add	r5, sp, #80	@ 0x50
 8010540:	f04f 0a02 	mov.w	sl, #2
 8010544:	e00a      	b.n	801055c <listen_message_reliably+0x228>
 8010546:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 801054a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 801054e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8010552:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010554:	4629      	mov	r1, r5
 8010556:	4640      	mov	r0, r8
 8010558:	f7ff fd64 	bl	8010024 <read_submessage_list>
 801055c:	2204      	movs	r2, #4
 801055e:	4629      	mov	r1, r5
 8010560:	4638      	mov	r0, r7
 8010562:	f006 f8e7 	bl	8016734 <uxr_next_input_reliable_buffer_available>
 8010566:	2800      	cmp	r0, #0
 8010568:	d1ed      	bne.n	8010546 <listen_message_reliably+0x212>
 801056a:	4640      	mov	r0, r8
 801056c:	4632      	mov	r2, r6
 801056e:	4649      	mov	r1, r9
 8010570:	f7ff fbd4 	bl	800fd1c <write_submessage_acknack.isra.0>
 8010574:	4620      	mov	r0, r4
 8010576:	b01d      	add	sp, #116	@ 0x74
 8010578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801057c:	4631      	mov	r1, r6
 801057e:	f108 0008 	add.w	r0, r8, #8
 8010582:	f001 f9a5 	bl	80118d0 <uxr_get_input_best_effort_stream>
 8010586:	2800      	cmp	r0, #0
 8010588:	d099      	beq.n	80104be <listen_message_reliably+0x18a>
 801058a:	4651      	mov	r1, sl
 801058c:	f005 ffbe 	bl	801650c <uxr_receive_best_effort_message>
 8010590:	2800      	cmp	r0, #0
 8010592:	d094      	beq.n	80104be <listen_message_reliably+0x18a>
 8010594:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8010598:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801059a:	a90c      	add	r1, sp, #48	@ 0x30
 801059c:	4640      	mov	r0, r8
 801059e:	f7ff fd41 	bl	8010024 <read_submessage_list>
 80105a2:	e78c      	b.n	80104be <listen_message_reliably+0x18a>
 80105a4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80105a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80105aa:	a90c      	add	r1, sp, #48	@ 0x30
 80105ac:	4640      	mov	r0, r8
 80105ae:	f7ff fd39 	bl	8010024 <read_submessage_list>
 80105b2:	e7c4      	b.n	801053e <listen_message_reliably+0x20a>

080105b4 <uxr_run_session_timeout>:
 80105b4:	b570      	push	{r4, r5, r6, lr}
 80105b6:	4604      	mov	r4, r0
 80105b8:	460d      	mov	r5, r1
 80105ba:	f001 f9f9 	bl	80119b0 <uxr_millis>
 80105be:	4606      	mov	r6, r0
 80105c0:	4620      	mov	r0, r4
 80105c2:	f7ff fc71 	bl	800fea8 <uxr_flash_output_streams>
 80105c6:	4629      	mov	r1, r5
 80105c8:	4620      	mov	r0, r4
 80105ca:	f7ff feb3 	bl	8010334 <listen_message_reliably>
 80105ce:	f001 f9ef 	bl	80119b0 <uxr_millis>
 80105d2:	1b83      	subs	r3, r0, r6
 80105d4:	1ae9      	subs	r1, r5, r3
 80105d6:	2900      	cmp	r1, #0
 80105d8:	dcf6      	bgt.n	80105c8 <uxr_run_session_timeout+0x14>
 80105da:	f104 0008 	add.w	r0, r4, #8
 80105de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80105e2:	f001 b989 	b.w	80118f8 <uxr_output_streams_confirmed>
 80105e6:	bf00      	nop

080105e8 <uxr_run_session_until_data>:
 80105e8:	b570      	push	{r4, r5, r6, lr}
 80105ea:	4604      	mov	r4, r0
 80105ec:	460d      	mov	r5, r1
 80105ee:	f001 f9df 	bl	80119b0 <uxr_millis>
 80105f2:	4606      	mov	r6, r0
 80105f4:	4620      	mov	r0, r4
 80105f6:	f7ff fc57 	bl	800fea8 <uxr_flash_output_streams>
 80105fa:	2300      	movs	r3, #0
 80105fc:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8010600:	4629      	mov	r1, r5
 8010602:	e005      	b.n	8010610 <uxr_run_session_until_data+0x28>
 8010604:	f001 f9d4 	bl	80119b0 <uxr_millis>
 8010608:	1b83      	subs	r3, r0, r6
 801060a:	1ae9      	subs	r1, r5, r3
 801060c:	2900      	cmp	r1, #0
 801060e:	dd07      	ble.n	8010620 <uxr_run_session_until_data+0x38>
 8010610:	4620      	mov	r0, r4
 8010612:	f7ff fe8f 	bl	8010334 <listen_message_reliably>
 8010616:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801061a:	2800      	cmp	r0, #0
 801061c:	d0f2      	beq.n	8010604 <uxr_run_session_until_data+0x1c>
 801061e:	bd70      	pop	{r4, r5, r6, pc}
 8010620:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010624:	bd70      	pop	{r4, r5, r6, pc}
 8010626:	bf00      	nop

08010628 <uxr_run_session_until_confirm_delivery>:
 8010628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801062c:	4606      	mov	r6, r0
 801062e:	460d      	mov	r5, r1
 8010630:	f001 f9be 	bl	80119b0 <uxr_millis>
 8010634:	4607      	mov	r7, r0
 8010636:	4630      	mov	r0, r6
 8010638:	f7ff fc36 	bl	800fea8 <uxr_flash_output_streams>
 801063c:	2d00      	cmp	r5, #0
 801063e:	f106 0808 	add.w	r8, r6, #8
 8010642:	bfa8      	it	ge
 8010644:	462c      	movge	r4, r5
 8010646:	da07      	bge.n	8010658 <uxr_run_session_until_confirm_delivery+0x30>
 8010648:	e00e      	b.n	8010668 <uxr_run_session_until_confirm_delivery+0x40>
 801064a:	f7ff fe73 	bl	8010334 <listen_message_reliably>
 801064e:	f001 f9af 	bl	80119b0 <uxr_millis>
 8010652:	1bc3      	subs	r3, r0, r7
 8010654:	1aec      	subs	r4, r5, r3
 8010656:	d407      	bmi.n	8010668 <uxr_run_session_until_confirm_delivery+0x40>
 8010658:	4640      	mov	r0, r8
 801065a:	f001 f94d 	bl	80118f8 <uxr_output_streams_confirmed>
 801065e:	4603      	mov	r3, r0
 8010660:	4621      	mov	r1, r4
 8010662:	4630      	mov	r0, r6
 8010664:	2b00      	cmp	r3, #0
 8010666:	d0f0      	beq.n	801064a <uxr_run_session_until_confirm_delivery+0x22>
 8010668:	4640      	mov	r0, r8
 801066a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801066e:	f001 b943 	b.w	80118f8 <uxr_output_streams_confirmed>
 8010672:	bf00      	nop

08010674 <uxr_run_session_until_all_status>:
 8010674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010678:	9c08      	ldr	r4, [sp, #32]
 801067a:	4606      	mov	r6, r0
 801067c:	460f      	mov	r7, r1
 801067e:	4691      	mov	r9, r2
 8010680:	461d      	mov	r5, r3
 8010682:	f7ff fc11 	bl	800fea8 <uxr_flash_output_streams>
 8010686:	b124      	cbz	r4, 8010692 <uxr_run_session_until_all_status+0x1e>
 8010688:	4622      	mov	r2, r4
 801068a:	21ff      	movs	r1, #255	@ 0xff
 801068c:	4628      	mov	r0, r5
 801068e:	f007 f8bb 	bl	8017808 <memset>
 8010692:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8010696:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8010698:	f001 f98a 	bl	80119b0 <uxr_millis>
 801069c:	3d01      	subs	r5, #1
 801069e:	f1a9 0902 	sub.w	r9, r9, #2
 80106a2:	4680      	mov	r8, r0
 80106a4:	4639      	mov	r1, r7
 80106a6:	4630      	mov	r0, r6
 80106a8:	f7ff fe44 	bl	8010334 <listen_message_reliably>
 80106ac:	f001 f980 	bl	80119b0 <uxr_millis>
 80106b0:	eba0 0008 	sub.w	r0, r0, r8
 80106b4:	1a39      	subs	r1, r7, r0
 80106b6:	b344      	cbz	r4, 801070a <uxr_run_session_until_all_status+0x96>
 80106b8:	4628      	mov	r0, r5
 80106ba:	46ac      	mov	ip, r5
 80106bc:	2301      	movs	r3, #1
 80106be:	e002      	b.n	80106c6 <uxr_run_session_until_all_status+0x52>
 80106c0:	42a3      	cmp	r3, r4
 80106c2:	d20d      	bcs.n	80106e0 <uxr_run_session_until_all_status+0x6c>
 80106c4:	3301      	adds	r3, #1
 80106c6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 80106ca:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80106ce:	d1f7      	bne.n	80106c0 <uxr_run_session_until_all_status+0x4c>
 80106d0:	42a3      	cmp	r3, r4
 80106d2:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 80106d6:	d213      	bcs.n	8010700 <uxr_run_session_until_all_status+0x8c>
 80106d8:	2a00      	cmp	r2, #0
 80106da:	d0f3      	beq.n	80106c4 <uxr_run_session_until_all_status+0x50>
 80106dc:	2900      	cmp	r1, #0
 80106de:	dce2      	bgt.n	80106a6 <uxr_run_session_until_all_status+0x32>
 80106e0:	2300      	movs	r3, #0
 80106e2:	67f3      	str	r3, [r6, #124]	@ 0x7c
 80106e4:	442c      	add	r4, r5
 80106e6:	e001      	b.n	80106ec <uxr_run_session_until_all_status+0x78>
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d812      	bhi.n	8010712 <uxr_run_session_until_all_status+0x9e>
 80106ec:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80106f0:	4284      	cmp	r4, r0
 80106f2:	d1f9      	bne.n	80106e8 <uxr_run_session_until_all_status+0x74>
 80106f4:	2b01      	cmp	r3, #1
 80106f6:	bf8c      	ite	hi
 80106f8:	2000      	movhi	r0, #0
 80106fa:	2001      	movls	r0, #1
 80106fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010700:	2900      	cmp	r1, #0
 8010702:	dded      	ble.n	80106e0 <uxr_run_session_until_all_status+0x6c>
 8010704:	2a00      	cmp	r2, #0
 8010706:	d1ce      	bne.n	80106a6 <uxr_run_session_until_all_status+0x32>
 8010708:	e7ea      	b.n	80106e0 <uxr_run_session_until_all_status+0x6c>
 801070a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 801070c:	2001      	movs	r0, #1
 801070e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010712:	2000      	movs	r0, #0
 8010714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010718 <wait_session_status>:
 8010718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801071c:	4604      	mov	r4, r0
 801071e:	b09d      	sub	sp, #116	@ 0x74
 8010720:	20ff      	movs	r0, #255	@ 0xff
 8010722:	7160      	strb	r0, [r4, #5]
 8010724:	9303      	str	r3, [sp, #12]
 8010726:	2b00      	cmp	r3, #0
 8010728:	f000 80b6 	beq.w	8010898 <wait_session_status+0x180>
 801072c:	468a      	mov	sl, r1
 801072e:	4691      	mov	r9, r2
 8010730:	f04f 0b00 	mov.w	fp, #0
 8010734:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010736:	464a      	mov	r2, r9
 8010738:	e9d3 0500 	ldrd	r0, r5, [r3]
 801073c:	4651      	mov	r1, sl
 801073e:	47a8      	blx	r5
 8010740:	f001 f936 	bl	80119b0 <uxr_millis>
 8010744:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010748:	4605      	mov	r5, r0
 801074a:	e009      	b.n	8010760 <wait_session_status+0x48>
 801074c:	f001 f930 	bl	80119b0 <uxr_millis>
 8010750:	1b40      	subs	r0, r0, r5
 8010752:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010756:	2b00      	cmp	r3, #0
 8010758:	dd40      	ble.n	80107dc <wait_session_status+0xc4>
 801075a:	7960      	ldrb	r0, [r4, #5]
 801075c:	28ff      	cmp	r0, #255	@ 0xff
 801075e:	d145      	bne.n	80107ec <wait_session_status+0xd4>
 8010760:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010762:	a908      	add	r1, sp, #32
 8010764:	6896      	ldr	r6, [r2, #8]
 8010766:	6810      	ldr	r0, [r2, #0]
 8010768:	aa09      	add	r2, sp, #36	@ 0x24
 801076a:	47b0      	blx	r6
 801076c:	2800      	cmp	r0, #0
 801076e:	d0ed      	beq.n	801074c <wait_session_status+0x34>
 8010770:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010774:	a80c      	add	r0, sp, #48	@ 0x30
 8010776:	f7fa fefb 	bl	800b570 <ucdr_init_buffer>
 801077a:	2600      	movs	r6, #0
 801077c:	f10d 031e 	add.w	r3, sp, #30
 8010780:	aa07      	add	r2, sp, #28
 8010782:	a90c      	add	r1, sp, #48	@ 0x30
 8010784:	4620      	mov	r0, r4
 8010786:	f88d 601c 	strb.w	r6, [sp, #28]
 801078a:	f000 fa87 	bl	8010c9c <uxr_read_session_header>
 801078e:	2800      	cmp	r0, #0
 8010790:	d0dc      	beq.n	801074c <wait_session_status+0x34>
 8010792:	4631      	mov	r1, r6
 8010794:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010798:	f000 ffb6 	bl	8011708 <uxr_stream_id_from_raw>
 801079c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80107a0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80107a4:	9302      	str	r3, [sp, #8]
 80107a6:	2f01      	cmp	r7, #1
 80107a8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80107ac:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80107b0:	d05c      	beq.n	801086c <wait_session_status+0x154>
 80107b2:	2f02      	cmp	r7, #2
 80107b4:	d020      	beq.n	80107f8 <wait_session_status+0xe0>
 80107b6:	2f00      	cmp	r7, #0
 80107b8:	d1c8      	bne.n	801074c <wait_session_status+0x34>
 80107ba:	4639      	mov	r1, r7
 80107bc:	4638      	mov	r0, r7
 80107be:	f000 ffa3 	bl	8011708 <uxr_stream_id_from_raw>
 80107c2:	a90c      	add	r1, sp, #48	@ 0x30
 80107c4:	4602      	mov	r2, r0
 80107c6:	900b      	str	r0, [sp, #44]	@ 0x2c
 80107c8:	4620      	mov	r0, r4
 80107ca:	f7ff fc2b 	bl	8010024 <read_submessage_list>
 80107ce:	f001 f8ef 	bl	80119b0 <uxr_millis>
 80107d2:	1b40      	subs	r0, r0, r5
 80107d4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80107d8:	2b00      	cmp	r3, #0
 80107da:	dcbe      	bgt.n	801075a <wait_session_status+0x42>
 80107dc:	9b03      	ldr	r3, [sp, #12]
 80107de:	7960      	ldrb	r0, [r4, #5]
 80107e0:	f10b 0b01 	add.w	fp, fp, #1
 80107e4:	455b      	cmp	r3, fp
 80107e6:	d001      	beq.n	80107ec <wait_session_status+0xd4>
 80107e8:	28ff      	cmp	r0, #255	@ 0xff
 80107ea:	d0a3      	beq.n	8010734 <wait_session_status+0x1c>
 80107ec:	38ff      	subs	r0, #255	@ 0xff
 80107ee:	bf18      	it	ne
 80107f0:	2001      	movne	r0, #1
 80107f2:	b01d      	add	sp, #116	@ 0x74
 80107f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107f8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80107fc:	9304      	str	r3, [sp, #16]
 80107fe:	4631      	mov	r1, r6
 8010800:	f104 0008 	add.w	r0, r4, #8
 8010804:	f001 f86e 	bl	80118e4 <uxr_get_input_reliable_stream>
 8010808:	4680      	mov	r8, r0
 801080a:	b348      	cbz	r0, 8010860 <wait_session_status+0x148>
 801080c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801080e:	9205      	str	r2, [sp, #20]
 8010810:	a80c      	add	r0, sp, #48	@ 0x30
 8010812:	f7fa fedd 	bl	800b5d0 <ucdr_buffer_remaining>
 8010816:	4603      	mov	r3, r0
 8010818:	f10d 001d 	add.w	r0, sp, #29
 801081c:	9000      	str	r0, [sp, #0]
 801081e:	9a05      	ldr	r2, [sp, #20]
 8010820:	9902      	ldr	r1, [sp, #8]
 8010822:	4640      	mov	r0, r8
 8010824:	f005 ff06 	bl	8016634 <uxr_receive_reliable_message>
 8010828:	b1d0      	cbz	r0, 8010860 <wait_session_status+0x148>
 801082a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d03a      	beq.n	80108a8 <wait_session_status+0x190>
 8010832:	9f04      	ldr	r7, [sp, #16]
 8010834:	e00a      	b.n	801084c <wait_session_status+0x134>
 8010836:	f04f 0302 	mov.w	r3, #2
 801083a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801083e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8010842:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8010846:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010848:	f7ff fbec 	bl	8010024 <read_submessage_list>
 801084c:	a914      	add	r1, sp, #80	@ 0x50
 801084e:	2204      	movs	r2, #4
 8010850:	4640      	mov	r0, r8
 8010852:	f005 ff6f 	bl	8016734 <uxr_next_input_reliable_buffer_available>
 8010856:	4603      	mov	r3, r0
 8010858:	a914      	add	r1, sp, #80	@ 0x50
 801085a:	4620      	mov	r0, r4
 801085c:	2b00      	cmp	r3, #0
 801085e:	d1ea      	bne.n	8010836 <wait_session_status+0x11e>
 8010860:	9904      	ldr	r1, [sp, #16]
 8010862:	4632      	mov	r2, r6
 8010864:	4620      	mov	r0, r4
 8010866:	f7ff fa59 	bl	800fd1c <write_submessage_acknack.isra.0>
 801086a:	e76f      	b.n	801074c <wait_session_status+0x34>
 801086c:	4631      	mov	r1, r6
 801086e:	f104 0008 	add.w	r0, r4, #8
 8010872:	f001 f82d 	bl	80118d0 <uxr_get_input_best_effort_stream>
 8010876:	2800      	cmp	r0, #0
 8010878:	f43f af68 	beq.w	801074c <wait_session_status+0x34>
 801087c:	9902      	ldr	r1, [sp, #8]
 801087e:	f005 fe45 	bl	801650c <uxr_receive_best_effort_message>
 8010882:	2800      	cmp	r0, #0
 8010884:	f43f af62 	beq.w	801074c <wait_session_status+0x34>
 8010888:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801088c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801088e:	a90c      	add	r1, sp, #48	@ 0x30
 8010890:	4620      	mov	r0, r4
 8010892:	f7ff fbc7 	bl	8010024 <read_submessage_list>
 8010896:	e759      	b.n	801074c <wait_session_status+0x34>
 8010898:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801089a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801089e:	47a0      	blx	r4
 80108a0:	2001      	movs	r0, #1
 80108a2:	b01d      	add	sp, #116	@ 0x74
 80108a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108a8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80108ac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80108ae:	a90c      	add	r1, sp, #48	@ 0x30
 80108b0:	4620      	mov	r0, r4
 80108b2:	f7ff fbb7 	bl	8010024 <read_submessage_list>
 80108b6:	e7bc      	b.n	8010832 <wait_session_status+0x11a>

080108b8 <uxr_delete_session_retries>:
 80108b8:	b530      	push	{r4, r5, lr}
 80108ba:	b08f      	sub	sp, #60	@ 0x3c
 80108bc:	4604      	mov	r4, r0
 80108be:	460d      	mov	r5, r1
 80108c0:	f000 fa2e 	bl	8010d20 <uxr_session_header_offset>
 80108c4:	2300      	movs	r3, #0
 80108c6:	2210      	movs	r2, #16
 80108c8:	9000      	str	r0, [sp, #0]
 80108ca:	a902      	add	r1, sp, #8
 80108cc:	a806      	add	r0, sp, #24
 80108ce:	f7fa fe3d 	bl	800b54c <ucdr_init_buffer_origin_offset>
 80108d2:	a906      	add	r1, sp, #24
 80108d4:	4620      	mov	r0, r4
 80108d6:	f000 f973 	bl	8010bc0 <uxr_buffer_delete_session>
 80108da:	2200      	movs	r2, #0
 80108dc:	4611      	mov	r1, r2
 80108de:	9b06      	ldr	r3, [sp, #24]
 80108e0:	4620      	mov	r0, r4
 80108e2:	f000 f9c7 	bl	8010c74 <uxr_stamp_session_header>
 80108e6:	a806      	add	r0, sp, #24
 80108e8:	f7fa fe6e 	bl	800b5c8 <ucdr_buffer_length>
 80108ec:	462b      	mov	r3, r5
 80108ee:	4602      	mov	r2, r0
 80108f0:	a902      	add	r1, sp, #8
 80108f2:	4620      	mov	r0, r4
 80108f4:	f7ff ff10 	bl	8010718 <wait_session_status>
 80108f8:	b118      	cbz	r0, 8010902 <uxr_delete_session_retries+0x4a>
 80108fa:	7960      	ldrb	r0, [r4, #5]
 80108fc:	fab0 f080 	clz	r0, r0
 8010900:	0940      	lsrs	r0, r0, #5
 8010902:	b00f      	add	sp, #60	@ 0x3c
 8010904:	bd30      	pop	{r4, r5, pc}
 8010906:	bf00      	nop

08010908 <uxr_create_session>:
 8010908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801090c:	f100 0b08 	add.w	fp, r0, #8
 8010910:	b0ab      	sub	sp, #172	@ 0xac
 8010912:	4604      	mov	r4, r0
 8010914:	4658      	mov	r0, fp
 8010916:	f000 ff2b 	bl	8011770 <uxr_reset_stream_storage>
 801091a:	4620      	mov	r0, r4
 801091c:	f000 fa00 	bl	8010d20 <uxr_session_header_offset>
 8010920:	2300      	movs	r3, #0
 8010922:	9000      	str	r0, [sp, #0]
 8010924:	221c      	movs	r2, #28
 8010926:	a90b      	add	r1, sp, #44	@ 0x2c
 8010928:	a812      	add	r0, sp, #72	@ 0x48
 801092a:	f7fa fe0f 	bl	800b54c <ucdr_init_buffer_origin_offset>
 801092e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010930:	8a1a      	ldrh	r2, [r3, #16]
 8010932:	3a04      	subs	r2, #4
 8010934:	b292      	uxth	r2, r2
 8010936:	a912      	add	r1, sp, #72	@ 0x48
 8010938:	4620      	mov	r0, r4
 801093a:	f000 f917 	bl	8010b6c <uxr_buffer_create_session>
 801093e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010940:	4620      	mov	r0, r4
 8010942:	f000 f983 	bl	8010c4c <uxr_stamp_create_session_header>
 8010946:	a812      	add	r0, sp, #72	@ 0x48
 8010948:	f7fa fe3e 	bl	800b5c8 <ucdr_buffer_length>
 801094c:	23ff      	movs	r3, #255	@ 0xff
 801094e:	7163      	strb	r3, [r4, #5]
 8010950:	230a      	movs	r3, #10
 8010952:	46da      	mov	sl, fp
 8010954:	9303      	str	r3, [sp, #12]
 8010956:	4683      	mov	fp, r0
 8010958:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801095a:	465a      	mov	r2, fp
 801095c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010960:	a90b      	add	r1, sp, #44	@ 0x2c
 8010962:	47a8      	blx	r5
 8010964:	f001 f824 	bl	80119b0 <uxr_millis>
 8010968:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801096c:	4605      	mov	r5, r0
 801096e:	e009      	b.n	8010984 <uxr_create_session+0x7c>
 8010970:	f001 f81e 	bl	80119b0 <uxr_millis>
 8010974:	1b40      	subs	r0, r0, r5
 8010976:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801097a:	2b00      	cmp	r3, #0
 801097c:	7962      	ldrb	r2, [r4, #5]
 801097e:	dd38      	ble.n	80109f2 <uxr_create_session+0xea>
 8010980:	2aff      	cmp	r2, #255	@ 0xff
 8010982:	d13c      	bne.n	80109fe <uxr_create_session+0xf6>
 8010984:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010986:	a907      	add	r1, sp, #28
 8010988:	6896      	ldr	r6, [r2, #8]
 801098a:	6810      	ldr	r0, [r2, #0]
 801098c:	aa08      	add	r2, sp, #32
 801098e:	47b0      	blx	r6
 8010990:	2800      	cmp	r0, #0
 8010992:	d0ed      	beq.n	8010970 <uxr_create_session+0x68>
 8010994:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8010998:	a81a      	add	r0, sp, #104	@ 0x68
 801099a:	f7fa fde9 	bl	800b570 <ucdr_init_buffer>
 801099e:	2600      	movs	r6, #0
 80109a0:	f10d 031a 	add.w	r3, sp, #26
 80109a4:	aa06      	add	r2, sp, #24
 80109a6:	a91a      	add	r1, sp, #104	@ 0x68
 80109a8:	4620      	mov	r0, r4
 80109aa:	f88d 6018 	strb.w	r6, [sp, #24]
 80109ae:	f000 f975 	bl	8010c9c <uxr_read_session_header>
 80109b2:	2800      	cmp	r0, #0
 80109b4:	d0dc      	beq.n	8010970 <uxr_create_session+0x68>
 80109b6:	4631      	mov	r1, r6
 80109b8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80109bc:	f000 fea4 	bl	8011708 <uxr_stream_id_from_raw>
 80109c0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80109c4:	2e01      	cmp	r6, #1
 80109c6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80109ca:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80109ce:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80109d2:	d053      	beq.n	8010a7c <uxr_create_session+0x174>
 80109d4:	2e02      	cmp	r6, #2
 80109d6:	d018      	beq.n	8010a0a <uxr_create_session+0x102>
 80109d8:	2e00      	cmp	r6, #0
 80109da:	d1c9      	bne.n	8010970 <uxr_create_session+0x68>
 80109dc:	4631      	mov	r1, r6
 80109de:	4630      	mov	r0, r6
 80109e0:	f000 fe92 	bl	8011708 <uxr_stream_id_from_raw>
 80109e4:	a91a      	add	r1, sp, #104	@ 0x68
 80109e6:	4602      	mov	r2, r0
 80109e8:	900a      	str	r0, [sp, #40]	@ 0x28
 80109ea:	4620      	mov	r0, r4
 80109ec:	f7ff fb1a 	bl	8010024 <read_submessage_list>
 80109f0:	e7be      	b.n	8010970 <uxr_create_session+0x68>
 80109f2:	9b03      	ldr	r3, [sp, #12]
 80109f4:	3b01      	subs	r3, #1
 80109f6:	9303      	str	r3, [sp, #12]
 80109f8:	d001      	beq.n	80109fe <uxr_create_session+0xf6>
 80109fa:	2aff      	cmp	r2, #255	@ 0xff
 80109fc:	d0ac      	beq.n	8010958 <uxr_create_session+0x50>
 80109fe:	2a00      	cmp	r2, #0
 8010a00:	d051      	beq.n	8010aa6 <uxr_create_session+0x19e>
 8010a02:	2000      	movs	r0, #0
 8010a04:	b02b      	add	sp, #172	@ 0xac
 8010a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a0a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010a0e:	9304      	str	r3, [sp, #16]
 8010a10:	4639      	mov	r1, r7
 8010a12:	4650      	mov	r0, sl
 8010a14:	f000 ff66 	bl	80118e4 <uxr_get_input_reliable_stream>
 8010a18:	4680      	mov	r8, r0
 8010a1a:	b348      	cbz	r0, 8010a70 <uxr_create_session+0x168>
 8010a1c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010a1e:	9205      	str	r2, [sp, #20]
 8010a20:	a81a      	add	r0, sp, #104	@ 0x68
 8010a22:	f7fa fdd5 	bl	800b5d0 <ucdr_buffer_remaining>
 8010a26:	4603      	mov	r3, r0
 8010a28:	f10d 0019 	add.w	r0, sp, #25
 8010a2c:	9000      	str	r0, [sp, #0]
 8010a2e:	9a05      	ldr	r2, [sp, #20]
 8010a30:	4649      	mov	r1, r9
 8010a32:	4640      	mov	r0, r8
 8010a34:	f005 fdfe 	bl	8016634 <uxr_receive_reliable_message>
 8010a38:	b1d0      	cbz	r0, 8010a70 <uxr_create_session+0x168>
 8010a3a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d038      	beq.n	8010ab4 <uxr_create_session+0x1ac>
 8010a42:	9e04      	ldr	r6, [sp, #16]
 8010a44:	e00a      	b.n	8010a5c <uxr_create_session+0x154>
 8010a46:	f04f 0302 	mov.w	r3, #2
 8010a4a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8010a4e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8010a52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010a56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010a58:	f7ff fae4 	bl	8010024 <read_submessage_list>
 8010a5c:	a922      	add	r1, sp, #136	@ 0x88
 8010a5e:	2204      	movs	r2, #4
 8010a60:	4640      	mov	r0, r8
 8010a62:	f005 fe67 	bl	8016734 <uxr_next_input_reliable_buffer_available>
 8010a66:	4603      	mov	r3, r0
 8010a68:	a922      	add	r1, sp, #136	@ 0x88
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d1ea      	bne.n	8010a46 <uxr_create_session+0x13e>
 8010a70:	9904      	ldr	r1, [sp, #16]
 8010a72:	463a      	mov	r2, r7
 8010a74:	4620      	mov	r0, r4
 8010a76:	f7ff f951 	bl	800fd1c <write_submessage_acknack.isra.0>
 8010a7a:	e779      	b.n	8010970 <uxr_create_session+0x68>
 8010a7c:	4639      	mov	r1, r7
 8010a7e:	4650      	mov	r0, sl
 8010a80:	f000 ff26 	bl	80118d0 <uxr_get_input_best_effort_stream>
 8010a84:	2800      	cmp	r0, #0
 8010a86:	f43f af73 	beq.w	8010970 <uxr_create_session+0x68>
 8010a8a:	4649      	mov	r1, r9
 8010a8c:	f005 fd3e 	bl	801650c <uxr_receive_best_effort_message>
 8010a90:	2800      	cmp	r0, #0
 8010a92:	f43f af6d 	beq.w	8010970 <uxr_create_session+0x68>
 8010a96:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8010a9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010a9c:	a91a      	add	r1, sp, #104	@ 0x68
 8010a9e:	4620      	mov	r0, r4
 8010aa0:	f7ff fac0 	bl	8010024 <read_submessage_list>
 8010aa4:	e764      	b.n	8010970 <uxr_create_session+0x68>
 8010aa6:	4650      	mov	r0, sl
 8010aa8:	f000 fe62 	bl	8011770 <uxr_reset_stream_storage>
 8010aac:	2001      	movs	r0, #1
 8010aae:	b02b      	add	sp, #172	@ 0xac
 8010ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ab4:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8010ab8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010aba:	a91a      	add	r1, sp, #104	@ 0x68
 8010abc:	4620      	mov	r0, r4
 8010abe:	f7ff fab1 	bl	8010024 <read_submessage_list>
 8010ac2:	e7be      	b.n	8010a42 <uxr_create_session+0x13a>

08010ac4 <uxr_prepare_stream_to_write_submessage>:
 8010ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ac8:	b082      	sub	sp, #8
 8010aca:	4682      	mov	sl, r0
 8010acc:	4610      	mov	r0, r2
 8010ace:	4615      	mov	r5, r2
 8010ad0:	461e      	mov	r6, r3
 8010ad2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8010ad6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8010ada:	9101      	str	r1, [sp, #4]
 8010adc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8010ae0:	f000 ff60 	bl	80119a4 <uxr_submessage_padding>
 8010ae4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010ae8:	f105 0904 	add.w	r9, r5, #4
 8010aec:	2b01      	cmp	r3, #1
 8010aee:	4481      	add	r9, r0
 8010af0:	d01d      	beq.n	8010b2e <uxr_prepare_stream_to_write_submessage+0x6a>
 8010af2:	2b02      	cmp	r3, #2
 8010af4:	d116      	bne.n	8010b24 <uxr_prepare_stream_to_write_submessage+0x60>
 8010af6:	4621      	mov	r1, r4
 8010af8:	f10a 0008 	add.w	r0, sl, #8
 8010afc:	f000 fede 	bl	80118bc <uxr_get_output_reliable_stream>
 8010b00:	4604      	mov	r4, r0
 8010b02:	b158      	cbz	r0, 8010b1c <uxr_prepare_stream_to_write_submessage+0x58>
 8010b04:	4649      	mov	r1, r9
 8010b06:	4632      	mov	r2, r6
 8010b08:	f005 ffd0 	bl	8016aac <uxr_prepare_reliable_buffer_to_write>
 8010b0c:	4604      	mov	r4, r0
 8010b0e:	b12c      	cbz	r4, 8010b1c <uxr_prepare_stream_to_write_submessage+0x58>
 8010b10:	4643      	mov	r3, r8
 8010b12:	b2aa      	uxth	r2, r5
 8010b14:	4639      	mov	r1, r7
 8010b16:	4630      	mov	r0, r6
 8010b18:	f000 ff04 	bl	8011924 <uxr_buffer_submessage_header>
 8010b1c:	4620      	mov	r0, r4
 8010b1e:	b002      	add	sp, #8
 8010b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b24:	2400      	movs	r4, #0
 8010b26:	4620      	mov	r0, r4
 8010b28:	b002      	add	sp, #8
 8010b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b2e:	4621      	mov	r1, r4
 8010b30:	f10a 0008 	add.w	r0, sl, #8
 8010b34:	f000 feba 	bl	80118ac <uxr_get_output_best_effort_stream>
 8010b38:	4604      	mov	r4, r0
 8010b3a:	2800      	cmp	r0, #0
 8010b3c:	d0ee      	beq.n	8010b1c <uxr_prepare_stream_to_write_submessage+0x58>
 8010b3e:	4649      	mov	r1, r9
 8010b40:	4632      	mov	r2, r6
 8010b42:	f005 fee3 	bl	801690c <uxr_prepare_best_effort_buffer_to_write>
 8010b46:	4604      	mov	r4, r0
 8010b48:	e7e1      	b.n	8010b0e <uxr_prepare_stream_to_write_submessage+0x4a>
 8010b4a:	bf00      	nop

08010b4c <uxr_init_session_info>:
 8010b4c:	0e13      	lsrs	r3, r2, #24
 8010b4e:	7043      	strb	r3, [r0, #1]
 8010b50:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8010b54:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010b58:	7001      	strb	r1, [r0, #0]
 8010b5a:	70c3      	strb	r3, [r0, #3]
 8010b5c:	2109      	movs	r1, #9
 8010b5e:	23ff      	movs	r3, #255	@ 0xff
 8010b60:	f880 c002 	strb.w	ip, [r0, #2]
 8010b64:	7102      	strb	r2, [r0, #4]
 8010b66:	80c1      	strh	r1, [r0, #6]
 8010b68:	7143      	strb	r3, [r0, #5]
 8010b6a:	4770      	bx	lr

08010b6c <uxr_buffer_create_session>:
 8010b6c:	b530      	push	{r4, r5, lr}
 8010b6e:	b089      	sub	sp, #36	@ 0x24
 8010b70:	2300      	movs	r3, #0
 8010b72:	4d12      	ldr	r5, [pc, #72]	@ (8010bbc <uxr_buffer_create_session+0x50>)
 8010b74:	9307      	str	r3, [sp, #28]
 8010b76:	f8ad 201c 	strh.w	r2, [sp, #28]
 8010b7a:	2201      	movs	r2, #1
 8010b7c:	9301      	str	r3, [sp, #4]
 8010b7e:	80c2      	strh	r2, [r0, #6]
 8010b80:	f88d 2004 	strb.w	r2, [sp, #4]
 8010b84:	682a      	ldr	r2, [r5, #0]
 8010b86:	9200      	str	r2, [sp, #0]
 8010b88:	88aa      	ldrh	r2, [r5, #4]
 8010b8a:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010b8e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8010b92:	9202      	str	r2, [sp, #8]
 8010b94:	460c      	mov	r4, r1
 8010b96:	7802      	ldrb	r2, [r0, #0]
 8010b98:	9303      	str	r3, [sp, #12]
 8010b9a:	4619      	mov	r1, r3
 8010b9c:	f88d 200c 	strb.w	r2, [sp, #12]
 8010ba0:	4620      	mov	r0, r4
 8010ba2:	2210      	movs	r2, #16
 8010ba4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8010ba8:	9306      	str	r3, [sp, #24]
 8010baa:	f000 febb 	bl	8011924 <uxr_buffer_submessage_header>
 8010bae:	4669      	mov	r1, sp
 8010bb0:	4620      	mov	r0, r4
 8010bb2:	f001 fe47 	bl	8012844 <uxr_serialize_CREATE_CLIENT_Payload>
 8010bb6:	b009      	add	sp, #36	@ 0x24
 8010bb8:	bd30      	pop	{r4, r5, pc}
 8010bba:	bf00      	nop
 8010bbc:	080187d4 	.word	0x080187d4

08010bc0 <uxr_buffer_delete_session>:
 8010bc0:	b510      	push	{r4, lr}
 8010bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8010bf4 <uxr_buffer_delete_session+0x34>)
 8010bc4:	b082      	sub	sp, #8
 8010bc6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8010bca:	f8ad c006 	strh.w	ip, [sp, #6]
 8010bce:	460c      	mov	r4, r1
 8010bd0:	2202      	movs	r2, #2
 8010bd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010bd6:	80c2      	strh	r2, [r0, #6]
 8010bd8:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010bdc:	2204      	movs	r2, #4
 8010bde:	2300      	movs	r3, #0
 8010be0:	2103      	movs	r1, #3
 8010be2:	4620      	mov	r0, r4
 8010be4:	f000 fe9e 	bl	8011924 <uxr_buffer_submessage_header>
 8010be8:	a901      	add	r1, sp, #4
 8010bea:	4620      	mov	r0, r4
 8010bec:	f001 fed0 	bl	8012990 <uxr_serialize_DELETE_Payload>
 8010bf0:	b002      	add	sp, #8
 8010bf2:	bd10      	pop	{r4, pc}
 8010bf4:	080187d4 	.word	0x080187d4

08010bf8 <uxr_read_create_session_status>:
 8010bf8:	b510      	push	{r4, lr}
 8010bfa:	b088      	sub	sp, #32
 8010bfc:	4604      	mov	r4, r0
 8010bfe:	4608      	mov	r0, r1
 8010c00:	a901      	add	r1, sp, #4
 8010c02:	f001 fed5 	bl	80129b0 <uxr_deserialize_STATUS_AGENT_Payload>
 8010c06:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010c0a:	7163      	strb	r3, [r4, #5]
 8010c0c:	b008      	add	sp, #32
 8010c0e:	bd10      	pop	{r4, pc}

08010c10 <uxr_read_delete_session_status>:
 8010c10:	b510      	push	{r4, lr}
 8010c12:	4604      	mov	r4, r0
 8010c14:	b084      	sub	sp, #16
 8010c16:	4608      	mov	r0, r1
 8010c18:	a902      	add	r1, sp, #8
 8010c1a:	f001 fef9 	bl	8012a10 <uxr_deserialize_STATUS_Payload>
 8010c1e:	88e3      	ldrh	r3, [r4, #6]
 8010c20:	2b02      	cmp	r3, #2
 8010c22:	d001      	beq.n	8010c28 <uxr_read_delete_session_status+0x18>
 8010c24:	b004      	add	sp, #16
 8010c26:	bd10      	pop	{r4, pc}
 8010c28:	f10d 000a 	add.w	r0, sp, #10
 8010c2c:	f7fe fecc 	bl	800f9c8 <uxr_object_id_from_raw>
 8010c30:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8010c34:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8010c38:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010c3c:	b29b      	uxth	r3, r3
 8010c3e:	2b02      	cmp	r3, #2
 8010c40:	bf04      	itt	eq
 8010c42:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8010c46:	7163      	strbeq	r3, [r4, #5]
 8010c48:	b004      	add	sp, #16
 8010c4a:	bd10      	pop	{r4, pc}

08010c4c <uxr_stamp_create_session_header>:
 8010c4c:	b510      	push	{r4, lr}
 8010c4e:	2208      	movs	r2, #8
 8010c50:	b08a      	sub	sp, #40	@ 0x28
 8010c52:	4604      	mov	r4, r0
 8010c54:	eb0d 0002 	add.w	r0, sp, r2
 8010c58:	f7fa fc8a 	bl	800b570 <ucdr_init_buffer>
 8010c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c60:	9400      	str	r4, [sp, #0]
 8010c62:	2300      	movs	r3, #0
 8010c64:	461a      	mov	r2, r3
 8010c66:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8010c6a:	a802      	add	r0, sp, #8
 8010c6c:	f001 f854 	bl	8011d18 <uxr_serialize_message_header>
 8010c70:	b00a      	add	sp, #40	@ 0x28
 8010c72:	bd10      	pop	{r4, pc}

08010c74 <uxr_stamp_session_header>:
 8010c74:	b530      	push	{r4, r5, lr}
 8010c76:	b08d      	sub	sp, #52	@ 0x34
 8010c78:	4604      	mov	r4, r0
 8010c7a:	460d      	mov	r5, r1
 8010c7c:	9203      	str	r2, [sp, #12]
 8010c7e:	4619      	mov	r1, r3
 8010c80:	a804      	add	r0, sp, #16
 8010c82:	2208      	movs	r2, #8
 8010c84:	f7fa fc74 	bl	800b570 <ucdr_init_buffer>
 8010c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c8c:	9b03      	ldr	r3, [sp, #12]
 8010c8e:	9400      	str	r4, [sp, #0]
 8010c90:	462a      	mov	r2, r5
 8010c92:	a804      	add	r0, sp, #16
 8010c94:	f001 f840 	bl	8011d18 <uxr_serialize_message_header>
 8010c98:	b00d      	add	sp, #52	@ 0x34
 8010c9a:	bd30      	pop	{r4, r5, pc}

08010c9c <uxr_read_session_header>:
 8010c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ca0:	4607      	mov	r7, r0
 8010ca2:	b084      	sub	sp, #16
 8010ca4:	4608      	mov	r0, r1
 8010ca6:	460c      	mov	r4, r1
 8010ca8:	4615      	mov	r5, r2
 8010caa:	461e      	mov	r6, r3
 8010cac:	f7fa fc90 	bl	800b5d0 <ucdr_buffer_remaining>
 8010cb0:	2808      	cmp	r0, #8
 8010cb2:	d803      	bhi.n	8010cbc <uxr_read_session_header+0x20>
 8010cb4:	2000      	movs	r0, #0
 8010cb6:	b004      	add	sp, #16
 8010cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cbc:	f10d 080c 	add.w	r8, sp, #12
 8010cc0:	4633      	mov	r3, r6
 8010cc2:	462a      	mov	r2, r5
 8010cc4:	f8cd 8000 	str.w	r8, [sp]
 8010cc8:	4620      	mov	r0, r4
 8010cca:	f10d 010b 	add.w	r1, sp, #11
 8010cce:	f001 f841 	bl	8011d54 <uxr_deserialize_message_header>
 8010cd2:	783a      	ldrb	r2, [r7, #0]
 8010cd4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8010cd8:	4293      	cmp	r3, r2
 8010cda:	d1eb      	bne.n	8010cb4 <uxr_read_session_header+0x18>
 8010cdc:	061b      	lsls	r3, r3, #24
 8010cde:	d41c      	bmi.n	8010d1a <uxr_read_session_header+0x7e>
 8010ce0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8010ce4:	787b      	ldrb	r3, [r7, #1]
 8010ce6:	429a      	cmp	r2, r3
 8010ce8:	d003      	beq.n	8010cf2 <uxr_read_session_header+0x56>
 8010cea:	2001      	movs	r0, #1
 8010cec:	f080 0001 	eor.w	r0, r0, #1
 8010cf0:	e7e1      	b.n	8010cb6 <uxr_read_session_header+0x1a>
 8010cf2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8010cf6:	78bb      	ldrb	r3, [r7, #2]
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	f107 0102 	add.w	r1, r7, #2
 8010cfe:	d1f4      	bne.n	8010cea <uxr_read_session_header+0x4e>
 8010d00:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8010d04:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	d1ee      	bne.n	8010cea <uxr_read_session_header+0x4e>
 8010d0c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8010d10:	784b      	ldrb	r3, [r1, #1]
 8010d12:	429a      	cmp	r2, r3
 8010d14:	d1e9      	bne.n	8010cea <uxr_read_session_header+0x4e>
 8010d16:	2000      	movs	r0, #0
 8010d18:	e7e8      	b.n	8010cec <uxr_read_session_header+0x50>
 8010d1a:	2001      	movs	r0, #1
 8010d1c:	e7cb      	b.n	8010cb6 <uxr_read_session_header+0x1a>
 8010d1e:	bf00      	nop

08010d20 <uxr_session_header_offset>:
 8010d20:	f990 3000 	ldrsb.w	r3, [r0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	bfac      	ite	ge
 8010d28:	2008      	movge	r0, #8
 8010d2a:	2004      	movlt	r0, #4
 8010d2c:	4770      	bx	lr
 8010d2e:	bf00      	nop

08010d30 <uxr_init_base_object_request>:
 8010d30:	b510      	push	{r4, lr}
 8010d32:	88c3      	ldrh	r3, [r0, #6]
 8010d34:	b082      	sub	sp, #8
 8010d36:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8010d3a:	9101      	str	r1, [sp, #4]
 8010d3c:	f1a3 010a 	sub.w	r1, r3, #10
 8010d40:	b289      	uxth	r1, r1
 8010d42:	42a1      	cmp	r1, r4
 8010d44:	d80e      	bhi.n	8010d64 <uxr_init_base_object_request+0x34>
 8010d46:	3301      	adds	r3, #1
 8010d48:	b29c      	uxth	r4, r3
 8010d4a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010d4e:	b2db      	uxtb	r3, r3
 8010d50:	80c4      	strh	r4, [r0, #6]
 8010d52:	9801      	ldr	r0, [sp, #4]
 8010d54:	7011      	strb	r1, [r2, #0]
 8010d56:	7053      	strb	r3, [r2, #1]
 8010d58:	1c91      	adds	r1, r2, #2
 8010d5a:	f7fe fe49 	bl	800f9f0 <uxr_object_id_to_raw>
 8010d5e:	4620      	mov	r0, r4
 8010d60:	b002      	add	sp, #8
 8010d62:	bd10      	pop	{r4, pc}
 8010d64:	230a      	movs	r3, #10
 8010d66:	2100      	movs	r1, #0
 8010d68:	461c      	mov	r4, r3
 8010d6a:	e7f1      	b.n	8010d50 <uxr_init_base_object_request+0x20>

08010d6c <uxr_parse_base_object_request>:
 8010d6c:	b570      	push	{r4, r5, r6, lr}
 8010d6e:	4604      	mov	r4, r0
 8010d70:	3002      	adds	r0, #2
 8010d72:	460d      	mov	r5, r1
 8010d74:	4616      	mov	r6, r2
 8010d76:	f7fe fe27 	bl	800f9c8 <uxr_object_id_from_raw>
 8010d7a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8010d7e:	8028      	strh	r0, [r5, #0]
 8010d80:	806b      	strh	r3, [r5, #2]
 8010d82:	7822      	ldrb	r2, [r4, #0]
 8010d84:	7863      	ldrb	r3, [r4, #1]
 8010d86:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010d8a:	8033      	strh	r3, [r6, #0]
 8010d8c:	bd70      	pop	{r4, r5, r6, pc}
 8010d8e:	bf00      	nop

08010d90 <uxr_init_framing_io>:
 8010d90:	2300      	movs	r3, #0
 8010d92:	7041      	strb	r1, [r0, #1]
 8010d94:	7003      	strb	r3, [r0, #0]
 8010d96:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8010d98:	4770      	bx	lr
 8010d9a:	bf00      	nop

08010d9c <uxr_write_framed_msg>:
 8010d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010da0:	4617      	mov	r7, r2
 8010da2:	7842      	ldrb	r2, [r0, #1]
 8010da4:	b083      	sub	sp, #12
 8010da6:	460e      	mov	r6, r1
 8010da8:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8010dac:	469a      	mov	sl, r3
 8010dae:	2901      	cmp	r1, #1
 8010db0:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8010db4:	4604      	mov	r4, r0
 8010db6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8010dba:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8010dbe:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8010dc2:	f240 8137 	bls.w	8011034 <uxr_write_framed_msg+0x298>
 8010dc6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8010dca:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8010dce:	2901      	cmp	r1, #1
 8010dd0:	f04f 0202 	mov.w	r2, #2
 8010dd4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010dd8:	f240 808f 	bls.w	8010efa <uxr_write_framed_msg+0x15e>
 8010ddc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010dde:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8010de2:	b2dd      	uxtb	r5, r3
 8010de4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8010de8:	2203      	movs	r2, #3
 8010dea:	2901      	cmp	r1, #1
 8010dec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010df0:	f240 809a 	bls.w	8010f28 <uxr_write_framed_msg+0x18c>
 8010df4:	18a1      	adds	r1, r4, r2
 8010df6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010df8:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8010dfc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010e00:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8010e04:	3201      	adds	r2, #1
 8010e06:	2801      	cmp	r0, #1
 8010e08:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010e0c:	f240 80a0 	bls.w	8010f50 <uxr_write_framed_msg+0x1b4>
 8010e10:	18a0      	adds	r0, r4, r2
 8010e12:	3201      	adds	r2, #1
 8010e14:	b2d2      	uxtb	r2, r2
 8010e16:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8010e1a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	f000 80a9 	beq.w	8010f76 <uxr_write_framed_msg+0x1da>
 8010e24:	f04f 0900 	mov.w	r9, #0
 8010e28:	46c8      	mov	r8, r9
 8010e2a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8010e2e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8010e32:	2901      	cmp	r1, #1
 8010e34:	f240 80c3 	bls.w	8010fbe <uxr_write_framed_msg+0x222>
 8010e38:	2a29      	cmp	r2, #41	@ 0x29
 8010e3a:	f200 809f 	bhi.w	8010f7c <uxr_write_framed_msg+0x1e0>
 8010e3e:	18a1      	adds	r1, r4, r2
 8010e40:	3201      	adds	r2, #1
 8010e42:	b2d2      	uxtb	r2, r2
 8010e44:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8010e48:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010e4c:	ea89 0303 	eor.w	r3, r9, r3
 8010e50:	498c      	ldr	r1, [pc, #560]	@ (8011084 <uxr_write_framed_msg+0x2e8>)
 8010e52:	b2db      	uxtb	r3, r3
 8010e54:	f108 0801 	add.w	r8, r8, #1
 8010e58:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010e5c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8010e60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010e62:	4543      	cmp	r3, r8
 8010e64:	d8e1      	bhi.n	8010e2a <uxr_write_framed_msg+0x8e>
 8010e66:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8010e6a:	fa5f f889 	uxtb.w	r8, r9
 8010e6e:	9301      	str	r3, [sp, #4]
 8010e70:	f04f 0900 	mov.w	r9, #0
 8010e74:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8010e78:	fa5f f18a 	uxtb.w	r1, sl
 8010e7c:	2901      	cmp	r1, #1
 8010e7e:	d921      	bls.n	8010ec4 <uxr_write_framed_msg+0x128>
 8010e80:	2a29      	cmp	r2, #41	@ 0x29
 8010e82:	f240 80af 	bls.w	8010fe4 <uxr_write_framed_msg+0x248>
 8010e86:	2500      	movs	r5, #0
 8010e88:	e000      	b.n	8010e8c <uxr_write_framed_msg+0xf0>
 8010e8a:	b160      	cbz	r0, 8010ea6 <uxr_write_framed_msg+0x10a>
 8010e8c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8010e90:	1b52      	subs	r2, r2, r5
 8010e92:	465b      	mov	r3, fp
 8010e94:	4421      	add	r1, r4
 8010e96:	4638      	mov	r0, r7
 8010e98:	47b0      	blx	r6
 8010e9a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8010e9e:	4405      	add	r5, r0
 8010ea0:	4295      	cmp	r5, r2
 8010ea2:	d3f2      	bcc.n	8010e8a <uxr_write_framed_msg+0xee>
 8010ea4:	d003      	beq.n	8010eae <uxr_write_framed_msg+0x112>
 8010ea6:	2000      	movs	r0, #0
 8010ea8:	b003      	add	sp, #12
 8010eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eae:	fa5f f18a 	uxtb.w	r1, sl
 8010eb2:	f04f 0300 	mov.w	r3, #0
 8010eb6:	2901      	cmp	r1, #1
 8010eb8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8010ebc:	f04f 0200 	mov.w	r2, #0
 8010ec0:	f200 8090 	bhi.w	8010fe4 <uxr_write_framed_msg+0x248>
 8010ec4:	1c51      	adds	r1, r2, #1
 8010ec6:	b2c9      	uxtb	r1, r1
 8010ec8:	2929      	cmp	r1, #41	@ 0x29
 8010eca:	d8dc      	bhi.n	8010e86 <uxr_write_framed_msg+0xea>
 8010ecc:	18a5      	adds	r5, r4, r2
 8010ece:	4421      	add	r1, r4
 8010ed0:	3202      	adds	r2, #2
 8010ed2:	f088 0820 	eor.w	r8, r8, #32
 8010ed6:	4648      	mov	r0, r9
 8010ed8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8010edc:	b2d2      	uxtb	r2, r2
 8010ede:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8010ee2:	f04f 0901 	mov.w	r9, #1
 8010ee6:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8010eea:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010eee:	2800      	cmp	r0, #0
 8010ef0:	f040 8085 	bne.w	8010ffe <uxr_write_framed_msg+0x262>
 8010ef4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010ef8:	e7bc      	b.n	8010e74 <uxr_write_framed_msg+0xd8>
 8010efa:	4611      	mov	r1, r2
 8010efc:	f04f 0c03 	mov.w	ip, #3
 8010f00:	2204      	movs	r2, #4
 8010f02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010f04:	4421      	add	r1, r4
 8010f06:	b2dd      	uxtb	r5, r3
 8010f08:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8010f0c:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8010f10:	44a4      	add	ip, r4
 8010f12:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8010f16:	f080 0020 	eor.w	r0, r0, #32
 8010f1a:	2901      	cmp	r1, #1
 8010f1c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8010f20:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010f24:	f63f af66 	bhi.w	8010df4 <uxr_write_framed_msg+0x58>
 8010f28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010f2a:	18a0      	adds	r0, r4, r2
 8010f2c:	f085 0520 	eor.w	r5, r5, #32
 8010f30:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8010f34:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010f38:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8010f3c:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8010f40:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8010f44:	3202      	adds	r2, #2
 8010f46:	2801      	cmp	r0, #1
 8010f48:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010f4c:	f63f af60 	bhi.w	8010e10 <uxr_write_framed_msg+0x74>
 8010f50:	1c50      	adds	r0, r2, #1
 8010f52:	18a5      	adds	r5, r4, r2
 8010f54:	fa54 f080 	uxtab	r0, r4, r0
 8010f58:	3202      	adds	r2, #2
 8010f5a:	f081 0120 	eor.w	r1, r1, #32
 8010f5e:	b2d2      	uxtb	r2, r2
 8010f60:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8010f64:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8010f68:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8010f6c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	f47f af57 	bne.w	8010e24 <uxr_write_framed_msg+0x88>
 8010f76:	9301      	str	r3, [sp, #4]
 8010f78:	4698      	mov	r8, r3
 8010f7a:	e779      	b.n	8010e70 <uxr_write_framed_msg+0xd4>
 8010f7c:	2500      	movs	r5, #0
 8010f7e:	e001      	b.n	8010f84 <uxr_write_framed_msg+0x1e8>
 8010f80:	2800      	cmp	r0, #0
 8010f82:	d090      	beq.n	8010ea6 <uxr_write_framed_msg+0x10a>
 8010f84:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8010f88:	1b52      	subs	r2, r2, r5
 8010f8a:	465b      	mov	r3, fp
 8010f8c:	4421      	add	r1, r4
 8010f8e:	4638      	mov	r0, r7
 8010f90:	47b0      	blx	r6
 8010f92:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8010f96:	4405      	add	r5, r0
 8010f98:	4295      	cmp	r5, r2
 8010f9a:	d3f1      	bcc.n	8010f80 <uxr_write_framed_msg+0x1e4>
 8010f9c:	d183      	bne.n	8010ea6 <uxr_write_framed_msg+0x10a>
 8010f9e:	f04f 0300 	mov.w	r3, #0
 8010fa2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8010fa6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010fa8:	4543      	cmp	r3, r8
 8010faa:	d964      	bls.n	8011076 <uxr_write_framed_msg+0x2da>
 8010fac:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8010fb0:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8010fb4:	2901      	cmp	r1, #1
 8010fb6:	f04f 0200 	mov.w	r2, #0
 8010fba:	f63f af3d 	bhi.w	8010e38 <uxr_write_framed_msg+0x9c>
 8010fbe:	1c51      	adds	r1, r2, #1
 8010fc0:	b2c9      	uxtb	r1, r1
 8010fc2:	2929      	cmp	r1, #41	@ 0x29
 8010fc4:	d8da      	bhi.n	8010f7c <uxr_write_framed_msg+0x1e0>
 8010fc6:	18a0      	adds	r0, r4, r2
 8010fc8:	4421      	add	r1, r4
 8010fca:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8010fce:	3202      	adds	r2, #2
 8010fd0:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8010fd4:	b2d2      	uxtb	r2, r2
 8010fd6:	f083 0020 	eor.w	r0, r3, #32
 8010fda:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8010fde:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010fe2:	e733      	b.n	8010e4c <uxr_write_framed_msg+0xb0>
 8010fe4:	18a1      	adds	r1, r4, r2
 8010fe6:	3201      	adds	r2, #1
 8010fe8:	4648      	mov	r0, r9
 8010fea:	b2d2      	uxtb	r2, r2
 8010fec:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8010ff0:	f04f 0901 	mov.w	r9, #1
 8010ff4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010ff8:	2800      	cmp	r0, #0
 8010ffa:	f43f af7b 	beq.w	8010ef4 <uxr_write_framed_msg+0x158>
 8010ffe:	2500      	movs	r5, #0
 8011000:	e002      	b.n	8011008 <uxr_write_framed_msg+0x26c>
 8011002:	2800      	cmp	r0, #0
 8011004:	f43f af4f 	beq.w	8010ea6 <uxr_write_framed_msg+0x10a>
 8011008:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801100c:	1b52      	subs	r2, r2, r5
 801100e:	465b      	mov	r3, fp
 8011010:	4421      	add	r1, r4
 8011012:	4638      	mov	r0, r7
 8011014:	47b0      	blx	r6
 8011016:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801101a:	4405      	add	r5, r0
 801101c:	4295      	cmp	r5, r2
 801101e:	d3f0      	bcc.n	8011002 <uxr_write_framed_msg+0x266>
 8011020:	f47f af41 	bne.w	8010ea6 <uxr_write_framed_msg+0x10a>
 8011024:	2300      	movs	r3, #0
 8011026:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801102a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801102c:	b298      	uxth	r0, r3
 801102e:	b003      	add	sp, #12
 8011030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011034:	217d      	movs	r1, #125	@ 0x7d
 8011036:	f082 0220 	eor.w	r2, r2, #32
 801103a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801103e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8011042:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8011046:	2901      	cmp	r1, #1
 8011048:	f04f 0203 	mov.w	r2, #3
 801104c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011050:	d804      	bhi.n	801105c <uxr_write_framed_msg+0x2c0>
 8011052:	4611      	mov	r1, r2
 8011054:	f04f 0c04 	mov.w	ip, #4
 8011058:	2205      	movs	r2, #5
 801105a:	e752      	b.n	8010f02 <uxr_write_framed_msg+0x166>
 801105c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801105e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8011062:	b2dd      	uxtb	r5, r3
 8011064:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011068:	2204      	movs	r2, #4
 801106a:	2901      	cmp	r1, #1
 801106c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011070:	f63f aec0 	bhi.w	8010df4 <uxr_write_framed_msg+0x58>
 8011074:	e758      	b.n	8010f28 <uxr_write_framed_msg+0x18c>
 8011076:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801107a:	fa5f f889 	uxtb.w	r8, r9
 801107e:	9301      	str	r3, [sp, #4]
 8011080:	2200      	movs	r2, #0
 8011082:	e6f5      	b.n	8010e70 <uxr_write_framed_msg+0xd4>
 8011084:	08019398 	.word	0x08019398

08011088 <uxr_framing_read_transport>:
 8011088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801108c:	4604      	mov	r4, r0
 801108e:	b083      	sub	sp, #12
 8011090:	461f      	mov	r7, r3
 8011092:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8011096:	4689      	mov	r9, r1
 8011098:	4692      	mov	sl, r2
 801109a:	f000 fc89 	bl	80119b0 <uxr_millis>
 801109e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80110a2:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80110a6:	42b3      	cmp	r3, r6
 80110a8:	4680      	mov	r8, r0
 80110aa:	d061      	beq.n	8011170 <uxr_framing_read_transport+0xe8>
 80110ac:	d81c      	bhi.n	80110e8 <uxr_framing_read_transport+0x60>
 80110ae:	1e75      	subs	r5, r6, #1
 80110b0:	1aed      	subs	r5, r5, r3
 80110b2:	b2ed      	uxtb	r5, r5
 80110b4:	2600      	movs	r6, #0
 80110b6:	455d      	cmp	r5, fp
 80110b8:	d81f      	bhi.n	80110fa <uxr_framing_read_transport+0x72>
 80110ba:	19ab      	adds	r3, r5, r6
 80110bc:	455b      	cmp	r3, fp
 80110be:	bf84      	itt	hi
 80110c0:	ebab 0605 	subhi.w	r6, fp, r5
 80110c4:	b2f6      	uxtbhi	r6, r6
 80110c6:	b9ed      	cbnz	r5, 8011104 <uxr_framing_read_transport+0x7c>
 80110c8:	f04f 0b00 	mov.w	fp, #0
 80110cc:	f000 fc70 	bl	80119b0 <uxr_millis>
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	eba0 0808 	sub.w	r8, r0, r8
 80110d6:	eba3 0308 	sub.w	r3, r3, r8
 80110da:	4658      	mov	r0, fp
 80110dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80110e0:	603b      	str	r3, [r7, #0]
 80110e2:	b003      	add	sp, #12
 80110e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110e8:	2e00      	cmp	r6, #0
 80110ea:	d049      	beq.n	8011180 <uxr_framing_read_transport+0xf8>
 80110ec:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 80110f0:	b2ed      	uxtb	r5, r5
 80110f2:	3e01      	subs	r6, #1
 80110f4:	455d      	cmp	r5, fp
 80110f6:	b2f6      	uxtb	r6, r6
 80110f8:	d9df      	bls.n	80110ba <uxr_framing_read_transport+0x32>
 80110fa:	fa5f f58b 	uxtb.w	r5, fp
 80110fe:	2600      	movs	r6, #0
 8011100:	2d00      	cmp	r5, #0
 8011102:	d0e1      	beq.n	80110c8 <uxr_framing_read_transport+0x40>
 8011104:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011108:	3102      	adds	r1, #2
 801110a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801110c:	9300      	str	r3, [sp, #0]
 801110e:	683b      	ldr	r3, [r7, #0]
 8011110:	4421      	add	r1, r4
 8011112:	462a      	mov	r2, r5
 8011114:	4650      	mov	r0, sl
 8011116:	47c8      	blx	r9
 8011118:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801111c:	4a1a      	ldr	r2, [pc, #104]	@ (8011188 <uxr_framing_read_transport+0x100>)
 801111e:	4403      	add	r3, r0
 8011120:	0859      	lsrs	r1, r3, #1
 8011122:	fba2 2101 	umull	r2, r1, r2, r1
 8011126:	0889      	lsrs	r1, r1, #2
 8011128:	222a      	movs	r2, #42	@ 0x2a
 801112a:	fb02 3111 	mls	r1, r2, r1, r3
 801112e:	4683      	mov	fp, r0
 8011130:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8011134:	2800      	cmp	r0, #0
 8011136:	d0c7      	beq.n	80110c8 <uxr_framing_read_transport+0x40>
 8011138:	42a8      	cmp	r0, r5
 801113a:	d1c7      	bne.n	80110cc <uxr_framing_read_transport+0x44>
 801113c:	2e00      	cmp	r6, #0
 801113e:	d0c5      	beq.n	80110cc <uxr_framing_read_transport+0x44>
 8011140:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011142:	9300      	str	r3, [sp, #0]
 8011144:	3102      	adds	r1, #2
 8011146:	4632      	mov	r2, r6
 8011148:	4421      	add	r1, r4
 801114a:	2300      	movs	r3, #0
 801114c:	4650      	mov	r0, sl
 801114e:	47c8      	blx	r9
 8011150:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011154:	4a0c      	ldr	r2, [pc, #48]	@ (8011188 <uxr_framing_read_transport+0x100>)
 8011156:	180b      	adds	r3, r1, r0
 8011158:	0859      	lsrs	r1, r3, #1
 801115a:	fba2 1201 	umull	r1, r2, r2, r1
 801115e:	0892      	lsrs	r2, r2, #2
 8011160:	212a      	movs	r1, #42	@ 0x2a
 8011162:	fb01 3312 	mls	r3, r1, r2, r3
 8011166:	eb00 0b05 	add.w	fp, r0, r5
 801116a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801116e:	e7ad      	b.n	80110cc <uxr_framing_read_transport+0x44>
 8011170:	2600      	movs	r6, #0
 8011172:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8011176:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8011178:	d9bf      	bls.n	80110fa <uxr_framing_read_transport+0x72>
 801117a:	2102      	movs	r1, #2
 801117c:	2529      	movs	r5, #41	@ 0x29
 801117e:	e7c4      	b.n	801110a <uxr_framing_read_transport+0x82>
 8011180:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8011184:	b2ed      	uxtb	r5, r5
 8011186:	e796      	b.n	80110b6 <uxr_framing_read_transport+0x2e>
 8011188:	30c30c31 	.word	0x30c30c31

0801118c <uxr_read_framed_msg>:
 801118c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011190:	461e      	mov	r6, r3
 8011192:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8011196:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801119a:	429d      	cmp	r5, r3
 801119c:	b083      	sub	sp, #12
 801119e:	4604      	mov	r4, r0
 80111a0:	4688      	mov	r8, r1
 80111a2:	4691      	mov	r9, r2
 80111a4:	f000 8188 	beq.w	80114b8 <uxr_read_framed_msg+0x32c>
 80111a8:	7823      	ldrb	r3, [r4, #0]
 80111aa:	4dc1      	ldr	r5, [pc, #772]	@ (80114b0 <uxr_read_framed_msg+0x324>)
 80111ac:	4fc1      	ldr	r7, [pc, #772]	@ (80114b4 <uxr_read_framed_msg+0x328>)
 80111ae:	2b07      	cmp	r3, #7
 80111b0:	d8fd      	bhi.n	80111ae <uxr_read_framed_msg+0x22>
 80111b2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80111b6:	0115      	.short	0x0115
 80111b8:	00d600f6 	.word	0x00d600f6
 80111bc:	009000b9 	.word	0x009000b9
 80111c0:	0030004d 	.word	0x0030004d
 80111c4:	0008      	.short	0x0008
 80111c6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80111ca:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80111ce:	4299      	cmp	r1, r3
 80111d0:	f000 814a 	beq.w	8011468 <uxr_read_framed_msg+0x2dc>
 80111d4:	18e2      	adds	r2, r4, r3
 80111d6:	7892      	ldrb	r2, [r2, #2]
 80111d8:	2a7d      	cmp	r2, #125	@ 0x7d
 80111da:	f000 8199 	beq.w	8011510 <uxr_read_framed_msg+0x384>
 80111de:	3301      	adds	r3, #1
 80111e0:	0858      	lsrs	r0, r3, #1
 80111e2:	fba5 1000 	umull	r1, r0, r5, r0
 80111e6:	0880      	lsrs	r0, r0, #2
 80111e8:	212a      	movs	r1, #42	@ 0x2a
 80111ea:	fb01 3310 	mls	r3, r1, r0, r3
 80111ee:	2a7e      	cmp	r2, #126	@ 0x7e
 80111f0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80111f4:	f000 8252 	beq.w	801169c <uxr_read_framed_msg+0x510>
 80111f8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80111fa:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80111fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011200:	b29b      	uxth	r3, r3
 8011202:	2200      	movs	r2, #0
 8011204:	4299      	cmp	r1, r3
 8011206:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8011208:	7022      	strb	r2, [r4, #0]
 801120a:	f000 8179 	beq.w	8011500 <uxr_read_framed_msg+0x374>
 801120e:	2000      	movs	r0, #0
 8011210:	b003      	add	sp, #12
 8011212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011216:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801121a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801121e:	4299      	cmp	r1, r3
 8011220:	f000 8131 	beq.w	8011486 <uxr_read_framed_msg+0x2fa>
 8011224:	18e2      	adds	r2, r4, r3
 8011226:	7890      	ldrb	r0, [r2, #2]
 8011228:	287d      	cmp	r0, #125	@ 0x7d
 801122a:	f000 8190 	beq.w	801154e <uxr_read_framed_msg+0x3c2>
 801122e:	3301      	adds	r3, #1
 8011230:	085a      	lsrs	r2, r3, #1
 8011232:	fba5 1202 	umull	r1, r2, r5, r2
 8011236:	0892      	lsrs	r2, r2, #2
 8011238:	212a      	movs	r1, #42	@ 0x2a
 801123a:	fb01 3312 	mls	r3, r1, r2, r3
 801123e:	287e      	cmp	r0, #126	@ 0x7e
 8011240:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011244:	f000 821a 	beq.w	801167c <uxr_read_framed_msg+0x4f0>
 8011248:	2307      	movs	r3, #7
 801124a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 801124c:	7023      	strb	r3, [r4, #0]
 801124e:	e7ae      	b.n	80111ae <uxr_read_framed_msg+0x22>
 8011250:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011252:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8011256:	459e      	cmp	lr, r3
 8011258:	d938      	bls.n	80112cc <uxr_read_framed_msg+0x140>
 801125a:	ee07 8a90 	vmov	s15, r8
 801125e:	212a      	movs	r1, #42	@ 0x2a
 8011260:	e020      	b.n	80112a4 <uxr_read_framed_msg+0x118>
 8011262:	f89b c002 	ldrb.w	ip, [fp, #2]
 8011266:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801126a:	f000 80d4 	beq.w	8011416 <uxr_read_framed_msg+0x28a>
 801126e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8011272:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011276:	f000 8219 	beq.w	80116ac <uxr_read_framed_msg+0x520>
 801127a:	f806 c003 	strb.w	ip, [r6, r3]
 801127e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8011282:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011284:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8011288:	ea8a 000c 	eor.w	r0, sl, ip
 801128c:	b2c0      	uxtb	r0, r0
 801128e:	3301      	adds	r3, #1
 8011290:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8011294:	b29b      	uxth	r3, r3
 8011296:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801129a:	4573      	cmp	r3, lr
 801129c:	8663      	strh	r3, [r4, #50]	@ 0x32
 801129e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80112a0:	f080 8120 	bcs.w	80114e4 <uxr_read_framed_msg+0x358>
 80112a4:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80112a8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80112ac:	f100 0c01 	add.w	ip, r0, #1
 80112b0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80112b4:	fba5 8202 	umull	r8, r2, r5, r2
 80112b8:	0892      	lsrs	r2, r2, #2
 80112ba:	4582      	cmp	sl, r0
 80112bc:	eb04 0b00 	add.w	fp, r4, r0
 80112c0:	fb01 c212 	mls	r2, r1, r2, ip
 80112c4:	d1cd      	bne.n	8011262 <uxr_read_framed_msg+0xd6>
 80112c6:	ee17 8a90 	vmov	r8, s15
 80112ca:	459e      	cmp	lr, r3
 80112cc:	f040 8111 	bne.w	80114f2 <uxr_read_framed_msg+0x366>
 80112d0:	2306      	movs	r3, #6
 80112d2:	7023      	strb	r3, [r4, #0]
 80112d4:	e76b      	b.n	80111ae <uxr_read_framed_msg+0x22>
 80112d6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80112da:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80112de:	4298      	cmp	r0, r3
 80112e0:	f000 80c2 	beq.w	8011468 <uxr_read_framed_msg+0x2dc>
 80112e4:	18e2      	adds	r2, r4, r3
 80112e6:	7891      	ldrb	r1, [r2, #2]
 80112e8:	297d      	cmp	r1, #125	@ 0x7d
 80112ea:	f000 814c 	beq.w	8011586 <uxr_read_framed_msg+0x3fa>
 80112ee:	3301      	adds	r3, #1
 80112f0:	085a      	lsrs	r2, r3, #1
 80112f2:	fba5 0202 	umull	r0, r2, r5, r2
 80112f6:	0892      	lsrs	r2, r2, #2
 80112f8:	202a      	movs	r0, #42	@ 0x2a
 80112fa:	fb00 3312 	mls	r3, r0, r2, r3
 80112fe:	297e      	cmp	r1, #126	@ 0x7e
 8011300:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011304:	f000 81ca 	beq.w	801169c <uxr_read_framed_msg+0x510>
 8011308:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801130a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801130e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011310:	b29b      	uxth	r3, r3
 8011312:	2000      	movs	r0, #0
 8011314:	428b      	cmp	r3, r1
 8011316:	8623      	strh	r3, [r4, #48]	@ 0x30
 8011318:	8660      	strh	r0, [r4, #50]	@ 0x32
 801131a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801131c:	f240 80df 	bls.w	80114de <uxr_read_framed_msg+0x352>
 8011320:	7020      	strb	r0, [r4, #0]
 8011322:	b003      	add	sp, #12
 8011324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011328:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801132c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011330:	4299      	cmp	r1, r3
 8011332:	f000 80a8 	beq.w	8011486 <uxr_read_framed_msg+0x2fa>
 8011336:	18e2      	adds	r2, r4, r3
 8011338:	7890      	ldrb	r0, [r2, #2]
 801133a:	287d      	cmp	r0, #125	@ 0x7d
 801133c:	f000 8164 	beq.w	8011608 <uxr_read_framed_msg+0x47c>
 8011340:	3301      	adds	r3, #1
 8011342:	085a      	lsrs	r2, r3, #1
 8011344:	fba5 1202 	umull	r1, r2, r5, r2
 8011348:	0892      	lsrs	r2, r2, #2
 801134a:	212a      	movs	r1, #42	@ 0x2a
 801134c:	fb01 3312 	mls	r3, r1, r2, r3
 8011350:	287e      	cmp	r0, #126	@ 0x7e
 8011352:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011356:	f000 8191 	beq.w	801167c <uxr_read_framed_msg+0x4f0>
 801135a:	2304      	movs	r3, #4
 801135c:	8620      	strh	r0, [r4, #48]	@ 0x30
 801135e:	7023      	strb	r3, [r4, #0]
 8011360:	e725      	b.n	80111ae <uxr_read_framed_msg+0x22>
 8011362:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011366:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801136a:	4290      	cmp	r0, r2
 801136c:	f000 80b3 	beq.w	80114d6 <uxr_read_framed_msg+0x34a>
 8011370:	18a3      	adds	r3, r4, r2
 8011372:	7899      	ldrb	r1, [r3, #2]
 8011374:	297d      	cmp	r1, #125	@ 0x7d
 8011376:	f000 8164 	beq.w	8011642 <uxr_read_framed_msg+0x4b6>
 801137a:	3201      	adds	r2, #1
 801137c:	0850      	lsrs	r0, r2, #1
 801137e:	fba5 3000 	umull	r3, r0, r5, r0
 8011382:	0880      	lsrs	r0, r0, #2
 8011384:	232a      	movs	r3, #42	@ 0x2a
 8011386:	fb03 2210 	mls	r2, r3, r0, r2
 801138a:	297e      	cmp	r1, #126	@ 0x7e
 801138c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011390:	f000 8188 	beq.w	80116a4 <uxr_read_framed_msg+0x518>
 8011394:	7863      	ldrb	r3, [r4, #1]
 8011396:	428b      	cmp	r3, r1
 8011398:	bf0c      	ite	eq
 801139a:	2303      	moveq	r3, #3
 801139c:	2300      	movne	r3, #0
 801139e:	7023      	strb	r3, [r4, #0]
 80113a0:	e705      	b.n	80111ae <uxr_read_framed_msg+0x22>
 80113a2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80113a6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80113aa:	2200      	movs	r2, #0
 80113ac:	4299      	cmp	r1, r3
 80113ae:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80113b2:	d06c      	beq.n	801148e <uxr_read_framed_msg+0x302>
 80113b4:	18e2      	adds	r2, r4, r3
 80113b6:	7890      	ldrb	r0, [r2, #2]
 80113b8:	287d      	cmp	r0, #125	@ 0x7d
 80113ba:	f000 8101 	beq.w	80115c0 <uxr_read_framed_msg+0x434>
 80113be:	3301      	adds	r3, #1
 80113c0:	085a      	lsrs	r2, r3, #1
 80113c2:	fba5 1202 	umull	r1, r2, r5, r2
 80113c6:	0892      	lsrs	r2, r2, #2
 80113c8:	212a      	movs	r1, #42	@ 0x2a
 80113ca:	fb01 3312 	mls	r3, r1, r2, r3
 80113ce:	287e      	cmp	r0, #126	@ 0x7e
 80113d0:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80113d4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80113d8:	d059      	beq.n	801148e <uxr_read_framed_msg+0x302>
 80113da:	2302      	movs	r3, #2
 80113dc:	7023      	strb	r3, [r4, #0]
 80113de:	e6e6      	b.n	80111ae <uxr_read_framed_msg+0x22>
 80113e0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80113e4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80113e8:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80113ec:	1c51      	adds	r1, r2, #1
 80113ee:	084b      	lsrs	r3, r1, #1
 80113f0:	fba5 c303 	umull	ip, r3, r5, r3
 80113f4:	089b      	lsrs	r3, r3, #2
 80113f6:	fb0e 1313 	mls	r3, lr, r3, r1
 80113fa:	4592      	cmp	sl, r2
 80113fc:	eb04 0002 	add.w	r0, r4, r2
 8011400:	b2da      	uxtb	r2, r3
 8011402:	f43f af04 	beq.w	801120e <uxr_read_framed_msg+0x82>
 8011406:	7883      	ldrb	r3, [r0, #2]
 8011408:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801140c:	2b7e      	cmp	r3, #126	@ 0x7e
 801140e:	d1ed      	bne.n	80113ec <uxr_read_framed_msg+0x260>
 8011410:	2301      	movs	r3, #1
 8011412:	7023      	strb	r3, [r4, #0]
 8011414:	e6cb      	b.n	80111ae <uxr_read_framed_msg+0x22>
 8011416:	f100 0c01 	add.w	ip, r0, #1
 801141a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801141e:	fba5 8202 	umull	r8, r2, r5, r2
 8011422:	0892      	lsrs	r2, r2, #2
 8011424:	fb01 c212 	mls	r2, r1, r2, ip
 8011428:	eb04 0c02 	add.w	ip, r4, r2
 801142c:	b2d2      	uxtb	r2, r2
 801142e:	4592      	cmp	sl, r2
 8011430:	f100 0002 	add.w	r0, r0, #2
 8011434:	f43f af47 	beq.w	80112c6 <uxr_read_framed_msg+0x13a>
 8011438:	0842      	lsrs	r2, r0, #1
 801143a:	f89c a002 	ldrb.w	sl, [ip, #2]
 801143e:	fba5 8202 	umull	r8, r2, r5, r2
 8011442:	0892      	lsrs	r2, r2, #2
 8011444:	fb01 0012 	mls	r0, r1, r2, r0
 8011448:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 801144c:	f08a 0c20 	eor.w	ip, sl, #32
 8011450:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8011454:	f47f af11 	bne.w	801127a <uxr_read_framed_msg+0xee>
 8011458:	459e      	cmp	lr, r3
 801145a:	ee17 8a90 	vmov	r8, s15
 801145e:	f43f af37 	beq.w	80112d0 <uxr_read_framed_msg+0x144>
 8011462:	2301      	movs	r3, #1
 8011464:	7023      	strb	r3, [r4, #0]
 8011466:	e6a2      	b.n	80111ae <uxr_read_framed_msg+0x22>
 8011468:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801146a:	9300      	str	r3, [sp, #0]
 801146c:	2301      	movs	r3, #1
 801146e:	9301      	str	r3, [sp, #4]
 8011470:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011472:	464a      	mov	r2, r9
 8011474:	4641      	mov	r1, r8
 8011476:	4620      	mov	r0, r4
 8011478:	f7ff fe06 	bl	8011088 <uxr_framing_read_transport>
 801147c:	2800      	cmp	r0, #0
 801147e:	f43f aec6 	beq.w	801120e <uxr_read_framed_msg+0x82>
 8011482:	7823      	ldrb	r3, [r4, #0]
 8011484:	e693      	b.n	80111ae <uxr_read_framed_msg+0x22>
 8011486:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011488:	9300      	str	r3, [sp, #0]
 801148a:	2302      	movs	r3, #2
 801148c:	e7ef      	b.n	801146e <uxr_read_framed_msg+0x2e2>
 801148e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011490:	9300      	str	r3, [sp, #0]
 8011492:	2304      	movs	r3, #4
 8011494:	9301      	str	r3, [sp, #4]
 8011496:	464a      	mov	r2, r9
 8011498:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801149a:	4641      	mov	r1, r8
 801149c:	4620      	mov	r0, r4
 801149e:	f7ff fdf3 	bl	8011088 <uxr_framing_read_transport>
 80114a2:	2800      	cmp	r0, #0
 80114a4:	d1ed      	bne.n	8011482 <uxr_read_framed_msg+0x2f6>
 80114a6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80114aa:	2b7e      	cmp	r3, #126	@ 0x7e
 80114ac:	d0e9      	beq.n	8011482 <uxr_read_framed_msg+0x2f6>
 80114ae:	e6ae      	b.n	801120e <uxr_read_framed_msg+0x82>
 80114b0:	30c30c31 	.word	0x30c30c31
 80114b4:	08019398 	.word	0x08019398
 80114b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80114ba:	9300      	str	r3, [sp, #0]
 80114bc:	2305      	movs	r3, #5
 80114be:	9301      	str	r3, [sp, #4]
 80114c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80114c2:	f7ff fde1 	bl	8011088 <uxr_framing_read_transport>
 80114c6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80114ca:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80114ce:	429a      	cmp	r2, r3
 80114d0:	f43f ae9d 	beq.w	801120e <uxr_read_framed_msg+0x82>
 80114d4:	e668      	b.n	80111a8 <uxr_read_framed_msg+0x1c>
 80114d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80114d8:	9300      	str	r3, [sp, #0]
 80114da:	2303      	movs	r3, #3
 80114dc:	e7c7      	b.n	801146e <uxr_read_framed_msg+0x2e2>
 80114de:	2305      	movs	r3, #5
 80114e0:	7023      	strb	r3, [r4, #0]
 80114e2:	e664      	b.n	80111ae <uxr_read_framed_msg+0x22>
 80114e4:	ee17 8a90 	vmov	r8, s15
 80114e8:	f43f aef2 	beq.w	80112d0 <uxr_read_framed_msg+0x144>
 80114ec:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80114f0:	d08e      	beq.n	8011410 <uxr_read_framed_msg+0x284>
 80114f2:	ebae 0303 	sub.w	r3, lr, r3
 80114f6:	3302      	adds	r3, #2
 80114f8:	9301      	str	r3, [sp, #4]
 80114fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80114fc:	9300      	str	r3, [sp, #0]
 80114fe:	e7b7      	b.n	8011470 <uxr_read_framed_msg+0x2e4>
 8011500:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011502:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8011506:	7013      	strb	r3, [r2, #0]
 8011508:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801150a:	b003      	add	sp, #12
 801150c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011510:	f103 0c01 	add.w	ip, r3, #1
 8011514:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011518:	fba5 0202 	umull	r0, r2, r5, r2
 801151c:	0892      	lsrs	r2, r2, #2
 801151e:	202a      	movs	r0, #42	@ 0x2a
 8011520:	fb00 c212 	mls	r2, r0, r2, ip
 8011524:	fa5f fc82 	uxtb.w	ip, r2
 8011528:	4561      	cmp	r1, ip
 801152a:	d09d      	beq.n	8011468 <uxr_read_framed_msg+0x2dc>
 801152c:	3302      	adds	r3, #2
 801152e:	4422      	add	r2, r4
 8011530:	0859      	lsrs	r1, r3, #1
 8011532:	7892      	ldrb	r2, [r2, #2]
 8011534:	fba5 c101 	umull	ip, r1, r5, r1
 8011538:	0889      	lsrs	r1, r1, #2
 801153a:	fb00 3311 	mls	r3, r0, r1, r3
 801153e:	2a7e      	cmp	r2, #126	@ 0x7e
 8011540:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011544:	f000 80aa 	beq.w	801169c <uxr_read_framed_msg+0x510>
 8011548:	f082 0220 	eor.w	r2, r2, #32
 801154c:	e654      	b.n	80111f8 <uxr_read_framed_msg+0x6c>
 801154e:	1c58      	adds	r0, r3, #1
 8011550:	0842      	lsrs	r2, r0, #1
 8011552:	fba5 c202 	umull	ip, r2, r5, r2
 8011556:	0892      	lsrs	r2, r2, #2
 8011558:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801155c:	fb0c 0212 	mls	r2, ip, r2, r0
 8011560:	b2d0      	uxtb	r0, r2
 8011562:	4281      	cmp	r1, r0
 8011564:	d08f      	beq.n	8011486 <uxr_read_framed_msg+0x2fa>
 8011566:	4422      	add	r2, r4
 8011568:	3302      	adds	r3, #2
 801156a:	7890      	ldrb	r0, [r2, #2]
 801156c:	085a      	lsrs	r2, r3, #1
 801156e:	fba5 1202 	umull	r1, r2, r5, r2
 8011572:	0892      	lsrs	r2, r2, #2
 8011574:	fb0c 3312 	mls	r3, ip, r2, r3
 8011578:	287e      	cmp	r0, #126	@ 0x7e
 801157a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801157e:	d07d      	beq.n	801167c <uxr_read_framed_msg+0x4f0>
 8011580:	f080 0020 	eor.w	r0, r0, #32
 8011584:	e660      	b.n	8011248 <uxr_read_framed_msg+0xbc>
 8011586:	1c59      	adds	r1, r3, #1
 8011588:	084a      	lsrs	r2, r1, #1
 801158a:	fba5 c202 	umull	ip, r2, r5, r2
 801158e:	0892      	lsrs	r2, r2, #2
 8011590:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011594:	fb0c 1212 	mls	r2, ip, r2, r1
 8011598:	b2d1      	uxtb	r1, r2
 801159a:	4288      	cmp	r0, r1
 801159c:	f43f af64 	beq.w	8011468 <uxr_read_framed_msg+0x2dc>
 80115a0:	4422      	add	r2, r4
 80115a2:	3302      	adds	r3, #2
 80115a4:	7891      	ldrb	r1, [r2, #2]
 80115a6:	085a      	lsrs	r2, r3, #1
 80115a8:	fba5 0202 	umull	r0, r2, r5, r2
 80115ac:	0892      	lsrs	r2, r2, #2
 80115ae:	fb0c 3312 	mls	r3, ip, r2, r3
 80115b2:	297e      	cmp	r1, #126	@ 0x7e
 80115b4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80115b8:	d070      	beq.n	801169c <uxr_read_framed_msg+0x510>
 80115ba:	f081 0120 	eor.w	r1, r1, #32
 80115be:	e6a3      	b.n	8011308 <uxr_read_framed_msg+0x17c>
 80115c0:	f103 0c01 	add.w	ip, r3, #1
 80115c4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80115c8:	fba5 0202 	umull	r0, r2, r5, r2
 80115cc:	0892      	lsrs	r2, r2, #2
 80115ce:	202a      	movs	r0, #42	@ 0x2a
 80115d0:	fb00 c212 	mls	r2, r0, r2, ip
 80115d4:	fa5f fc82 	uxtb.w	ip, r2
 80115d8:	4561      	cmp	r1, ip
 80115da:	f43f af58 	beq.w	801148e <uxr_read_framed_msg+0x302>
 80115de:	4422      	add	r2, r4
 80115e0:	3302      	adds	r3, #2
 80115e2:	7891      	ldrb	r1, [r2, #2]
 80115e4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80115e8:	085a      	lsrs	r2, r3, #1
 80115ea:	fba5 c202 	umull	ip, r2, r5, r2
 80115ee:	0892      	lsrs	r2, r2, #2
 80115f0:	fb00 3312 	mls	r3, r0, r2, r3
 80115f4:	297e      	cmp	r1, #126	@ 0x7e
 80115f6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80115fa:	f43f af48 	beq.w	801148e <uxr_read_framed_msg+0x302>
 80115fe:	f081 0120 	eor.w	r1, r1, #32
 8011602:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8011606:	e6e8      	b.n	80113da <uxr_read_framed_msg+0x24e>
 8011608:	1c58      	adds	r0, r3, #1
 801160a:	0842      	lsrs	r2, r0, #1
 801160c:	fba5 c202 	umull	ip, r2, r5, r2
 8011610:	0892      	lsrs	r2, r2, #2
 8011612:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011616:	fb0c 0212 	mls	r2, ip, r2, r0
 801161a:	b2d0      	uxtb	r0, r2
 801161c:	4281      	cmp	r1, r0
 801161e:	f43f af32 	beq.w	8011486 <uxr_read_framed_msg+0x2fa>
 8011622:	4422      	add	r2, r4
 8011624:	3302      	adds	r3, #2
 8011626:	7890      	ldrb	r0, [r2, #2]
 8011628:	085a      	lsrs	r2, r3, #1
 801162a:	fba5 1202 	umull	r1, r2, r5, r2
 801162e:	0892      	lsrs	r2, r2, #2
 8011630:	fb0c 3312 	mls	r3, ip, r2, r3
 8011634:	287e      	cmp	r0, #126	@ 0x7e
 8011636:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801163a:	d01f      	beq.n	801167c <uxr_read_framed_msg+0x4f0>
 801163c:	f080 0020 	eor.w	r0, r0, #32
 8011640:	e68b      	b.n	801135a <uxr_read_framed_msg+0x1ce>
 8011642:	1c51      	adds	r1, r2, #1
 8011644:	084b      	lsrs	r3, r1, #1
 8011646:	fba5 c303 	umull	ip, r3, r5, r3
 801164a:	089b      	lsrs	r3, r3, #2
 801164c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011650:	fb0c 1313 	mls	r3, ip, r3, r1
 8011654:	b2d9      	uxtb	r1, r3
 8011656:	4288      	cmp	r0, r1
 8011658:	f43f af3d 	beq.w	80114d6 <uxr_read_framed_msg+0x34a>
 801165c:	3202      	adds	r2, #2
 801165e:	4423      	add	r3, r4
 8011660:	0850      	lsrs	r0, r2, #1
 8011662:	789b      	ldrb	r3, [r3, #2]
 8011664:	fba5 1000 	umull	r1, r0, r5, r0
 8011668:	0880      	lsrs	r0, r0, #2
 801166a:	fb0c 2210 	mls	r2, ip, r0, r2
 801166e:	2b7e      	cmp	r3, #126	@ 0x7e
 8011670:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011674:	d016      	beq.n	80116a4 <uxr_read_framed_msg+0x518>
 8011676:	f083 0120 	eor.w	r1, r3, #32
 801167a:	e68b      	b.n	8011394 <uxr_read_framed_msg+0x208>
 801167c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801167e:	9300      	str	r3, [sp, #0]
 8011680:	2302      	movs	r3, #2
 8011682:	9301      	str	r3, [sp, #4]
 8011684:	464a      	mov	r2, r9
 8011686:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011688:	4641      	mov	r1, r8
 801168a:	4620      	mov	r0, r4
 801168c:	f7ff fcfc 	bl	8011088 <uxr_framing_read_transport>
 8011690:	2800      	cmp	r0, #0
 8011692:	f47f aef6 	bne.w	8011482 <uxr_read_framed_msg+0x2f6>
 8011696:	2301      	movs	r3, #1
 8011698:	7023      	strb	r3, [r4, #0]
 801169a:	e588      	b.n	80111ae <uxr_read_framed_msg+0x22>
 801169c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801169e:	9300      	str	r3, [sp, #0]
 80116a0:	2301      	movs	r3, #1
 80116a2:	e7ee      	b.n	8011682 <uxr_read_framed_msg+0x4f6>
 80116a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80116a6:	9300      	str	r3, [sp, #0]
 80116a8:	2303      	movs	r3, #3
 80116aa:	e7ea      	b.n	8011682 <uxr_read_framed_msg+0x4f6>
 80116ac:	ee17 8a90 	vmov	r8, s15
 80116b0:	e6ae      	b.n	8011410 <uxr_read_framed_msg+0x284>
 80116b2:	bf00      	nop

080116b4 <uxr_stream_id>:
 80116b4:	2901      	cmp	r1, #1
 80116b6:	b082      	sub	sp, #8
 80116b8:	d01d      	beq.n	80116f6 <uxr_stream_id+0x42>
 80116ba:	2902      	cmp	r1, #2
 80116bc:	f04f 0c00 	mov.w	ip, #0
 80116c0:	d01e      	beq.n	8011700 <uxr_stream_id+0x4c>
 80116c2:	2300      	movs	r3, #0
 80116c4:	f36c 0307 	bfi	r3, ip, #0, #8
 80116c8:	f360 230f 	bfi	r3, r0, #8, #8
 80116cc:	f361 4317 	bfi	r3, r1, #16, #8
 80116d0:	f362 631f 	bfi	r3, r2, #24, #8
 80116d4:	b2da      	uxtb	r2, r3
 80116d6:	2000      	movs	r0, #0
 80116d8:	f362 0007 	bfi	r0, r2, #0, #8
 80116dc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80116e0:	f362 200f 	bfi	r0, r2, #8, #8
 80116e4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80116e8:	f362 4017 	bfi	r0, r2, #16, #8
 80116ec:	0e1b      	lsrs	r3, r3, #24
 80116ee:	f363 601f 	bfi	r0, r3, #24, #8
 80116f2:	b002      	add	sp, #8
 80116f4:	4770      	bx	lr
 80116f6:	f100 0c01 	add.w	ip, r0, #1
 80116fa:	fa5f fc8c 	uxtb.w	ip, ip
 80116fe:	e7e0      	b.n	80116c2 <uxr_stream_id+0xe>
 8011700:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8011704:	e7dd      	b.n	80116c2 <uxr_stream_id+0xe>
 8011706:	bf00      	nop

08011708 <uxr_stream_id_from_raw>:
 8011708:	b082      	sub	sp, #8
 801170a:	b130      	cbz	r0, 801171a <uxr_stream_id_from_raw+0x12>
 801170c:	0603      	lsls	r3, r0, #24
 801170e:	d420      	bmi.n	8011752 <uxr_stream_id_from_raw+0x4a>
 8011710:	1e42      	subs	r2, r0, #1
 8011712:	b2d2      	uxtb	r2, r2
 8011714:	f04f 0c01 	mov.w	ip, #1
 8011718:	e001      	b.n	801171e <uxr_stream_id_from_raw+0x16>
 801171a:	4684      	mov	ip, r0
 801171c:	4602      	mov	r2, r0
 801171e:	2300      	movs	r3, #0
 8011720:	f360 0307 	bfi	r3, r0, #0, #8
 8011724:	f362 230f 	bfi	r3, r2, #8, #8
 8011728:	f36c 4317 	bfi	r3, ip, #16, #8
 801172c:	f361 631f 	bfi	r3, r1, #24, #8
 8011730:	b2da      	uxtb	r2, r3
 8011732:	2000      	movs	r0, #0
 8011734:	f362 0007 	bfi	r0, r2, #0, #8
 8011738:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801173c:	f362 200f 	bfi	r0, r2, #8, #8
 8011740:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011744:	f362 4017 	bfi	r0, r2, #16, #8
 8011748:	0e1b      	lsrs	r3, r3, #24
 801174a:	f363 601f 	bfi	r0, r3, #24, #8
 801174e:	b002      	add	sp, #8
 8011750:	4770      	bx	lr
 8011752:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8011756:	f04f 0c02 	mov.w	ip, #2
 801175a:	e7e0      	b.n	801171e <uxr_stream_id_from_raw+0x16>

0801175c <uxr_init_stream_storage>:
 801175c:	2300      	movs	r3, #0
 801175e:	7403      	strb	r3, [r0, #16]
 8011760:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8011764:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8011768:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801176c:	4770      	bx	lr
 801176e:	bf00      	nop

08011770 <uxr_reset_stream_storage>:
 8011770:	b570      	push	{r4, r5, r6, lr}
 8011772:	7c03      	ldrb	r3, [r0, #16]
 8011774:	4604      	mov	r4, r0
 8011776:	b153      	cbz	r3, 801178e <uxr_reset_stream_storage+0x1e>
 8011778:	4606      	mov	r6, r0
 801177a:	2500      	movs	r5, #0
 801177c:	4630      	mov	r0, r6
 801177e:	f005 f8bf 	bl	8016900 <uxr_reset_output_best_effort_stream>
 8011782:	7c23      	ldrb	r3, [r4, #16]
 8011784:	3501      	adds	r5, #1
 8011786:	42ab      	cmp	r3, r5
 8011788:	f106 0610 	add.w	r6, r6, #16
 801178c:	d8f6      	bhi.n	801177c <uxr_reset_stream_storage+0xc>
 801178e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011792:	b163      	cbz	r3, 80117ae <uxr_reset_stream_storage+0x3e>
 8011794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011798:	2500      	movs	r5, #0
 801179a:	4630      	mov	r0, r6
 801179c:	f004 feb2 	bl	8016504 <uxr_reset_input_best_effort_stream>
 80117a0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80117a4:	3501      	adds	r5, #1
 80117a6:	42ab      	cmp	r3, r5
 80117a8:	f106 0602 	add.w	r6, r6, #2
 80117ac:	d8f5      	bhi.n	801179a <uxr_reset_stream_storage+0x2a>
 80117ae:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80117b2:	b163      	cbz	r3, 80117ce <uxr_reset_stream_storage+0x5e>
 80117b4:	f104 0618 	add.w	r6, r4, #24
 80117b8:	2500      	movs	r5, #0
 80117ba:	4630      	mov	r0, r6
 80117bc:	f005 f94c 	bl	8016a58 <uxr_reset_output_reliable_stream>
 80117c0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80117c4:	3501      	adds	r5, #1
 80117c6:	42ab      	cmp	r3, r5
 80117c8:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80117cc:	d8f5      	bhi.n	80117ba <uxr_reset_stream_storage+0x4a>
 80117ce:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80117d2:	b163      	cbz	r3, 80117ee <uxr_reset_stream_storage+0x7e>
 80117d4:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80117d8:	2500      	movs	r5, #0
 80117da:	4630      	mov	r0, r6
 80117dc:	f004 ff06 	bl	80165ec <uxr_reset_input_reliable_stream>
 80117e0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80117e4:	3501      	adds	r5, #1
 80117e6:	42ab      	cmp	r3, r5
 80117e8:	f106 0618 	add.w	r6, r6, #24
 80117ec:	d8f5      	bhi.n	80117da <uxr_reset_stream_storage+0x6a>
 80117ee:	bd70      	pop	{r4, r5, r6, pc}

080117f0 <uxr_add_output_best_effort_buffer>:
 80117f0:	b510      	push	{r4, lr}
 80117f2:	7c04      	ldrb	r4, [r0, #16]
 80117f4:	f104 0c01 	add.w	ip, r4, #1
 80117f8:	b082      	sub	sp, #8
 80117fa:	f880 c010 	strb.w	ip, [r0, #16]
 80117fe:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011802:	f005 f873 	bl	80168ec <uxr_init_output_best_effort_stream>
 8011806:	2201      	movs	r2, #1
 8011808:	4611      	mov	r1, r2
 801180a:	4620      	mov	r0, r4
 801180c:	b002      	add	sp, #8
 801180e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011812:	f7ff bf4f 	b.w	80116b4 <uxr_stream_id>
 8011816:	bf00      	nop

08011818 <uxr_add_output_reliable_buffer>:
 8011818:	b510      	push	{r4, lr}
 801181a:	b084      	sub	sp, #16
 801181c:	4684      	mov	ip, r0
 801181e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011822:	9000      	str	r0, [sp, #0]
 8011824:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8011828:	2028      	movs	r0, #40	@ 0x28
 801182a:	fb00 c004 	mla	r0, r0, r4, ip
 801182e:	f104 0e01 	add.w	lr, r4, #1
 8011832:	3018      	adds	r0, #24
 8011834:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8011838:	f005 f8d6 	bl	80169e8 <uxr_init_output_reliable_stream>
 801183c:	2201      	movs	r2, #1
 801183e:	2102      	movs	r1, #2
 8011840:	4620      	mov	r0, r4
 8011842:	b004      	add	sp, #16
 8011844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011848:	f7ff bf34 	b.w	80116b4 <uxr_stream_id>

0801184c <uxr_add_input_best_effort_buffer>:
 801184c:	b510      	push	{r4, lr}
 801184e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8011852:	4603      	mov	r3, r0
 8011854:	1c62      	adds	r2, r4, #1
 8011856:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 801185a:	b082      	sub	sp, #8
 801185c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8011860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011864:	f004 fe4a 	bl	80164fc <uxr_init_input_best_effort_stream>
 8011868:	2200      	movs	r2, #0
 801186a:	2101      	movs	r1, #1
 801186c:	4620      	mov	r0, r4
 801186e:	b002      	add	sp, #8
 8011870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011874:	f7ff bf1e 	b.w	80116b4 <uxr_stream_id>

08011878 <uxr_add_input_reliable_buffer>:
 8011878:	b510      	push	{r4, lr}
 801187a:	b084      	sub	sp, #16
 801187c:	4684      	mov	ip, r0
 801187e:	9806      	ldr	r0, [sp, #24]
 8011880:	9000      	str	r0, [sp, #0]
 8011882:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8011886:	2018      	movs	r0, #24
 8011888:	fb00 c004 	mla	r0, r0, r4, ip
 801188c:	f104 0e01 	add.w	lr, r4, #1
 8011890:	3048      	adds	r0, #72	@ 0x48
 8011892:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8011896:	f004 fe7d 	bl	8016594 <uxr_init_input_reliable_stream>
 801189a:	2200      	movs	r2, #0
 801189c:	2102      	movs	r1, #2
 801189e:	4620      	mov	r0, r4
 80118a0:	b004      	add	sp, #16
 80118a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118a6:	f7ff bf05 	b.w	80116b4 <uxr_stream_id>
 80118aa:	bf00      	nop

080118ac <uxr_get_output_best_effort_stream>:
 80118ac:	7c03      	ldrb	r3, [r0, #16]
 80118ae:	428b      	cmp	r3, r1
 80118b0:	bf8c      	ite	hi
 80118b2:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80118b6:	2000      	movls	r0, #0
 80118b8:	4770      	bx	lr
 80118ba:	bf00      	nop

080118bc <uxr_get_output_reliable_stream>:
 80118bc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80118c0:	428b      	cmp	r3, r1
 80118c2:	bf83      	ittte	hi
 80118c4:	2328      	movhi	r3, #40	@ 0x28
 80118c6:	fb03 0001 	mlahi	r0, r3, r1, r0
 80118ca:	3018      	addhi	r0, #24
 80118cc:	2000      	movls	r0, #0
 80118ce:	4770      	bx	lr

080118d0 <uxr_get_input_best_effort_stream>:
 80118d0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80118d4:	428b      	cmp	r3, r1
 80118d6:	bf86      	itte	hi
 80118d8:	3121      	addhi	r1, #33	@ 0x21
 80118da:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80118de:	2000      	movls	r0, #0
 80118e0:	4770      	bx	lr
 80118e2:	bf00      	nop

080118e4 <uxr_get_input_reliable_stream>:
 80118e4:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80118e8:	428b      	cmp	r3, r1
 80118ea:	bf83      	ittte	hi
 80118ec:	2318      	movhi	r3, #24
 80118ee:	fb03 0001 	mlahi	r0, r3, r1, r0
 80118f2:	3048      	addhi	r0, #72	@ 0x48
 80118f4:	2000      	movls	r0, #0
 80118f6:	4770      	bx	lr

080118f8 <uxr_output_streams_confirmed>:
 80118f8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80118fc:	b183      	cbz	r3, 8011920 <uxr_output_streams_confirmed+0x28>
 80118fe:	b570      	push	{r4, r5, r6, lr}
 8011900:	4606      	mov	r6, r0
 8011902:	f100 0518 	add.w	r5, r0, #24
 8011906:	2400      	movs	r4, #0
 8011908:	e001      	b.n	801190e <uxr_output_streams_confirmed+0x16>
 801190a:	3528      	adds	r5, #40	@ 0x28
 801190c:	b138      	cbz	r0, 801191e <uxr_output_streams_confirmed+0x26>
 801190e:	4628      	mov	r0, r5
 8011910:	f005 fb12 	bl	8016f38 <uxr_is_output_up_to_date>
 8011914:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8011918:	3401      	adds	r4, #1
 801191a:	42a3      	cmp	r3, r4
 801191c:	d8f5      	bhi.n	801190a <uxr_output_streams_confirmed+0x12>
 801191e:	bd70      	pop	{r4, r5, r6, pc}
 8011920:	2001      	movs	r0, #1
 8011922:	4770      	bx	lr

08011924 <uxr_buffer_submessage_header>:
 8011924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011926:	4604      	mov	r4, r0
 8011928:	460e      	mov	r6, r1
 801192a:	2104      	movs	r1, #4
 801192c:	4615      	mov	r5, r2
 801192e:	461f      	mov	r7, r3
 8011930:	f7f9 fe38 	bl	800b5a4 <ucdr_align_to>
 8011934:	2301      	movs	r3, #1
 8011936:	ea47 0203 	orr.w	r2, r7, r3
 801193a:	4631      	mov	r1, r6
 801193c:	7523      	strb	r3, [r4, #20]
 801193e:	4620      	mov	r0, r4
 8011940:	462b      	mov	r3, r5
 8011942:	f000 fa27 	bl	8011d94 <uxr_serialize_submessage_header>
 8011946:	4620      	mov	r0, r4
 8011948:	f7f9 fe42 	bl	800b5d0 <ucdr_buffer_remaining>
 801194c:	42a8      	cmp	r0, r5
 801194e:	bf34      	ite	cc
 8011950:	2000      	movcc	r0, #0
 8011952:	2001      	movcs	r0, #1
 8011954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011956:	bf00      	nop

08011958 <uxr_read_submessage_header>:
 8011958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801195c:	4604      	mov	r4, r0
 801195e:	460d      	mov	r5, r1
 8011960:	2104      	movs	r1, #4
 8011962:	4616      	mov	r6, r2
 8011964:	4698      	mov	r8, r3
 8011966:	f7f9 fe1d 	bl	800b5a4 <ucdr_align_to>
 801196a:	4620      	mov	r0, r4
 801196c:	f7f9 fe30 	bl	800b5d0 <ucdr_buffer_remaining>
 8011970:	2803      	cmp	r0, #3
 8011972:	bf8c      	ite	hi
 8011974:	2701      	movhi	r7, #1
 8011976:	2700      	movls	r7, #0
 8011978:	d802      	bhi.n	8011980 <uxr_read_submessage_header+0x28>
 801197a:	4638      	mov	r0, r7
 801197c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011980:	4633      	mov	r3, r6
 8011982:	4642      	mov	r2, r8
 8011984:	4620      	mov	r0, r4
 8011986:	4629      	mov	r1, r5
 8011988:	f000 fa18 	bl	8011dbc <uxr_deserialize_submessage_header>
 801198c:	f898 3000 	ldrb.w	r3, [r8]
 8011990:	f003 0201 	and.w	r2, r3, #1
 8011994:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8011998:	f888 3000 	strb.w	r3, [r8]
 801199c:	7522      	strb	r2, [r4, #20]
 801199e:	4638      	mov	r0, r7
 80119a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080119a4 <uxr_submessage_padding>:
 80119a4:	f010 0003 	ands.w	r0, r0, #3
 80119a8:	bf18      	it	ne
 80119aa:	f1c0 0004 	rsbne	r0, r0, #4
 80119ae:	4770      	bx	lr

080119b0 <uxr_millis>:
 80119b0:	b510      	push	{r4, lr}
 80119b2:	b084      	sub	sp, #16
 80119b4:	4669      	mov	r1, sp
 80119b6:	2001      	movs	r0, #1
 80119b8:	f7f0 f806 	bl	80019c8 <clock_gettime>
 80119bc:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80119c0:	4906      	ldr	r1, [pc, #24]	@ (80119dc <uxr_millis+0x2c>)
 80119c2:	fba0 0301 	umull	r0, r3, r0, r1
 80119c6:	1900      	adds	r0, r0, r4
 80119c8:	fb01 3102 	mla	r1, r1, r2, r3
 80119cc:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80119d0:	4a03      	ldr	r2, [pc, #12]	@ (80119e0 <uxr_millis+0x30>)
 80119d2:	2300      	movs	r3, #0
 80119d4:	f7ee fe48 	bl	8000668 <__aeabi_ldivmod>
 80119d8:	b004      	add	sp, #16
 80119da:	bd10      	pop	{r4, pc}
 80119dc:	3b9aca00 	.word	0x3b9aca00
 80119e0:	000f4240 	.word	0x000f4240

080119e4 <uxr_nanos>:
 80119e4:	b510      	push	{r4, lr}
 80119e6:	b084      	sub	sp, #16
 80119e8:	4669      	mov	r1, sp
 80119ea:	2001      	movs	r0, #1
 80119ec:	f7ef ffec 	bl	80019c8 <clock_gettime>
 80119f0:	4a06      	ldr	r2, [pc, #24]	@ (8011a0c <uxr_nanos+0x28>)
 80119f2:	9800      	ldr	r0, [sp, #0]
 80119f4:	9902      	ldr	r1, [sp, #8]
 80119f6:	9c01      	ldr	r4, [sp, #4]
 80119f8:	fba0 0302 	umull	r0, r3, r0, r2
 80119fc:	1840      	adds	r0, r0, r1
 80119fe:	fb02 3304 	mla	r3, r2, r4, r3
 8011a02:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8011a06:	b004      	add	sp, #16
 8011a08:	bd10      	pop	{r4, pc}
 8011a0a:	bf00      	nop
 8011a0c:	3b9aca00 	.word	0x3b9aca00

08011a10 <on_full_output_buffer_fragmented>:
 8011a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a14:	460c      	mov	r4, r1
 8011a16:	b08a      	sub	sp, #40	@ 0x28
 8011a18:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8011a1c:	4606      	mov	r6, r0
 8011a1e:	f104 0008 	add.w	r0, r4, #8
 8011a22:	f7ff ff4b 	bl	80118bc <uxr_get_output_reliable_stream>
 8011a26:	4605      	mov	r5, r0
 8011a28:	f005 fa90 	bl	8016f4c <get_available_free_slots>
 8011a2c:	b968      	cbnz	r0, 8011a4a <on_full_output_buffer_fragmented+0x3a>
 8011a2e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8011a32:	4620      	mov	r0, r4
 8011a34:	4798      	blx	r3
 8011a36:	b918      	cbnz	r0, 8011a40 <on_full_output_buffer_fragmented+0x30>
 8011a38:	2001      	movs	r0, #1
 8011a3a:	b00a      	add	sp, #40	@ 0x28
 8011a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a40:	4628      	mov	r0, r5
 8011a42:	f005 fa83 	bl	8016f4c <get_available_free_slots>
 8011a46:	2800      	cmp	r0, #0
 8011a48:	d0f6      	beq.n	8011a38 <on_full_output_buffer_fragmented+0x28>
 8011a4a:	8929      	ldrh	r1, [r5, #8]
 8011a4c:	89eb      	ldrh	r3, [r5, #14]
 8011a4e:	7b28      	ldrb	r0, [r5, #12]
 8011a50:	686a      	ldr	r2, [r5, #4]
 8011a52:	fbb2 f8f1 	udiv	r8, r2, r1
 8011a56:	fbb3 f2f1 	udiv	r2, r3, r1
 8011a5a:	fb01 3112 	mls	r1, r1, r2, r3
 8011a5e:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8011a62:	b289      	uxth	r1, r1
 8011a64:	fb08 f101 	mul.w	r1, r8, r1
 8011a68:	30fc      	adds	r0, #252	@ 0xfc
 8011a6a:	f1a8 0804 	sub.w	r8, r8, #4
 8011a6e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8011a72:	4440      	add	r0, r8
 8011a74:	b287      	uxth	r7, r0
 8011a76:	1bdb      	subs	r3, r3, r7
 8011a78:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8011a7c:	682b      	ldr	r3, [r5, #0]
 8011a7e:	3104      	adds	r1, #4
 8011a80:	4419      	add	r1, r3
 8011a82:	4642      	mov	r2, r8
 8011a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a88:	9300      	str	r3, [sp, #0]
 8011a8a:	a802      	add	r0, sp, #8
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	f7f9 fd5d 	bl	800b54c <ucdr_init_buffer_origin_offset>
 8011a92:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8011a96:	f102 0308 	add.w	r3, r2, #8
 8011a9a:	4543      	cmp	r3, r8
 8011a9c:	d928      	bls.n	8011af0 <on_full_output_buffer_fragmented+0xe0>
 8011a9e:	463a      	mov	r2, r7
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	210d      	movs	r1, #13
 8011aa4:	a802      	add	r0, sp, #8
 8011aa6:	f7ff ff3d 	bl	8011924 <uxr_buffer_submessage_header>
 8011aaa:	8929      	ldrh	r1, [r5, #8]
 8011aac:	89eb      	ldrh	r3, [r5, #14]
 8011aae:	fbb3 f2f1 	udiv	r2, r3, r1
 8011ab2:	fb01 3312 	mls	r3, r1, r2, r3
 8011ab6:	b29b      	uxth	r3, r3
 8011ab8:	686a      	ldr	r2, [r5, #4]
 8011aba:	fbb2 f2f1 	udiv	r2, r2, r1
 8011abe:	fb02 f303 	mul.w	r3, r2, r3
 8011ac2:	682a      	ldr	r2, [r5, #0]
 8011ac4:	f842 8003 	str.w	r8, [r2, r3]
 8011ac8:	89e8      	ldrh	r0, [r5, #14]
 8011aca:	2101      	movs	r1, #1
 8011acc:	f005 fa5e 	bl	8016f8c <uxr_seq_num_add>
 8011ad0:	9904      	ldr	r1, [sp, #16]
 8011ad2:	9a03      	ldr	r2, [sp, #12]
 8011ad4:	81e8      	strh	r0, [r5, #14]
 8011ad6:	1a52      	subs	r2, r2, r1
 8011ad8:	4630      	mov	r0, r6
 8011ada:	f7f9 fd49 	bl	800b570 <ucdr_init_buffer>
 8011ade:	4630      	mov	r0, r6
 8011ae0:	490f      	ldr	r1, [pc, #60]	@ (8011b20 <on_full_output_buffer_fragmented+0x110>)
 8011ae2:	4622      	mov	r2, r4
 8011ae4:	f7f9 fd18 	bl	800b518 <ucdr_set_on_full_buffer_callback>
 8011ae8:	2000      	movs	r0, #0
 8011aea:	b00a      	add	sp, #40	@ 0x28
 8011aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011af0:	b292      	uxth	r2, r2
 8011af2:	2302      	movs	r3, #2
 8011af4:	210d      	movs	r1, #13
 8011af6:	a802      	add	r0, sp, #8
 8011af8:	f7ff ff14 	bl	8011924 <uxr_buffer_submessage_header>
 8011afc:	8928      	ldrh	r0, [r5, #8]
 8011afe:	89eb      	ldrh	r3, [r5, #14]
 8011b00:	fbb3 f1f0 	udiv	r1, r3, r0
 8011b04:	fb00 3311 	mls	r3, r0, r1, r3
 8011b08:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8011b0c:	6869      	ldr	r1, [r5, #4]
 8011b0e:	fbb1 f1f0 	udiv	r1, r1, r0
 8011b12:	b29b      	uxth	r3, r3
 8011b14:	fb01 f303 	mul.w	r3, r1, r3
 8011b18:	6829      	ldr	r1, [r5, #0]
 8011b1a:	3208      	adds	r2, #8
 8011b1c:	50ca      	str	r2, [r1, r3]
 8011b1e:	e7d3      	b.n	8011ac8 <on_full_output_buffer_fragmented+0xb8>
 8011b20:	08011a11 	.word	0x08011a11

08011b24 <uxr_prepare_output_stream>:
 8011b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b26:	b087      	sub	sp, #28
 8011b28:	2707      	movs	r7, #7
 8011b2a:	9202      	str	r2, [sp, #8]
 8011b2c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011b2e:	9103      	str	r1, [sp, #12]
 8011b30:	2500      	movs	r5, #0
 8011b32:	3204      	adds	r2, #4
 8011b34:	e9cd 7500 	strd	r7, r5, [sp]
 8011b38:	461c      	mov	r4, r3
 8011b3a:	4606      	mov	r6, r0
 8011b3c:	f7fe ffc2 	bl	8010ac4 <uxr_prepare_stream_to_write_submessage>
 8011b40:	f080 0201 	eor.w	r2, r0, #1
 8011b44:	b2d2      	uxtb	r2, r2
 8011b46:	75a2      	strb	r2, [r4, #22]
 8011b48:	b112      	cbz	r2, 8011b50 <uxr_prepare_output_stream+0x2c>
 8011b4a:	4628      	mov	r0, r5
 8011b4c:	b007      	add	sp, #28
 8011b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b50:	aa05      	add	r2, sp, #20
 8011b52:	9902      	ldr	r1, [sp, #8]
 8011b54:	4630      	mov	r0, r6
 8011b56:	f7ff f8eb 	bl	8010d30 <uxr_init_base_object_request>
 8011b5a:	a905      	add	r1, sp, #20
 8011b5c:	4605      	mov	r5, r0
 8011b5e:	4620      	mov	r0, r4
 8011b60:	f000 ffd4 	bl	8012b0c <uxr_serialize_WRITE_DATA_Payload_Data>
 8011b64:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8011b68:	69a6      	ldr	r6, [r4, #24]
 8011b6a:	69e7      	ldr	r7, [r4, #28]
 8011b6c:	1a52      	subs	r2, r2, r1
 8011b6e:	4620      	mov	r0, r4
 8011b70:	f7f9 fcfe 	bl	800b570 <ucdr_init_buffer>
 8011b74:	4620      	mov	r0, r4
 8011b76:	463a      	mov	r2, r7
 8011b78:	4631      	mov	r1, r6
 8011b7a:	f7f9 fccd 	bl	800b518 <ucdr_set_on_full_buffer_callback>
 8011b7e:	4628      	mov	r0, r5
 8011b80:	b007      	add	sp, #28
 8011b82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b84 <uxr_prepare_output_stream_fragmented>:
 8011b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b88:	b091      	sub	sp, #68	@ 0x44
 8011b8a:	4605      	mov	r5, r0
 8011b8c:	9105      	str	r1, [sp, #20]
 8011b8e:	3008      	adds	r0, #8
 8011b90:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8011b94:	461e      	mov	r6, r3
 8011b96:	9204      	str	r2, [sp, #16]
 8011b98:	f7ff fe90 	bl	80118bc <uxr_get_output_reliable_stream>
 8011b9c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	f000 8091 	beq.w	8011cc8 <uxr_prepare_output_stream_fragmented+0x144>
 8011ba6:	4604      	mov	r4, r0
 8011ba8:	2800      	cmp	r0, #0
 8011baa:	f000 808d 	beq.w	8011cc8 <uxr_prepare_output_stream_fragmented+0x144>
 8011bae:	f005 f9cd 	bl	8016f4c <get_available_free_slots>
 8011bb2:	2800      	cmp	r0, #0
 8011bb4:	f000 8083 	beq.w	8011cbe <uxr_prepare_output_stream_fragmented+0x13a>
 8011bb8:	8922      	ldrh	r2, [r4, #8]
 8011bba:	89e7      	ldrh	r7, [r4, #14]
 8011bbc:	fbb7 f9f2 	udiv	r9, r7, r2
 8011bc0:	fb02 7919 	mls	r9, r2, r9, r7
 8011bc4:	fa1f f989 	uxth.w	r9, r9
 8011bc8:	6863      	ldr	r3, [r4, #4]
 8011bca:	fbb3 f2f2 	udiv	r2, r3, r2
 8011bce:	6823      	ldr	r3, [r4, #0]
 8011bd0:	9203      	str	r2, [sp, #12]
 8011bd2:	fb02 f909 	mul.w	r9, r2, r9
 8011bd6:	f109 0904 	add.w	r9, r9, #4
 8011bda:	4499      	add	r9, r3
 8011bdc:	7b23      	ldrb	r3, [r4, #12]
 8011bde:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8011be2:	4543      	cmp	r3, r8
 8011be4:	f1a2 0b04 	sub.w	fp, r2, #4
 8011be8:	d37a      	bcc.n	8011ce0 <uxr_prepare_output_stream_fragmented+0x15c>
 8011bea:	f1ab 0a04 	sub.w	sl, fp, #4
 8011bee:	ebaa 0a03 	sub.w	sl, sl, r3
 8011bf2:	465a      	mov	r2, fp
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	4649      	mov	r1, r9
 8011bf8:	a808      	add	r0, sp, #32
 8011bfa:	f8cd 8000 	str.w	r8, [sp]
 8011bfe:	f7f9 fca5 	bl	800b54c <ucdr_init_buffer_origin_offset>
 8011c02:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011c04:	fa1f fa8a 	uxth.w	sl, sl
 8011c08:	4652      	mov	r2, sl
 8011c0a:	f103 0a08 	add.w	sl, r3, #8
 8011c0e:	45da      	cmp	sl, fp
 8011c10:	bf34      	ite	cc
 8011c12:	2302      	movcc	r3, #2
 8011c14:	2300      	movcs	r3, #0
 8011c16:	210d      	movs	r1, #13
 8011c18:	a808      	add	r0, sp, #32
 8011c1a:	f7ff fe83 	bl	8011924 <uxr_buffer_submessage_header>
 8011c1e:	8921      	ldrh	r1, [r4, #8]
 8011c20:	fbb7 f2f1 	udiv	r2, r7, r1
 8011c24:	fb01 7212 	mls	r2, r1, r2, r7
 8011c28:	b292      	uxth	r2, r2
 8011c2a:	6863      	ldr	r3, [r4, #4]
 8011c2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c30:	fb02 f303 	mul.w	r3, r2, r3
 8011c34:	6822      	ldr	r2, [r4, #0]
 8011c36:	4638      	mov	r0, r7
 8011c38:	f842 b003 	str.w	fp, [r2, r3]
 8011c3c:	2101      	movs	r1, #1
 8011c3e:	f005 f9a5 	bl	8016f8c <uxr_seq_num_add>
 8011c42:	9b03      	ldr	r3, [sp, #12]
 8011c44:	f108 0104 	add.w	r1, r8, #4
 8011c48:	f1a3 0208 	sub.w	r2, r3, #8
 8011c4c:	eba2 0208 	sub.w	r2, r2, r8
 8011c50:	4449      	add	r1, r9
 8011c52:	4607      	mov	r7, r0
 8011c54:	4630      	mov	r0, r6
 8011c56:	f7f9 fc8b 	bl	800b570 <ucdr_init_buffer>
 8011c5a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011c5c:	81e7      	strh	r7, [r4, #14]
 8011c5e:	1d1a      	adds	r2, r3, #4
 8011c60:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8011c64:	bf28      	it	cs
 8011c66:	2200      	movcs	r2, #0
 8011c68:	2300      	movs	r3, #0
 8011c6a:	b292      	uxth	r2, r2
 8011c6c:	2107      	movs	r1, #7
 8011c6e:	4630      	mov	r0, r6
 8011c70:	f7ff fe58 	bl	8011924 <uxr_buffer_submessage_header>
 8011c74:	9904      	ldr	r1, [sp, #16]
 8011c76:	aa07      	add	r2, sp, #28
 8011c78:	4628      	mov	r0, r5
 8011c7a:	f7ff f859 	bl	8010d30 <uxr_init_base_object_request>
 8011c7e:	4604      	mov	r4, r0
 8011c80:	b318      	cbz	r0, 8011cca <uxr_prepare_output_stream_fragmented+0x146>
 8011c82:	a907      	add	r1, sp, #28
 8011c84:	4630      	mov	r0, r6
 8011c86:	f000 ff41 	bl	8012b0c <uxr_serialize_WRITE_DATA_Payload_Data>
 8011c8a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8011c8e:	4630      	mov	r0, r6
 8011c90:	1a52      	subs	r2, r2, r1
 8011c92:	f7f9 fc6d 	bl	800b570 <ucdr_init_buffer>
 8011c96:	9b05      	ldr	r3, [sp, #20]
 8011c98:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8011c9c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8011c9e:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8011ca2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8011ca4:	491b      	ldr	r1, [pc, #108]	@ (8011d14 <uxr_prepare_output_stream_fragmented+0x190>)
 8011ca6:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8011caa:	4630      	mov	r0, r6
 8011cac:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8011cb0:	462a      	mov	r2, r5
 8011cb2:	f7f9 fc31 	bl	800b518 <ucdr_set_on_full_buffer_callback>
 8011cb6:	4620      	mov	r0, r4
 8011cb8:	b011      	add	sp, #68	@ 0x44
 8011cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cbe:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8011cc0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8011cc2:	4628      	mov	r0, r5
 8011cc4:	4798      	blx	r3
 8011cc6:	b920      	cbnz	r0, 8011cd2 <uxr_prepare_output_stream_fragmented+0x14e>
 8011cc8:	2400      	movs	r4, #0
 8011cca:	4620      	mov	r0, r4
 8011ccc:	b011      	add	sp, #68	@ 0x44
 8011cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cd2:	4620      	mov	r0, r4
 8011cd4:	f005 f93a 	bl	8016f4c <get_available_free_slots>
 8011cd8:	2800      	cmp	r0, #0
 8011cda:	f47f af6d 	bne.w	8011bb8 <uxr_prepare_output_stream_fragmented+0x34>
 8011cde:	e7f3      	b.n	8011cc8 <uxr_prepare_output_stream_fragmented+0x144>
 8011ce0:	4638      	mov	r0, r7
 8011ce2:	2101      	movs	r1, #1
 8011ce4:	f005 f952 	bl	8016f8c <uxr_seq_num_add>
 8011ce8:	8921      	ldrh	r1, [r4, #8]
 8011cea:	fbb0 f2f1 	udiv	r2, r0, r1
 8011cee:	fb01 0912 	mls	r9, r1, r2, r0
 8011cf2:	fa1f f289 	uxth.w	r2, r9
 8011cf6:	6863      	ldr	r3, [r4, #4]
 8011cf8:	fbb3 f9f1 	udiv	r9, r3, r1
 8011cfc:	6823      	ldr	r3, [r4, #0]
 8011cfe:	fb02 f909 	mul.w	r9, r2, r9
 8011d02:	f109 0904 	add.w	r9, r9, #4
 8011d06:	4499      	add	r9, r3
 8011d08:	4607      	mov	r7, r0
 8011d0a:	7b23      	ldrb	r3, [r4, #12]
 8011d0c:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8011d10:	e76b      	b.n	8011bea <uxr_prepare_output_stream_fragmented+0x66>
 8011d12:	bf00      	nop
 8011d14:	08011a11 	.word	0x08011a11

08011d18 <uxr_serialize_message_header>:
 8011d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d1a:	b083      	sub	sp, #12
 8011d1c:	4616      	mov	r6, r2
 8011d1e:	4604      	mov	r4, r0
 8011d20:	9301      	str	r3, [sp, #4]
 8011d22:	460d      	mov	r5, r1
 8011d24:	9f08      	ldr	r7, [sp, #32]
 8011d26:	f7f8 fae1 	bl	800a2ec <ucdr_serialize_uint8_t>
 8011d2a:	4631      	mov	r1, r6
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	f7f8 fadd 	bl	800a2ec <ucdr_serialize_uint8_t>
 8011d32:	9a01      	ldr	r2, [sp, #4]
 8011d34:	2101      	movs	r1, #1
 8011d36:	4620      	mov	r0, r4
 8011d38:	f7f8 fb84 	bl	800a444 <ucdr_serialize_endian_uint16_t>
 8011d3c:	062b      	lsls	r3, r5, #24
 8011d3e:	d501      	bpl.n	8011d44 <uxr_serialize_message_header+0x2c>
 8011d40:	b003      	add	sp, #12
 8011d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d44:	2204      	movs	r2, #4
 8011d46:	4639      	mov	r1, r7
 8011d48:	4620      	mov	r0, r4
 8011d4a:	b003      	add	sp, #12
 8011d4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011d50:	f004 ba9c 	b.w	801628c <ucdr_serialize_array_uint8_t>

08011d54 <uxr_deserialize_message_header>:
 8011d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d56:	b083      	sub	sp, #12
 8011d58:	4616      	mov	r6, r2
 8011d5a:	4604      	mov	r4, r0
 8011d5c:	9301      	str	r3, [sp, #4]
 8011d5e:	460d      	mov	r5, r1
 8011d60:	9f08      	ldr	r7, [sp, #32]
 8011d62:	f7f8 fad9 	bl	800a318 <ucdr_deserialize_uint8_t>
 8011d66:	4631      	mov	r1, r6
 8011d68:	4620      	mov	r0, r4
 8011d6a:	f7f8 fad5 	bl	800a318 <ucdr_deserialize_uint8_t>
 8011d6e:	9a01      	ldr	r2, [sp, #4]
 8011d70:	2101      	movs	r1, #1
 8011d72:	4620      	mov	r0, r4
 8011d74:	f7f8 fc5a 	bl	800a62c <ucdr_deserialize_endian_uint16_t>
 8011d78:	f995 3000 	ldrsb.w	r3, [r5]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	da01      	bge.n	8011d84 <uxr_deserialize_message_header+0x30>
 8011d80:	b003      	add	sp, #12
 8011d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d84:	2204      	movs	r2, #4
 8011d86:	4639      	mov	r1, r7
 8011d88:	4620      	mov	r0, r4
 8011d8a:	b003      	add	sp, #12
 8011d8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011d90:	f004 bae0 	b.w	8016354 <ucdr_deserialize_array_uint8_t>

08011d94 <uxr_serialize_submessage_header>:
 8011d94:	b530      	push	{r4, r5, lr}
 8011d96:	b083      	sub	sp, #12
 8011d98:	4615      	mov	r5, r2
 8011d9a:	4604      	mov	r4, r0
 8011d9c:	9301      	str	r3, [sp, #4]
 8011d9e:	f7f8 faa5 	bl	800a2ec <ucdr_serialize_uint8_t>
 8011da2:	4629      	mov	r1, r5
 8011da4:	4620      	mov	r0, r4
 8011da6:	f7f8 faa1 	bl	800a2ec <ucdr_serialize_uint8_t>
 8011daa:	9a01      	ldr	r2, [sp, #4]
 8011dac:	2101      	movs	r1, #1
 8011dae:	4620      	mov	r0, r4
 8011db0:	b003      	add	sp, #12
 8011db2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011db6:	f7f8 bb45 	b.w	800a444 <ucdr_serialize_endian_uint16_t>
 8011dba:	bf00      	nop

08011dbc <uxr_deserialize_submessage_header>:
 8011dbc:	b530      	push	{r4, r5, lr}
 8011dbe:	b083      	sub	sp, #12
 8011dc0:	4615      	mov	r5, r2
 8011dc2:	4604      	mov	r4, r0
 8011dc4:	9301      	str	r3, [sp, #4]
 8011dc6:	f7f8 faa7 	bl	800a318 <ucdr_deserialize_uint8_t>
 8011dca:	4629      	mov	r1, r5
 8011dcc:	4620      	mov	r0, r4
 8011dce:	f7f8 faa3 	bl	800a318 <ucdr_deserialize_uint8_t>
 8011dd2:	9a01      	ldr	r2, [sp, #4]
 8011dd4:	2101      	movs	r1, #1
 8011dd6:	4620      	mov	r0, r4
 8011dd8:	b003      	add	sp, #12
 8011dda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011dde:	f7f8 bc25 	b.w	800a62c <ucdr_deserialize_endian_uint16_t>
 8011de2:	bf00      	nop

08011de4 <uxr_serialize_CLIENT_Representation>:
 8011de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011de8:	2204      	movs	r2, #4
 8011dea:	460e      	mov	r6, r1
 8011dec:	4605      	mov	r5, r0
 8011dee:	f004 fa4d 	bl	801628c <ucdr_serialize_array_uint8_t>
 8011df2:	2202      	movs	r2, #2
 8011df4:	4607      	mov	r7, r0
 8011df6:	1d31      	adds	r1, r6, #4
 8011df8:	4628      	mov	r0, r5
 8011dfa:	f004 fa47 	bl	801628c <ucdr_serialize_array_uint8_t>
 8011dfe:	4038      	ands	r0, r7
 8011e00:	2202      	movs	r2, #2
 8011e02:	1db1      	adds	r1, r6, #6
 8011e04:	b2c7      	uxtb	r7, r0
 8011e06:	4628      	mov	r0, r5
 8011e08:	f004 fa40 	bl	801628c <ucdr_serialize_array_uint8_t>
 8011e0c:	2204      	movs	r2, #4
 8011e0e:	4007      	ands	r7, r0
 8011e10:	f106 0108 	add.w	r1, r6, #8
 8011e14:	4628      	mov	r0, r5
 8011e16:	f004 fa39 	bl	801628c <ucdr_serialize_array_uint8_t>
 8011e1a:	7b31      	ldrb	r1, [r6, #12]
 8011e1c:	4007      	ands	r7, r0
 8011e1e:	4628      	mov	r0, r5
 8011e20:	f7f8 fa64 	bl	800a2ec <ucdr_serialize_uint8_t>
 8011e24:	7b71      	ldrb	r1, [r6, #13]
 8011e26:	4007      	ands	r7, r0
 8011e28:	4628      	mov	r0, r5
 8011e2a:	f7f8 fa31 	bl	800a290 <ucdr_serialize_bool>
 8011e2e:	7b73      	ldrb	r3, [r6, #13]
 8011e30:	ea07 0800 	and.w	r8, r7, r0
 8011e34:	b93b      	cbnz	r3, 8011e46 <uxr_serialize_CLIENT_Representation+0x62>
 8011e36:	8bb1      	ldrh	r1, [r6, #28]
 8011e38:	4628      	mov	r0, r5
 8011e3a:	f7f8 fa83 	bl	800a344 <ucdr_serialize_uint16_t>
 8011e3e:	ea08 0000 	and.w	r0, r8, r0
 8011e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e46:	6931      	ldr	r1, [r6, #16]
 8011e48:	4628      	mov	r0, r5
 8011e4a:	f7f8 fc65 	bl	800a718 <ucdr_serialize_uint32_t>
 8011e4e:	6933      	ldr	r3, [r6, #16]
 8011e50:	b1e3      	cbz	r3, 8011e8c <uxr_serialize_CLIENT_Representation+0xa8>
 8011e52:	b1c0      	cbz	r0, 8011e86 <uxr_serialize_CLIENT_Representation+0xa2>
 8011e54:	4637      	mov	r7, r6
 8011e56:	f04f 0900 	mov.w	r9, #0
 8011e5a:	e001      	b.n	8011e60 <uxr_serialize_CLIENT_Representation+0x7c>
 8011e5c:	3708      	adds	r7, #8
 8011e5e:	b194      	cbz	r4, 8011e86 <uxr_serialize_CLIENT_Representation+0xa2>
 8011e60:	6979      	ldr	r1, [r7, #20]
 8011e62:	4628      	mov	r0, r5
 8011e64:	f004 fb32 	bl	80164cc <ucdr_serialize_string>
 8011e68:	69b9      	ldr	r1, [r7, #24]
 8011e6a:	4604      	mov	r4, r0
 8011e6c:	4628      	mov	r0, r5
 8011e6e:	f004 fb2d 	bl	80164cc <ucdr_serialize_string>
 8011e72:	6933      	ldr	r3, [r6, #16]
 8011e74:	f109 0901 	add.w	r9, r9, #1
 8011e78:	4004      	ands	r4, r0
 8011e7a:	4599      	cmp	r9, r3
 8011e7c:	b2e4      	uxtb	r4, r4
 8011e7e:	d3ed      	bcc.n	8011e5c <uxr_serialize_CLIENT_Representation+0x78>
 8011e80:	ea08 0804 	and.w	r8, r8, r4
 8011e84:	e7d7      	b.n	8011e36 <uxr_serialize_CLIENT_Representation+0x52>
 8011e86:	f04f 0800 	mov.w	r8, #0
 8011e8a:	e7d4      	b.n	8011e36 <uxr_serialize_CLIENT_Representation+0x52>
 8011e8c:	ea08 0800 	and.w	r8, r8, r0
 8011e90:	e7d1      	b.n	8011e36 <uxr_serialize_CLIENT_Representation+0x52>
 8011e92:	bf00      	nop

08011e94 <uxr_deserialize_CLIENT_Representation>:
 8011e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e98:	2204      	movs	r2, #4
 8011e9a:	460c      	mov	r4, r1
 8011e9c:	4605      	mov	r5, r0
 8011e9e:	f004 fa59 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 8011ea2:	2202      	movs	r2, #2
 8011ea4:	4607      	mov	r7, r0
 8011ea6:	1d21      	adds	r1, r4, #4
 8011ea8:	4628      	mov	r0, r5
 8011eaa:	f004 fa53 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 8011eae:	4038      	ands	r0, r7
 8011eb0:	2202      	movs	r2, #2
 8011eb2:	1da1      	adds	r1, r4, #6
 8011eb4:	b2c6      	uxtb	r6, r0
 8011eb6:	4628      	mov	r0, r5
 8011eb8:	f004 fa4c 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 8011ebc:	2204      	movs	r2, #4
 8011ebe:	4006      	ands	r6, r0
 8011ec0:	f104 0108 	add.w	r1, r4, #8
 8011ec4:	4628      	mov	r0, r5
 8011ec6:	f004 fa45 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 8011eca:	f104 010c 	add.w	r1, r4, #12
 8011ece:	4006      	ands	r6, r0
 8011ed0:	4628      	mov	r0, r5
 8011ed2:	f7f8 fa21 	bl	800a318 <ucdr_deserialize_uint8_t>
 8011ed6:	f104 010d 	add.w	r1, r4, #13
 8011eda:	ea06 0700 	and.w	r7, r6, r0
 8011ede:	4628      	mov	r0, r5
 8011ee0:	f7f8 f9ec 	bl	800a2bc <ucdr_deserialize_bool>
 8011ee4:	7b63      	ldrb	r3, [r4, #13]
 8011ee6:	4007      	ands	r7, r0
 8011ee8:	b93b      	cbnz	r3, 8011efa <uxr_deserialize_CLIENT_Representation+0x66>
 8011eea:	f104 011c 	add.w	r1, r4, #28
 8011eee:	4628      	mov	r0, r5
 8011ef0:	f7f8 fb28 	bl	800a544 <ucdr_deserialize_uint16_t>
 8011ef4:	4038      	ands	r0, r7
 8011ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011efa:	f104 0110 	add.w	r1, r4, #16
 8011efe:	4628      	mov	r0, r5
 8011f00:	f7f8 fd3a 	bl	800a978 <ucdr_deserialize_uint32_t>
 8011f04:	6923      	ldr	r3, [r4, #16]
 8011f06:	2b01      	cmp	r3, #1
 8011f08:	d903      	bls.n	8011f12 <uxr_deserialize_CLIENT_Representation+0x7e>
 8011f0a:	2301      	movs	r3, #1
 8011f0c:	75ab      	strb	r3, [r5, #22]
 8011f0e:	2700      	movs	r7, #0
 8011f10:	e7eb      	b.n	8011eea <uxr_deserialize_CLIENT_Representation+0x56>
 8011f12:	b30b      	cbz	r3, 8011f58 <uxr_deserialize_CLIENT_Representation+0xc4>
 8011f14:	2800      	cmp	r0, #0
 8011f16:	d0fa      	beq.n	8011f0e <uxr_deserialize_CLIENT_Representation+0x7a>
 8011f18:	46a0      	mov	r8, r4
 8011f1a:	f04f 0900 	mov.w	r9, #0
 8011f1e:	e001      	b.n	8011f24 <uxr_deserialize_CLIENT_Representation+0x90>
 8011f20:	2e00      	cmp	r6, #0
 8011f22:	d0f4      	beq.n	8011f0e <uxr_deserialize_CLIENT_Representation+0x7a>
 8011f24:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011f28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011f2c:	4628      	mov	r0, r5
 8011f2e:	f004 fadd 	bl	80164ec <ucdr_deserialize_string>
 8011f32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011f36:	4606      	mov	r6, r0
 8011f38:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011f3c:	4628      	mov	r0, r5
 8011f3e:	f004 fad5 	bl	80164ec <ucdr_deserialize_string>
 8011f42:	6923      	ldr	r3, [r4, #16]
 8011f44:	f109 0901 	add.w	r9, r9, #1
 8011f48:	4006      	ands	r6, r0
 8011f4a:	4599      	cmp	r9, r3
 8011f4c:	f108 0808 	add.w	r8, r8, #8
 8011f50:	b2f6      	uxtb	r6, r6
 8011f52:	d3e5      	bcc.n	8011f20 <uxr_deserialize_CLIENT_Representation+0x8c>
 8011f54:	4037      	ands	r7, r6
 8011f56:	e7c8      	b.n	8011eea <uxr_deserialize_CLIENT_Representation+0x56>
 8011f58:	4007      	ands	r7, r0
 8011f5a:	e7c6      	b.n	8011eea <uxr_deserialize_CLIENT_Representation+0x56>

08011f5c <uxr_serialize_AGENT_Representation>:
 8011f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f60:	2204      	movs	r2, #4
 8011f62:	460f      	mov	r7, r1
 8011f64:	4605      	mov	r5, r0
 8011f66:	f004 f991 	bl	801628c <ucdr_serialize_array_uint8_t>
 8011f6a:	2202      	movs	r2, #2
 8011f6c:	4604      	mov	r4, r0
 8011f6e:	1d39      	adds	r1, r7, #4
 8011f70:	4628      	mov	r0, r5
 8011f72:	f004 f98b 	bl	801628c <ucdr_serialize_array_uint8_t>
 8011f76:	4020      	ands	r0, r4
 8011f78:	2202      	movs	r2, #2
 8011f7a:	1db9      	adds	r1, r7, #6
 8011f7c:	b2c4      	uxtb	r4, r0
 8011f7e:	4628      	mov	r0, r5
 8011f80:	f004 f984 	bl	801628c <ucdr_serialize_array_uint8_t>
 8011f84:	7a39      	ldrb	r1, [r7, #8]
 8011f86:	4004      	ands	r4, r0
 8011f88:	4628      	mov	r0, r5
 8011f8a:	f7f8 f981 	bl	800a290 <ucdr_serialize_bool>
 8011f8e:	7a3b      	ldrb	r3, [r7, #8]
 8011f90:	ea00 0804 	and.w	r8, r0, r4
 8011f94:	b913      	cbnz	r3, 8011f9c <uxr_serialize_AGENT_Representation+0x40>
 8011f96:	4640      	mov	r0, r8
 8011f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f9c:	68f9      	ldr	r1, [r7, #12]
 8011f9e:	4628      	mov	r0, r5
 8011fa0:	f7f8 fbba 	bl	800a718 <ucdr_serialize_uint32_t>
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	b303      	cbz	r3, 8011fea <uxr_serialize_AGENT_Representation+0x8e>
 8011fa8:	b1d0      	cbz	r0, 8011fe0 <uxr_serialize_AGENT_Representation+0x84>
 8011faa:	463e      	mov	r6, r7
 8011fac:	f04f 0900 	mov.w	r9, #0
 8011fb0:	e001      	b.n	8011fb6 <uxr_serialize_AGENT_Representation+0x5a>
 8011fb2:	3608      	adds	r6, #8
 8011fb4:	b1a4      	cbz	r4, 8011fe0 <uxr_serialize_AGENT_Representation+0x84>
 8011fb6:	6931      	ldr	r1, [r6, #16]
 8011fb8:	4628      	mov	r0, r5
 8011fba:	f004 fa87 	bl	80164cc <ucdr_serialize_string>
 8011fbe:	6971      	ldr	r1, [r6, #20]
 8011fc0:	4604      	mov	r4, r0
 8011fc2:	4628      	mov	r0, r5
 8011fc4:	f004 fa82 	bl	80164cc <ucdr_serialize_string>
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	f109 0901 	add.w	r9, r9, #1
 8011fce:	4004      	ands	r4, r0
 8011fd0:	4599      	cmp	r9, r3
 8011fd2:	b2e4      	uxtb	r4, r4
 8011fd4:	d3ed      	bcc.n	8011fb2 <uxr_serialize_AGENT_Representation+0x56>
 8011fd6:	ea08 0804 	and.w	r8, r8, r4
 8011fda:	4640      	mov	r0, r8
 8011fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fe0:	f04f 0800 	mov.w	r8, #0
 8011fe4:	4640      	mov	r0, r8
 8011fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fea:	ea08 0800 	and.w	r8, r8, r0
 8011fee:	e7d2      	b.n	8011f96 <uxr_serialize_AGENT_Representation+0x3a>

08011ff0 <uxr_serialize_DATAWRITER_Representation>:
 8011ff0:	b570      	push	{r4, r5, r6, lr}
 8011ff2:	460d      	mov	r5, r1
 8011ff4:	7809      	ldrb	r1, [r1, #0]
 8011ff6:	4606      	mov	r6, r0
 8011ff8:	f7f8 f978 	bl	800a2ec <ucdr_serialize_uint8_t>
 8011ffc:	4604      	mov	r4, r0
 8011ffe:	b130      	cbz	r0, 801200e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012000:	782b      	ldrb	r3, [r5, #0]
 8012002:	2b02      	cmp	r3, #2
 8012004:	d00c      	beq.n	8012020 <uxr_serialize_DATAWRITER_Representation+0x30>
 8012006:	2b03      	cmp	r3, #3
 8012008:	d010      	beq.n	801202c <uxr_serialize_DATAWRITER_Representation+0x3c>
 801200a:	2b01      	cmp	r3, #1
 801200c:	d008      	beq.n	8012020 <uxr_serialize_DATAWRITER_Representation+0x30>
 801200e:	2202      	movs	r2, #2
 8012010:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012014:	4630      	mov	r0, r6
 8012016:	f004 f939 	bl	801628c <ucdr_serialize_array_uint8_t>
 801201a:	4020      	ands	r0, r4
 801201c:	b2c0      	uxtb	r0, r0
 801201e:	bd70      	pop	{r4, r5, r6, pc}
 8012020:	6869      	ldr	r1, [r5, #4]
 8012022:	4630      	mov	r0, r6
 8012024:	f004 fa52 	bl	80164cc <ucdr_serialize_string>
 8012028:	4604      	mov	r4, r0
 801202a:	e7f0      	b.n	801200e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801202c:	4629      	mov	r1, r5
 801202e:	4630      	mov	r0, r6
 8012030:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8012034:	3104      	adds	r1, #4
 8012036:	f004 fa1d 	bl	8016474 <ucdr_serialize_sequence_uint8_t>
 801203a:	4604      	mov	r4, r0
 801203c:	e7e7      	b.n	801200e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801203e:	bf00      	nop

08012040 <uxr_serialize_ObjectVariant.part.0>:
 8012040:	b570      	push	{r4, r5, r6, lr}
 8012042:	780b      	ldrb	r3, [r1, #0]
 8012044:	3b01      	subs	r3, #1
 8012046:	460c      	mov	r4, r1
 8012048:	4605      	mov	r5, r0
 801204a:	2b0d      	cmp	r3, #13
 801204c:	d854      	bhi.n	80120f8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801204e:	e8df f003 	tbb	[pc, r3]
 8012052:	0730      	.short	0x0730
 8012054:	07071b1b 	.word	0x07071b1b
 8012058:	0c530707 	.word	0x0c530707
 801205c:	494e0c0c 	.word	0x494e0c0c
 8012060:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012064:	3104      	adds	r1, #4
 8012066:	f7ff bfc3 	b.w	8011ff0 <uxr_serialize_DATAWRITER_Representation>
 801206a:	7909      	ldrb	r1, [r1, #4]
 801206c:	f7f8 f93e 	bl	800a2ec <ucdr_serialize_uint8_t>
 8012070:	b1e8      	cbz	r0, 80120ae <uxr_serialize_ObjectVariant.part.0+0x6e>
 8012072:	7923      	ldrb	r3, [r4, #4]
 8012074:	2b01      	cmp	r3, #1
 8012076:	d001      	beq.n	801207c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8012078:	2b02      	cmp	r3, #2
 801207a:	d13d      	bne.n	80120f8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801207c:	68a1      	ldr	r1, [r4, #8]
 801207e:	4628      	mov	r0, r5
 8012080:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012084:	f004 ba22 	b.w	80164cc <ucdr_serialize_string>
 8012088:	7909      	ldrb	r1, [r1, #4]
 801208a:	f7f8 f92f 	bl	800a2ec <ucdr_serialize_uint8_t>
 801208e:	4606      	mov	r6, r0
 8012090:	b120      	cbz	r0, 801209c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012092:	7923      	ldrb	r3, [r4, #4]
 8012094:	2b02      	cmp	r3, #2
 8012096:	d039      	beq.n	801210c <uxr_serialize_ObjectVariant.part.0+0xcc>
 8012098:	2b03      	cmp	r3, #3
 801209a:	d02f      	beq.n	80120fc <uxr_serialize_ObjectVariant.part.0+0xbc>
 801209c:	2202      	movs	r2, #2
 801209e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80120a2:	4628      	mov	r0, r5
 80120a4:	f004 f8f2 	bl	801628c <ucdr_serialize_array_uint8_t>
 80120a8:	4030      	ands	r0, r6
 80120aa:	b2c0      	uxtb	r0, r0
 80120ac:	bd70      	pop	{r4, r5, r6, pc}
 80120ae:	2000      	movs	r0, #0
 80120b0:	bd70      	pop	{r4, r5, r6, pc}
 80120b2:	7909      	ldrb	r1, [r1, #4]
 80120b4:	f7f8 f91a 	bl	800a2ec <ucdr_serialize_uint8_t>
 80120b8:	4606      	mov	r6, r0
 80120ba:	b158      	cbz	r0, 80120d4 <uxr_serialize_ObjectVariant.part.0+0x94>
 80120bc:	7923      	ldrb	r3, [r4, #4]
 80120be:	2b02      	cmp	r3, #2
 80120c0:	d003      	beq.n	80120ca <uxr_serialize_ObjectVariant.part.0+0x8a>
 80120c2:	2b03      	cmp	r3, #3
 80120c4:	d028      	beq.n	8012118 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80120c6:	2b01      	cmp	r3, #1
 80120c8:	d104      	bne.n	80120d4 <uxr_serialize_ObjectVariant.part.0+0x94>
 80120ca:	68a1      	ldr	r1, [r4, #8]
 80120cc:	4628      	mov	r0, r5
 80120ce:	f004 f9fd 	bl	80164cc <ucdr_serialize_string>
 80120d2:	4606      	mov	r6, r0
 80120d4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80120d8:	4628      	mov	r0, r5
 80120da:	f7f8 fe43 	bl	800ad64 <ucdr_serialize_int16_t>
 80120de:	4030      	ands	r0, r6
 80120e0:	b2c0      	uxtb	r0, r0
 80120e2:	bd70      	pop	{r4, r5, r6, pc}
 80120e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120e8:	3104      	adds	r1, #4
 80120ea:	f7ff be7b 	b.w	8011de4 <uxr_serialize_CLIENT_Representation>
 80120ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120f2:	3104      	adds	r1, #4
 80120f4:	f7ff bf32 	b.w	8011f5c <uxr_serialize_AGENT_Representation>
 80120f8:	2001      	movs	r0, #1
 80120fa:	bd70      	pop	{r4, r5, r6, pc}
 80120fc:	68a2      	ldr	r2, [r4, #8]
 80120fe:	f104 010c 	add.w	r1, r4, #12
 8012102:	4628      	mov	r0, r5
 8012104:	f004 f9b6 	bl	8016474 <ucdr_serialize_sequence_uint8_t>
 8012108:	4606      	mov	r6, r0
 801210a:	e7c7      	b.n	801209c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801210c:	68a1      	ldr	r1, [r4, #8]
 801210e:	4628      	mov	r0, r5
 8012110:	f004 f9dc 	bl	80164cc <ucdr_serialize_string>
 8012114:	4606      	mov	r6, r0
 8012116:	e7c1      	b.n	801209c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012118:	68a2      	ldr	r2, [r4, #8]
 801211a:	f104 010c 	add.w	r1, r4, #12
 801211e:	4628      	mov	r0, r5
 8012120:	f004 f9a8 	bl	8016474 <ucdr_serialize_sequence_uint8_t>
 8012124:	4606      	mov	r6, r0
 8012126:	e7d5      	b.n	80120d4 <uxr_serialize_ObjectVariant.part.0+0x94>

08012128 <uxr_deserialize_DATAWRITER_Representation>:
 8012128:	b570      	push	{r4, r5, r6, lr}
 801212a:	4606      	mov	r6, r0
 801212c:	460d      	mov	r5, r1
 801212e:	f7f8 f8f3 	bl	800a318 <ucdr_deserialize_uint8_t>
 8012132:	4604      	mov	r4, r0
 8012134:	b130      	cbz	r0, 8012144 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012136:	782b      	ldrb	r3, [r5, #0]
 8012138:	2b02      	cmp	r3, #2
 801213a:	d00c      	beq.n	8012156 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801213c:	2b03      	cmp	r3, #3
 801213e:	d012      	beq.n	8012166 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8012140:	2b01      	cmp	r3, #1
 8012142:	d008      	beq.n	8012156 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012144:	2202      	movs	r2, #2
 8012146:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801214a:	4630      	mov	r0, r6
 801214c:	f004 f902 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 8012150:	4020      	ands	r0, r4
 8012152:	b2c0      	uxtb	r0, r0
 8012154:	bd70      	pop	{r4, r5, r6, pc}
 8012156:	6869      	ldr	r1, [r5, #4]
 8012158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801215c:	4630      	mov	r0, r6
 801215e:	f004 f9c5 	bl	80164ec <ucdr_deserialize_string>
 8012162:	4604      	mov	r4, r0
 8012164:	e7ee      	b.n	8012144 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012166:	1d2b      	adds	r3, r5, #4
 8012168:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801216c:	f105 0108 	add.w	r1, r5, #8
 8012170:	4630      	mov	r0, r6
 8012172:	f004 f991 	bl	8016498 <ucdr_deserialize_sequence_uint8_t>
 8012176:	4604      	mov	r4, r0
 8012178:	e7e4      	b.n	8012144 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801217a:	bf00      	nop

0801217c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801217c:	b570      	push	{r4, r5, r6, lr}
 801217e:	460d      	mov	r5, r1
 8012180:	7809      	ldrb	r1, [r1, #0]
 8012182:	4606      	mov	r6, r0
 8012184:	f7f8 f884 	bl	800a290 <ucdr_serialize_bool>
 8012188:	782b      	ldrb	r3, [r5, #0]
 801218a:	4604      	mov	r4, r0
 801218c:	b94b      	cbnz	r3, 80121a2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801218e:	7a29      	ldrb	r1, [r5, #8]
 8012190:	4630      	mov	r0, r6
 8012192:	f7f8 f87d 	bl	800a290 <ucdr_serialize_bool>
 8012196:	7a2b      	ldrb	r3, [r5, #8]
 8012198:	4004      	ands	r4, r0
 801219a:	b2e4      	uxtb	r4, r4
 801219c:	b943      	cbnz	r3, 80121b0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801219e:	4620      	mov	r0, r4
 80121a0:	bd70      	pop	{r4, r5, r6, pc}
 80121a2:	6869      	ldr	r1, [r5, #4]
 80121a4:	4630      	mov	r0, r6
 80121a6:	f004 f991 	bl	80164cc <ucdr_serialize_string>
 80121aa:	4004      	ands	r4, r0
 80121ac:	b2e4      	uxtb	r4, r4
 80121ae:	e7ee      	b.n	801218e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80121b0:	68e9      	ldr	r1, [r5, #12]
 80121b2:	4630      	mov	r0, r6
 80121b4:	f004 f98a 	bl	80164cc <ucdr_serialize_string>
 80121b8:	4004      	ands	r4, r0
 80121ba:	4620      	mov	r0, r4
 80121bc:	bd70      	pop	{r4, r5, r6, pc}
 80121be:	bf00      	nop

080121c0 <uxr_serialize_OBJK_Topic_Binary>:
 80121c0:	b570      	push	{r4, r5, r6, lr}
 80121c2:	460d      	mov	r5, r1
 80121c4:	6809      	ldr	r1, [r1, #0]
 80121c6:	4606      	mov	r6, r0
 80121c8:	f004 f980 	bl	80164cc <ucdr_serialize_string>
 80121cc:	7929      	ldrb	r1, [r5, #4]
 80121ce:	4604      	mov	r4, r0
 80121d0:	4630      	mov	r0, r6
 80121d2:	f7f8 f85d 	bl	800a290 <ucdr_serialize_bool>
 80121d6:	792b      	ldrb	r3, [r5, #4]
 80121d8:	4004      	ands	r4, r0
 80121da:	b2e4      	uxtb	r4, r4
 80121dc:	b943      	cbnz	r3, 80121f0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80121de:	7b29      	ldrb	r1, [r5, #12]
 80121e0:	4630      	mov	r0, r6
 80121e2:	f7f8 f855 	bl	800a290 <ucdr_serialize_bool>
 80121e6:	7b2b      	ldrb	r3, [r5, #12]
 80121e8:	4004      	ands	r4, r0
 80121ea:	b93b      	cbnz	r3, 80121fc <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80121ec:	4620      	mov	r0, r4
 80121ee:	bd70      	pop	{r4, r5, r6, pc}
 80121f0:	68a9      	ldr	r1, [r5, #8]
 80121f2:	4630      	mov	r0, r6
 80121f4:	f004 f96a 	bl	80164cc <ucdr_serialize_string>
 80121f8:	4004      	ands	r4, r0
 80121fa:	e7f0      	b.n	80121de <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80121fc:	6929      	ldr	r1, [r5, #16]
 80121fe:	4630      	mov	r0, r6
 8012200:	f004 f964 	bl	80164cc <ucdr_serialize_string>
 8012204:	4004      	ands	r4, r0
 8012206:	b2e4      	uxtb	r4, r4
 8012208:	4620      	mov	r0, r4
 801220a:	bd70      	pop	{r4, r5, r6, pc}

0801220c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801220c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012210:	460c      	mov	r4, r1
 8012212:	7809      	ldrb	r1, [r1, #0]
 8012214:	4606      	mov	r6, r0
 8012216:	f7f8 f83b 	bl	800a290 <ucdr_serialize_bool>
 801221a:	7823      	ldrb	r3, [r4, #0]
 801221c:	4605      	mov	r5, r0
 801221e:	b96b      	cbnz	r3, 801223c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8012220:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012224:	4630      	mov	r0, r6
 8012226:	f7f8 f833 	bl	800a290 <ucdr_serialize_bool>
 801222a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801222e:	4005      	ands	r5, r0
 8012230:	b2ed      	uxtb	r5, r5
 8012232:	2b00      	cmp	r3, #0
 8012234:	d169      	bne.n	801230a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8012236:	4628      	mov	r0, r5
 8012238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801223c:	6861      	ldr	r1, [r4, #4]
 801223e:	4630      	mov	r0, r6
 8012240:	f7f8 fa6a 	bl	800a718 <ucdr_serialize_uint32_t>
 8012244:	6863      	ldr	r3, [r4, #4]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d06b      	beq.n	8012322 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801224a:	2800      	cmp	r0, #0
 801224c:	d067      	beq.n	801231e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801224e:	68a1      	ldr	r1, [r4, #8]
 8012250:	4630      	mov	r0, r6
 8012252:	f004 f93b 	bl	80164cc <ucdr_serialize_string>
 8012256:	6863      	ldr	r3, [r4, #4]
 8012258:	2b01      	cmp	r3, #1
 801225a:	d953      	bls.n	8012304 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801225c:	2800      	cmp	r0, #0
 801225e:	d05e      	beq.n	801231e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012260:	68e1      	ldr	r1, [r4, #12]
 8012262:	4630      	mov	r0, r6
 8012264:	f004 f932 	bl	80164cc <ucdr_serialize_string>
 8012268:	6863      	ldr	r3, [r4, #4]
 801226a:	2b02      	cmp	r3, #2
 801226c:	d94a      	bls.n	8012304 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801226e:	2800      	cmp	r0, #0
 8012270:	d055      	beq.n	801231e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012272:	6921      	ldr	r1, [r4, #16]
 8012274:	4630      	mov	r0, r6
 8012276:	f004 f929 	bl	80164cc <ucdr_serialize_string>
 801227a:	6863      	ldr	r3, [r4, #4]
 801227c:	2b03      	cmp	r3, #3
 801227e:	d941      	bls.n	8012304 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012280:	2800      	cmp	r0, #0
 8012282:	d04c      	beq.n	801231e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012284:	6961      	ldr	r1, [r4, #20]
 8012286:	4630      	mov	r0, r6
 8012288:	f004 f920 	bl	80164cc <ucdr_serialize_string>
 801228c:	6863      	ldr	r3, [r4, #4]
 801228e:	2b04      	cmp	r3, #4
 8012290:	d938      	bls.n	8012304 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012292:	2800      	cmp	r0, #0
 8012294:	d043      	beq.n	801231e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012296:	69a1      	ldr	r1, [r4, #24]
 8012298:	4630      	mov	r0, r6
 801229a:	f004 f917 	bl	80164cc <ucdr_serialize_string>
 801229e:	6863      	ldr	r3, [r4, #4]
 80122a0:	2b05      	cmp	r3, #5
 80122a2:	d92f      	bls.n	8012304 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80122a4:	2800      	cmp	r0, #0
 80122a6:	d03a      	beq.n	801231e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80122a8:	69e1      	ldr	r1, [r4, #28]
 80122aa:	4630      	mov	r0, r6
 80122ac:	f004 f90e 	bl	80164cc <ucdr_serialize_string>
 80122b0:	6863      	ldr	r3, [r4, #4]
 80122b2:	2b06      	cmp	r3, #6
 80122b4:	d926      	bls.n	8012304 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80122b6:	b390      	cbz	r0, 801231e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80122b8:	6a21      	ldr	r1, [r4, #32]
 80122ba:	4630      	mov	r0, r6
 80122bc:	f004 f906 	bl	80164cc <ucdr_serialize_string>
 80122c0:	6863      	ldr	r3, [r4, #4]
 80122c2:	2b07      	cmp	r3, #7
 80122c4:	d91e      	bls.n	8012304 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80122c6:	b350      	cbz	r0, 801231e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80122c8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80122ca:	4630      	mov	r0, r6
 80122cc:	f004 f8fe 	bl	80164cc <ucdr_serialize_string>
 80122d0:	6863      	ldr	r3, [r4, #4]
 80122d2:	2b08      	cmp	r3, #8
 80122d4:	d916      	bls.n	8012304 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80122d6:	b310      	cbz	r0, 801231e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80122d8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80122da:	4630      	mov	r0, r6
 80122dc:	f004 f8f6 	bl	80164cc <ucdr_serialize_string>
 80122e0:	6863      	ldr	r3, [r4, #4]
 80122e2:	2b09      	cmp	r3, #9
 80122e4:	d90e      	bls.n	8012304 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80122e6:	b1d0      	cbz	r0, 801231e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80122e8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80122ec:	2709      	movs	r7, #9
 80122ee:	e000      	b.n	80122f2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80122f0:	b1a8      	cbz	r0, 801231e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80122f2:	f858 1b04 	ldr.w	r1, [r8], #4
 80122f6:	4630      	mov	r0, r6
 80122f8:	f004 f8e8 	bl	80164cc <ucdr_serialize_string>
 80122fc:	6862      	ldr	r2, [r4, #4]
 80122fe:	3701      	adds	r7, #1
 8012300:	4297      	cmp	r7, r2
 8012302:	d3f5      	bcc.n	80122f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8012304:	4005      	ands	r5, r0
 8012306:	b2ed      	uxtb	r5, r5
 8012308:	e78a      	b.n	8012220 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801230a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801230c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012310:	4630      	mov	r0, r6
 8012312:	f004 f8af 	bl	8016474 <ucdr_serialize_sequence_uint8_t>
 8012316:	4005      	ands	r5, r0
 8012318:	4628      	mov	r0, r5
 801231a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801231e:	2500      	movs	r5, #0
 8012320:	e77e      	b.n	8012220 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012322:	4028      	ands	r0, r5
 8012324:	b2c5      	uxtb	r5, r0
 8012326:	e77b      	b.n	8012220 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08012328 <uxr_serialize_OBJK_Publisher_Binary>:
 8012328:	b570      	push	{r4, r5, r6, lr}
 801232a:	460d      	mov	r5, r1
 801232c:	7809      	ldrb	r1, [r1, #0]
 801232e:	4606      	mov	r6, r0
 8012330:	f7f7 ffae 	bl	800a290 <ucdr_serialize_bool>
 8012334:	782b      	ldrb	r3, [r5, #0]
 8012336:	4604      	mov	r4, r0
 8012338:	b94b      	cbnz	r3, 801234e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801233a:	7a29      	ldrb	r1, [r5, #8]
 801233c:	4630      	mov	r0, r6
 801233e:	f7f7 ffa7 	bl	800a290 <ucdr_serialize_bool>
 8012342:	7a2b      	ldrb	r3, [r5, #8]
 8012344:	4004      	ands	r4, r0
 8012346:	b2e4      	uxtb	r4, r4
 8012348:	b943      	cbnz	r3, 801235c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801234a:	4620      	mov	r0, r4
 801234c:	bd70      	pop	{r4, r5, r6, pc}
 801234e:	6869      	ldr	r1, [r5, #4]
 8012350:	4630      	mov	r0, r6
 8012352:	f004 f8bb 	bl	80164cc <ucdr_serialize_string>
 8012356:	4004      	ands	r4, r0
 8012358:	b2e4      	uxtb	r4, r4
 801235a:	e7ee      	b.n	801233a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801235c:	f105 010c 	add.w	r1, r5, #12
 8012360:	4630      	mov	r0, r6
 8012362:	f7ff ff53 	bl	801220c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8012366:	4004      	ands	r4, r0
 8012368:	4620      	mov	r0, r4
 801236a:	bd70      	pop	{r4, r5, r6, pc}

0801236c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801236c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012370:	4688      	mov	r8, r1
 8012372:	8809      	ldrh	r1, [r1, #0]
 8012374:	4681      	mov	r9, r0
 8012376:	f7f7 ffe5 	bl	800a344 <ucdr_serialize_uint16_t>
 801237a:	f898 1002 	ldrb.w	r1, [r8, #2]
 801237e:	4606      	mov	r6, r0
 8012380:	4648      	mov	r0, r9
 8012382:	f7f7 ff85 	bl	800a290 <ucdr_serialize_bool>
 8012386:	f898 3002 	ldrb.w	r3, [r8, #2]
 801238a:	4006      	ands	r6, r0
 801238c:	b2f5      	uxtb	r5, r6
 801238e:	b9eb      	cbnz	r3, 80123cc <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012390:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012394:	4648      	mov	r0, r9
 8012396:	f7f7 ff7b 	bl	800a290 <ucdr_serialize_bool>
 801239a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801239e:	4005      	ands	r5, r0
 80123a0:	bb7b      	cbnz	r3, 8012402 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80123a2:	f898 100c 	ldrb.w	r1, [r8, #12]
 80123a6:	4648      	mov	r0, r9
 80123a8:	f7f7 ff72 	bl	800a290 <ucdr_serialize_bool>
 80123ac:	f898 300c 	ldrb.w	r3, [r8, #12]
 80123b0:	4005      	ands	r5, r0
 80123b2:	b9f3      	cbnz	r3, 80123f2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80123b4:	f898 1014 	ldrb.w	r1, [r8, #20]
 80123b8:	4648      	mov	r0, r9
 80123ba:	f7f7 ff69 	bl	800a290 <ucdr_serialize_bool>
 80123be:	f898 3014 	ldrb.w	r3, [r8, #20]
 80123c2:	4005      	ands	r5, r0
 80123c4:	b94b      	cbnz	r3, 80123da <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80123c6:	4628      	mov	r0, r5
 80123c8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80123cc:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80123d0:	4648      	mov	r0, r9
 80123d2:	f7f7 ffb7 	bl	800a344 <ucdr_serialize_uint16_t>
 80123d6:	4005      	ands	r5, r0
 80123d8:	e7da      	b.n	8012390 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80123da:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80123de:	f108 011c 	add.w	r1, r8, #28
 80123e2:	4648      	mov	r0, r9
 80123e4:	f004 f846 	bl	8016474 <ucdr_serialize_sequence_uint8_t>
 80123e8:	4028      	ands	r0, r5
 80123ea:	b2c5      	uxtb	r5, r0
 80123ec:	4628      	mov	r0, r5
 80123ee:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80123f2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80123f6:	4648      	mov	r0, r9
 80123f8:	f7f8 f98e 	bl	800a718 <ucdr_serialize_uint32_t>
 80123fc:	4028      	ands	r0, r5
 80123fe:	b2c5      	uxtb	r5, r0
 8012400:	e7d8      	b.n	80123b4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8012402:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012406:	4648      	mov	r0, r9
 8012408:	f7f8 f986 	bl	800a718 <ucdr_serialize_uint32_t>
 801240c:	4028      	ands	r0, r5
 801240e:	b2c5      	uxtb	r5, r0
 8012410:	e7c7      	b.n	80123a2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012412:	bf00      	nop

08012414 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012416:	2202      	movs	r2, #2
 8012418:	460d      	mov	r5, r1
 801241a:	4606      	mov	r6, r0
 801241c:	f003 ff36 	bl	801628c <ucdr_serialize_array_uint8_t>
 8012420:	78a9      	ldrb	r1, [r5, #2]
 8012422:	4604      	mov	r4, r0
 8012424:	4630      	mov	r0, r6
 8012426:	f7f7 ff33 	bl	800a290 <ucdr_serialize_bool>
 801242a:	78ab      	ldrb	r3, [r5, #2]
 801242c:	4004      	ands	r4, r0
 801242e:	b2e4      	uxtb	r4, r4
 8012430:	b90b      	cbnz	r3, 8012436 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012432:	4620      	mov	r0, r4
 8012434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012436:	f105 0108 	add.w	r1, r5, #8
 801243a:	4630      	mov	r0, r6
 801243c:	f7ff ff96 	bl	801236c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012440:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8012444:	4607      	mov	r7, r0
 8012446:	4630      	mov	r0, r6
 8012448:	f7f7 ff22 	bl	800a290 <ucdr_serialize_bool>
 801244c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8012450:	4038      	ands	r0, r7
 8012452:	b2c7      	uxtb	r7, r0
 8012454:	b913      	cbnz	r3, 801245c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8012456:	403c      	ands	r4, r7
 8012458:	4620      	mov	r0, r4
 801245a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801245c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8012460:	4630      	mov	r0, r6
 8012462:	f7f8 fbaf 	bl	800abc4 <ucdr_serialize_uint64_t>
 8012466:	4007      	ands	r7, r0
 8012468:	e7f5      	b.n	8012456 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801246a:	bf00      	nop

0801246c <uxr_serialize_OBJK_Requester_Binary>:
 801246c:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8012470:	460f      	mov	r7, r1
 8012472:	6809      	ldr	r1, [r1, #0]
 8012474:	4680      	mov	r8, r0
 8012476:	f004 f829 	bl	80164cc <ucdr_serialize_string>
 801247a:	6879      	ldr	r1, [r7, #4]
 801247c:	4605      	mov	r5, r0
 801247e:	4640      	mov	r0, r8
 8012480:	f004 f824 	bl	80164cc <ucdr_serialize_string>
 8012484:	68b9      	ldr	r1, [r7, #8]
 8012486:	4005      	ands	r5, r0
 8012488:	4640      	mov	r0, r8
 801248a:	f004 f81f 	bl	80164cc <ucdr_serialize_string>
 801248e:	b2ec      	uxtb	r4, r5
 8012490:	4004      	ands	r4, r0
 8012492:	7b39      	ldrb	r1, [r7, #12]
 8012494:	4640      	mov	r0, r8
 8012496:	f7f7 fefb 	bl	800a290 <ucdr_serialize_bool>
 801249a:	7b3b      	ldrb	r3, [r7, #12]
 801249c:	4004      	ands	r4, r0
 801249e:	b94b      	cbnz	r3, 80124b4 <uxr_serialize_OBJK_Requester_Binary+0x48>
 80124a0:	7d39      	ldrb	r1, [r7, #20]
 80124a2:	4640      	mov	r0, r8
 80124a4:	f7f7 fef4 	bl	800a290 <ucdr_serialize_bool>
 80124a8:	7d3b      	ldrb	r3, [r7, #20]
 80124aa:	4004      	ands	r4, r0
 80124ac:	b943      	cbnz	r3, 80124c0 <uxr_serialize_OBJK_Requester_Binary+0x54>
 80124ae:	4620      	mov	r0, r4
 80124b0:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 80124b4:	6939      	ldr	r1, [r7, #16]
 80124b6:	4640      	mov	r0, r8
 80124b8:	f004 f808 	bl	80164cc <ucdr_serialize_string>
 80124bc:	4004      	ands	r4, r0
 80124be:	e7ef      	b.n	80124a0 <uxr_serialize_OBJK_Requester_Binary+0x34>
 80124c0:	69b9      	ldr	r1, [r7, #24]
 80124c2:	4640      	mov	r0, r8
 80124c4:	f004 f802 	bl	80164cc <ucdr_serialize_string>
 80124c8:	4004      	ands	r4, r0
 80124ca:	b2e4      	uxtb	r4, r4
 80124cc:	4620      	mov	r0, r4
 80124ce:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 80124d2:	bf00      	nop

080124d4 <uxr_deserialize_ObjectVariant>:
 80124d4:	b570      	push	{r4, r5, r6, lr}
 80124d6:	4605      	mov	r5, r0
 80124d8:	460e      	mov	r6, r1
 80124da:	f7f7 ff1d 	bl	800a318 <ucdr_deserialize_uint8_t>
 80124de:	b168      	cbz	r0, 80124fc <uxr_deserialize_ObjectVariant+0x28>
 80124e0:	7833      	ldrb	r3, [r6, #0]
 80124e2:	3b01      	subs	r3, #1
 80124e4:	4604      	mov	r4, r0
 80124e6:	2b0d      	cmp	r3, #13
 80124e8:	d809      	bhi.n	80124fe <uxr_deserialize_ObjectVariant+0x2a>
 80124ea:	e8df f003 	tbb	[pc, r3]
 80124ee:	0a41      	.short	0x0a41
 80124f0:	0a0a2323 	.word	0x0a0a2323
 80124f4:	10080a0a 	.word	0x10080a0a
 80124f8:	565c1010 	.word	0x565c1010
 80124fc:	2400      	movs	r4, #0
 80124fe:	4620      	mov	r0, r4
 8012500:	bd70      	pop	{r4, r5, r6, pc}
 8012502:	1d31      	adds	r1, r6, #4
 8012504:	4628      	mov	r0, r5
 8012506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801250a:	f7ff be0d 	b.w	8012128 <uxr_deserialize_DATAWRITER_Representation>
 801250e:	1d31      	adds	r1, r6, #4
 8012510:	4628      	mov	r0, r5
 8012512:	f7f7 ff01 	bl	800a318 <ucdr_deserialize_uint8_t>
 8012516:	2800      	cmp	r0, #0
 8012518:	d0f0      	beq.n	80124fc <uxr_deserialize_ObjectVariant+0x28>
 801251a:	7933      	ldrb	r3, [r6, #4]
 801251c:	2b01      	cmp	r3, #1
 801251e:	d001      	beq.n	8012524 <uxr_deserialize_ObjectVariant+0x50>
 8012520:	2b02      	cmp	r3, #2
 8012522:	d1ec      	bne.n	80124fe <uxr_deserialize_ObjectVariant+0x2a>
 8012524:	68b1      	ldr	r1, [r6, #8]
 8012526:	4628      	mov	r0, r5
 8012528:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801252c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012530:	f003 bfdc 	b.w	80164ec <ucdr_deserialize_string>
 8012534:	1d31      	adds	r1, r6, #4
 8012536:	4628      	mov	r0, r5
 8012538:	f7f7 feee 	bl	800a318 <ucdr_deserialize_uint8_t>
 801253c:	4604      	mov	r4, r0
 801253e:	b170      	cbz	r0, 801255e <uxr_deserialize_ObjectVariant+0x8a>
 8012540:	7933      	ldrb	r3, [r6, #4]
 8012542:	2b02      	cmp	r3, #2
 8012544:	d04c      	beq.n	80125e0 <uxr_deserialize_ObjectVariant+0x10c>
 8012546:	2b03      	cmp	r3, #3
 8012548:	d109      	bne.n	801255e <uxr_deserialize_ObjectVariant+0x8a>
 801254a:	f106 0308 	add.w	r3, r6, #8
 801254e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012552:	f106 010c 	add.w	r1, r6, #12
 8012556:	4628      	mov	r0, r5
 8012558:	f003 ff9e 	bl	8016498 <ucdr_deserialize_sequence_uint8_t>
 801255c:	4604      	mov	r4, r0
 801255e:	2202      	movs	r2, #2
 8012560:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012564:	4628      	mov	r0, r5
 8012566:	f003 fef5 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 801256a:	4020      	ands	r0, r4
 801256c:	b2c4      	uxtb	r4, r0
 801256e:	e7c6      	b.n	80124fe <uxr_deserialize_ObjectVariant+0x2a>
 8012570:	1d31      	adds	r1, r6, #4
 8012572:	4628      	mov	r0, r5
 8012574:	f7f7 fed0 	bl	800a318 <ucdr_deserialize_uint8_t>
 8012578:	4604      	mov	r4, r0
 801257a:	b130      	cbz	r0, 801258a <uxr_deserialize_ObjectVariant+0xb6>
 801257c:	7933      	ldrb	r3, [r6, #4]
 801257e:	2b02      	cmp	r3, #2
 8012580:	d036      	beq.n	80125f0 <uxr_deserialize_ObjectVariant+0x11c>
 8012582:	2b03      	cmp	r3, #3
 8012584:	d03c      	beq.n	8012600 <uxr_deserialize_ObjectVariant+0x12c>
 8012586:	2b01      	cmp	r3, #1
 8012588:	d032      	beq.n	80125f0 <uxr_deserialize_ObjectVariant+0x11c>
 801258a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801258e:	4628      	mov	r0, r5
 8012590:	f7f8 fc68 	bl	800ae64 <ucdr_deserialize_int16_t>
 8012594:	4020      	ands	r0, r4
 8012596:	b2c4      	uxtb	r4, r0
 8012598:	e7b1      	b.n	80124fe <uxr_deserialize_ObjectVariant+0x2a>
 801259a:	1d31      	adds	r1, r6, #4
 801259c:	4628      	mov	r0, r5
 801259e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80125a2:	f7ff bc77 	b.w	8011e94 <uxr_deserialize_CLIENT_Representation>
 80125a6:	2204      	movs	r2, #4
 80125a8:	18b1      	adds	r1, r6, r2
 80125aa:	4628      	mov	r0, r5
 80125ac:	f003 fed2 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 80125b0:	2202      	movs	r2, #2
 80125b2:	f106 0108 	add.w	r1, r6, #8
 80125b6:	4604      	mov	r4, r0
 80125b8:	4628      	mov	r0, r5
 80125ba:	f003 fecb 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 80125be:	2202      	movs	r2, #2
 80125c0:	4004      	ands	r4, r0
 80125c2:	f106 010a 	add.w	r1, r6, #10
 80125c6:	4628      	mov	r0, r5
 80125c8:	f003 fec4 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 80125cc:	b2e4      	uxtb	r4, r4
 80125ce:	4603      	mov	r3, r0
 80125d0:	f106 010c 	add.w	r1, r6, #12
 80125d4:	4628      	mov	r0, r5
 80125d6:	401c      	ands	r4, r3
 80125d8:	f7f7 fe70 	bl	800a2bc <ucdr_deserialize_bool>
 80125dc:	4004      	ands	r4, r0
 80125de:	e78e      	b.n	80124fe <uxr_deserialize_ObjectVariant+0x2a>
 80125e0:	68b1      	ldr	r1, [r6, #8]
 80125e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80125e6:	4628      	mov	r0, r5
 80125e8:	f003 ff80 	bl	80164ec <ucdr_deserialize_string>
 80125ec:	4604      	mov	r4, r0
 80125ee:	e7b6      	b.n	801255e <uxr_deserialize_ObjectVariant+0x8a>
 80125f0:	68b1      	ldr	r1, [r6, #8]
 80125f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80125f6:	4628      	mov	r0, r5
 80125f8:	f003 ff78 	bl	80164ec <ucdr_deserialize_string>
 80125fc:	4604      	mov	r4, r0
 80125fe:	e7c4      	b.n	801258a <uxr_deserialize_ObjectVariant+0xb6>
 8012600:	f106 0308 	add.w	r3, r6, #8
 8012604:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012608:	f106 010c 	add.w	r1, r6, #12
 801260c:	4628      	mov	r0, r5
 801260e:	f003 ff43 	bl	8016498 <ucdr_deserialize_sequence_uint8_t>
 8012612:	4604      	mov	r4, r0
 8012614:	e7b9      	b.n	801258a <uxr_deserialize_ObjectVariant+0xb6>
 8012616:	bf00      	nop

08012618 <uxr_deserialize_BaseObjectRequest>:
 8012618:	b570      	push	{r4, r5, r6, lr}
 801261a:	2202      	movs	r2, #2
 801261c:	4605      	mov	r5, r0
 801261e:	460e      	mov	r6, r1
 8012620:	f003 fe98 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 8012624:	2202      	movs	r2, #2
 8012626:	4604      	mov	r4, r0
 8012628:	18b1      	adds	r1, r6, r2
 801262a:	4628      	mov	r0, r5
 801262c:	f003 fe92 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 8012630:	4020      	ands	r0, r4
 8012632:	b2c0      	uxtb	r0, r0
 8012634:	bd70      	pop	{r4, r5, r6, pc}
 8012636:	bf00      	nop

08012638 <uxr_serialize_ActivityInfoVariant>:
 8012638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801263c:	460d      	mov	r5, r1
 801263e:	7809      	ldrb	r1, [r1, #0]
 8012640:	4607      	mov	r7, r0
 8012642:	f7f7 fe53 	bl	800a2ec <ucdr_serialize_uint8_t>
 8012646:	4681      	mov	r9, r0
 8012648:	b138      	cbz	r0, 801265a <uxr_serialize_ActivityInfoVariant+0x22>
 801264a:	782b      	ldrb	r3, [r5, #0]
 801264c:	2b06      	cmp	r3, #6
 801264e:	f000 8082 	beq.w	8012756 <uxr_serialize_ActivityInfoVariant+0x11e>
 8012652:	2b0d      	cmp	r3, #13
 8012654:	d016      	beq.n	8012684 <uxr_serialize_ActivityInfoVariant+0x4c>
 8012656:	2b05      	cmp	r3, #5
 8012658:	d002      	beq.n	8012660 <uxr_serialize_ActivityInfoVariant+0x28>
 801265a:	4648      	mov	r0, r9
 801265c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012660:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012664:	4638      	mov	r0, r7
 8012666:	f7f8 fb7d 	bl	800ad64 <ucdr_serialize_int16_t>
 801266a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 801266e:	4681      	mov	r9, r0
 8012670:	4638      	mov	r0, r7
 8012672:	f7f8 faa7 	bl	800abc4 <ucdr_serialize_uint64_t>
 8012676:	ea09 0000 	and.w	r0, r9, r0
 801267a:	fa5f f980 	uxtb.w	r9, r0
 801267e:	4648      	mov	r0, r9
 8012680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012684:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012688:	4638      	mov	r0, r7
 801268a:	f7f8 fb6b 	bl	800ad64 <ucdr_serialize_int16_t>
 801268e:	68e9      	ldr	r1, [r5, #12]
 8012690:	4681      	mov	r9, r0
 8012692:	4638      	mov	r0, r7
 8012694:	f7f8 f840 	bl	800a718 <ucdr_serialize_uint32_t>
 8012698:	68eb      	ldr	r3, [r5, #12]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d0eb      	beq.n	8012676 <uxr_serialize_ActivityInfoVariant+0x3e>
 801269e:	b320      	cbz	r0, 80126ea <uxr_serialize_ActivityInfoVariant+0xb2>
 80126a0:	f105 080c 	add.w	r8, r5, #12
 80126a4:	2600      	movs	r6, #0
 80126a6:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 80126aa:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80126ae:	f89a 1010 	ldrb.w	r1, [sl, #16]
 80126b2:	4638      	mov	r0, r7
 80126b4:	f7f7 fe1a 	bl	800a2ec <ucdr_serialize_uint8_t>
 80126b8:	2800      	cmp	r0, #0
 80126ba:	d053      	beq.n	8012764 <uxr_serialize_ActivityInfoVariant+0x12c>
 80126bc:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80126c0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80126c4:	0074      	lsls	r4, r6, #1
 80126c6:	00c9      	lsls	r1, r1, #3
 80126c8:	2b03      	cmp	r3, #3
 80126ca:	d854      	bhi.n	8012776 <uxr_serialize_ActivityInfoVariant+0x13e>
 80126cc:	e8df f003 	tbb	[pc, r3]
 80126d0:	02102132 	.word	0x02102132
 80126d4:	4441      	add	r1, r8
 80126d6:	4638      	mov	r0, r7
 80126d8:	6889      	ldr	r1, [r1, #8]
 80126da:	f003 fef7 	bl	80164cc <ucdr_serialize_string>
 80126de:	68ea      	ldr	r2, [r5, #12]
 80126e0:	3601      	adds	r6, #1
 80126e2:	4296      	cmp	r6, r2
 80126e4:	d242      	bcs.n	801276c <uxr_serialize_ActivityInfoVariant+0x134>
 80126e6:	2800      	cmp	r0, #0
 80126e8:	d1dd      	bne.n	80126a6 <uxr_serialize_ActivityInfoVariant+0x6e>
 80126ea:	f04f 0900 	mov.w	r9, #0
 80126ee:	e7b4      	b.n	801265a <uxr_serialize_ActivityInfoVariant+0x22>
 80126f0:	3108      	adds	r1, #8
 80126f2:	4441      	add	r1, r8
 80126f4:	2210      	movs	r2, #16
 80126f6:	4638      	mov	r0, r7
 80126f8:	f003 fdc8 	bl	801628c <ucdr_serialize_array_uint8_t>
 80126fc:	4434      	add	r4, r6
 80126fe:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012702:	4604      	mov	r4, r0
 8012704:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012706:	4638      	mov	r0, r7
 8012708:	f7f8 f806 	bl	800a718 <ucdr_serialize_uint32_t>
 801270c:	4020      	ands	r0, r4
 801270e:	b2c0      	uxtb	r0, r0
 8012710:	e7e5      	b.n	80126de <uxr_serialize_ActivityInfoVariant+0xa6>
 8012712:	3108      	adds	r1, #8
 8012714:	4441      	add	r1, r8
 8012716:	2204      	movs	r2, #4
 8012718:	4638      	mov	r0, r7
 801271a:	f003 fdb7 	bl	801628c <ucdr_serialize_array_uint8_t>
 801271e:	4434      	add	r4, r6
 8012720:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012724:	4604      	mov	r4, r0
 8012726:	8b19      	ldrh	r1, [r3, #24]
 8012728:	4638      	mov	r0, r7
 801272a:	f7f7 fe0b 	bl	800a344 <ucdr_serialize_uint16_t>
 801272e:	4020      	ands	r0, r4
 8012730:	b2c0      	uxtb	r0, r0
 8012732:	e7d4      	b.n	80126de <uxr_serialize_ActivityInfoVariant+0xa6>
 8012734:	3108      	adds	r1, #8
 8012736:	4441      	add	r1, r8
 8012738:	2202      	movs	r2, #2
 801273a:	4638      	mov	r0, r7
 801273c:	f003 fda6 	bl	801628c <ucdr_serialize_array_uint8_t>
 8012740:	4434      	add	r4, r6
 8012742:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012746:	4604      	mov	r4, r0
 8012748:	7d99      	ldrb	r1, [r3, #22]
 801274a:	4638      	mov	r0, r7
 801274c:	f7f7 fdce 	bl	800a2ec <ucdr_serialize_uint8_t>
 8012750:	4020      	ands	r0, r4
 8012752:	b2c0      	uxtb	r0, r0
 8012754:	e7c3      	b.n	80126de <uxr_serialize_ActivityInfoVariant+0xa6>
 8012756:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801275a:	4638      	mov	r0, r7
 801275c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012760:	f7f8 bb00 	b.w	800ad64 <ucdr_serialize_int16_t>
 8012764:	68ea      	ldr	r2, [r5, #12]
 8012766:	3601      	adds	r6, #1
 8012768:	42b2      	cmp	r2, r6
 801276a:	d8be      	bhi.n	80126ea <uxr_serialize_ActivityInfoVariant+0xb2>
 801276c:	ea09 0900 	and.w	r9, r9, r0
 8012770:	fa5f f989 	uxtb.w	r9, r9
 8012774:	e771      	b.n	801265a <uxr_serialize_ActivityInfoVariant+0x22>
 8012776:	68eb      	ldr	r3, [r5, #12]
 8012778:	3601      	adds	r6, #1
 801277a:	429e      	cmp	r6, r3
 801277c:	f10a 0a18 	add.w	sl, sl, #24
 8012780:	d395      	bcc.n	80126ae <uxr_serialize_ActivityInfoVariant+0x76>
 8012782:	e76a      	b.n	801265a <uxr_serialize_ActivityInfoVariant+0x22>

08012784 <uxr_deserialize_BaseObjectReply>:
 8012784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012788:	2202      	movs	r2, #2
 801278a:	4606      	mov	r6, r0
 801278c:	460f      	mov	r7, r1
 801278e:	f003 fde1 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 8012792:	2202      	movs	r2, #2
 8012794:	18b9      	adds	r1, r7, r2
 8012796:	4605      	mov	r5, r0
 8012798:	4630      	mov	r0, r6
 801279a:	f003 fddb 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 801279e:	1d39      	adds	r1, r7, #4
 80127a0:	4680      	mov	r8, r0
 80127a2:	4630      	mov	r0, r6
 80127a4:	f7f7 fdb8 	bl	800a318 <ucdr_deserialize_uint8_t>
 80127a8:	1d79      	adds	r1, r7, #5
 80127aa:	4604      	mov	r4, r0
 80127ac:	4630      	mov	r0, r6
 80127ae:	f7f7 fdb3 	bl	800a318 <ucdr_deserialize_uint8_t>
 80127b2:	ea05 0508 	and.w	r5, r5, r8
 80127b6:	402c      	ands	r4, r5
 80127b8:	4020      	ands	r0, r4
 80127ba:	b2c0      	uxtb	r0, r0
 80127bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080127c0 <uxr_serialize_ReadSpecification>:
 80127c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127c4:	460e      	mov	r6, r1
 80127c6:	7809      	ldrb	r1, [r1, #0]
 80127c8:	4607      	mov	r7, r0
 80127ca:	f7f7 fd8f 	bl	800a2ec <ucdr_serialize_uint8_t>
 80127ce:	7871      	ldrb	r1, [r6, #1]
 80127d0:	4604      	mov	r4, r0
 80127d2:	4638      	mov	r0, r7
 80127d4:	f7f7 fd8a 	bl	800a2ec <ucdr_serialize_uint8_t>
 80127d8:	78b1      	ldrb	r1, [r6, #2]
 80127da:	4004      	ands	r4, r0
 80127dc:	4638      	mov	r0, r7
 80127de:	f7f7 fd57 	bl	800a290 <ucdr_serialize_bool>
 80127e2:	78b3      	ldrb	r3, [r6, #2]
 80127e4:	b2e4      	uxtb	r4, r4
 80127e6:	4004      	ands	r4, r0
 80127e8:	b94b      	cbnz	r3, 80127fe <uxr_serialize_ReadSpecification+0x3e>
 80127ea:	7a31      	ldrb	r1, [r6, #8]
 80127ec:	4638      	mov	r0, r7
 80127ee:	f7f7 fd4f 	bl	800a290 <ucdr_serialize_bool>
 80127f2:	7a33      	ldrb	r3, [r6, #8]
 80127f4:	4004      	ands	r4, r0
 80127f6:	b943      	cbnz	r3, 801280a <uxr_serialize_ReadSpecification+0x4a>
 80127f8:	4620      	mov	r0, r4
 80127fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127fe:	6871      	ldr	r1, [r6, #4]
 8012800:	4638      	mov	r0, r7
 8012802:	f003 fe63 	bl	80164cc <ucdr_serialize_string>
 8012806:	4004      	ands	r4, r0
 8012808:	e7ef      	b.n	80127ea <uxr_serialize_ReadSpecification+0x2a>
 801280a:	8971      	ldrh	r1, [r6, #10]
 801280c:	4638      	mov	r0, r7
 801280e:	f7f7 fd99 	bl	800a344 <ucdr_serialize_uint16_t>
 8012812:	89b1      	ldrh	r1, [r6, #12]
 8012814:	4605      	mov	r5, r0
 8012816:	4638      	mov	r0, r7
 8012818:	f7f7 fd94 	bl	800a344 <ucdr_serialize_uint16_t>
 801281c:	89f1      	ldrh	r1, [r6, #14]
 801281e:	4005      	ands	r5, r0
 8012820:	4638      	mov	r0, r7
 8012822:	f7f7 fd8f 	bl	800a344 <ucdr_serialize_uint16_t>
 8012826:	8a31      	ldrh	r1, [r6, #16]
 8012828:	4680      	mov	r8, r0
 801282a:	4638      	mov	r0, r7
 801282c:	f7f7 fd8a 	bl	800a344 <ucdr_serialize_uint16_t>
 8012830:	b2ed      	uxtb	r5, r5
 8012832:	4025      	ands	r5, r4
 8012834:	ea08 0505 	and.w	r5, r8, r5
 8012838:	ea00 0405 	and.w	r4, r0, r5
 801283c:	4620      	mov	r0, r4
 801283e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012842:	bf00      	nop

08012844 <uxr_serialize_CREATE_CLIENT_Payload>:
 8012844:	f7ff bace 	b.w	8011de4 <uxr_serialize_CLIENT_Representation>

08012848 <uxr_serialize_CREATE_Payload>:
 8012848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801284a:	2202      	movs	r2, #2
 801284c:	4607      	mov	r7, r0
 801284e:	460e      	mov	r6, r1
 8012850:	f003 fd1c 	bl	801628c <ucdr_serialize_array_uint8_t>
 8012854:	2202      	movs	r2, #2
 8012856:	18b1      	adds	r1, r6, r2
 8012858:	4605      	mov	r5, r0
 801285a:	4638      	mov	r0, r7
 801285c:	f003 fd16 	bl	801628c <ucdr_serialize_array_uint8_t>
 8012860:	7931      	ldrb	r1, [r6, #4]
 8012862:	4604      	mov	r4, r0
 8012864:	4638      	mov	r0, r7
 8012866:	f7f7 fd41 	bl	800a2ec <ucdr_serialize_uint8_t>
 801286a:	b170      	cbz	r0, 801288a <uxr_serialize_CREATE_Payload+0x42>
 801286c:	7933      	ldrb	r3, [r6, #4]
 801286e:	402c      	ands	r4, r5
 8012870:	3b01      	subs	r3, #1
 8012872:	b2e4      	uxtb	r4, r4
 8012874:	2b0d      	cmp	r3, #13
 8012876:	d809      	bhi.n	801288c <uxr_serialize_CREATE_Payload+0x44>
 8012878:	e8df f003 	tbb	[pc, r3]
 801287c:	23230a4c 	.word	0x23230a4c
 8012880:	0a0a0a0a 	.word	0x0a0a0a0a
 8012884:	12121208 	.word	0x12121208
 8012888:	3e45      	.short	0x3e45
 801288a:	2400      	movs	r4, #0
 801288c:	4620      	mov	r0, r4
 801288e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012890:	f106 0108 	add.w	r1, r6, #8
 8012894:	4638      	mov	r0, r7
 8012896:	f7ff fbab 	bl	8011ff0 <uxr_serialize_DATAWRITER_Representation>
 801289a:	4004      	ands	r4, r0
 801289c:	4620      	mov	r0, r4
 801289e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128a0:	7a31      	ldrb	r1, [r6, #8]
 80128a2:	4638      	mov	r0, r7
 80128a4:	f7f7 fd22 	bl	800a2ec <ucdr_serialize_uint8_t>
 80128a8:	2800      	cmp	r0, #0
 80128aa:	d0ee      	beq.n	801288a <uxr_serialize_CREATE_Payload+0x42>
 80128ac:	7a33      	ldrb	r3, [r6, #8]
 80128ae:	2b01      	cmp	r3, #1
 80128b0:	d001      	beq.n	80128b6 <uxr_serialize_CREATE_Payload+0x6e>
 80128b2:	2b02      	cmp	r3, #2
 80128b4:	d1ea      	bne.n	801288c <uxr_serialize_CREATE_Payload+0x44>
 80128b6:	68f1      	ldr	r1, [r6, #12]
 80128b8:	4638      	mov	r0, r7
 80128ba:	f003 fe07 	bl	80164cc <ucdr_serialize_string>
 80128be:	4004      	ands	r4, r0
 80128c0:	e7e4      	b.n	801288c <uxr_serialize_CREATE_Payload+0x44>
 80128c2:	7a31      	ldrb	r1, [r6, #8]
 80128c4:	4638      	mov	r0, r7
 80128c6:	f7f7 fd11 	bl	800a2ec <ucdr_serialize_uint8_t>
 80128ca:	4605      	mov	r5, r0
 80128cc:	b158      	cbz	r0, 80128e6 <uxr_serialize_CREATE_Payload+0x9e>
 80128ce:	7a33      	ldrb	r3, [r6, #8]
 80128d0:	2b02      	cmp	r3, #2
 80128d2:	d034      	beq.n	801293e <uxr_serialize_CREATE_Payload+0xf6>
 80128d4:	2b03      	cmp	r3, #3
 80128d6:	d106      	bne.n	80128e6 <uxr_serialize_CREATE_Payload+0x9e>
 80128d8:	68f2      	ldr	r2, [r6, #12]
 80128da:	f106 0110 	add.w	r1, r6, #16
 80128de:	4638      	mov	r0, r7
 80128e0:	f003 fdc8 	bl	8016474 <ucdr_serialize_sequence_uint8_t>
 80128e4:	4605      	mov	r5, r0
 80128e6:	2202      	movs	r2, #2
 80128e8:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 80128ec:	4638      	mov	r0, r7
 80128ee:	f003 fccd 	bl	801628c <ucdr_serialize_array_uint8_t>
 80128f2:	4028      	ands	r0, r5
 80128f4:	4004      	ands	r4, r0
 80128f6:	e7c9      	b.n	801288c <uxr_serialize_CREATE_Payload+0x44>
 80128f8:	f106 0108 	add.w	r1, r6, #8
 80128fc:	4638      	mov	r0, r7
 80128fe:	f7ff fa71 	bl	8011de4 <uxr_serialize_CLIENT_Representation>
 8012902:	4004      	ands	r4, r0
 8012904:	e7c2      	b.n	801288c <uxr_serialize_CREATE_Payload+0x44>
 8012906:	f106 0108 	add.w	r1, r6, #8
 801290a:	4638      	mov	r0, r7
 801290c:	f7ff fb26 	bl	8011f5c <uxr_serialize_AGENT_Representation>
 8012910:	4004      	ands	r4, r0
 8012912:	e7bb      	b.n	801288c <uxr_serialize_CREATE_Payload+0x44>
 8012914:	7a31      	ldrb	r1, [r6, #8]
 8012916:	4638      	mov	r0, r7
 8012918:	f7f7 fce8 	bl	800a2ec <ucdr_serialize_uint8_t>
 801291c:	4605      	mov	r5, r0
 801291e:	b130      	cbz	r0, 801292e <uxr_serialize_CREATE_Payload+0xe6>
 8012920:	7a33      	ldrb	r3, [r6, #8]
 8012922:	2b02      	cmp	r3, #2
 8012924:	d011      	beq.n	801294a <uxr_serialize_CREATE_Payload+0x102>
 8012926:	2b03      	cmp	r3, #3
 8012928:	d015      	beq.n	8012956 <uxr_serialize_CREATE_Payload+0x10e>
 801292a:	2b01      	cmp	r3, #1
 801292c:	d00d      	beq.n	801294a <uxr_serialize_CREATE_Payload+0x102>
 801292e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8012932:	4638      	mov	r0, r7
 8012934:	f7f8 fa16 	bl	800ad64 <ucdr_serialize_int16_t>
 8012938:	4028      	ands	r0, r5
 801293a:	4004      	ands	r4, r0
 801293c:	e7a6      	b.n	801288c <uxr_serialize_CREATE_Payload+0x44>
 801293e:	68f1      	ldr	r1, [r6, #12]
 8012940:	4638      	mov	r0, r7
 8012942:	f003 fdc3 	bl	80164cc <ucdr_serialize_string>
 8012946:	4605      	mov	r5, r0
 8012948:	e7cd      	b.n	80128e6 <uxr_serialize_CREATE_Payload+0x9e>
 801294a:	68f1      	ldr	r1, [r6, #12]
 801294c:	4638      	mov	r0, r7
 801294e:	f003 fdbd 	bl	80164cc <ucdr_serialize_string>
 8012952:	4605      	mov	r5, r0
 8012954:	e7eb      	b.n	801292e <uxr_serialize_CREATE_Payload+0xe6>
 8012956:	68f2      	ldr	r2, [r6, #12]
 8012958:	f106 0110 	add.w	r1, r6, #16
 801295c:	4638      	mov	r0, r7
 801295e:	f003 fd89 	bl	8016474 <ucdr_serialize_sequence_uint8_t>
 8012962:	4605      	mov	r5, r0
 8012964:	e7e3      	b.n	801292e <uxr_serialize_CREATE_Payload+0xe6>
 8012966:	bf00      	nop

08012968 <uxr_deserialize_GET_INFO_Payload>:
 8012968:	b570      	push	{r4, r5, r6, lr}
 801296a:	2202      	movs	r2, #2
 801296c:	4605      	mov	r5, r0
 801296e:	460e      	mov	r6, r1
 8012970:	f003 fcf0 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 8012974:	2202      	movs	r2, #2
 8012976:	18b1      	adds	r1, r6, r2
 8012978:	4604      	mov	r4, r0
 801297a:	4628      	mov	r0, r5
 801297c:	f003 fcea 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 8012980:	1d31      	adds	r1, r6, #4
 8012982:	4004      	ands	r4, r0
 8012984:	4628      	mov	r0, r5
 8012986:	f7f7 fff7 	bl	800a978 <ucdr_deserialize_uint32_t>
 801298a:	b2e4      	uxtb	r4, r4
 801298c:	4020      	ands	r0, r4
 801298e:	bd70      	pop	{r4, r5, r6, pc}

08012990 <uxr_serialize_DELETE_Payload>:
 8012990:	b570      	push	{r4, r5, r6, lr}
 8012992:	2202      	movs	r2, #2
 8012994:	4605      	mov	r5, r0
 8012996:	460e      	mov	r6, r1
 8012998:	f003 fc78 	bl	801628c <ucdr_serialize_array_uint8_t>
 801299c:	2202      	movs	r2, #2
 801299e:	4604      	mov	r4, r0
 80129a0:	18b1      	adds	r1, r6, r2
 80129a2:	4628      	mov	r0, r5
 80129a4:	f003 fc72 	bl	801628c <ucdr_serialize_array_uint8_t>
 80129a8:	4020      	ands	r0, r4
 80129aa:	b2c0      	uxtb	r0, r0
 80129ac:	bd70      	pop	{r4, r5, r6, pc}
 80129ae:	bf00      	nop

080129b0 <uxr_deserialize_STATUS_AGENT_Payload>:
 80129b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129b4:	4605      	mov	r5, r0
 80129b6:	460e      	mov	r6, r1
 80129b8:	f7f7 fcae 	bl	800a318 <ucdr_deserialize_uint8_t>
 80129bc:	1c71      	adds	r1, r6, #1
 80129be:	4604      	mov	r4, r0
 80129c0:	4628      	mov	r0, r5
 80129c2:	f7f7 fca9 	bl	800a318 <ucdr_deserialize_uint8_t>
 80129c6:	2204      	movs	r2, #4
 80129c8:	18b1      	adds	r1, r6, r2
 80129ca:	4680      	mov	r8, r0
 80129cc:	4628      	mov	r0, r5
 80129ce:	f003 fcc1 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 80129d2:	f106 0108 	add.w	r1, r6, #8
 80129d6:	4607      	mov	r7, r0
 80129d8:	2202      	movs	r2, #2
 80129da:	4628      	mov	r0, r5
 80129dc:	f003 fcba 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 80129e0:	ea04 0308 	and.w	r3, r4, r8
 80129e4:	b2db      	uxtb	r3, r3
 80129e6:	ea03 0407 	and.w	r4, r3, r7
 80129ea:	2202      	movs	r2, #2
 80129ec:	4607      	mov	r7, r0
 80129ee:	f106 010a 	add.w	r1, r6, #10
 80129f2:	4628      	mov	r0, r5
 80129f4:	f003 fcae 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 80129f8:	f106 010c 	add.w	r1, r6, #12
 80129fc:	4603      	mov	r3, r0
 80129fe:	4628      	mov	r0, r5
 8012a00:	461d      	mov	r5, r3
 8012a02:	f7f7 fc5b 	bl	800a2bc <ucdr_deserialize_bool>
 8012a06:	403c      	ands	r4, r7
 8012a08:	4025      	ands	r5, r4
 8012a0a:	4028      	ands	r0, r5
 8012a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012a10 <uxr_deserialize_STATUS_Payload>:
 8012a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a14:	2202      	movs	r2, #2
 8012a16:	4606      	mov	r6, r0
 8012a18:	460f      	mov	r7, r1
 8012a1a:	f003 fc9b 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 8012a1e:	2202      	movs	r2, #2
 8012a20:	18b9      	adds	r1, r7, r2
 8012a22:	4605      	mov	r5, r0
 8012a24:	4630      	mov	r0, r6
 8012a26:	f003 fc95 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 8012a2a:	1d39      	adds	r1, r7, #4
 8012a2c:	4680      	mov	r8, r0
 8012a2e:	4630      	mov	r0, r6
 8012a30:	f7f7 fc72 	bl	800a318 <ucdr_deserialize_uint8_t>
 8012a34:	1d79      	adds	r1, r7, #5
 8012a36:	4604      	mov	r4, r0
 8012a38:	4630      	mov	r0, r6
 8012a3a:	f7f7 fc6d 	bl	800a318 <ucdr_deserialize_uint8_t>
 8012a3e:	ea05 0508 	and.w	r5, r5, r8
 8012a42:	402c      	ands	r4, r5
 8012a44:	4020      	ands	r0, r4
 8012a46:	b2c0      	uxtb	r0, r0
 8012a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012a4c <uxr_serialize_INFO_Payload>:
 8012a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a50:	2202      	movs	r2, #2
 8012a52:	460c      	mov	r4, r1
 8012a54:	4605      	mov	r5, r0
 8012a56:	f003 fc19 	bl	801628c <ucdr_serialize_array_uint8_t>
 8012a5a:	2202      	movs	r2, #2
 8012a5c:	18a1      	adds	r1, r4, r2
 8012a5e:	4680      	mov	r8, r0
 8012a60:	4628      	mov	r0, r5
 8012a62:	f003 fc13 	bl	801628c <ucdr_serialize_array_uint8_t>
 8012a66:	7921      	ldrb	r1, [r4, #4]
 8012a68:	4607      	mov	r7, r0
 8012a6a:	4628      	mov	r0, r5
 8012a6c:	f7f7 fc3e 	bl	800a2ec <ucdr_serialize_uint8_t>
 8012a70:	7961      	ldrb	r1, [r4, #5]
 8012a72:	4606      	mov	r6, r0
 8012a74:	4628      	mov	r0, r5
 8012a76:	f7f7 fc39 	bl	800a2ec <ucdr_serialize_uint8_t>
 8012a7a:	ea08 0807 	and.w	r8, r8, r7
 8012a7e:	ea06 0608 	and.w	r6, r6, r8
 8012a82:	4006      	ands	r6, r0
 8012a84:	7a21      	ldrb	r1, [r4, #8]
 8012a86:	4628      	mov	r0, r5
 8012a88:	f7f7 fc02 	bl	800a290 <ucdr_serialize_bool>
 8012a8c:	7a23      	ldrb	r3, [r4, #8]
 8012a8e:	b2f7      	uxtb	r7, r6
 8012a90:	4606      	mov	r6, r0
 8012a92:	b96b      	cbnz	r3, 8012ab0 <uxr_serialize_INFO_Payload+0x64>
 8012a94:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8012a98:	4628      	mov	r0, r5
 8012a9a:	f7f7 fbf9 	bl	800a290 <ucdr_serialize_bool>
 8012a9e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8012aa2:	4030      	ands	r0, r6
 8012aa4:	b2c6      	uxtb	r6, r0
 8012aa6:	b983      	cbnz	r3, 8012aca <uxr_serialize_INFO_Payload+0x7e>
 8012aa8:	ea06 0007 	and.w	r0, r6, r7
 8012aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ab0:	7b21      	ldrb	r1, [r4, #12]
 8012ab2:	4628      	mov	r0, r5
 8012ab4:	f7f7 fc1a 	bl	800a2ec <ucdr_serialize_uint8_t>
 8012ab8:	b188      	cbz	r0, 8012ade <uxr_serialize_INFO_Payload+0x92>
 8012aba:	f104 010c 	add.w	r1, r4, #12
 8012abe:	4628      	mov	r0, r5
 8012ac0:	f7ff fabe 	bl	8012040 <uxr_serialize_ObjectVariant.part.0>
 8012ac4:	4030      	ands	r0, r6
 8012ac6:	b2c6      	uxtb	r6, r0
 8012ac8:	e7e4      	b.n	8012a94 <uxr_serialize_INFO_Payload+0x48>
 8012aca:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8012ace:	4628      	mov	r0, r5
 8012ad0:	f7ff fdb2 	bl	8012638 <uxr_serialize_ActivityInfoVariant>
 8012ad4:	4006      	ands	r6, r0
 8012ad6:	ea06 0007 	and.w	r0, r6, r7
 8012ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ade:	4606      	mov	r6, r0
 8012ae0:	e7d8      	b.n	8012a94 <uxr_serialize_INFO_Payload+0x48>
 8012ae2:	bf00      	nop

08012ae4 <uxr_serialize_READ_DATA_Payload>:
 8012ae4:	b570      	push	{r4, r5, r6, lr}
 8012ae6:	2202      	movs	r2, #2
 8012ae8:	4605      	mov	r5, r0
 8012aea:	460e      	mov	r6, r1
 8012aec:	f003 fbce 	bl	801628c <ucdr_serialize_array_uint8_t>
 8012af0:	2202      	movs	r2, #2
 8012af2:	18b1      	adds	r1, r6, r2
 8012af4:	4604      	mov	r4, r0
 8012af6:	4628      	mov	r0, r5
 8012af8:	f003 fbc8 	bl	801628c <ucdr_serialize_array_uint8_t>
 8012afc:	1d31      	adds	r1, r6, #4
 8012afe:	4004      	ands	r4, r0
 8012b00:	4628      	mov	r0, r5
 8012b02:	f7ff fe5d 	bl	80127c0 <uxr_serialize_ReadSpecification>
 8012b06:	b2e4      	uxtb	r4, r4
 8012b08:	4020      	ands	r0, r4
 8012b0a:	bd70      	pop	{r4, r5, r6, pc}

08012b0c <uxr_serialize_WRITE_DATA_Payload_Data>:
 8012b0c:	b570      	push	{r4, r5, r6, lr}
 8012b0e:	2202      	movs	r2, #2
 8012b10:	4605      	mov	r5, r0
 8012b12:	460e      	mov	r6, r1
 8012b14:	f003 fbba 	bl	801628c <ucdr_serialize_array_uint8_t>
 8012b18:	2202      	movs	r2, #2
 8012b1a:	4604      	mov	r4, r0
 8012b1c:	18b1      	adds	r1, r6, r2
 8012b1e:	4628      	mov	r0, r5
 8012b20:	f003 fbb4 	bl	801628c <ucdr_serialize_array_uint8_t>
 8012b24:	4020      	ands	r0, r4
 8012b26:	b2c0      	uxtb	r0, r0
 8012b28:	bd70      	pop	{r4, r5, r6, pc}
 8012b2a:	bf00      	nop

08012b2c <uxr_serialize_ACKNACK_Payload>:
 8012b2c:	b570      	push	{r4, r5, r6, lr}
 8012b2e:	460c      	mov	r4, r1
 8012b30:	460e      	mov	r6, r1
 8012b32:	f834 1b02 	ldrh.w	r1, [r4], #2
 8012b36:	4605      	mov	r5, r0
 8012b38:	f7f7 fc04 	bl	800a344 <ucdr_serialize_uint16_t>
 8012b3c:	2202      	movs	r2, #2
 8012b3e:	4621      	mov	r1, r4
 8012b40:	4604      	mov	r4, r0
 8012b42:	4628      	mov	r0, r5
 8012b44:	f003 fba2 	bl	801628c <ucdr_serialize_array_uint8_t>
 8012b48:	7931      	ldrb	r1, [r6, #4]
 8012b4a:	4004      	ands	r4, r0
 8012b4c:	4628      	mov	r0, r5
 8012b4e:	f7f7 fbcd 	bl	800a2ec <ucdr_serialize_uint8_t>
 8012b52:	b2e4      	uxtb	r4, r4
 8012b54:	4020      	ands	r0, r4
 8012b56:	bd70      	pop	{r4, r5, r6, pc}

08012b58 <uxr_deserialize_ACKNACK_Payload>:
 8012b58:	b570      	push	{r4, r5, r6, lr}
 8012b5a:	4605      	mov	r5, r0
 8012b5c:	460e      	mov	r6, r1
 8012b5e:	f7f7 fcf1 	bl	800a544 <ucdr_deserialize_uint16_t>
 8012b62:	2202      	movs	r2, #2
 8012b64:	18b1      	adds	r1, r6, r2
 8012b66:	4604      	mov	r4, r0
 8012b68:	4628      	mov	r0, r5
 8012b6a:	f003 fbf3 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 8012b6e:	1d31      	adds	r1, r6, #4
 8012b70:	4004      	ands	r4, r0
 8012b72:	4628      	mov	r0, r5
 8012b74:	f7f7 fbd0 	bl	800a318 <ucdr_deserialize_uint8_t>
 8012b78:	b2e4      	uxtb	r4, r4
 8012b7a:	4020      	ands	r0, r4
 8012b7c:	bd70      	pop	{r4, r5, r6, pc}
 8012b7e:	bf00      	nop

08012b80 <uxr_serialize_HEARTBEAT_Payload>:
 8012b80:	b570      	push	{r4, r5, r6, lr}
 8012b82:	460d      	mov	r5, r1
 8012b84:	8809      	ldrh	r1, [r1, #0]
 8012b86:	4606      	mov	r6, r0
 8012b88:	f7f7 fbdc 	bl	800a344 <ucdr_serialize_uint16_t>
 8012b8c:	8869      	ldrh	r1, [r5, #2]
 8012b8e:	4604      	mov	r4, r0
 8012b90:	4630      	mov	r0, r6
 8012b92:	f7f7 fbd7 	bl	800a344 <ucdr_serialize_uint16_t>
 8012b96:	7929      	ldrb	r1, [r5, #4]
 8012b98:	4004      	ands	r4, r0
 8012b9a:	4630      	mov	r0, r6
 8012b9c:	f7f7 fba6 	bl	800a2ec <ucdr_serialize_uint8_t>
 8012ba0:	b2e4      	uxtb	r4, r4
 8012ba2:	4020      	ands	r0, r4
 8012ba4:	bd70      	pop	{r4, r5, r6, pc}
 8012ba6:	bf00      	nop

08012ba8 <uxr_deserialize_HEARTBEAT_Payload>:
 8012ba8:	b570      	push	{r4, r5, r6, lr}
 8012baa:	4605      	mov	r5, r0
 8012bac:	460e      	mov	r6, r1
 8012bae:	f7f7 fcc9 	bl	800a544 <ucdr_deserialize_uint16_t>
 8012bb2:	1cb1      	adds	r1, r6, #2
 8012bb4:	4604      	mov	r4, r0
 8012bb6:	4628      	mov	r0, r5
 8012bb8:	f7f7 fcc4 	bl	800a544 <ucdr_deserialize_uint16_t>
 8012bbc:	1d31      	adds	r1, r6, #4
 8012bbe:	4004      	ands	r4, r0
 8012bc0:	4628      	mov	r0, r5
 8012bc2:	f7f7 fba9 	bl	800a318 <ucdr_deserialize_uint8_t>
 8012bc6:	b2e4      	uxtb	r4, r4
 8012bc8:	4020      	ands	r0, r4
 8012bca:	bd70      	pop	{r4, r5, r6, pc}

08012bcc <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8012bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bd0:	4605      	mov	r5, r0
 8012bd2:	460e      	mov	r6, r1
 8012bd4:	f7f8 fa52 	bl	800b07c <ucdr_deserialize_int32_t>
 8012bd8:	1d31      	adds	r1, r6, #4
 8012bda:	4607      	mov	r7, r0
 8012bdc:	4628      	mov	r0, r5
 8012bde:	f7f7 fecb 	bl	800a978 <ucdr_deserialize_uint32_t>
 8012be2:	f106 0108 	add.w	r1, r6, #8
 8012be6:	4680      	mov	r8, r0
 8012be8:	4628      	mov	r0, r5
 8012bea:	f7f8 fa47 	bl	800b07c <ucdr_deserialize_int32_t>
 8012bee:	f106 010c 	add.w	r1, r6, #12
 8012bf2:	4604      	mov	r4, r0
 8012bf4:	4628      	mov	r0, r5
 8012bf6:	f7f7 febf 	bl	800a978 <ucdr_deserialize_uint32_t>
 8012bfa:	ea07 0708 	and.w	r7, r7, r8
 8012bfe:	403c      	ands	r4, r7
 8012c00:	f106 0110 	add.w	r1, r6, #16
 8012c04:	4004      	ands	r4, r0
 8012c06:	4628      	mov	r0, r5
 8012c08:	f7f8 fa38 	bl	800b07c <ucdr_deserialize_int32_t>
 8012c0c:	f106 0114 	add.w	r1, r6, #20
 8012c10:	4607      	mov	r7, r0
 8012c12:	4628      	mov	r0, r5
 8012c14:	f7f7 feb0 	bl	800a978 <ucdr_deserialize_uint32_t>
 8012c18:	b2e4      	uxtb	r4, r4
 8012c1a:	403c      	ands	r4, r7
 8012c1c:	4020      	ands	r0, r4
 8012c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c22:	bf00      	nop

08012c24 <uxr_serialize_SampleIdentity>:
 8012c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c28:	220c      	movs	r2, #12
 8012c2a:	4604      	mov	r4, r0
 8012c2c:	460d      	mov	r5, r1
 8012c2e:	f003 fb2d 	bl	801628c <ucdr_serialize_array_uint8_t>
 8012c32:	2203      	movs	r2, #3
 8012c34:	f105 010c 	add.w	r1, r5, #12
 8012c38:	4607      	mov	r7, r0
 8012c3a:	4620      	mov	r0, r4
 8012c3c:	f003 fb26 	bl	801628c <ucdr_serialize_array_uint8_t>
 8012c40:	7be9      	ldrb	r1, [r5, #15]
 8012c42:	4680      	mov	r8, r0
 8012c44:	4620      	mov	r0, r4
 8012c46:	f7f7 fb51 	bl	800a2ec <ucdr_serialize_uint8_t>
 8012c4a:	6929      	ldr	r1, [r5, #16]
 8012c4c:	4606      	mov	r6, r0
 8012c4e:	4620      	mov	r0, r4
 8012c50:	f7f8 f97c 	bl	800af4c <ucdr_serialize_int32_t>
 8012c54:	6969      	ldr	r1, [r5, #20]
 8012c56:	4603      	mov	r3, r0
 8012c58:	4620      	mov	r0, r4
 8012c5a:	ea07 0708 	and.w	r7, r7, r8
 8012c5e:	461c      	mov	r4, r3
 8012c60:	f7f7 fd5a 	bl	800a718 <ucdr_serialize_uint32_t>
 8012c64:	403e      	ands	r6, r7
 8012c66:	4034      	ands	r4, r6
 8012c68:	4020      	ands	r0, r4
 8012c6a:	b2c0      	uxtb	r0, r0
 8012c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012c70 <uxr_deserialize_SampleIdentity>:
 8012c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c74:	220c      	movs	r2, #12
 8012c76:	4604      	mov	r4, r0
 8012c78:	460d      	mov	r5, r1
 8012c7a:	f003 fb6b 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 8012c7e:	2203      	movs	r2, #3
 8012c80:	f105 010c 	add.w	r1, r5, #12
 8012c84:	4607      	mov	r7, r0
 8012c86:	4620      	mov	r0, r4
 8012c88:	f003 fb64 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 8012c8c:	f105 010f 	add.w	r1, r5, #15
 8012c90:	4680      	mov	r8, r0
 8012c92:	4620      	mov	r0, r4
 8012c94:	f7f7 fb40 	bl	800a318 <ucdr_deserialize_uint8_t>
 8012c98:	f105 0110 	add.w	r1, r5, #16
 8012c9c:	4606      	mov	r6, r0
 8012c9e:	4620      	mov	r0, r4
 8012ca0:	f7f8 f9ec 	bl	800b07c <ucdr_deserialize_int32_t>
 8012ca4:	f105 0114 	add.w	r1, r5, #20
 8012ca8:	4603      	mov	r3, r0
 8012caa:	4620      	mov	r0, r4
 8012cac:	ea07 0708 	and.w	r7, r7, r8
 8012cb0:	461c      	mov	r4, r3
 8012cb2:	f7f7 fe61 	bl	800a978 <ucdr_deserialize_uint32_t>
 8012cb6:	403e      	ands	r6, r7
 8012cb8:	4034      	ands	r4, r6
 8012cba:	4020      	ands	r0, r4
 8012cbc:	b2c0      	uxtb	r0, r0
 8012cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cc2:	bf00      	nop

08012cc4 <rcl_convert_rmw_ret_to_rcl_ret>:
 8012cc4:	280b      	cmp	r0, #11
 8012cc6:	dc0d      	bgt.n	8012ce4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8012cc8:	2800      	cmp	r0, #0
 8012cca:	db09      	blt.n	8012ce0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012ccc:	280b      	cmp	r0, #11
 8012cce:	d807      	bhi.n	8012ce0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012cd0:	e8df f000 	tbb	[pc, r0]
 8012cd4:	07060607 	.word	0x07060607
 8012cd8:	06060606 	.word	0x06060606
 8012cdc:	07070606 	.word	0x07070606
 8012ce0:	2001      	movs	r0, #1
 8012ce2:	4770      	bx	lr
 8012ce4:	28cb      	cmp	r0, #203	@ 0xcb
 8012ce6:	bf18      	it	ne
 8012ce8:	2001      	movne	r0, #1
 8012cea:	4770      	bx	lr

08012cec <rcl_get_zero_initialized_context>:
 8012cec:	4a03      	ldr	r2, [pc, #12]	@ (8012cfc <rcl_get_zero_initialized_context+0x10>)
 8012cee:	4603      	mov	r3, r0
 8012cf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012cf4:	e883 0003 	stmia.w	r3, {r0, r1}
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	4770      	bx	lr
 8012cfc:	08019598 	.word	0x08019598

08012d00 <rcl_context_is_valid>:
 8012d00:	b118      	cbz	r0, 8012d0a <rcl_context_is_valid+0xa>
 8012d02:	6840      	ldr	r0, [r0, #4]
 8012d04:	3800      	subs	r0, #0
 8012d06:	bf18      	it	ne
 8012d08:	2001      	movne	r0, #1
 8012d0a:	4770      	bx	lr

08012d0c <__cleanup_context>:
 8012d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d10:	4606      	mov	r6, r0
 8012d12:	6800      	ldr	r0, [r0, #0]
 8012d14:	2300      	movs	r3, #0
 8012d16:	6073      	str	r3, [r6, #4]
 8012d18:	2800      	cmp	r0, #0
 8012d1a:	d049      	beq.n	8012db0 <__cleanup_context+0xa4>
 8012d1c:	6947      	ldr	r7, [r0, #20]
 8012d1e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012d22:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8012d26:	b137      	cbz	r7, 8012d36 <__cleanup_context+0x2a>
 8012d28:	3014      	adds	r0, #20
 8012d2a:	f7f8 fe3f 	bl	800b9ac <rcl_init_options_fini>
 8012d2e:	4607      	mov	r7, r0
 8012d30:	2800      	cmp	r0, #0
 8012d32:	d144      	bne.n	8012dbe <__cleanup_context+0xb2>
 8012d34:	6830      	ldr	r0, [r6, #0]
 8012d36:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012d38:	b143      	cbz	r3, 8012d4c <__cleanup_context+0x40>
 8012d3a:	3028      	adds	r0, #40	@ 0x28
 8012d3c:	f7fb fa40 	bl	800e1c0 <rmw_context_fini>
 8012d40:	b118      	cbz	r0, 8012d4a <__cleanup_context+0x3e>
 8012d42:	2f00      	cmp	r7, #0
 8012d44:	d03e      	beq.n	8012dc4 <__cleanup_context+0xb8>
 8012d46:	f7fa fa73 	bl	800d230 <rcutils_reset_error>
 8012d4a:	6830      	ldr	r0, [r6, #0]
 8012d4c:	6a03      	ldr	r3, [r0, #32]
 8012d4e:	b1db      	cbz	r3, 8012d88 <__cleanup_context+0x7c>
 8012d50:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8012d54:	2a01      	cmp	r2, #1
 8012d56:	f17c 0100 	sbcs.w	r1, ip, #0
 8012d5a:	db11      	blt.n	8012d80 <__cleanup_context+0x74>
 8012d5c:	2400      	movs	r4, #0
 8012d5e:	4625      	mov	r5, r4
 8012d60:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012d64:	4649      	mov	r1, r9
 8012d66:	b1b8      	cbz	r0, 8012d98 <__cleanup_context+0x8c>
 8012d68:	47c0      	blx	r8
 8012d6a:	6833      	ldr	r3, [r6, #0]
 8012d6c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8012d70:	3401      	adds	r4, #1
 8012d72:	f145 0500 	adc.w	r5, r5, #0
 8012d76:	4294      	cmp	r4, r2
 8012d78:	eb75 010c 	sbcs.w	r1, r5, ip
 8012d7c:	6a1b      	ldr	r3, [r3, #32]
 8012d7e:	dbef      	blt.n	8012d60 <__cleanup_context+0x54>
 8012d80:	4618      	mov	r0, r3
 8012d82:	4649      	mov	r1, r9
 8012d84:	47c0      	blx	r8
 8012d86:	6830      	ldr	r0, [r6, #0]
 8012d88:	4649      	mov	r1, r9
 8012d8a:	47c0      	blx	r8
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	e9c6 3300 	strd	r3, r3, [r6]
 8012d92:	4638      	mov	r0, r7
 8012d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d98:	3401      	adds	r4, #1
 8012d9a:	f145 0500 	adc.w	r5, r5, #0
 8012d9e:	4294      	cmp	r4, r2
 8012da0:	eb75 010c 	sbcs.w	r1, r5, ip
 8012da4:	dbdc      	blt.n	8012d60 <__cleanup_context+0x54>
 8012da6:	4618      	mov	r0, r3
 8012da8:	4649      	mov	r1, r9
 8012daa:	47c0      	blx	r8
 8012dac:	6830      	ldr	r0, [r6, #0]
 8012dae:	e7eb      	b.n	8012d88 <__cleanup_context+0x7c>
 8012db0:	4607      	mov	r7, r0
 8012db2:	2300      	movs	r3, #0
 8012db4:	e9c6 3300 	strd	r3, r3, [r6]
 8012db8:	4638      	mov	r0, r7
 8012dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dbe:	f7fa fa37 	bl	800d230 <rcutils_reset_error>
 8012dc2:	e7b7      	b.n	8012d34 <__cleanup_context+0x28>
 8012dc4:	f7ff ff7e 	bl	8012cc4 <rcl_convert_rmw_ret_to_rcl_ret>
 8012dc8:	4607      	mov	r7, r0
 8012dca:	e7bc      	b.n	8012d46 <__cleanup_context+0x3a>

08012dcc <rcl_expand_topic_name>:
 8012dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dd0:	b08b      	sub	sp, #44	@ 0x2c
 8012dd2:	9306      	str	r3, [sp, #24]
 8012dd4:	2800      	cmp	r0, #0
 8012dd6:	f000 80ad 	beq.w	8012f34 <rcl_expand_topic_name+0x168>
 8012dda:	460e      	mov	r6, r1
 8012ddc:	2900      	cmp	r1, #0
 8012dde:	f000 80a9 	beq.w	8012f34 <rcl_expand_topic_name+0x168>
 8012de2:	4617      	mov	r7, r2
 8012de4:	2a00      	cmp	r2, #0
 8012de6:	f000 80a5 	beq.w	8012f34 <rcl_expand_topic_name+0x168>
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	f000 80a2 	beq.w	8012f34 <rcl_expand_topic_name+0x168>
 8012df0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	f000 809e 	beq.w	8012f34 <rcl_expand_topic_name+0x168>
 8012df8:	2200      	movs	r2, #0
 8012dfa:	a909      	add	r1, sp, #36	@ 0x24
 8012dfc:	4680      	mov	r8, r0
 8012dfe:	f001 f963 	bl	80140c8 <rcl_validate_topic_name>
 8012e02:	4604      	mov	r4, r0
 8012e04:	2800      	cmp	r0, #0
 8012e06:	f040 8096 	bne.w	8012f36 <rcl_expand_topic_name+0x16a>
 8012e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	f040 809a 	bne.w	8012f46 <rcl_expand_topic_name+0x17a>
 8012e12:	4602      	mov	r2, r0
 8012e14:	a909      	add	r1, sp, #36	@ 0x24
 8012e16:	4630      	mov	r0, r6
 8012e18:	f7fa fdf4 	bl	800da04 <rmw_validate_node_name>
 8012e1c:	2800      	cmp	r0, #0
 8012e1e:	f040 808e 	bne.w	8012f3e <rcl_expand_topic_name+0x172>
 8012e22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012e24:	2a00      	cmp	r2, #0
 8012e26:	f040 8093 	bne.w	8012f50 <rcl_expand_topic_name+0x184>
 8012e2a:	a909      	add	r1, sp, #36	@ 0x24
 8012e2c:	4638      	mov	r0, r7
 8012e2e:	f7fa fdcb 	bl	800d9c8 <rmw_validate_namespace>
 8012e32:	2800      	cmp	r0, #0
 8012e34:	f040 8083 	bne.w	8012f3e <rcl_expand_topic_name+0x172>
 8012e38:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8012e3a:	2c00      	cmp	r4, #0
 8012e3c:	f040 80ed 	bne.w	801301a <rcl_expand_topic_name+0x24e>
 8012e40:	217b      	movs	r1, #123	@ 0x7b
 8012e42:	4640      	mov	r0, r8
 8012e44:	f004 fce8 	bl	8017818 <strchr>
 8012e48:	f898 3000 	ldrb.w	r3, [r8]
 8012e4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8012e4e:	4605      	mov	r5, r0
 8012e50:	f000 809e 	beq.w	8012f90 <rcl_expand_topic_name+0x1c4>
 8012e54:	2b7e      	cmp	r3, #126	@ 0x7e
 8012e56:	f040 80a2 	bne.w	8012f9e <rcl_expand_topic_name+0x1d2>
 8012e5a:	4638      	mov	r0, r7
 8012e5c:	f7ed f9ea 	bl	8000234 <strlen>
 8012e60:	4a82      	ldr	r2, [pc, #520]	@ (801306c <rcl_expand_topic_name+0x2a0>)
 8012e62:	4b83      	ldr	r3, [pc, #524]	@ (8013070 <rcl_expand_topic_name+0x2a4>)
 8012e64:	2801      	cmp	r0, #1
 8012e66:	bf18      	it	ne
 8012e68:	4613      	movne	r3, r2
 8012e6a:	9302      	str	r3, [sp, #8]
 8012e6c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8012e6e:	9300      	str	r3, [sp, #0]
 8012e70:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8012e74:	f108 0301 	add.w	r3, r8, #1
 8012e78:	9305      	str	r3, [sp, #20]
 8012e7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012e7e:	9301      	str	r3, [sp, #4]
 8012e80:	ab14      	add	r3, sp, #80	@ 0x50
 8012e82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012e84:	f7fa f9f0 	bl	800d268 <rcutils_format_string_limit>
 8012e88:	4682      	mov	sl, r0
 8012e8a:	2800      	cmp	r0, #0
 8012e8c:	f000 80c7 	beq.w	801301e <rcl_expand_topic_name+0x252>
 8012e90:	2d00      	cmp	r5, #0
 8012e92:	f000 80a2 	beq.w	8012fda <rcl_expand_topic_name+0x20e>
 8012e96:	217b      	movs	r1, #123	@ 0x7b
 8012e98:	f004 fcbe 	bl	8017818 <strchr>
 8012e9c:	46d1      	mov	r9, sl
 8012e9e:	4605      	mov	r5, r0
 8012ea0:	9407      	str	r4, [sp, #28]
 8012ea2:	46d3      	mov	fp, sl
 8012ea4:	464c      	mov	r4, r9
 8012ea6:	2d00      	cmp	r5, #0
 8012ea8:	f000 80be 	beq.w	8013028 <rcl_expand_topic_name+0x25c>
 8012eac:	217d      	movs	r1, #125	@ 0x7d
 8012eae:	4620      	mov	r0, r4
 8012eb0:	f004 fcb2 	bl	8017818 <strchr>
 8012eb4:	eba0 0905 	sub.w	r9, r0, r5
 8012eb8:	f109 0a01 	add.w	sl, r9, #1
 8012ebc:	486d      	ldr	r0, [pc, #436]	@ (8013074 <rcl_expand_topic_name+0x2a8>)
 8012ebe:	4652      	mov	r2, sl
 8012ec0:	4629      	mov	r1, r5
 8012ec2:	f004 fcb6 	bl	8017832 <strncmp>
 8012ec6:	2800      	cmp	r0, #0
 8012ec8:	d067      	beq.n	8012f9a <rcl_expand_topic_name+0x1ce>
 8012eca:	486b      	ldr	r0, [pc, #428]	@ (8013078 <rcl_expand_topic_name+0x2ac>)
 8012ecc:	4652      	mov	r2, sl
 8012ece:	4629      	mov	r1, r5
 8012ed0:	f004 fcaf 	bl	8017832 <strncmp>
 8012ed4:	b130      	cbz	r0, 8012ee4 <rcl_expand_topic_name+0x118>
 8012ed6:	4869      	ldr	r0, [pc, #420]	@ (801307c <rcl_expand_topic_name+0x2b0>)
 8012ed8:	4652      	mov	r2, sl
 8012eda:	4629      	mov	r1, r5
 8012edc:	f004 fca9 	bl	8017832 <strncmp>
 8012ee0:	2800      	cmp	r0, #0
 8012ee2:	d137      	bne.n	8012f54 <rcl_expand_topic_name+0x188>
 8012ee4:	46b9      	mov	r9, r7
 8012ee6:	ab16      	add	r3, sp, #88	@ 0x58
 8012ee8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012eec:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012ef0:	ab14      	add	r3, sp, #80	@ 0x50
 8012ef2:	4628      	mov	r0, r5
 8012ef4:	cb0c      	ldmia	r3, {r2, r3}
 8012ef6:	4651      	mov	r1, sl
 8012ef8:	f7fa faf2 	bl	800d4e0 <rcutils_strndup>
 8012efc:	4605      	mov	r5, r0
 8012efe:	2800      	cmp	r0, #0
 8012f00:	f000 809c 	beq.w	801303c <rcl_expand_topic_name+0x270>
 8012f04:	464a      	mov	r2, r9
 8012f06:	4620      	mov	r0, r4
 8012f08:	ab14      	add	r3, sp, #80	@ 0x50
 8012f0a:	4629      	mov	r1, r5
 8012f0c:	f7fa f9e6 	bl	800d2dc <rcutils_repl_str>
 8012f10:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8012f12:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012f14:	4604      	mov	r4, r0
 8012f16:	4628      	mov	r0, r5
 8012f18:	4798      	blx	r3
 8012f1a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012f1c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8012f1e:	4658      	mov	r0, fp
 8012f20:	4798      	blx	r3
 8012f22:	2c00      	cmp	r4, #0
 8012f24:	d07b      	beq.n	801301e <rcl_expand_topic_name+0x252>
 8012f26:	217b      	movs	r1, #123	@ 0x7b
 8012f28:	4620      	mov	r0, r4
 8012f2a:	f004 fc75 	bl	8017818 <strchr>
 8012f2e:	46a3      	mov	fp, r4
 8012f30:	4605      	mov	r5, r0
 8012f32:	e7b8      	b.n	8012ea6 <rcl_expand_topic_name+0xda>
 8012f34:	240b      	movs	r4, #11
 8012f36:	4620      	mov	r0, r4
 8012f38:	b00b      	add	sp, #44	@ 0x2c
 8012f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f3e:	f7ff fec1 	bl	8012cc4 <rcl_convert_rmw_ret_to_rcl_ret>
 8012f42:	4604      	mov	r4, r0
 8012f44:	e7f7      	b.n	8012f36 <rcl_expand_topic_name+0x16a>
 8012f46:	2467      	movs	r4, #103	@ 0x67
 8012f48:	4620      	mov	r0, r4
 8012f4a:	b00b      	add	sp, #44	@ 0x2c
 8012f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f50:	24c9      	movs	r4, #201	@ 0xc9
 8012f52:	e7f0      	b.n	8012f36 <rcl_expand_topic_name+0x16a>
 8012f54:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8012f58:	9806      	ldr	r0, [sp, #24]
 8012f5a:	1c69      	adds	r1, r5, #1
 8012f5c:	f7fa fbda 	bl	800d714 <rcutils_string_map_getn>
 8012f60:	4681      	mov	r9, r0
 8012f62:	2800      	cmp	r0, #0
 8012f64:	d1bf      	bne.n	8012ee6 <rcl_expand_topic_name+0x11a>
 8012f66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012f68:	aa16      	add	r2, sp, #88	@ 0x58
 8012f6a:	6018      	str	r0, [r3, #0]
 8012f6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8012f6e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012f72:	ab14      	add	r3, sp, #80	@ 0x50
 8012f74:	cb0c      	ldmia	r3, {r2, r3}
 8012f76:	4651      	mov	r1, sl
 8012f78:	4628      	mov	r0, r5
 8012f7a:	f7fa fab1 	bl	800d4e0 <rcutils_strndup>
 8012f7e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8012f80:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012f82:	4798      	blx	r3
 8012f84:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012f86:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8012f88:	4658      	mov	r0, fp
 8012f8a:	2469      	movs	r4, #105	@ 0x69
 8012f8c:	4798      	blx	r3
 8012f8e:	e7d2      	b.n	8012f36 <rcl_expand_topic_name+0x16a>
 8012f90:	2800      	cmp	r0, #0
 8012f92:	d05b      	beq.n	801304c <rcl_expand_topic_name+0x280>
 8012f94:	46c1      	mov	r9, r8
 8012f96:	46a2      	mov	sl, r4
 8012f98:	e782      	b.n	8012ea0 <rcl_expand_topic_name+0xd4>
 8012f9a:	46b1      	mov	r9, r6
 8012f9c:	e7a3      	b.n	8012ee6 <rcl_expand_topic_name+0x11a>
 8012f9e:	2800      	cmp	r0, #0
 8012fa0:	d1f8      	bne.n	8012f94 <rcl_expand_topic_name+0x1c8>
 8012fa2:	4638      	mov	r0, r7
 8012fa4:	f7ed f946 	bl	8000234 <strlen>
 8012fa8:	4a35      	ldr	r2, [pc, #212]	@ (8013080 <rcl_expand_topic_name+0x2b4>)
 8012faa:	4b36      	ldr	r3, [pc, #216]	@ (8013084 <rcl_expand_topic_name+0x2b8>)
 8012fac:	f8cd 8010 	str.w	r8, [sp, #16]
 8012fb0:	2801      	cmp	r0, #1
 8012fb2:	bf18      	it	ne
 8012fb4:	4613      	movne	r3, r2
 8012fb6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8012fba:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8012fbe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8012fc0:	9703      	str	r7, [sp, #12]
 8012fc2:	9200      	str	r2, [sp, #0]
 8012fc4:	ab14      	add	r3, sp, #80	@ 0x50
 8012fc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012fc8:	f7fa f94e 	bl	800d268 <rcutils_format_string_limit>
 8012fcc:	4682      	mov	sl, r0
 8012fce:	4653      	mov	r3, sl
 8012fd0:	b32b      	cbz	r3, 801301e <rcl_expand_topic_name+0x252>
 8012fd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012fd4:	f8c3 a000 	str.w	sl, [r3]
 8012fd8:	e7ad      	b.n	8012f36 <rcl_expand_topic_name+0x16a>
 8012fda:	f89a 3000 	ldrb.w	r3, [sl]
 8012fde:	2b2f      	cmp	r3, #47	@ 0x2f
 8012fe0:	d0f7      	beq.n	8012fd2 <rcl_expand_topic_name+0x206>
 8012fe2:	4638      	mov	r0, r7
 8012fe4:	f7ed f926 	bl	8000234 <strlen>
 8012fe8:	4a25      	ldr	r2, [pc, #148]	@ (8013080 <rcl_expand_topic_name+0x2b4>)
 8012fea:	4b26      	ldr	r3, [pc, #152]	@ (8013084 <rcl_expand_topic_name+0x2b8>)
 8012fec:	f8cd a010 	str.w	sl, [sp, #16]
 8012ff0:	2801      	cmp	r0, #1
 8012ff2:	bf18      	it	ne
 8012ff4:	4613      	movne	r3, r2
 8012ff6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8012ffa:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8012ffe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8013000:	9703      	str	r7, [sp, #12]
 8013002:	9200      	str	r2, [sp, #0]
 8013004:	ab14      	add	r3, sp, #80	@ 0x50
 8013006:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013008:	f7fa f92e 	bl	800d268 <rcutils_format_string_limit>
 801300c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801300e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013010:	4605      	mov	r5, r0
 8013012:	4650      	mov	r0, sl
 8013014:	4798      	blx	r3
 8013016:	46aa      	mov	sl, r5
 8013018:	e7d9      	b.n	8012fce <rcl_expand_topic_name+0x202>
 801301a:	24ca      	movs	r4, #202	@ 0xca
 801301c:	e78b      	b.n	8012f36 <rcl_expand_topic_name+0x16a>
 801301e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013020:	2300      	movs	r3, #0
 8013022:	6013      	str	r3, [r2, #0]
 8013024:	240a      	movs	r4, #10
 8013026:	e786      	b.n	8012f36 <rcl_expand_topic_name+0x16a>
 8013028:	465b      	mov	r3, fp
 801302a:	9c07      	ldr	r4, [sp, #28]
 801302c:	46da      	mov	sl, fp
 801302e:	2b00      	cmp	r3, #0
 8013030:	d1d3      	bne.n	8012fda <rcl_expand_topic_name+0x20e>
 8013032:	f898 3000 	ldrb.w	r3, [r8]
 8013036:	2b2f      	cmp	r3, #47	@ 0x2f
 8013038:	d0cb      	beq.n	8012fd2 <rcl_expand_topic_name+0x206>
 801303a:	e7b2      	b.n	8012fa2 <rcl_expand_topic_name+0x1d6>
 801303c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8013040:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013042:	6015      	str	r5, [r2, #0]
 8013044:	4658      	mov	r0, fp
 8013046:	4798      	blx	r3
 8013048:	240a      	movs	r4, #10
 801304a:	e774      	b.n	8012f36 <rcl_expand_topic_name+0x16a>
 801304c:	ab17      	add	r3, sp, #92	@ 0x5c
 801304e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013052:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013056:	ab14      	add	r3, sp, #80	@ 0x50
 8013058:	cb0e      	ldmia	r3, {r1, r2, r3}
 801305a:	4640      	mov	r0, r8
 801305c:	f7fa fa1e 	bl	800d49c <rcutils_strdup>
 8013060:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013062:	2800      	cmp	r0, #0
 8013064:	6018      	str	r0, [r3, #0]
 8013066:	bf08      	it	eq
 8013068:	240a      	moveq	r4, #10
 801306a:	e764      	b.n	8012f36 <rcl_expand_topic_name+0x16a>
 801306c:	080195a0 	.word	0x080195a0
 8013070:	08019354 	.word	0x08019354
 8013074:	080195a8 	.word	0x080195a8
 8013078:	080195b0 	.word	0x080195b0
 801307c:	080195b8 	.word	0x080195b8
 8013080:	08018e54 	.word	0x08018e54
 8013084:	08018e4c 	.word	0x08018e4c

08013088 <rcl_get_default_topic_name_substitutions>:
 8013088:	2800      	cmp	r0, #0
 801308a:	bf0c      	ite	eq
 801308c:	200b      	moveq	r0, #11
 801308e:	2000      	movne	r0, #0
 8013090:	4770      	bx	lr
 8013092:	bf00      	nop

08013094 <rcl_get_zero_initialized_guard_condition>:
 8013094:	4a03      	ldr	r2, [pc, #12]	@ (80130a4 <rcl_get_zero_initialized_guard_condition+0x10>)
 8013096:	4603      	mov	r3, r0
 8013098:	e892 0003 	ldmia.w	r2, {r0, r1}
 801309c:	e883 0003 	stmia.w	r3, {r0, r1}
 80130a0:	4618      	mov	r0, r3
 80130a2:	4770      	bx	lr
 80130a4:	080195c4 	.word	0x080195c4

080130a8 <rcl_guard_condition_init>:
 80130a8:	b082      	sub	sp, #8
 80130aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130ac:	b087      	sub	sp, #28
 80130ae:	ac0c      	add	r4, sp, #48	@ 0x30
 80130b0:	e884 000c 	stmia.w	r4, {r2, r3}
 80130b4:	46a6      	mov	lr, r4
 80130b6:	460d      	mov	r5, r1
 80130b8:	4604      	mov	r4, r0
 80130ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80130be:	f10d 0c04 	add.w	ip, sp, #4
 80130c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80130c6:	f8de 3000 	ldr.w	r3, [lr]
 80130ca:	f8cc 3000 	str.w	r3, [ip]
 80130ce:	a801      	add	r0, sp, #4
 80130d0:	f7f9 ffcc 	bl	800d06c <rcutils_allocator_is_valid>
 80130d4:	b338      	cbz	r0, 8013126 <rcl_guard_condition_init+0x7e>
 80130d6:	b334      	cbz	r4, 8013126 <rcl_guard_condition_init+0x7e>
 80130d8:	6866      	ldr	r6, [r4, #4]
 80130da:	b9ee      	cbnz	r6, 8013118 <rcl_guard_condition_init+0x70>
 80130dc:	b31d      	cbz	r5, 8013126 <rcl_guard_condition_init+0x7e>
 80130de:	4628      	mov	r0, r5
 80130e0:	f7ff fe0e 	bl	8012d00 <rcl_context_is_valid>
 80130e4:	b308      	cbz	r0, 801312a <rcl_guard_condition_init+0x82>
 80130e6:	9b01      	ldr	r3, [sp, #4]
 80130e8:	9905      	ldr	r1, [sp, #20]
 80130ea:	201c      	movs	r0, #28
 80130ec:	4798      	blx	r3
 80130ee:	4607      	mov	r7, r0
 80130f0:	6060      	str	r0, [r4, #4]
 80130f2:	b310      	cbz	r0, 801313a <rcl_guard_condition_init+0x92>
 80130f4:	6828      	ldr	r0, [r5, #0]
 80130f6:	3028      	adds	r0, #40	@ 0x28
 80130f8:	f002 fdc2 	bl	8015c80 <rmw_create_guard_condition>
 80130fc:	6038      	str	r0, [r7, #0]
 80130fe:	6860      	ldr	r0, [r4, #4]
 8013100:	6805      	ldr	r5, [r0, #0]
 8013102:	b1a5      	cbz	r5, 801312e <rcl_guard_condition_init+0x86>
 8013104:	2301      	movs	r3, #1
 8013106:	ac01      	add	r4, sp, #4
 8013108:	7103      	strb	r3, [r0, #4]
 801310a:	f100 0708 	add.w	r7, r0, #8
 801310e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013110:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013112:	6823      	ldr	r3, [r4, #0]
 8013114:	603b      	str	r3, [r7, #0]
 8013116:	e000      	b.n	801311a <rcl_guard_condition_init+0x72>
 8013118:	2664      	movs	r6, #100	@ 0x64
 801311a:	4630      	mov	r0, r6
 801311c:	b007      	add	sp, #28
 801311e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013122:	b002      	add	sp, #8
 8013124:	4770      	bx	lr
 8013126:	260b      	movs	r6, #11
 8013128:	e7f7      	b.n	801311a <rcl_guard_condition_init+0x72>
 801312a:	2665      	movs	r6, #101	@ 0x65
 801312c:	e7f5      	b.n	801311a <rcl_guard_condition_init+0x72>
 801312e:	9b02      	ldr	r3, [sp, #8]
 8013130:	9905      	ldr	r1, [sp, #20]
 8013132:	4798      	blx	r3
 8013134:	2601      	movs	r6, #1
 8013136:	6065      	str	r5, [r4, #4]
 8013138:	e7ef      	b.n	801311a <rcl_guard_condition_init+0x72>
 801313a:	260a      	movs	r6, #10
 801313c:	e7ed      	b.n	801311a <rcl_guard_condition_init+0x72>
 801313e:	bf00      	nop

08013140 <rcl_guard_condition_init_from_rmw>:
 8013140:	b082      	sub	sp, #8
 8013142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013146:	b086      	sub	sp, #24
 8013148:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801314c:	4604      	mov	r4, r0
 801314e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8013152:	460e      	mov	r6, r1
 8013154:	4617      	mov	r7, r2
 8013156:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801315a:	f10d 0e04 	add.w	lr, sp, #4
 801315e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013162:	f8dc 3000 	ldr.w	r3, [ip]
 8013166:	f8ce 3000 	str.w	r3, [lr]
 801316a:	a801      	add	r0, sp, #4
 801316c:	f7f9 ff7e 	bl	800d06c <rcutils_allocator_is_valid>
 8013170:	b350      	cbz	r0, 80131c8 <rcl_guard_condition_init_from_rmw+0x88>
 8013172:	b34c      	cbz	r4, 80131c8 <rcl_guard_condition_init_from_rmw+0x88>
 8013174:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013178:	f1b8 0f00 	cmp.w	r8, #0
 801317c:	d11e      	bne.n	80131bc <rcl_guard_condition_init_from_rmw+0x7c>
 801317e:	b31f      	cbz	r7, 80131c8 <rcl_guard_condition_init_from_rmw+0x88>
 8013180:	4638      	mov	r0, r7
 8013182:	f7ff fdbd 	bl	8012d00 <rcl_context_is_valid>
 8013186:	b328      	cbz	r0, 80131d4 <rcl_guard_condition_init_from_rmw+0x94>
 8013188:	9b01      	ldr	r3, [sp, #4]
 801318a:	9905      	ldr	r1, [sp, #20]
 801318c:	201c      	movs	r0, #28
 801318e:	4798      	blx	r3
 8013190:	4605      	mov	r5, r0
 8013192:	6060      	str	r0, [r4, #4]
 8013194:	b358      	cbz	r0, 80131ee <rcl_guard_condition_init_from_rmw+0xae>
 8013196:	b1fe      	cbz	r6, 80131d8 <rcl_guard_condition_init_from_rmw+0x98>
 8013198:	6006      	str	r6, [r0, #0]
 801319a:	f880 8004 	strb.w	r8, [r0, #4]
 801319e:	ac01      	add	r4, sp, #4
 80131a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80131a2:	f105 0c08 	add.w	ip, r5, #8
 80131a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80131aa:	6823      	ldr	r3, [r4, #0]
 80131ac:	f8cc 3000 	str.w	r3, [ip]
 80131b0:	2000      	movs	r0, #0
 80131b2:	b006      	add	sp, #24
 80131b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131b8:	b002      	add	sp, #8
 80131ba:	4770      	bx	lr
 80131bc:	2064      	movs	r0, #100	@ 0x64
 80131be:	b006      	add	sp, #24
 80131c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131c4:	b002      	add	sp, #8
 80131c6:	4770      	bx	lr
 80131c8:	200b      	movs	r0, #11
 80131ca:	b006      	add	sp, #24
 80131cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131d0:	b002      	add	sp, #8
 80131d2:	4770      	bx	lr
 80131d4:	2065      	movs	r0, #101	@ 0x65
 80131d6:	e7f2      	b.n	80131be <rcl_guard_condition_init_from_rmw+0x7e>
 80131d8:	6838      	ldr	r0, [r7, #0]
 80131da:	3028      	adds	r0, #40	@ 0x28
 80131dc:	f002 fd50 	bl	8015c80 <rmw_create_guard_condition>
 80131e0:	6028      	str	r0, [r5, #0]
 80131e2:	6865      	ldr	r5, [r4, #4]
 80131e4:	682e      	ldr	r6, [r5, #0]
 80131e6:	b126      	cbz	r6, 80131f2 <rcl_guard_condition_init_from_rmw+0xb2>
 80131e8:	2301      	movs	r3, #1
 80131ea:	712b      	strb	r3, [r5, #4]
 80131ec:	e7d7      	b.n	801319e <rcl_guard_condition_init_from_rmw+0x5e>
 80131ee:	200a      	movs	r0, #10
 80131f0:	e7e5      	b.n	80131be <rcl_guard_condition_init_from_rmw+0x7e>
 80131f2:	4628      	mov	r0, r5
 80131f4:	9b02      	ldr	r3, [sp, #8]
 80131f6:	9905      	ldr	r1, [sp, #20]
 80131f8:	4798      	blx	r3
 80131fa:	6066      	str	r6, [r4, #4]
 80131fc:	2001      	movs	r0, #1
 80131fe:	e7de      	b.n	80131be <rcl_guard_condition_init_from_rmw+0x7e>

08013200 <rcl_guard_condition_fini>:
 8013200:	b570      	push	{r4, r5, r6, lr}
 8013202:	b082      	sub	sp, #8
 8013204:	b1f0      	cbz	r0, 8013244 <rcl_guard_condition_fini+0x44>
 8013206:	6843      	ldr	r3, [r0, #4]
 8013208:	4604      	mov	r4, r0
 801320a:	b163      	cbz	r3, 8013226 <rcl_guard_condition_fini+0x26>
 801320c:	6818      	ldr	r0, [r3, #0]
 801320e:	68de      	ldr	r6, [r3, #12]
 8013210:	6999      	ldr	r1, [r3, #24]
 8013212:	b160      	cbz	r0, 801322e <rcl_guard_condition_fini+0x2e>
 8013214:	791d      	ldrb	r5, [r3, #4]
 8013216:	b965      	cbnz	r5, 8013232 <rcl_guard_condition_fini+0x32>
 8013218:	4618      	mov	r0, r3
 801321a:	47b0      	blx	r6
 801321c:	2300      	movs	r3, #0
 801321e:	4628      	mov	r0, r5
 8013220:	6063      	str	r3, [r4, #4]
 8013222:	b002      	add	sp, #8
 8013224:	bd70      	pop	{r4, r5, r6, pc}
 8013226:	461d      	mov	r5, r3
 8013228:	4628      	mov	r0, r5
 801322a:	b002      	add	sp, #8
 801322c:	bd70      	pop	{r4, r5, r6, pc}
 801322e:	4605      	mov	r5, r0
 8013230:	e7f2      	b.n	8013218 <rcl_guard_condition_fini+0x18>
 8013232:	9101      	str	r1, [sp, #4]
 8013234:	f002 fd38 	bl	8015ca8 <rmw_destroy_guard_condition>
 8013238:	1e05      	subs	r5, r0, #0
 801323a:	6863      	ldr	r3, [r4, #4]
 801323c:	9901      	ldr	r1, [sp, #4]
 801323e:	bf18      	it	ne
 8013240:	2501      	movne	r5, #1
 8013242:	e7e9      	b.n	8013218 <rcl_guard_condition_fini+0x18>
 8013244:	250b      	movs	r5, #11
 8013246:	4628      	mov	r0, r5
 8013248:	b002      	add	sp, #8
 801324a:	bd70      	pop	{r4, r5, r6, pc}

0801324c <rcl_guard_condition_get_default_options>:
 801324c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801324e:	b087      	sub	sp, #28
 8013250:	4606      	mov	r6, r0
 8013252:	4668      	mov	r0, sp
 8013254:	f7f9 fefc 	bl	800d050 <rcutils_get_default_allocator>
 8013258:	4b09      	ldr	r3, [pc, #36]	@ (8013280 <rcl_guard_condition_get_default_options+0x34>)
 801325a:	46ee      	mov	lr, sp
 801325c:	469c      	mov	ip, r3
 801325e:	461d      	mov	r5, r3
 8013260:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013264:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801326a:	4634      	mov	r4, r6
 801326c:	f8de 7000 	ldr.w	r7, [lr]
 8013270:	f8cc 7000 	str.w	r7, [ip]
 8013274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013276:	4630      	mov	r0, r6
 8013278:	6027      	str	r7, [r4, #0]
 801327a:	b007      	add	sp, #28
 801327c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801327e:	bf00      	nop
 8013280:	2000b140 	.word	0x2000b140

08013284 <rcl_trigger_guard_condition>:
 8013284:	b148      	cbz	r0, 801329a <rcl_trigger_guard_condition+0x16>
 8013286:	b508      	push	{r3, lr}
 8013288:	6843      	ldr	r3, [r0, #4]
 801328a:	b143      	cbz	r3, 801329e <rcl_trigger_guard_condition+0x1a>
 801328c:	6818      	ldr	r0, [r3, #0]
 801328e:	f002 fde5 	bl	8015e5c <rmw_trigger_guard_condition>
 8013292:	3800      	subs	r0, #0
 8013294:	bf18      	it	ne
 8013296:	2001      	movne	r0, #1
 8013298:	bd08      	pop	{r3, pc}
 801329a:	200b      	movs	r0, #11
 801329c:	4770      	bx	lr
 801329e:	200b      	movs	r0, #11
 80132a0:	bd08      	pop	{r3, pc}
 80132a2:	bf00      	nop

080132a4 <rcl_guard_condition_get_rmw_handle>:
 80132a4:	b110      	cbz	r0, 80132ac <rcl_guard_condition_get_rmw_handle+0x8>
 80132a6:	6840      	ldr	r0, [r0, #4]
 80132a8:	b100      	cbz	r0, 80132ac <rcl_guard_condition_get_rmw_handle+0x8>
 80132aa:	6800      	ldr	r0, [r0, #0]
 80132ac:	4770      	bx	lr
 80132ae:	bf00      	nop

080132b0 <rcl_init>:
 80132b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132b4:	1e05      	subs	r5, r0, #0
 80132b6:	b09e      	sub	sp, #120	@ 0x78
 80132b8:	460e      	mov	r6, r1
 80132ba:	4690      	mov	r8, r2
 80132bc:	461f      	mov	r7, r3
 80132be:	f340 809c 	ble.w	80133fa <rcl_init+0x14a>
 80132c2:	2900      	cmp	r1, #0
 80132c4:	f000 809c 	beq.w	8013400 <rcl_init+0x150>
 80132c8:	f1a1 0e04 	sub.w	lr, r1, #4
 80132cc:	f04f 0c00 	mov.w	ip, #0
 80132d0:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80132d4:	f10c 0c01 	add.w	ip, ip, #1
 80132d8:	2c00      	cmp	r4, #0
 80132da:	f000 8091 	beq.w	8013400 <rcl_init+0x150>
 80132de:	4565      	cmp	r5, ip
 80132e0:	d1f6      	bne.n	80132d0 <rcl_init+0x20>
 80132e2:	f1b8 0f00 	cmp.w	r8, #0
 80132e6:	f000 808b 	beq.w	8013400 <rcl_init+0x150>
 80132ea:	f8d8 4000 	ldr.w	r4, [r8]
 80132ee:	2c00      	cmp	r4, #0
 80132f0:	f000 8086 	beq.w	8013400 <rcl_init+0x150>
 80132f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80132f6:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80132fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80132fe:	6823      	ldr	r3, [r4, #0]
 8013300:	f8cc 3000 	str.w	r3, [ip]
 8013304:	a819      	add	r0, sp, #100	@ 0x64
 8013306:	f7f9 feb1 	bl	800d06c <rcutils_allocator_is_valid>
 801330a:	2800      	cmp	r0, #0
 801330c:	d078      	beq.n	8013400 <rcl_init+0x150>
 801330e:	2f00      	cmp	r7, #0
 8013310:	d076      	beq.n	8013400 <rcl_init+0x150>
 8013312:	683b      	ldr	r3, [r7, #0]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d178      	bne.n	801340a <rcl_init+0x15a>
 8013318:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801331c:	2178      	movs	r1, #120	@ 0x78
 801331e:	2001      	movs	r0, #1
 8013320:	4798      	blx	r3
 8013322:	4604      	mov	r4, r0
 8013324:	6038      	str	r0, [r7, #0]
 8013326:	2800      	cmp	r0, #0
 8013328:	f000 80b6 	beq.w	8013498 <rcl_init+0x1e8>
 801332c:	a802      	add	r0, sp, #8
 801332e:	f002 faff 	bl	8015930 <rmw_get_zero_initialized_context>
 8013332:	a902      	add	r1, sp, #8
 8013334:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8013338:	2250      	movs	r2, #80	@ 0x50
 801333a:	ac19      	add	r4, sp, #100	@ 0x64
 801333c:	f004 fb2d 	bl	801799a <memcpy>
 8013340:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013342:	f8d7 e000 	ldr.w	lr, [r7]
 8013346:	46f4      	mov	ip, lr
 8013348:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801334c:	6823      	ldr	r3, [r4, #0]
 801334e:	f8cc 3000 	str.w	r3, [ip]
 8013352:	f10e 0114 	add.w	r1, lr, #20
 8013356:	4640      	mov	r0, r8
 8013358:	f7f8 fb52 	bl	800ba00 <rcl_init_options_copy>
 801335c:	4604      	mov	r4, r0
 801335e:	2800      	cmp	r0, #0
 8013360:	d144      	bne.n	80133ec <rcl_init+0x13c>
 8013362:	f8d7 9000 	ldr.w	r9, [r7]
 8013366:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801336a:	f8c9 0020 	str.w	r0, [r9, #32]
 801336e:	f8c9 5018 	str.w	r5, [r9, #24]
 8013372:	f8c9 801c 	str.w	r8, [r9, #28]
 8013376:	2d00      	cmp	r5, #0
 8013378:	d04e      	beq.n	8013418 <rcl_init+0x168>
 801337a:	2e00      	cmp	r6, #0
 801337c:	d04c      	beq.n	8013418 <rcl_init+0x168>
 801337e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8013382:	2104      	movs	r1, #4
 8013384:	4628      	mov	r0, r5
 8013386:	4798      	blx	r3
 8013388:	f8c9 0020 	str.w	r0, [r9, #32]
 801338c:	f8d7 9000 	ldr.w	r9, [r7]
 8013390:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8013394:	46ca      	mov	sl, r9
 8013396:	b343      	cbz	r3, 80133ea <rcl_init+0x13a>
 8013398:	2d01      	cmp	r5, #1
 801339a:	f178 0300 	sbcs.w	r3, r8, #0
 801339e:	db3b      	blt.n	8013418 <rcl_init+0x168>
 80133a0:	2400      	movs	r4, #0
 80133a2:	3e04      	subs	r6, #4
 80133a4:	46a1      	mov	r9, r4
 80133a6:	e00b      	b.n	80133c0 <rcl_init+0x110>
 80133a8:	6831      	ldr	r1, [r6, #0]
 80133aa:	f004 faf6 	bl	801799a <memcpy>
 80133ae:	3401      	adds	r4, #1
 80133b0:	f149 0900 	adc.w	r9, r9, #0
 80133b4:	45c8      	cmp	r8, r9
 80133b6:	bf08      	it	eq
 80133b8:	42a5      	cmpeq	r5, r4
 80133ba:	d02b      	beq.n	8013414 <rcl_init+0x164>
 80133bc:	f8d7 a000 	ldr.w	sl, [r7]
 80133c0:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80133c4:	f7ec ff36 	bl	8000234 <strlen>
 80133c8:	1c42      	adds	r2, r0, #1
 80133ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80133cc:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80133ce:	f8da a020 	ldr.w	sl, [sl, #32]
 80133d2:	9201      	str	r2, [sp, #4]
 80133d4:	4610      	mov	r0, r2
 80133d6:	4798      	blx	r3
 80133d8:	683b      	ldr	r3, [r7, #0]
 80133da:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80133de:	6a1b      	ldr	r3, [r3, #32]
 80133e0:	9a01      	ldr	r2, [sp, #4]
 80133e2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80133e6:	2800      	cmp	r0, #0
 80133e8:	d1de      	bne.n	80133a8 <rcl_init+0xf8>
 80133ea:	240a      	movs	r4, #10
 80133ec:	4638      	mov	r0, r7
 80133ee:	f7ff fc8d 	bl	8012d0c <__cleanup_context>
 80133f2:	4620      	mov	r0, r4
 80133f4:	b01e      	add	sp, #120	@ 0x78
 80133f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133fa:	2900      	cmp	r1, #0
 80133fc:	f43f af71 	beq.w	80132e2 <rcl_init+0x32>
 8013400:	240b      	movs	r4, #11
 8013402:	4620      	mov	r0, r4
 8013404:	b01e      	add	sp, #120	@ 0x78
 8013406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801340a:	2464      	movs	r4, #100	@ 0x64
 801340c:	4620      	mov	r0, r4
 801340e:	b01e      	add	sp, #120	@ 0x78
 8013410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013414:	f8d7 9000 	ldr.w	r9, [r7]
 8013418:	4926      	ldr	r1, [pc, #152]	@ (80134b4 <rcl_init+0x204>)
 801341a:	680b      	ldr	r3, [r1, #0]
 801341c:	3301      	adds	r3, #1
 801341e:	d036      	beq.n	801348e <rcl_init+0x1de>
 8013420:	600b      	str	r3, [r1, #0]
 8013422:	461a      	mov	r2, r3
 8013424:	2400      	movs	r4, #0
 8013426:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801342a:	607b      	str	r3, [r7, #4]
 801342c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801342e:	3301      	adds	r3, #1
 8013430:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8013434:	d034      	beq.n	80134a0 <rcl_init+0x1f0>
 8013436:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801343a:	b93b      	cbnz	r3, 801344c <rcl_init+0x19c>
 801343c:	3030      	adds	r0, #48	@ 0x30
 801343e:	f000 f83b 	bl	80134b8 <rcl_get_localhost_only>
 8013442:	4604      	mov	r4, r0
 8013444:	2800      	cmp	r0, #0
 8013446:	d1d1      	bne.n	80133ec <rcl_init+0x13c>
 8013448:	683b      	ldr	r3, [r7, #0]
 801344a:	6958      	ldr	r0, [r3, #20]
 801344c:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801344e:	aa18      	add	r2, sp, #96	@ 0x60
 8013450:	a917      	add	r1, sp, #92	@ 0x5c
 8013452:	f000 fe27 	bl	80140a4 <rcl_validate_enclave_name>
 8013456:	4604      	mov	r4, r0
 8013458:	2800      	cmp	r0, #0
 801345a:	d1c7      	bne.n	80133ec <rcl_init+0x13c>
 801345c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801345e:	b9eb      	cbnz	r3, 801349c <rcl_init+0x1ec>
 8013460:	6839      	ldr	r1, [r7, #0]
 8013462:	694b      	ldr	r3, [r1, #20]
 8013464:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8013466:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801346a:	f000 f8f3 	bl	8013654 <rcl_get_security_options_from_environment>
 801346e:	4604      	mov	r4, r0
 8013470:	2800      	cmp	r0, #0
 8013472:	d1bb      	bne.n	80133ec <rcl_init+0x13c>
 8013474:	6839      	ldr	r1, [r7, #0]
 8013476:	6948      	ldr	r0, [r1, #20]
 8013478:	3128      	adds	r1, #40	@ 0x28
 801347a:	3018      	adds	r0, #24
 801347c:	f7fa fd6a 	bl	800df54 <rmw_init>
 8013480:	4604      	mov	r4, r0
 8013482:	2800      	cmp	r0, #0
 8013484:	d0bd      	beq.n	8013402 <rcl_init+0x152>
 8013486:	f7ff fc1d 	bl	8012cc4 <rcl_convert_rmw_ret_to_rcl_ret>
 801348a:	4604      	mov	r4, r0
 801348c:	e7ae      	b.n	80133ec <rcl_init+0x13c>
 801348e:	2201      	movs	r2, #1
 8013490:	461c      	mov	r4, r3
 8013492:	600a      	str	r2, [r1, #0]
 8013494:	4613      	mov	r3, r2
 8013496:	e7c6      	b.n	8013426 <rcl_init+0x176>
 8013498:	240a      	movs	r4, #10
 801349a:	e7b2      	b.n	8013402 <rcl_init+0x152>
 801349c:	2401      	movs	r4, #1
 801349e:	e7a5      	b.n	80133ec <rcl_init+0x13c>
 80134a0:	3024      	adds	r0, #36	@ 0x24
 80134a2:	f003 fd93 	bl	8016fcc <rcl_get_default_domain_id>
 80134a6:	4604      	mov	r4, r0
 80134a8:	2800      	cmp	r0, #0
 80134aa:	d19f      	bne.n	80133ec <rcl_init+0x13c>
 80134ac:	683b      	ldr	r3, [r7, #0]
 80134ae:	6958      	ldr	r0, [r3, #20]
 80134b0:	e7c1      	b.n	8013436 <rcl_init+0x186>
 80134b2:	bf00      	nop
 80134b4:	2000b154 	.word	0x2000b154

080134b8 <rcl_get_localhost_only>:
 80134b8:	b510      	push	{r4, lr}
 80134ba:	b082      	sub	sp, #8
 80134bc:	2300      	movs	r3, #0
 80134be:	9301      	str	r3, [sp, #4]
 80134c0:	b1b8      	cbz	r0, 80134f2 <rcl_get_localhost_only+0x3a>
 80134c2:	4604      	mov	r4, r0
 80134c4:	a901      	add	r1, sp, #4
 80134c6:	480c      	ldr	r0, [pc, #48]	@ (80134f8 <rcl_get_localhost_only+0x40>)
 80134c8:	f7f9 fe82 	bl	800d1d0 <rcutils_get_env>
 80134cc:	b110      	cbz	r0, 80134d4 <rcl_get_localhost_only+0x1c>
 80134ce:	2001      	movs	r0, #1
 80134d0:	b002      	add	sp, #8
 80134d2:	bd10      	pop	{r4, pc}
 80134d4:	9b01      	ldr	r3, [sp, #4]
 80134d6:	b113      	cbz	r3, 80134de <rcl_get_localhost_only+0x26>
 80134d8:	781a      	ldrb	r2, [r3, #0]
 80134da:	2a31      	cmp	r2, #49	@ 0x31
 80134dc:	d004      	beq.n	80134e8 <rcl_get_localhost_only+0x30>
 80134de:	2302      	movs	r3, #2
 80134e0:	2000      	movs	r0, #0
 80134e2:	7023      	strb	r3, [r4, #0]
 80134e4:	b002      	add	sp, #8
 80134e6:	bd10      	pop	{r4, pc}
 80134e8:	785b      	ldrb	r3, [r3, #1]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d1f7      	bne.n	80134de <rcl_get_localhost_only+0x26>
 80134ee:	2301      	movs	r3, #1
 80134f0:	e7f6      	b.n	80134e0 <rcl_get_localhost_only+0x28>
 80134f2:	200b      	movs	r0, #11
 80134f4:	b002      	add	sp, #8
 80134f6:	bd10      	pop	{r4, pc}
 80134f8:	080195cc 	.word	0x080195cc

080134fc <exact_match_lookup>:
 80134fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134fe:	f102 0708 	add.w	r7, r2, #8
 8013502:	460b      	mov	r3, r1
 8013504:	4614      	mov	r4, r2
 8013506:	4606      	mov	r6, r0
 8013508:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801350c:	b085      	sub	sp, #20
 801350e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013512:	4618      	mov	r0, r3
 8013514:	4919      	ldr	r1, [pc, #100]	@ (801357c <exact_match_lookup+0x80>)
 8013516:	e894 000c 	ldmia.w	r4, {r2, r3}
 801351a:	f002 f9fb 	bl	8015914 <rcutils_join_path>
 801351e:	7833      	ldrb	r3, [r6, #0]
 8013520:	2b2f      	cmp	r3, #47	@ 0x2f
 8013522:	4605      	mov	r5, r0
 8013524:	d023      	beq.n	801356e <exact_match_lookup+0x72>
 8013526:	f104 030c 	add.w	r3, r4, #12
 801352a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801352e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013532:	1c70      	adds	r0, r6, #1
 8013534:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013538:	f002 f9f2 	bl	8015920 <rcutils_to_native_path>
 801353c:	4606      	mov	r6, r0
 801353e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013542:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013546:	4631      	mov	r1, r6
 8013548:	e894 000c 	ldmia.w	r4, {r2, r3}
 801354c:	4628      	mov	r0, r5
 801354e:	f002 f9e1 	bl	8015914 <rcutils_join_path>
 8013552:	6862      	ldr	r2, [r4, #4]
 8013554:	6921      	ldr	r1, [r4, #16]
 8013556:	4603      	mov	r3, r0
 8013558:	4630      	mov	r0, r6
 801355a:	461e      	mov	r6, r3
 801355c:	4790      	blx	r2
 801355e:	4628      	mov	r0, r5
 8013560:	6863      	ldr	r3, [r4, #4]
 8013562:	6921      	ldr	r1, [r4, #16]
 8013564:	4798      	blx	r3
 8013566:	4635      	mov	r5, r6
 8013568:	4628      	mov	r0, r5
 801356a:	b005      	add	sp, #20
 801356c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801356e:	7873      	ldrb	r3, [r6, #1]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d1d8      	bne.n	8013526 <exact_match_lookup+0x2a>
 8013574:	4628      	mov	r0, r5
 8013576:	b005      	add	sp, #20
 8013578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801357a:	bf00      	nop
 801357c:	0801961c 	.word	0x0801961c

08013580 <rcl_get_secure_root>:
 8013580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013584:	b085      	sub	sp, #20
 8013586:	b168      	cbz	r0, 80135a4 <rcl_get_secure_root+0x24>
 8013588:	4607      	mov	r7, r0
 801358a:	4608      	mov	r0, r1
 801358c:	460c      	mov	r4, r1
 801358e:	f7f9 fd6d 	bl	800d06c <rcutils_allocator_is_valid>
 8013592:	b138      	cbz	r0, 80135a4 <rcl_get_secure_root+0x24>
 8013594:	2300      	movs	r3, #0
 8013596:	482d      	ldr	r0, [pc, #180]	@ (801364c <rcl_get_secure_root+0xcc>)
 8013598:	9303      	str	r3, [sp, #12]
 801359a:	a903      	add	r1, sp, #12
 801359c:	f7f9 fe18 	bl	800d1d0 <rcutils_get_env>
 80135a0:	4605      	mov	r5, r0
 80135a2:	b120      	cbz	r0, 80135ae <rcl_get_secure_root+0x2e>
 80135a4:	2500      	movs	r5, #0
 80135a6:	4628      	mov	r0, r5
 80135a8:	b005      	add	sp, #20
 80135aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135ae:	9b03      	ldr	r3, [sp, #12]
 80135b0:	781a      	ldrb	r2, [r3, #0]
 80135b2:	2a00      	cmp	r2, #0
 80135b4:	d0f6      	beq.n	80135a4 <rcl_get_secure_root+0x24>
 80135b6:	f104 090c 	add.w	r9, r4, #12
 80135ba:	e899 0003 	ldmia.w	r9, {r0, r1}
 80135be:	e88d 0003 	stmia.w	sp, {r0, r1}
 80135c2:	4618      	mov	r0, r3
 80135c4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80135c8:	f7f9 ff68 	bl	800d49c <rcutils_strdup>
 80135cc:	4680      	mov	r8, r0
 80135ce:	2800      	cmp	r0, #0
 80135d0:	d0e8      	beq.n	80135a4 <rcl_get_secure_root+0x24>
 80135d2:	481f      	ldr	r0, [pc, #124]	@ (8013650 <rcl_get_secure_root+0xd0>)
 80135d4:	9503      	str	r5, [sp, #12]
 80135d6:	a903      	add	r1, sp, #12
 80135d8:	f7f9 fdfa 	bl	800d1d0 <rcutils_get_env>
 80135dc:	b160      	cbz	r0, 80135f8 <rcl_get_secure_root+0x78>
 80135de:	2600      	movs	r6, #0
 80135e0:	6863      	ldr	r3, [r4, #4]
 80135e2:	6921      	ldr	r1, [r4, #16]
 80135e4:	4630      	mov	r0, r6
 80135e6:	4798      	blx	r3
 80135e8:	4640      	mov	r0, r8
 80135ea:	6863      	ldr	r3, [r4, #4]
 80135ec:	6921      	ldr	r1, [r4, #16]
 80135ee:	4798      	blx	r3
 80135f0:	4628      	mov	r0, r5
 80135f2:	b005      	add	sp, #20
 80135f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135f8:	9b03      	ldr	r3, [sp, #12]
 80135fa:	781e      	ldrb	r6, [r3, #0]
 80135fc:	b1f6      	cbz	r6, 801363c <rcl_get_secure_root+0xbc>
 80135fe:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013602:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013606:	4618      	mov	r0, r3
 8013608:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801360c:	f7f9 ff46 	bl	800d49c <rcutils_strdup>
 8013610:	4606      	mov	r6, r0
 8013612:	2800      	cmp	r0, #0
 8013614:	d0e3      	beq.n	80135de <rcl_get_secure_root+0x5e>
 8013616:	4622      	mov	r2, r4
 8013618:	4641      	mov	r1, r8
 801361a:	f7ff ff6f 	bl	80134fc <exact_match_lookup>
 801361e:	4605      	mov	r5, r0
 8013620:	2d00      	cmp	r5, #0
 8013622:	d0dd      	beq.n	80135e0 <rcl_get_secure_root+0x60>
 8013624:	4628      	mov	r0, r5
 8013626:	f002 f973 	bl	8015910 <rcutils_is_directory>
 801362a:	4603      	mov	r3, r0
 801362c:	2800      	cmp	r0, #0
 801362e:	d1d7      	bne.n	80135e0 <rcl_get_secure_root+0x60>
 8013630:	4628      	mov	r0, r5
 8013632:	6921      	ldr	r1, [r4, #16]
 8013634:	461d      	mov	r5, r3
 8013636:	6863      	ldr	r3, [r4, #4]
 8013638:	4798      	blx	r3
 801363a:	e7d1      	b.n	80135e0 <rcl_get_secure_root+0x60>
 801363c:	4622      	mov	r2, r4
 801363e:	4638      	mov	r0, r7
 8013640:	4641      	mov	r1, r8
 8013642:	f7ff ff5b 	bl	80134fc <exact_match_lookup>
 8013646:	4605      	mov	r5, r0
 8013648:	e7ea      	b.n	8013620 <rcl_get_secure_root+0xa0>
 801364a:	bf00      	nop
 801364c:	08019628 	.word	0x08019628
 8013650:	08019640 	.word	0x08019640

08013654 <rcl_get_security_options_from_environment>:
 8013654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013658:	b082      	sub	sp, #8
 801365a:	2300      	movs	r3, #0
 801365c:	4606      	mov	r6, r0
 801365e:	460f      	mov	r7, r1
 8013660:	4820      	ldr	r0, [pc, #128]	@ (80136e4 <rcl_get_security_options_from_environment+0x90>)
 8013662:	9301      	str	r3, [sp, #4]
 8013664:	a901      	add	r1, sp, #4
 8013666:	4690      	mov	r8, r2
 8013668:	f7f9 fdb2 	bl	800d1d0 <rcutils_get_env>
 801366c:	b120      	cbz	r0, 8013678 <rcl_get_security_options_from_environment+0x24>
 801366e:	2501      	movs	r5, #1
 8013670:	4628      	mov	r0, r5
 8013672:	b002      	add	sp, #8
 8013674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013678:	491b      	ldr	r1, [pc, #108]	@ (80136e8 <rcl_get_security_options_from_environment+0x94>)
 801367a:	4604      	mov	r4, r0
 801367c:	9801      	ldr	r0, [sp, #4]
 801367e:	f7ec fdcf 	bl	8000220 <strcmp>
 8013682:	4605      	mov	r5, r0
 8013684:	b9e8      	cbnz	r0, 80136c2 <rcl_get_security_options_from_environment+0x6e>
 8013686:	9001      	str	r0, [sp, #4]
 8013688:	f1b8 0f00 	cmp.w	r8, #0
 801368c:	d020      	beq.n	80136d0 <rcl_get_security_options_from_environment+0x7c>
 801368e:	4817      	ldr	r0, [pc, #92]	@ (80136ec <rcl_get_security_options_from_environment+0x98>)
 8013690:	a901      	add	r1, sp, #4
 8013692:	f7f9 fd9d 	bl	800d1d0 <rcutils_get_env>
 8013696:	2800      	cmp	r0, #0
 8013698:	d1e9      	bne.n	801366e <rcl_get_security_options_from_environment+0x1a>
 801369a:	4915      	ldr	r1, [pc, #84]	@ (80136f0 <rcl_get_security_options_from_environment+0x9c>)
 801369c:	9801      	ldr	r0, [sp, #4]
 801369e:	f7ec fdbf 	bl	8000220 <strcmp>
 80136a2:	fab0 f080 	clz	r0, r0
 80136a6:	0940      	lsrs	r0, r0, #5
 80136a8:	f888 0000 	strb.w	r0, [r8]
 80136ac:	4639      	mov	r1, r7
 80136ae:	4630      	mov	r0, r6
 80136b0:	f7ff ff66 	bl	8013580 <rcl_get_secure_root>
 80136b4:	b170      	cbz	r0, 80136d4 <rcl_get_security_options_from_environment+0x80>
 80136b6:	f8c8 0004 	str.w	r0, [r8, #4]
 80136ba:	4628      	mov	r0, r5
 80136bc:	b002      	add	sp, #8
 80136be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136c2:	4625      	mov	r5, r4
 80136c4:	4628      	mov	r0, r5
 80136c6:	f888 4000 	strb.w	r4, [r8]
 80136ca:	b002      	add	sp, #8
 80136cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136d0:	250b      	movs	r5, #11
 80136d2:	e7cd      	b.n	8013670 <rcl_get_security_options_from_environment+0x1c>
 80136d4:	f898 5000 	ldrb.w	r5, [r8]
 80136d8:	f1a5 0501 	sub.w	r5, r5, #1
 80136dc:	fab5 f585 	clz	r5, r5
 80136e0:	096d      	lsrs	r5, r5, #5
 80136e2:	e7c5      	b.n	8013670 <rcl_get_security_options_from_environment+0x1c>
 80136e4:	080195e0 	.word	0x080195e0
 80136e8:	080195f4 	.word	0x080195f4
 80136ec:	080195fc 	.word	0x080195fc
 80136f0:	08019614 	.word	0x08019614

080136f4 <rcl_service_get_rmw_handle>:
 80136f4:	b118      	cbz	r0, 80136fe <rcl_service_get_rmw_handle+0xa>
 80136f6:	6800      	ldr	r0, [r0, #0]
 80136f8:	b108      	cbz	r0, 80136fe <rcl_service_get_rmw_handle+0xa>
 80136fa:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80136fe:	4770      	bx	lr

08013700 <rcl_take_request>:
 8013700:	b570      	push	{r4, r5, r6, lr}
 8013702:	468e      	mov	lr, r1
 8013704:	460c      	mov	r4, r1
 8013706:	4616      	mov	r6, r2
 8013708:	4605      	mov	r5, r0
 801370a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801370e:	b08c      	sub	sp, #48	@ 0x30
 8013710:	f10d 0c18 	add.w	ip, sp, #24
 8013714:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013718:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801371c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013720:	b30d      	cbz	r5, 8013766 <rcl_take_request+0x66>
 8013722:	682b      	ldr	r3, [r5, #0]
 8013724:	b1fb      	cbz	r3, 8013766 <rcl_take_request+0x66>
 8013726:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801372a:	b1e0      	cbz	r0, 8013766 <rcl_take_request+0x66>
 801372c:	b336      	cbz	r6, 801377c <rcl_take_request+0x7c>
 801372e:	2300      	movs	r3, #0
 8013730:	f88d 3007 	strb.w	r3, [sp, #7]
 8013734:	4632      	mov	r2, r6
 8013736:	f10d 0307 	add.w	r3, sp, #7
 801373a:	a902      	add	r1, sp, #8
 801373c:	f7fb f878 	bl	800e830 <rmw_take_request>
 8013740:	4605      	mov	r5, r0
 8013742:	b198      	cbz	r0, 801376c <rcl_take_request+0x6c>
 8013744:	280a      	cmp	r0, #10
 8013746:	bf18      	it	ne
 8013748:	2501      	movne	r5, #1
 801374a:	f10d 0e18 	add.w	lr, sp, #24
 801374e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013752:	46a4      	mov	ip, r4
 8013754:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013758:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801375c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013760:	4628      	mov	r0, r5
 8013762:	b00c      	add	sp, #48	@ 0x30
 8013764:	bd70      	pop	{r4, r5, r6, pc}
 8013766:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801376a:	e7ee      	b.n	801374a <rcl_take_request+0x4a>
 801376c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013770:	f240 2359 	movw	r3, #601	@ 0x259
 8013774:	2a00      	cmp	r2, #0
 8013776:	bf08      	it	eq
 8013778:	461d      	moveq	r5, r3
 801377a:	e7e6      	b.n	801374a <rcl_take_request+0x4a>
 801377c:	250b      	movs	r5, #11
 801377e:	e7e4      	b.n	801374a <rcl_take_request+0x4a>

08013780 <rcl_send_response>:
 8013780:	b170      	cbz	r0, 80137a0 <rcl_send_response+0x20>
 8013782:	6800      	ldr	r0, [r0, #0]
 8013784:	b160      	cbz	r0, 80137a0 <rcl_send_response+0x20>
 8013786:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801378a:	b148      	cbz	r0, 80137a0 <rcl_send_response+0x20>
 801378c:	b159      	cbz	r1, 80137a6 <rcl_send_response+0x26>
 801378e:	b510      	push	{r4, lr}
 8013790:	b15a      	cbz	r2, 80137aa <rcl_send_response+0x2a>
 8013792:	f7fb f8ab 	bl	800e8ec <rmw_send_response>
 8013796:	b110      	cbz	r0, 801379e <rcl_send_response+0x1e>
 8013798:	2802      	cmp	r0, #2
 801379a:	bf18      	it	ne
 801379c:	2001      	movne	r0, #1
 801379e:	bd10      	pop	{r4, pc}
 80137a0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80137a4:	4770      	bx	lr
 80137a6:	200b      	movs	r0, #11
 80137a8:	4770      	bx	lr
 80137aa:	200b      	movs	r0, #11
 80137ac:	bd10      	pop	{r4, pc}
 80137ae:	bf00      	nop

080137b0 <rcl_service_is_valid>:
 80137b0:	b130      	cbz	r0, 80137c0 <rcl_service_is_valid+0x10>
 80137b2:	6800      	ldr	r0, [r0, #0]
 80137b4:	b120      	cbz	r0, 80137c0 <rcl_service_is_valid+0x10>
 80137b6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80137ba:	3800      	subs	r0, #0
 80137bc:	bf18      	it	ne
 80137be:	2001      	movne	r0, #1
 80137c0:	4770      	bx	lr
 80137c2:	bf00      	nop

080137c4 <rcl_take>:
 80137c4:	2800      	cmp	r0, #0
 80137c6:	d04a      	beq.n	801385e <rcl_take+0x9a>
 80137c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137cc:	4604      	mov	r4, r0
 80137ce:	6800      	ldr	r0, [r0, #0]
 80137d0:	b0a4      	sub	sp, #144	@ 0x90
 80137d2:	2800      	cmp	r0, #0
 80137d4:	d03b      	beq.n	801384e <rcl_take+0x8a>
 80137d6:	461f      	mov	r7, r3
 80137d8:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d036      	beq.n	801384e <rcl_take+0x8a>
 80137e0:	460e      	mov	r6, r1
 80137e2:	2900      	cmp	r1, #0
 80137e4:	d039      	beq.n	801385a <rcl_take+0x96>
 80137e6:	4615      	mov	r5, r2
 80137e8:	2a00      	cmp	r2, #0
 80137ea:	d03c      	beq.n	8013866 <rcl_take+0xa2>
 80137ec:	a802      	add	r0, sp, #8
 80137ee:	f002 f933 	bl	8015a58 <rmw_get_zero_initialized_message_info>
 80137f2:	f10d 0c08 	add.w	ip, sp, #8
 80137f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80137fa:	46ae      	mov	lr, r5
 80137fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013800:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013804:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013808:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801380c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013810:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8013814:	f04f 0800 	mov.w	r8, #0
 8013818:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801381c:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8013820:	6822      	ldr	r2, [r4, #0]
 8013822:	462b      	mov	r3, r5
 8013824:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8013828:	9700      	str	r7, [sp, #0]
 801382a:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801382e:	4631      	mov	r1, r6
 8013830:	f002 fac0 	bl	8015db4 <rmw_take_with_info>
 8013834:	4603      	mov	r3, r0
 8013836:	b9c0      	cbnz	r0, 801386a <rcl_take+0xa6>
 8013838:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 801383c:	f240 1291 	movw	r2, #401	@ 0x191
 8013840:	2900      	cmp	r1, #0
 8013842:	bf08      	it	eq
 8013844:	4613      	moveq	r3, r2
 8013846:	4618      	mov	r0, r3
 8013848:	b024      	add	sp, #144	@ 0x90
 801384a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801384e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8013852:	4618      	mov	r0, r3
 8013854:	b024      	add	sp, #144	@ 0x90
 8013856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801385a:	230b      	movs	r3, #11
 801385c:	e7f3      	b.n	8013846 <rcl_take+0x82>
 801385e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8013862:	4618      	mov	r0, r3
 8013864:	4770      	bx	lr
 8013866:	ad14      	add	r5, sp, #80	@ 0x50
 8013868:	e7c0      	b.n	80137ec <rcl_take+0x28>
 801386a:	f7ff fa2b 	bl	8012cc4 <rcl_convert_rmw_ret_to_rcl_ret>
 801386e:	4603      	mov	r3, r0
 8013870:	e7e9      	b.n	8013846 <rcl_take+0x82>
 8013872:	bf00      	nop

08013874 <rcl_subscription_get_rmw_handle>:
 8013874:	b118      	cbz	r0, 801387e <rcl_subscription_get_rmw_handle+0xa>
 8013876:	6800      	ldr	r0, [r0, #0]
 8013878:	b108      	cbz	r0, 801387e <rcl_subscription_get_rmw_handle+0xa>
 801387a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801387e:	4770      	bx	lr

08013880 <rcl_subscription_is_valid>:
 8013880:	b130      	cbz	r0, 8013890 <rcl_subscription_is_valid+0x10>
 8013882:	6800      	ldr	r0, [r0, #0]
 8013884:	b120      	cbz	r0, 8013890 <rcl_subscription_is_valid+0x10>
 8013886:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801388a:	3800      	subs	r0, #0
 801388c:	bf18      	it	ne
 801388e:	2001      	movne	r0, #1
 8013890:	4770      	bx	lr
 8013892:	bf00      	nop

08013894 <rcl_get_system_time>:
 8013894:	4608      	mov	r0, r1
 8013896:	f7f9 bf6b 	b.w	800d770 <rcutils_system_time_now>
 801389a:	bf00      	nop

0801389c <rcl_get_steady_time>:
 801389c:	4608      	mov	r0, r1
 801389e:	f7f9 bf8f 	b.w	800d7c0 <rcutils_steady_time_now>
 80138a2:	bf00      	nop

080138a4 <rcl_get_ros_time>:
 80138a4:	7a03      	ldrb	r3, [r0, #8]
 80138a6:	b510      	push	{r4, lr}
 80138a8:	460c      	mov	r4, r1
 80138aa:	b133      	cbz	r3, 80138ba <rcl_get_ros_time+0x16>
 80138ac:	2105      	movs	r1, #5
 80138ae:	f7f9 fbeb 	bl	800d088 <__atomic_load_8>
 80138b2:	e9c4 0100 	strd	r0, r1, [r4]
 80138b6:	2000      	movs	r0, #0
 80138b8:	bd10      	pop	{r4, pc}
 80138ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80138be:	4608      	mov	r0, r1
 80138c0:	f7f9 bf56 	b.w	800d770 <rcutils_system_time_now>

080138c4 <rcl_clock_init>:
 80138c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138c6:	4605      	mov	r5, r0
 80138c8:	4610      	mov	r0, r2
 80138ca:	4614      	mov	r4, r2
 80138cc:	460e      	mov	r6, r1
 80138ce:	f7f9 fbcd 	bl	800d06c <rcutils_allocator_is_valid>
 80138d2:	b128      	cbz	r0, 80138e0 <rcl_clock_init+0x1c>
 80138d4:	2d03      	cmp	r5, #3
 80138d6:	d803      	bhi.n	80138e0 <rcl_clock_init+0x1c>
 80138d8:	e8df f005 	tbb	[pc, r5]
 80138dc:	06532e1d 	.word	0x06532e1d
 80138e0:	f04f 0c0b 	mov.w	ip, #11
 80138e4:	4660      	mov	r0, ip
 80138e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138e8:	2e00      	cmp	r6, #0
 80138ea:	d0f9      	beq.n	80138e0 <rcl_clock_init+0x1c>
 80138ec:	2c00      	cmp	r4, #0
 80138ee:	d0f7      	beq.n	80138e0 <rcl_clock_init+0x1c>
 80138f0:	2300      	movs	r3, #0
 80138f2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80138f6:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80139ac <rcl_clock_init+0xe8>
 80138fa:	6133      	str	r3, [r6, #16]
 80138fc:	f106 0514 	add.w	r5, r6, #20
 8013900:	469c      	mov	ip, r3
 8013902:	2703      	movs	r7, #3
 8013904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013906:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013908:	6823      	ldr	r3, [r4, #0]
 801390a:	602b      	str	r3, [r5, #0]
 801390c:	7037      	strb	r7, [r6, #0]
 801390e:	f8c6 e00c 	str.w	lr, [r6, #12]
 8013912:	4660      	mov	r0, ip
 8013914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013916:	2e00      	cmp	r6, #0
 8013918:	d0e2      	beq.n	80138e0 <rcl_clock_init+0x1c>
 801391a:	2300      	movs	r3, #0
 801391c:	7033      	strb	r3, [r6, #0]
 801391e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013922:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8013926:	469c      	mov	ip, r3
 8013928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801392a:	f106 0514 	add.w	r5, r6, #20
 801392e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013930:	6823      	ldr	r3, [r4, #0]
 8013932:	602b      	str	r3, [r5, #0]
 8013934:	4660      	mov	r0, ip
 8013936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013938:	2e00      	cmp	r6, #0
 801393a:	d0d1      	beq.n	80138e0 <rcl_clock_init+0x1c>
 801393c:	2c00      	cmp	r4, #0
 801393e:	d0cf      	beq.n	80138e0 <rcl_clock_init+0x1c>
 8013940:	2700      	movs	r7, #0
 8013942:	7037      	strb	r7, [r6, #0]
 8013944:	46a4      	mov	ip, r4
 8013946:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801394a:	f106 0514 	add.w	r5, r6, #20
 801394e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8013952:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8013956:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013958:	f8dc 3000 	ldr.w	r3, [ip]
 801395c:	602b      	str	r3, [r5, #0]
 801395e:	6921      	ldr	r1, [r4, #16]
 8013960:	6823      	ldr	r3, [r4, #0]
 8013962:	2010      	movs	r0, #16
 8013964:	4798      	blx	r3
 8013966:	6130      	str	r0, [r6, #16]
 8013968:	b1d0      	cbz	r0, 80139a0 <rcl_clock_init+0xdc>
 801396a:	2200      	movs	r2, #0
 801396c:	2300      	movs	r3, #0
 801396e:	e9c0 2300 	strd	r2, r3, [r0]
 8013972:	2301      	movs	r3, #1
 8013974:	7207      	strb	r7, [r0, #8]
 8013976:	4a0c      	ldr	r2, [pc, #48]	@ (80139a8 <rcl_clock_init+0xe4>)
 8013978:	7033      	strb	r3, [r6, #0]
 801397a:	46bc      	mov	ip, r7
 801397c:	60f2      	str	r2, [r6, #12]
 801397e:	4660      	mov	r0, ip
 8013980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013982:	2e00      	cmp	r6, #0
 8013984:	d0ac      	beq.n	80138e0 <rcl_clock_init+0x1c>
 8013986:	2c00      	cmp	r4, #0
 8013988:	d0aa      	beq.n	80138e0 <rcl_clock_init+0x1c>
 801398a:	2300      	movs	r3, #0
 801398c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013990:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 80139b0 <rcl_clock_init+0xec>
 8013994:	6133      	str	r3, [r6, #16]
 8013996:	f106 0514 	add.w	r5, r6, #20
 801399a:	469c      	mov	ip, r3
 801399c:	2702      	movs	r7, #2
 801399e:	e7b1      	b.n	8013904 <rcl_clock_init+0x40>
 80139a0:	f04f 0c0a 	mov.w	ip, #10
 80139a4:	e79e      	b.n	80138e4 <rcl_clock_init+0x20>
 80139a6:	bf00      	nop
 80139a8:	080138a5 	.word	0x080138a5
 80139ac:	0801389d 	.word	0x0801389d
 80139b0:	08013895 	.word	0x08013895

080139b4 <rcl_clock_get_now>:
 80139b4:	b140      	cbz	r0, 80139c8 <rcl_clock_get_now+0x14>
 80139b6:	b139      	cbz	r1, 80139c8 <rcl_clock_get_now+0x14>
 80139b8:	7803      	ldrb	r3, [r0, #0]
 80139ba:	b11b      	cbz	r3, 80139c4 <rcl_clock_get_now+0x10>
 80139bc:	68c3      	ldr	r3, [r0, #12]
 80139be:	b10b      	cbz	r3, 80139c4 <rcl_clock_get_now+0x10>
 80139c0:	6900      	ldr	r0, [r0, #16]
 80139c2:	4718      	bx	r3
 80139c4:	2001      	movs	r0, #1
 80139c6:	4770      	bx	lr
 80139c8:	200b      	movs	r0, #11
 80139ca:	4770      	bx	lr

080139cc <rcl_clock_add_jump_callback>:
 80139cc:	b082      	sub	sp, #8
 80139ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139d2:	a906      	add	r1, sp, #24
 80139d4:	e881 000c 	stmia.w	r1, {r2, r3}
 80139d8:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 80139dc:	b320      	cbz	r0, 8013a28 <rcl_clock_add_jump_callback+0x5c>
 80139de:	4604      	mov	r4, r0
 80139e0:	3014      	adds	r0, #20
 80139e2:	f7f9 fb43 	bl	800d06c <rcutils_allocator_is_valid>
 80139e6:	b1f8      	cbz	r0, 8013a28 <rcl_clock_add_jump_callback+0x5c>
 80139e8:	b1f6      	cbz	r6, 8013a28 <rcl_clock_add_jump_callback+0x5c>
 80139ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	db1b      	blt.n	8013a28 <rcl_clock_add_jump_callback+0x5c>
 80139f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80139f4:	2a01      	cmp	r2, #1
 80139f6:	f173 0300 	sbcs.w	r3, r3, #0
 80139fa:	da15      	bge.n	8013a28 <rcl_clock_add_jump_callback+0x5c>
 80139fc:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8013a00:	2f00      	cmp	r7, #0
 8013a02:	d042      	beq.n	8013a8a <rcl_clock_add_jump_callback+0xbe>
 8013a04:	2300      	movs	r3, #0
 8013a06:	4602      	mov	r2, r0
 8013a08:	e003      	b.n	8013a12 <rcl_clock_add_jump_callback+0x46>
 8013a0a:	42bb      	cmp	r3, r7
 8013a0c:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8013a10:	d011      	beq.n	8013a36 <rcl_clock_add_jump_callback+0x6a>
 8013a12:	6811      	ldr	r1, [r2, #0]
 8013a14:	42b1      	cmp	r1, r6
 8013a16:	f103 0301 	add.w	r3, r3, #1
 8013a1a:	d1f6      	bne.n	8013a0a <rcl_clock_add_jump_callback+0x3e>
 8013a1c:	6a11      	ldr	r1, [r2, #32]
 8013a1e:	42a9      	cmp	r1, r5
 8013a20:	d1f3      	bne.n	8013a0a <rcl_clock_add_jump_callback+0x3e>
 8013a22:	f04f 0e01 	mov.w	lr, #1
 8013a26:	e001      	b.n	8013a2c <rcl_clock_add_jump_callback+0x60>
 8013a28:	f04f 0e0b 	mov.w	lr, #11
 8013a2c:	4670      	mov	r0, lr
 8013a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a32:	b002      	add	sp, #8
 8013a34:	4770      	bx	lr
 8013a36:	3301      	adds	r3, #1
 8013a38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8013a3c:	00d9      	lsls	r1, r3, #3
 8013a3e:	69e3      	ldr	r3, [r4, #28]
 8013a40:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8013a42:	4798      	blx	r3
 8013a44:	b1f0      	cbz	r0, 8013a84 <rcl_clock_add_jump_callback+0xb8>
 8013a46:	68a3      	ldr	r3, [r4, #8]
 8013a48:	6060      	str	r0, [r4, #4]
 8013a4a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8013a4e:	f10d 0c18 	add.w	ip, sp, #24
 8013a52:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8013a56:	f103 0801 	add.w	r8, r3, #1
 8013a5a:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8013a5e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013a62:	f106 0708 	add.w	r7, r6, #8
 8013a66:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013a68:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8013a6c:	f04f 0e00 	mov.w	lr, #0
 8013a70:	e887 0003 	stmia.w	r7, {r0, r1}
 8013a74:	6235      	str	r5, [r6, #32]
 8013a76:	4670      	mov	r0, lr
 8013a78:	f8c4 8008 	str.w	r8, [r4, #8]
 8013a7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a80:	b002      	add	sp, #8
 8013a82:	4770      	bx	lr
 8013a84:	f04f 0e0a 	mov.w	lr, #10
 8013a88:	e7d0      	b.n	8013a2c <rcl_clock_add_jump_callback+0x60>
 8013a8a:	2128      	movs	r1, #40	@ 0x28
 8013a8c:	e7d7      	b.n	8013a3e <rcl_clock_add_jump_callback+0x72>
 8013a8e:	bf00      	nop

08013a90 <rcl_clock_remove_jump_callback>:
 8013a90:	2800      	cmp	r0, #0
 8013a92:	d057      	beq.n	8013b44 <rcl_clock_remove_jump_callback+0xb4>
 8013a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a98:	4605      	mov	r5, r0
 8013a9a:	3014      	adds	r0, #20
 8013a9c:	4688      	mov	r8, r1
 8013a9e:	4692      	mov	sl, r2
 8013aa0:	f7f9 fae4 	bl	800d06c <rcutils_allocator_is_valid>
 8013aa4:	2800      	cmp	r0, #0
 8013aa6:	d03b      	beq.n	8013b20 <rcl_clock_remove_jump_callback+0x90>
 8013aa8:	f1b8 0f00 	cmp.w	r8, #0
 8013aac:	d038      	beq.n	8013b20 <rcl_clock_remove_jump_callback+0x90>
 8013aae:	68ae      	ldr	r6, [r5, #8]
 8013ab0:	b166      	cbz	r6, 8013acc <rcl_clock_remove_jump_callback+0x3c>
 8013ab2:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8013ab6:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8013aba:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8013abe:	464c      	mov	r4, r9
 8013ac0:	6823      	ldr	r3, [r4, #0]
 8013ac2:	4543      	cmp	r3, r8
 8013ac4:	d005      	beq.n	8013ad2 <rcl_clock_remove_jump_callback+0x42>
 8013ac6:	3428      	adds	r4, #40	@ 0x28
 8013ac8:	42a7      	cmp	r7, r4
 8013aca:	d1f9      	bne.n	8013ac0 <rcl_clock_remove_jump_callback+0x30>
 8013acc:	2001      	movs	r0, #1
 8013ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ad2:	6a23      	ldr	r3, [r4, #32]
 8013ad4:	3428      	adds	r4, #40	@ 0x28
 8013ad6:	42bc      	cmp	r4, r7
 8013ad8:	d02d      	beq.n	8013b36 <rcl_clock_remove_jump_callback+0xa6>
 8013ada:	4553      	cmp	r3, sl
 8013adc:	d1f0      	bne.n	8013ac0 <rcl_clock_remove_jump_callback+0x30>
 8013ade:	46a6      	mov	lr, r4
 8013ae0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013ae4:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8013ae8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013aec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013af0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013af4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013af8:	3428      	adds	r4, #40	@ 0x28
 8013afa:	42a7      	cmp	r7, r4
 8013afc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013b00:	d1ed      	bne.n	8013ade <rcl_clock_remove_jump_callback+0x4e>
 8013b02:	3e01      	subs	r6, #1
 8013b04:	60ae      	str	r6, [r5, #8]
 8013b06:	b176      	cbz	r6, 8013b26 <rcl_clock_remove_jump_callback+0x96>
 8013b08:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8013b0c:	69eb      	ldr	r3, [r5, #28]
 8013b0e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8013b10:	00f1      	lsls	r1, r6, #3
 8013b12:	4648      	mov	r0, r9
 8013b14:	4798      	blx	r3
 8013b16:	b1b8      	cbz	r0, 8013b48 <rcl_clock_remove_jump_callback+0xb8>
 8013b18:	6068      	str	r0, [r5, #4]
 8013b1a:	2000      	movs	r0, #0
 8013b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b20:	200b      	movs	r0, #11
 8013b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b26:	4648      	mov	r0, r9
 8013b28:	69ab      	ldr	r3, [r5, #24]
 8013b2a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8013b2c:	4798      	blx	r3
 8013b2e:	606e      	str	r6, [r5, #4]
 8013b30:	4630      	mov	r0, r6
 8013b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b36:	4553      	cmp	r3, sl
 8013b38:	d1c8      	bne.n	8013acc <rcl_clock_remove_jump_callback+0x3c>
 8013b3a:	3e01      	subs	r6, #1
 8013b3c:	60ae      	str	r6, [r5, #8]
 8013b3e:	2e00      	cmp	r6, #0
 8013b40:	d1e2      	bne.n	8013b08 <rcl_clock_remove_jump_callback+0x78>
 8013b42:	e7f0      	b.n	8013b26 <rcl_clock_remove_jump_callback+0x96>
 8013b44:	200b      	movs	r0, #11
 8013b46:	4770      	bx	lr
 8013b48:	200a      	movs	r0, #10
 8013b4a:	e7ea      	b.n	8013b22 <rcl_clock_remove_jump_callback+0x92>

08013b4c <_rcl_timer_time_jump>:
 8013b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b50:	4605      	mov	r5, r0
 8013b52:	b084      	sub	sp, #16
 8013b54:	4614      	mov	r4, r2
 8013b56:	b131      	cbz	r1, 8013b66 <_rcl_timer_time_jump+0x1a>
 8013b58:	7803      	ldrb	r3, [r0, #0]
 8013b5a:	3b02      	subs	r3, #2
 8013b5c:	2b01      	cmp	r3, #1
 8013b5e:	d93f      	bls.n	8013be0 <_rcl_timer_time_jump+0x94>
 8013b60:	b004      	add	sp, #16
 8013b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b66:	6813      	ldr	r3, [r2, #0]
 8013b68:	a902      	add	r1, sp, #8
 8013b6a:	6818      	ldr	r0, [r3, #0]
 8013b6c:	f7ff ff22 	bl	80139b4 <rcl_clock_get_now>
 8013b70:	2800      	cmp	r0, #0
 8013b72:	d1f5      	bne.n	8013b60 <_rcl_timer_time_jump+0x14>
 8013b74:	6820      	ldr	r0, [r4, #0]
 8013b76:	2105      	movs	r1, #5
 8013b78:	3020      	adds	r0, #32
 8013b7a:	f7f9 fa85 	bl	800d088 <__atomic_load_8>
 8013b7e:	6823      	ldr	r3, [r4, #0]
 8013b80:	4681      	mov	r9, r0
 8013b82:	4688      	mov	r8, r1
 8013b84:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8013b88:	2105      	movs	r1, #5
 8013b8a:	f7f9 fa7d 	bl	800d088 <__atomic_load_8>
 8013b8e:	4607      	mov	r7, r0
 8013b90:	6820      	ldr	r0, [r4, #0]
 8013b92:	460e      	mov	r6, r1
 8013b94:	3018      	adds	r0, #24
 8013b96:	2105      	movs	r1, #5
 8013b98:	f7f9 fa76 	bl	800d088 <__atomic_load_8>
 8013b9c:	782b      	ldrb	r3, [r5, #0]
 8013b9e:	9a02      	ldr	r2, [sp, #8]
 8013ba0:	3b02      	subs	r3, #2
 8013ba2:	2b01      	cmp	r3, #1
 8013ba4:	460d      	mov	r5, r1
 8013ba6:	9b03      	ldr	r3, [sp, #12]
 8013ba8:	4682      	mov	sl, r0
 8013baa:	d937      	bls.n	8013c1c <_rcl_timer_time_jump+0xd0>
 8013bac:	42ba      	cmp	r2, r7
 8013bae:	eb73 0106 	sbcs.w	r1, r3, r6
 8013bb2:	da5f      	bge.n	8013c74 <_rcl_timer_time_jump+0x128>
 8013bb4:	454a      	cmp	r2, r9
 8013bb6:	eb73 0108 	sbcs.w	r1, r3, r8
 8013bba:	dad1      	bge.n	8013b60 <_rcl_timer_time_jump+0x14>
 8013bbc:	6820      	ldr	r0, [r4, #0]
 8013bbe:	eb1a 0202 	adds.w	r2, sl, r2
 8013bc2:	eb43 0305 	adc.w	r3, r3, r5
 8013bc6:	2505      	movs	r5, #5
 8013bc8:	3028      	adds	r0, #40	@ 0x28
 8013bca:	9500      	str	r5, [sp, #0]
 8013bcc:	f7f9 fa92 	bl	800d0f4 <__atomic_store_8>
 8013bd0:	6820      	ldr	r0, [r4, #0]
 8013bd2:	9500      	str	r5, [sp, #0]
 8013bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013bd8:	3020      	adds	r0, #32
 8013bda:	f7f9 fa8b 	bl	800d0f4 <__atomic_store_8>
 8013bde:	e7bf      	b.n	8013b60 <_rcl_timer_time_jump+0x14>
 8013be0:	6813      	ldr	r3, [r2, #0]
 8013be2:	a902      	add	r1, sp, #8
 8013be4:	6818      	ldr	r0, [r3, #0]
 8013be6:	f7ff fee5 	bl	80139b4 <rcl_clock_get_now>
 8013bea:	2800      	cmp	r0, #0
 8013bec:	d1b8      	bne.n	8013b60 <_rcl_timer_time_jump+0x14>
 8013bee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013bf2:	4313      	orrs	r3, r2
 8013bf4:	d0b4      	beq.n	8013b60 <_rcl_timer_time_jump+0x14>
 8013bf6:	6820      	ldr	r0, [r4, #0]
 8013bf8:	2105      	movs	r1, #5
 8013bfa:	3028      	adds	r0, #40	@ 0x28
 8013bfc:	f7f9 fa44 	bl	800d088 <__atomic_load_8>
 8013c00:	9d02      	ldr	r5, [sp, #8]
 8013c02:	9b03      	ldr	r3, [sp, #12]
 8013c04:	4602      	mov	r2, r0
 8013c06:	6820      	ldr	r0, [r4, #0]
 8013c08:	1b52      	subs	r2, r2, r5
 8013c0a:	f04f 0405 	mov.w	r4, #5
 8013c0e:	9400      	str	r4, [sp, #0]
 8013c10:	eb61 0303 	sbc.w	r3, r1, r3
 8013c14:	3030      	adds	r0, #48	@ 0x30
 8013c16:	f7f9 fa6d 	bl	800d0f4 <__atomic_store_8>
 8013c1a:	e7a1      	b.n	8013b60 <_rcl_timer_time_jump+0x14>
 8013c1c:	4313      	orrs	r3, r2
 8013c1e:	d09f      	beq.n	8013b60 <_rcl_timer_time_jump+0x14>
 8013c20:	6820      	ldr	r0, [r4, #0]
 8013c22:	f04f 0805 	mov.w	r8, #5
 8013c26:	2300      	movs	r3, #0
 8013c28:	f8cd 8000 	str.w	r8, [sp]
 8013c2c:	3030      	adds	r0, #48	@ 0x30
 8013c2e:	2200      	movs	r2, #0
 8013c30:	f7f9 fa96 	bl	800d160 <__atomic_exchange_8>
 8013c34:	ea51 0300 	orrs.w	r3, r1, r0
 8013c38:	4606      	mov	r6, r0
 8013c3a:	460f      	mov	r7, r1
 8013c3c:	d090      	beq.n	8013b60 <_rcl_timer_time_jump+0x14>
 8013c3e:	9a02      	ldr	r2, [sp, #8]
 8013c40:	9b03      	ldr	r3, [sp, #12]
 8013c42:	f8cd 8000 	str.w	r8, [sp]
 8013c46:	1a12      	subs	r2, r2, r0
 8013c48:	6820      	ldr	r0, [r4, #0]
 8013c4a:	eb63 0301 	sbc.w	r3, r3, r1
 8013c4e:	eb12 020a 	adds.w	r2, r2, sl
 8013c52:	eb43 0305 	adc.w	r3, r3, r5
 8013c56:	3028      	adds	r0, #40	@ 0x28
 8013c58:	f7f9 fa4c 	bl	800d0f4 <__atomic_store_8>
 8013c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013c60:	f8cd 8000 	str.w	r8, [sp]
 8013c64:	6820      	ldr	r0, [r4, #0]
 8013c66:	1b92      	subs	r2, r2, r6
 8013c68:	eb63 0307 	sbc.w	r3, r3, r7
 8013c6c:	3020      	adds	r0, #32
 8013c6e:	f7f9 fa41 	bl	800d0f4 <__atomic_store_8>
 8013c72:	e775      	b.n	8013b60 <_rcl_timer_time_jump+0x14>
 8013c74:	6820      	ldr	r0, [r4, #0]
 8013c76:	3008      	adds	r0, #8
 8013c78:	f7ff fb04 	bl	8013284 <rcl_trigger_guard_condition>
 8013c7c:	e770      	b.n	8013b60 <_rcl_timer_time_jump+0x14>
 8013c7e:	bf00      	nop

08013c80 <rcl_get_zero_initialized_timer>:
 8013c80:	4b01      	ldr	r3, [pc, #4]	@ (8013c88 <rcl_get_zero_initialized_timer+0x8>)
 8013c82:	6818      	ldr	r0, [r3, #0]
 8013c84:	4770      	bx	lr
 8013c86:	bf00      	nop
 8013c88:	08019660 	.word	0x08019660
 8013c8c:	00000000 	.word	0x00000000

08013c90 <rcl_timer_init>:
 8013c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c94:	b0aa      	sub	sp, #168	@ 0xa8
 8013c96:	4604      	mov	r4, r0
 8013c98:	a835      	add	r0, sp, #212	@ 0xd4
 8013c9a:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 8013c9e:	460d      	mov	r5, r1
 8013ca0:	4692      	mov	sl, r2
 8013ca2:	f7f9 f9e3 	bl	800d06c <rcutils_allocator_is_valid>
 8013ca6:	2800      	cmp	r0, #0
 8013ca8:	d064      	beq.n	8013d74 <rcl_timer_init+0xe4>
 8013caa:	2c00      	cmp	r4, #0
 8013cac:	d062      	beq.n	8013d74 <rcl_timer_init+0xe4>
 8013cae:	2d00      	cmp	r5, #0
 8013cb0:	d060      	beq.n	8013d74 <rcl_timer_init+0xe4>
 8013cb2:	2f00      	cmp	r7, #0
 8013cb4:	db5e      	blt.n	8013d74 <rcl_timer_init+0xe4>
 8013cb6:	6823      	ldr	r3, [r4, #0]
 8013cb8:	b123      	cbz	r3, 8013cc4 <rcl_timer_init+0x34>
 8013cba:	2664      	movs	r6, #100	@ 0x64
 8013cbc:	4630      	mov	r0, r6
 8013cbe:	b02a      	add	sp, #168	@ 0xa8
 8013cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cc4:	a908      	add	r1, sp, #32
 8013cc6:	4628      	mov	r0, r5
 8013cc8:	f7ff fe74 	bl	80139b4 <rcl_clock_get_now>
 8013ccc:	4606      	mov	r6, r0
 8013cce:	2800      	cmp	r0, #0
 8013cd0:	d1f4      	bne.n	8013cbc <rcl_timer_init+0x2c>
 8013cd2:	ae06      	add	r6, sp, #24
 8013cd4:	4630      	mov	r0, r6
 8013cd6:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8013cda:	f7ff f9db 	bl	8013094 <rcl_get_zero_initialized_guard_condition>
 8013cde:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013ce2:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8013ce6:	ae0b      	add	r6, sp, #44	@ 0x2c
 8013ce8:	e889 0003 	stmia.w	r9, {r0, r1}
 8013cec:	4630      	mov	r0, r6
 8013cee:	f7ff faad 	bl	801324c <rcl_guard_condition_get_default_options>
 8013cf2:	ab0d      	add	r3, sp, #52	@ 0x34
 8013cf4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013cf8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013cfc:	4651      	mov	r1, sl
 8013cfe:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013d02:	4648      	mov	r0, r9
 8013d04:	f7ff f9d0 	bl	80130a8 <rcl_guard_condition_init>
 8013d08:	4606      	mov	r6, r0
 8013d0a:	2800      	cmp	r0, #0
 8013d0c:	d1d6      	bne.n	8013cbc <rcl_timer_init+0x2c>
 8013d0e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013d10:	781b      	ldrb	r3, [r3, #0]
 8013d12:	2b01      	cmp	r3, #1
 8013d14:	d033      	beq.n	8013d7e <rcl_timer_init+0xee>
 8013d16:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8013d18:	911a      	str	r1, [sp, #104]	@ 0x68
 8013d1a:	4642      	mov	r2, r8
 8013d1c:	463b      	mov	r3, r7
 8013d1e:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8013d22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013d26:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8013dd8 <rcl_timer_init+0x148>
 8013d2a:	eb12 0008 	adds.w	r0, r2, r8
 8013d2e:	eb47 0103 	adc.w	r1, r7, r3
 8013d32:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8013d36:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8013d3a:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8013d3e:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8013d42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013d46:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8013d4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013d4e:	f8de 3000 	ldr.w	r3, [lr]
 8013d52:	f8cc 3000 	str.w	r3, [ip]
 8013d56:	f04f 0a00 	mov.w	sl, #0
 8013d5a:	4619      	mov	r1, r3
 8013d5c:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8013d60:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8013d62:	2050      	movs	r0, #80	@ 0x50
 8013d64:	4798      	blx	r3
 8013d66:	6020      	str	r0, [r4, #0]
 8013d68:	b358      	cbz	r0, 8013dc2 <rcl_timer_init+0x132>
 8013d6a:	2250      	movs	r2, #80	@ 0x50
 8013d6c:	a916      	add	r1, sp, #88	@ 0x58
 8013d6e:	f003 fe14 	bl	801799a <memcpy>
 8013d72:	e7a3      	b.n	8013cbc <rcl_timer_init+0x2c>
 8013d74:	260b      	movs	r6, #11
 8013d76:	4630      	mov	r0, r6
 8013d78:	b02a      	add	sp, #168	@ 0xa8
 8013d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d7e:	2001      	movs	r0, #1
 8013d80:	2100      	movs	r1, #0
 8013d82:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8013d86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013d8a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8013d8e:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8013d92:	4a13      	ldr	r2, [pc, #76]	@ (8013de0 <rcl_timer_init+0x150>)
 8013d94:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8013d98:	9405      	str	r4, [sp, #20]
 8013d9a:	9204      	str	r2, [sp, #16]
 8013d9c:	ab12      	add	r3, sp, #72	@ 0x48
 8013d9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013da0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013da4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8013da8:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8013dac:	4628      	mov	r0, r5
 8013dae:	f7ff fe0d 	bl	80139cc <rcl_clock_add_jump_callback>
 8013db2:	4682      	mov	sl, r0
 8013db4:	2800      	cmp	r0, #0
 8013db6:	d0ae      	beq.n	8013d16 <rcl_timer_init+0x86>
 8013db8:	4648      	mov	r0, r9
 8013dba:	f7ff fa21 	bl	8013200 <rcl_guard_condition_fini>
 8013dbe:	4656      	mov	r6, sl
 8013dc0:	e77c      	b.n	8013cbc <rcl_timer_init+0x2c>
 8013dc2:	4648      	mov	r0, r9
 8013dc4:	f7ff fa1c 	bl	8013200 <rcl_guard_condition_fini>
 8013dc8:	4905      	ldr	r1, [pc, #20]	@ (8013de0 <rcl_timer_init+0x150>)
 8013dca:	4622      	mov	r2, r4
 8013dcc:	4628      	mov	r0, r5
 8013dce:	f7ff fe5f 	bl	8013a90 <rcl_clock_remove_jump_callback>
 8013dd2:	260a      	movs	r6, #10
 8013dd4:	e772      	b.n	8013cbc <rcl_timer_init+0x2c>
 8013dd6:	bf00      	nop
	...
 8013de0:	08013b4d 	.word	0x08013b4d

08013de4 <rcl_timer_call>:
 8013de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013de8:	b087      	sub	sp, #28
 8013dea:	2800      	cmp	r0, #0
 8013dec:	d06d      	beq.n	8013eca <rcl_timer_call+0xe6>
 8013dee:	6803      	ldr	r3, [r0, #0]
 8013df0:	4604      	mov	r4, r0
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d063      	beq.n	8013ebe <rcl_timer_call+0xda>
 8013df6:	f3bf 8f5b 	dmb	ish
 8013dfa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013dfe:	f3bf 8f5b 	dmb	ish
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d150      	bne.n	8013ea8 <rcl_timer_call+0xc4>
 8013e06:	6803      	ldr	r3, [r0, #0]
 8013e08:	a904      	add	r1, sp, #16
 8013e0a:	6818      	ldr	r0, [r3, #0]
 8013e0c:	f7ff fdd2 	bl	80139b4 <rcl_clock_get_now>
 8013e10:	4605      	mov	r5, r0
 8013e12:	2800      	cmp	r0, #0
 8013e14:	d14a      	bne.n	8013eac <rcl_timer_call+0xc8>
 8013e16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	db4a      	blt.n	8013eb4 <rcl_timer_call+0xd0>
 8013e1e:	6820      	ldr	r0, [r4, #0]
 8013e20:	f04f 0a05 	mov.w	sl, #5
 8013e24:	f8cd a000 	str.w	sl, [sp]
 8013e28:	3020      	adds	r0, #32
 8013e2a:	f7f9 f999 	bl	800d160 <__atomic_exchange_8>
 8013e2e:	6823      	ldr	r3, [r4, #0]
 8013e30:	f3bf 8f5b 	dmb	ish
 8013e34:	4680      	mov	r8, r0
 8013e36:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8013e3a:	f3bf 8f5b 	dmb	ish
 8013e3e:	6820      	ldr	r0, [r4, #0]
 8013e40:	4689      	mov	r9, r1
 8013e42:	3028      	adds	r0, #40	@ 0x28
 8013e44:	4651      	mov	r1, sl
 8013e46:	f7f9 f91f 	bl	800d088 <__atomic_load_8>
 8013e4a:	4606      	mov	r6, r0
 8013e4c:	6820      	ldr	r0, [r4, #0]
 8013e4e:	460f      	mov	r7, r1
 8013e50:	3018      	adds	r0, #24
 8013e52:	4651      	mov	r1, sl
 8013e54:	f7f9 f918 	bl	800d088 <__atomic_load_8>
 8013e58:	1836      	adds	r6, r6, r0
 8013e5a:	4602      	mov	r2, r0
 8013e5c:	4682      	mov	sl, r0
 8013e5e:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8013e62:	eb47 0701 	adc.w	r7, r7, r1
 8013e66:	4286      	cmp	r6, r0
 8013e68:	460b      	mov	r3, r1
 8013e6a:	eb77 010c 	sbcs.w	r1, r7, ip
 8013e6e:	da04      	bge.n	8013e7a <rcl_timer_call+0x96>
 8013e70:	ea53 0102 	orrs.w	r1, r3, r2
 8013e74:	d12e      	bne.n	8013ed4 <rcl_timer_call+0xf0>
 8013e76:	4606      	mov	r6, r0
 8013e78:	4667      	mov	r7, ip
 8013e7a:	6820      	ldr	r0, [r4, #0]
 8013e7c:	2105      	movs	r1, #5
 8013e7e:	4632      	mov	r2, r6
 8013e80:	463b      	mov	r3, r7
 8013e82:	3028      	adds	r0, #40	@ 0x28
 8013e84:	9100      	str	r1, [sp, #0]
 8013e86:	f7f9 f935 	bl	800d0f4 <__atomic_store_8>
 8013e8a:	f1bb 0f00 	cmp.w	fp, #0
 8013e8e:	d00d      	beq.n	8013eac <rcl_timer_call+0xc8>
 8013e90:	9a04      	ldr	r2, [sp, #16]
 8013e92:	9b05      	ldr	r3, [sp, #20]
 8013e94:	ebb2 0208 	subs.w	r2, r2, r8
 8013e98:	4620      	mov	r0, r4
 8013e9a:	eb63 0309 	sbc.w	r3, r3, r9
 8013e9e:	47d8      	blx	fp
 8013ea0:	4628      	mov	r0, r5
 8013ea2:	b007      	add	sp, #28
 8013ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ea8:	f240 3521 	movw	r5, #801	@ 0x321
 8013eac:	4628      	mov	r0, r5
 8013eae:	b007      	add	sp, #28
 8013eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eb4:	2501      	movs	r5, #1
 8013eb6:	4628      	mov	r0, r5
 8013eb8:	b007      	add	sp, #28
 8013eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ebe:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8013ec2:	4628      	mov	r0, r5
 8013ec4:	b007      	add	sp, #28
 8013ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eca:	250b      	movs	r5, #11
 8013ecc:	4628      	mov	r0, r5
 8013ece:	b007      	add	sp, #28
 8013ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ed4:	1b80      	subs	r0, r0, r6
 8013ed6:	eb6c 0107 	sbc.w	r1, ip, r7
 8013eda:	3801      	subs	r0, #1
 8013edc:	f161 0100 	sbc.w	r1, r1, #0
 8013ee0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013ee4:	f7ec fbc0 	bl	8000668 <__aeabi_ldivmod>
 8013ee8:	9b02      	ldr	r3, [sp, #8]
 8013eea:	3001      	adds	r0, #1
 8013eec:	f141 0100 	adc.w	r1, r1, #0
 8013ef0:	fb00 f303 	mul.w	r3, r0, r3
 8013ef4:	fb01 330a 	mla	r3, r1, sl, r3
 8013ef8:	fba0 0a0a 	umull	r0, sl, r0, sl
 8013efc:	1986      	adds	r6, r0, r6
 8013efe:	4453      	add	r3, sl
 8013f00:	eb43 0707 	adc.w	r7, r3, r7
 8013f04:	e7b9      	b.n	8013e7a <rcl_timer_call+0x96>
 8013f06:	bf00      	nop

08013f08 <rcl_timer_is_ready>:
 8013f08:	b570      	push	{r4, r5, r6, lr}
 8013f0a:	b082      	sub	sp, #8
 8013f0c:	b378      	cbz	r0, 8013f6e <rcl_timer_is_ready+0x66>
 8013f0e:	6803      	ldr	r3, [r0, #0]
 8013f10:	4604      	mov	r4, r0
 8013f12:	b383      	cbz	r3, 8013f76 <rcl_timer_is_ready+0x6e>
 8013f14:	460d      	mov	r5, r1
 8013f16:	b351      	cbz	r1, 8013f6e <rcl_timer_is_ready+0x66>
 8013f18:	f3bf 8f5b 	dmb	ish
 8013f1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013f20:	f3bf 8f5b 	dmb	ish
 8013f24:	b953      	cbnz	r3, 8013f3c <rcl_timer_is_ready+0x34>
 8013f26:	6803      	ldr	r3, [r0, #0]
 8013f28:	4669      	mov	r1, sp
 8013f2a:	6818      	ldr	r0, [r3, #0]
 8013f2c:	f7ff fd42 	bl	80139b4 <rcl_clock_get_now>
 8013f30:	4606      	mov	r6, r0
 8013f32:	b140      	cbz	r0, 8013f46 <rcl_timer_is_ready+0x3e>
 8013f34:	f240 3321 	movw	r3, #801	@ 0x321
 8013f38:	4298      	cmp	r0, r3
 8013f3a:	d101      	bne.n	8013f40 <rcl_timer_is_ready+0x38>
 8013f3c:	2600      	movs	r6, #0
 8013f3e:	702e      	strb	r6, [r5, #0]
 8013f40:	4630      	mov	r0, r6
 8013f42:	b002      	add	sp, #8
 8013f44:	bd70      	pop	{r4, r5, r6, pc}
 8013f46:	6820      	ldr	r0, [r4, #0]
 8013f48:	2105      	movs	r1, #5
 8013f4a:	3028      	adds	r0, #40	@ 0x28
 8013f4c:	f7f9 f89c 	bl	800d088 <__atomic_load_8>
 8013f50:	9b00      	ldr	r3, [sp, #0]
 8013f52:	1ac0      	subs	r0, r0, r3
 8013f54:	9b01      	ldr	r3, [sp, #4]
 8013f56:	eb61 0103 	sbc.w	r1, r1, r3
 8013f5a:	2801      	cmp	r0, #1
 8013f5c:	f171 0300 	sbcs.w	r3, r1, #0
 8013f60:	bfb4      	ite	lt
 8013f62:	2301      	movlt	r3, #1
 8013f64:	2300      	movge	r3, #0
 8013f66:	4630      	mov	r0, r6
 8013f68:	702b      	strb	r3, [r5, #0]
 8013f6a:	b002      	add	sp, #8
 8013f6c:	bd70      	pop	{r4, r5, r6, pc}
 8013f6e:	260b      	movs	r6, #11
 8013f70:	4630      	mov	r0, r6
 8013f72:	b002      	add	sp, #8
 8013f74:	bd70      	pop	{r4, r5, r6, pc}
 8013f76:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8013f7a:	e7e1      	b.n	8013f40 <rcl_timer_is_ready+0x38>

08013f7c <rcl_timer_get_time_until_next_call>:
 8013f7c:	b570      	push	{r4, r5, r6, lr}
 8013f7e:	b082      	sub	sp, #8
 8013f80:	b330      	cbz	r0, 8013fd0 <rcl_timer_get_time_until_next_call+0x54>
 8013f82:	6803      	ldr	r3, [r0, #0]
 8013f84:	4604      	mov	r4, r0
 8013f86:	b33b      	cbz	r3, 8013fd8 <rcl_timer_get_time_until_next_call+0x5c>
 8013f88:	460d      	mov	r5, r1
 8013f8a:	b309      	cbz	r1, 8013fd0 <rcl_timer_get_time_until_next_call+0x54>
 8013f8c:	f3bf 8f5b 	dmb	ish
 8013f90:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013f94:	f3bf 8f5b 	dmb	ish
 8013f98:	b9ab      	cbnz	r3, 8013fc6 <rcl_timer_get_time_until_next_call+0x4a>
 8013f9a:	6803      	ldr	r3, [r0, #0]
 8013f9c:	4669      	mov	r1, sp
 8013f9e:	6818      	ldr	r0, [r3, #0]
 8013fa0:	f7ff fd08 	bl	80139b4 <rcl_clock_get_now>
 8013fa4:	4606      	mov	r6, r0
 8013fa6:	b958      	cbnz	r0, 8013fc0 <rcl_timer_get_time_until_next_call+0x44>
 8013fa8:	6820      	ldr	r0, [r4, #0]
 8013faa:	2105      	movs	r1, #5
 8013fac:	3028      	adds	r0, #40	@ 0x28
 8013fae:	f7f9 f86b 	bl	800d088 <__atomic_load_8>
 8013fb2:	9b00      	ldr	r3, [sp, #0]
 8013fb4:	1ac0      	subs	r0, r0, r3
 8013fb6:	9b01      	ldr	r3, [sp, #4]
 8013fb8:	6028      	str	r0, [r5, #0]
 8013fba:	eb61 0103 	sbc.w	r1, r1, r3
 8013fbe:	6069      	str	r1, [r5, #4]
 8013fc0:	4630      	mov	r0, r6
 8013fc2:	b002      	add	sp, #8
 8013fc4:	bd70      	pop	{r4, r5, r6, pc}
 8013fc6:	f240 3621 	movw	r6, #801	@ 0x321
 8013fca:	4630      	mov	r0, r6
 8013fcc:	b002      	add	sp, #8
 8013fce:	bd70      	pop	{r4, r5, r6, pc}
 8013fd0:	260b      	movs	r6, #11
 8013fd2:	4630      	mov	r0, r6
 8013fd4:	b002      	add	sp, #8
 8013fd6:	bd70      	pop	{r4, r5, r6, pc}
 8013fd8:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8013fdc:	e7f0      	b.n	8013fc0 <rcl_timer_get_time_until_next_call+0x44>
 8013fde:	bf00      	nop

08013fe0 <rcl_timer_get_guard_condition>:
 8013fe0:	b130      	cbz	r0, 8013ff0 <rcl_timer_get_guard_condition+0x10>
 8013fe2:	6800      	ldr	r0, [r0, #0]
 8013fe4:	b120      	cbz	r0, 8013ff0 <rcl_timer_get_guard_condition+0x10>
 8013fe6:	68c3      	ldr	r3, [r0, #12]
 8013fe8:	b10b      	cbz	r3, 8013fee <rcl_timer_get_guard_condition+0xe>
 8013fea:	3008      	adds	r0, #8
 8013fec:	4770      	bx	lr
 8013fee:	4618      	mov	r0, r3
 8013ff0:	4770      	bx	lr
 8013ff2:	bf00      	nop

08013ff4 <rcl_validate_enclave_name_with_size>:
 8013ff4:	b378      	cbz	r0, 8014056 <rcl_validate_enclave_name_with_size+0x62>
 8013ff6:	b570      	push	{r4, r5, r6, lr}
 8013ff8:	4615      	mov	r5, r2
 8013ffa:	b0c2      	sub	sp, #264	@ 0x108
 8013ffc:	b302      	cbz	r2, 8014040 <rcl_validate_enclave_name_with_size+0x4c>
 8013ffe:	461e      	mov	r6, r3
 8014000:	466a      	mov	r2, sp
 8014002:	ab01      	add	r3, sp, #4
 8014004:	460c      	mov	r4, r1
 8014006:	f7f9 fc91 	bl	800d92c <rmw_validate_namespace_with_size>
 801400a:	4684      	mov	ip, r0
 801400c:	b9e8      	cbnz	r0, 801404a <rcl_validate_enclave_name_with_size+0x56>
 801400e:	9b00      	ldr	r3, [sp, #0]
 8014010:	b923      	cbnz	r3, 801401c <rcl_validate_enclave_name_with_size+0x28>
 8014012:	2300      	movs	r3, #0
 8014014:	602b      	str	r3, [r5, #0]
 8014016:	4660      	mov	r0, ip
 8014018:	b042      	add	sp, #264	@ 0x108
 801401a:	bd70      	pop	{r4, r5, r6, pc}
 801401c:	2b07      	cmp	r3, #7
 801401e:	d007      	beq.n	8014030 <rcl_validate_enclave_name_with_size+0x3c>
 8014020:	1e5a      	subs	r2, r3, #1
 8014022:	2a05      	cmp	r2, #5
 8014024:	d833      	bhi.n	801408e <rcl_validate_enclave_name_with_size+0x9a>
 8014026:	e8df f002 	tbb	[pc, r2]
 801402a:	2c2f      	.short	0x2c2f
 801402c:	1a232629 	.word	0x1a232629
 8014030:	2cff      	cmp	r4, #255	@ 0xff
 8014032:	d9ee      	bls.n	8014012 <rcl_validate_enclave_name_with_size+0x1e>
 8014034:	602b      	str	r3, [r5, #0]
 8014036:	2e00      	cmp	r6, #0
 8014038:	d0ed      	beq.n	8014016 <rcl_validate_enclave_name_with_size+0x22>
 801403a:	23fe      	movs	r3, #254	@ 0xfe
 801403c:	6033      	str	r3, [r6, #0]
 801403e:	e7ea      	b.n	8014016 <rcl_validate_enclave_name_with_size+0x22>
 8014040:	f04f 0c0b 	mov.w	ip, #11
 8014044:	4660      	mov	r0, ip
 8014046:	b042      	add	sp, #264	@ 0x108
 8014048:	bd70      	pop	{r4, r5, r6, pc}
 801404a:	f7fe fe3b 	bl	8012cc4 <rcl_convert_rmw_ret_to_rcl_ret>
 801404e:	4684      	mov	ip, r0
 8014050:	4660      	mov	r0, ip
 8014052:	b042      	add	sp, #264	@ 0x108
 8014054:	bd70      	pop	{r4, r5, r6, pc}
 8014056:	f04f 0c0b 	mov.w	ip, #11
 801405a:	4660      	mov	r0, ip
 801405c:	4770      	bx	lr
 801405e:	2306      	movs	r3, #6
 8014060:	602b      	str	r3, [r5, #0]
 8014062:	2e00      	cmp	r6, #0
 8014064:	d0d7      	beq.n	8014016 <rcl_validate_enclave_name_with_size+0x22>
 8014066:	9b01      	ldr	r3, [sp, #4]
 8014068:	6033      	str	r3, [r6, #0]
 801406a:	4660      	mov	r0, ip
 801406c:	b042      	add	sp, #264	@ 0x108
 801406e:	bd70      	pop	{r4, r5, r6, pc}
 8014070:	2305      	movs	r3, #5
 8014072:	602b      	str	r3, [r5, #0]
 8014074:	e7f5      	b.n	8014062 <rcl_validate_enclave_name_with_size+0x6e>
 8014076:	2304      	movs	r3, #4
 8014078:	602b      	str	r3, [r5, #0]
 801407a:	e7f2      	b.n	8014062 <rcl_validate_enclave_name_with_size+0x6e>
 801407c:	2303      	movs	r3, #3
 801407e:	602b      	str	r3, [r5, #0]
 8014080:	e7ef      	b.n	8014062 <rcl_validate_enclave_name_with_size+0x6e>
 8014082:	2302      	movs	r3, #2
 8014084:	602b      	str	r3, [r5, #0]
 8014086:	e7ec      	b.n	8014062 <rcl_validate_enclave_name_with_size+0x6e>
 8014088:	2301      	movs	r3, #1
 801408a:	602b      	str	r3, [r5, #0]
 801408c:	e7e9      	b.n	8014062 <rcl_validate_enclave_name_with_size+0x6e>
 801408e:	4a04      	ldr	r2, [pc, #16]	@ (80140a0 <rcl_validate_enclave_name_with_size+0xac>)
 8014090:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014094:	a802      	add	r0, sp, #8
 8014096:	f7f9 f9d5 	bl	800d444 <rcutils_snprintf>
 801409a:	f04f 0c01 	mov.w	ip, #1
 801409e:	e7ba      	b.n	8014016 <rcl_validate_enclave_name_with_size+0x22>
 80140a0:	08019664 	.word	0x08019664

080140a4 <rcl_validate_enclave_name>:
 80140a4:	b168      	cbz	r0, 80140c2 <rcl_validate_enclave_name+0x1e>
 80140a6:	b570      	push	{r4, r5, r6, lr}
 80140a8:	460d      	mov	r5, r1
 80140aa:	4616      	mov	r6, r2
 80140ac:	4604      	mov	r4, r0
 80140ae:	f7ec f8c1 	bl	8000234 <strlen>
 80140b2:	4633      	mov	r3, r6
 80140b4:	4601      	mov	r1, r0
 80140b6:	462a      	mov	r2, r5
 80140b8:	4620      	mov	r0, r4
 80140ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140be:	f7ff bf99 	b.w	8013ff4 <rcl_validate_enclave_name_with_size>
 80140c2:	200b      	movs	r0, #11
 80140c4:	4770      	bx	lr
 80140c6:	bf00      	nop

080140c8 <rcl_validate_topic_name>:
 80140c8:	2800      	cmp	r0, #0
 80140ca:	d07a      	beq.n	80141c2 <rcl_validate_topic_name+0xfa>
 80140cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140d0:	460e      	mov	r6, r1
 80140d2:	2900      	cmp	r1, #0
 80140d4:	d07c      	beq.n	80141d0 <rcl_validate_topic_name+0x108>
 80140d6:	4617      	mov	r7, r2
 80140d8:	4605      	mov	r5, r0
 80140da:	f7ec f8ab 	bl	8000234 <strlen>
 80140de:	b1b0      	cbz	r0, 801410e <rcl_validate_topic_name+0x46>
 80140e0:	f895 9000 	ldrb.w	r9, [r5]
 80140e4:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8014268 <rcl_validate_topic_name+0x1a0>
 80140e8:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80140ec:	f013 0304 	ands.w	r3, r3, #4
 80140f0:	d169      	bne.n	80141c6 <rcl_validate_topic_name+0xfe>
 80140f2:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80140f6:	f815 2008 	ldrb.w	r2, [r5, r8]
 80140fa:	2a2f      	cmp	r2, #47	@ 0x2f
 80140fc:	d10e      	bne.n	801411c <rcl_validate_topic_name+0x54>
 80140fe:	2202      	movs	r2, #2
 8014100:	6032      	str	r2, [r6, #0]
 8014102:	b36f      	cbz	r7, 8014160 <rcl_validate_topic_name+0x98>
 8014104:	f8c7 8000 	str.w	r8, [r7]
 8014108:	4618      	mov	r0, r3
 801410a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801410e:	2301      	movs	r3, #1
 8014110:	6033      	str	r3, [r6, #0]
 8014112:	b32f      	cbz	r7, 8014160 <rcl_validate_topic_name+0x98>
 8014114:	2000      	movs	r0, #0
 8014116:	6038      	str	r0, [r7, #0]
 8014118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801411c:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8014120:	461c      	mov	r4, r3
 8014122:	4619      	mov	r1, r3
 8014124:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8014128:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801412c:	f1be 0f09 	cmp.w	lr, #9
 8014130:	d919      	bls.n	8014166 <rcl_validate_topic_name+0x9e>
 8014132:	f022 0e20 	bic.w	lr, r2, #32
 8014136:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801413a:	f1be 0f19 	cmp.w	lr, #25
 801413e:	d912      	bls.n	8014166 <rcl_validate_topic_name+0x9e>
 8014140:	2a5f      	cmp	r2, #95	@ 0x5f
 8014142:	d019      	beq.n	8014178 <rcl_validate_topic_name+0xb0>
 8014144:	2a2f      	cmp	r2, #47	@ 0x2f
 8014146:	d051      	beq.n	80141ec <rcl_validate_topic_name+0x124>
 8014148:	2a7e      	cmp	r2, #126	@ 0x7e
 801414a:	d048      	beq.n	80141de <rcl_validate_topic_name+0x116>
 801414c:	2a7b      	cmp	r2, #123	@ 0x7b
 801414e:	d054      	beq.n	80141fa <rcl_validate_topic_name+0x132>
 8014150:	2a7d      	cmp	r2, #125	@ 0x7d
 8014152:	d161      	bne.n	8014218 <rcl_validate_topic_name+0x150>
 8014154:	2c00      	cmp	r4, #0
 8014156:	d155      	bne.n	8014204 <rcl_validate_topic_name+0x13c>
 8014158:	2305      	movs	r3, #5
 801415a:	6033      	str	r3, [r6, #0]
 801415c:	b107      	cbz	r7, 8014160 <rcl_validate_topic_name+0x98>
 801415e:	6039      	str	r1, [r7, #0]
 8014160:	2000      	movs	r0, #0
 8014162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014166:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801416a:	0752      	lsls	r2, r2, #29
 801416c:	d504      	bpl.n	8014178 <rcl_validate_topic_name+0xb0>
 801416e:	b11c      	cbz	r4, 8014178 <rcl_validate_topic_name+0xb0>
 8014170:	b111      	cbz	r1, 8014178 <rcl_validate_topic_name+0xb0>
 8014172:	1e4a      	subs	r2, r1, #1
 8014174:	429a      	cmp	r2, r3
 8014176:	d02d      	beq.n	80141d4 <rcl_validate_topic_name+0x10c>
 8014178:	3101      	adds	r1, #1
 801417a:	4288      	cmp	r0, r1
 801417c:	d1d2      	bne.n	8014124 <rcl_validate_topic_name+0x5c>
 801417e:	2c00      	cmp	r4, #0
 8014180:	d145      	bne.n	801420e <rcl_validate_topic_name+0x146>
 8014182:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8014186:	d04f      	beq.n	8014228 <rcl_validate_topic_name+0x160>
 8014188:	4620      	mov	r0, r4
 801418a:	2301      	movs	r3, #1
 801418c:	e006      	b.n	801419c <rcl_validate_topic_name+0xd4>
 801418e:	428b      	cmp	r3, r1
 8014190:	f105 0501 	add.w	r5, r5, #1
 8014194:	f103 0201 	add.w	r2, r3, #1
 8014198:	d236      	bcs.n	8014208 <rcl_validate_topic_name+0x140>
 801419a:	4613      	mov	r3, r2
 801419c:	4580      	cmp	r8, r0
 801419e:	f100 0001 	add.w	r0, r0, #1
 80141a2:	d0f4      	beq.n	801418e <rcl_validate_topic_name+0xc6>
 80141a4:	782a      	ldrb	r2, [r5, #0]
 80141a6:	2a2f      	cmp	r2, #47	@ 0x2f
 80141a8:	d1f1      	bne.n	801418e <rcl_validate_topic_name+0xc6>
 80141aa:	786a      	ldrb	r2, [r5, #1]
 80141ac:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80141b0:	0754      	lsls	r4, r2, #29
 80141b2:	d5ec      	bpl.n	801418e <rcl_validate_topic_name+0xc6>
 80141b4:	2204      	movs	r2, #4
 80141b6:	6032      	str	r2, [r6, #0]
 80141b8:	2f00      	cmp	r7, #0
 80141ba:	d0d1      	beq.n	8014160 <rcl_validate_topic_name+0x98>
 80141bc:	603b      	str	r3, [r7, #0]
 80141be:	2000      	movs	r0, #0
 80141c0:	e7aa      	b.n	8014118 <rcl_validate_topic_name+0x50>
 80141c2:	200b      	movs	r0, #11
 80141c4:	4770      	bx	lr
 80141c6:	2304      	movs	r3, #4
 80141c8:	6033      	str	r3, [r6, #0]
 80141ca:	2f00      	cmp	r7, #0
 80141cc:	d1a2      	bne.n	8014114 <rcl_validate_topic_name+0x4c>
 80141ce:	e7c7      	b.n	8014160 <rcl_validate_topic_name+0x98>
 80141d0:	200b      	movs	r0, #11
 80141d2:	e7a1      	b.n	8014118 <rcl_validate_topic_name+0x50>
 80141d4:	2309      	movs	r3, #9
 80141d6:	6033      	str	r3, [r6, #0]
 80141d8:	2f00      	cmp	r7, #0
 80141da:	d1c0      	bne.n	801415e <rcl_validate_topic_name+0x96>
 80141dc:	e7c0      	b.n	8014160 <rcl_validate_topic_name+0x98>
 80141de:	2900      	cmp	r1, #0
 80141e0:	d0ca      	beq.n	8014178 <rcl_validate_topic_name+0xb0>
 80141e2:	2306      	movs	r3, #6
 80141e4:	6033      	str	r3, [r6, #0]
 80141e6:	2f00      	cmp	r7, #0
 80141e8:	d1b9      	bne.n	801415e <rcl_validate_topic_name+0x96>
 80141ea:	e7b9      	b.n	8014160 <rcl_validate_topic_name+0x98>
 80141ec:	2c00      	cmp	r4, #0
 80141ee:	d0c3      	beq.n	8014178 <rcl_validate_topic_name+0xb0>
 80141f0:	2308      	movs	r3, #8
 80141f2:	6033      	str	r3, [r6, #0]
 80141f4:	2f00      	cmp	r7, #0
 80141f6:	d1b2      	bne.n	801415e <rcl_validate_topic_name+0x96>
 80141f8:	e7b2      	b.n	8014160 <rcl_validate_topic_name+0x98>
 80141fa:	2c00      	cmp	r4, #0
 80141fc:	d1f8      	bne.n	80141f0 <rcl_validate_topic_name+0x128>
 80141fe:	460b      	mov	r3, r1
 8014200:	2401      	movs	r4, #1
 8014202:	e7b9      	b.n	8014178 <rcl_validate_topic_name+0xb0>
 8014204:	2400      	movs	r4, #0
 8014206:	e7b7      	b.n	8014178 <rcl_validate_topic_name+0xb0>
 8014208:	2000      	movs	r0, #0
 801420a:	6030      	str	r0, [r6, #0]
 801420c:	e784      	b.n	8014118 <rcl_validate_topic_name+0x50>
 801420e:	2205      	movs	r2, #5
 8014210:	6032      	str	r2, [r6, #0]
 8014212:	2f00      	cmp	r7, #0
 8014214:	d1d2      	bne.n	80141bc <rcl_validate_topic_name+0xf4>
 8014216:	e7a3      	b.n	8014160 <rcl_validate_topic_name+0x98>
 8014218:	2c00      	cmp	r4, #0
 801421a:	bf14      	ite	ne
 801421c:	2308      	movne	r3, #8
 801421e:	2303      	moveq	r3, #3
 8014220:	6033      	str	r3, [r6, #0]
 8014222:	2f00      	cmp	r7, #0
 8014224:	d19b      	bne.n	801415e <rcl_validate_topic_name+0x96>
 8014226:	e79b      	b.n	8014160 <rcl_validate_topic_name+0x98>
 8014228:	2301      	movs	r3, #1
 801422a:	e00a      	b.n	8014242 <rcl_validate_topic_name+0x17a>
 801422c:	2c01      	cmp	r4, #1
 801422e:	d013      	beq.n	8014258 <rcl_validate_topic_name+0x190>
 8014230:	4299      	cmp	r1, r3
 8014232:	f104 0401 	add.w	r4, r4, #1
 8014236:	f105 0501 	add.w	r5, r5, #1
 801423a:	f103 0201 	add.w	r2, r3, #1
 801423e:	d9e3      	bls.n	8014208 <rcl_validate_topic_name+0x140>
 8014240:	4613      	mov	r3, r2
 8014242:	45a0      	cmp	r8, r4
 8014244:	d0f4      	beq.n	8014230 <rcl_validate_topic_name+0x168>
 8014246:	782a      	ldrb	r2, [r5, #0]
 8014248:	2a2f      	cmp	r2, #47	@ 0x2f
 801424a:	d1ef      	bne.n	801422c <rcl_validate_topic_name+0x164>
 801424c:	786a      	ldrb	r2, [r5, #1]
 801424e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014252:	0752      	lsls	r2, r2, #29
 8014254:	d5ec      	bpl.n	8014230 <rcl_validate_topic_name+0x168>
 8014256:	e7ad      	b.n	80141b4 <rcl_validate_topic_name+0xec>
 8014258:	2307      	movs	r3, #7
 801425a:	6033      	str	r3, [r6, #0]
 801425c:	2f00      	cmp	r7, #0
 801425e:	f43f af7f 	beq.w	8014160 <rcl_validate_topic_name+0x98>
 8014262:	603c      	str	r4, [r7, #0]
 8014264:	2000      	movs	r0, #0
 8014266:	e757      	b.n	8014118 <rcl_validate_topic_name+0x50>
 8014268:	08019842 	.word	0x08019842

0801426c <rcl_get_zero_initialized_wait_set>:
 801426c:	b510      	push	{r4, lr}
 801426e:	4c08      	ldr	r4, [pc, #32]	@ (8014290 <rcl_get_zero_initialized_wait_set+0x24>)
 8014270:	4686      	mov	lr, r0
 8014272:	4684      	mov	ip, r0
 8014274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014276:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801427a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801427c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014280:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014282:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014286:	6823      	ldr	r3, [r4, #0]
 8014288:	f8cc 3000 	str.w	r3, [ip]
 801428c:	4670      	mov	r0, lr
 801428e:	bd10      	pop	{r4, pc}
 8014290:	080196c4 	.word	0x080196c4

08014294 <rcl_wait_set_is_valid>:
 8014294:	b118      	cbz	r0, 801429e <rcl_wait_set_is_valid+0xa>
 8014296:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8014298:	3800      	subs	r0, #0
 801429a:	bf18      	it	ne
 801429c:	2001      	movne	r0, #1
 801429e:	4770      	bx	lr

080142a0 <rcl_wait_set_fini>:
 80142a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142a4:	b082      	sub	sp, #8
 80142a6:	2800      	cmp	r0, #0
 80142a8:	f000 8095 	beq.w	80143d6 <rcl_wait_set_fini+0x136>
 80142ac:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80142ae:	4604      	mov	r4, r0
 80142b0:	2e00      	cmp	r6, #0
 80142b2:	f000 808c 	beq.w	80143ce <rcl_wait_set_fini+0x12e>
 80142b6:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80142b8:	f001 ff62 	bl	8016180 <rmw_destroy_wait_set>
 80142bc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80142be:	1e06      	subs	r6, r0, #0
 80142c0:	bf18      	it	ne
 80142c2:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80142c6:	2d00      	cmp	r5, #0
 80142c8:	f000 8081 	beq.w	80143ce <rcl_wait_set_fini+0x12e>
 80142cc:	6820      	ldr	r0, [r4, #0]
 80142ce:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80142d2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80142d4:	2700      	movs	r7, #0
 80142d6:	6067      	str	r7, [r4, #4]
 80142d8:	602f      	str	r7, [r5, #0]
 80142da:	b120      	cbz	r0, 80142e6 <rcl_wait_set_fini+0x46>
 80142dc:	9101      	str	r1, [sp, #4]
 80142de:	47c0      	blx	r8
 80142e0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80142e2:	9901      	ldr	r1, [sp, #4]
 80142e4:	6027      	str	r7, [r4, #0]
 80142e6:	68a8      	ldr	r0, [r5, #8]
 80142e8:	b120      	cbz	r0, 80142f4 <rcl_wait_set_fini+0x54>
 80142ea:	47c0      	blx	r8
 80142ec:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80142ee:	2300      	movs	r3, #0
 80142f0:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80142f4:	68a0      	ldr	r0, [r4, #8]
 80142f6:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80142f8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80142fa:	f04f 0800 	mov.w	r8, #0
 80142fe:	f8c4 800c 	str.w	r8, [r4, #12]
 8014302:	f8c5 800c 	str.w	r8, [r5, #12]
 8014306:	b128      	cbz	r0, 8014314 <rcl_wait_set_fini+0x74>
 8014308:	47b8      	blx	r7
 801430a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801430c:	f8c4 8008 	str.w	r8, [r4, #8]
 8014310:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014312:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014314:	6968      	ldr	r0, [r5, #20]
 8014316:	f04f 0800 	mov.w	r8, #0
 801431a:	f8c5 8010 	str.w	r8, [r5, #16]
 801431e:	b128      	cbz	r0, 801432c <rcl_wait_set_fini+0x8c>
 8014320:	47b8      	blx	r7
 8014322:	f8c5 8014 	str.w	r8, [r5, #20]
 8014326:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014328:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801432a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801432c:	6920      	ldr	r0, [r4, #16]
 801432e:	f04f 0800 	mov.w	r8, #0
 8014332:	f8c4 8014 	str.w	r8, [r4, #20]
 8014336:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801433a:	b128      	cbz	r0, 8014348 <rcl_wait_set_fini+0xa8>
 801433c:	47b8      	blx	r7
 801433e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014340:	f8c4 8010 	str.w	r8, [r4, #16]
 8014344:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014346:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014348:	69a0      	ldr	r0, [r4, #24]
 801434a:	f04f 0800 	mov.w	r8, #0
 801434e:	f8c4 801c 	str.w	r8, [r4, #28]
 8014352:	f8c5 8018 	str.w	r8, [r5, #24]
 8014356:	b128      	cbz	r0, 8014364 <rcl_wait_set_fini+0xc4>
 8014358:	9101      	str	r1, [sp, #4]
 801435a:	47b8      	blx	r7
 801435c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801435e:	9901      	ldr	r1, [sp, #4]
 8014360:	f8c4 8018 	str.w	r8, [r4, #24]
 8014364:	6a28      	ldr	r0, [r5, #32]
 8014366:	b120      	cbz	r0, 8014372 <rcl_wait_set_fini+0xd2>
 8014368:	47b8      	blx	r7
 801436a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801436c:	2300      	movs	r3, #0
 801436e:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8014372:	6a20      	ldr	r0, [r4, #32]
 8014374:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014378:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801437a:	2700      	movs	r7, #0
 801437c:	6267      	str	r7, [r4, #36]	@ 0x24
 801437e:	626f      	str	r7, [r5, #36]	@ 0x24
 8014380:	b120      	cbz	r0, 801438c <rcl_wait_set_fini+0xec>
 8014382:	9101      	str	r1, [sp, #4]
 8014384:	47c0      	blx	r8
 8014386:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014388:	9901      	ldr	r1, [sp, #4]
 801438a:	6227      	str	r7, [r4, #32]
 801438c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801438e:	b120      	cbz	r0, 801439a <rcl_wait_set_fini+0xfa>
 8014390:	47c0      	blx	r8
 8014392:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014394:	2300      	movs	r3, #0
 8014396:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801439a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801439c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80143a0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80143a2:	2700      	movs	r7, #0
 80143a4:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80143a6:	632f      	str	r7, [r5, #48]	@ 0x30
 80143a8:	b120      	cbz	r0, 80143b4 <rcl_wait_set_fini+0x114>
 80143aa:	9101      	str	r1, [sp, #4]
 80143ac:	47c0      	blx	r8
 80143ae:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80143b0:	9901      	ldr	r1, [sp, #4]
 80143b2:	62a7      	str	r7, [r4, #40]	@ 0x28
 80143b4:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80143b6:	b120      	cbz	r0, 80143c2 <rcl_wait_set_fini+0x122>
 80143b8:	47c0      	blx	r8
 80143ba:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80143bc:	2300      	movs	r3, #0
 80143be:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80143c2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80143c4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80143c6:	4628      	mov	r0, r5
 80143c8:	4798      	blx	r3
 80143ca:	2300      	movs	r3, #0
 80143cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80143ce:	4630      	mov	r0, r6
 80143d0:	b002      	add	sp, #8
 80143d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143d6:	260b      	movs	r6, #11
 80143d8:	4630      	mov	r0, r6
 80143da:	b002      	add	sp, #8
 80143dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080143e0 <rcl_wait_set_add_subscription>:
 80143e0:	b318      	cbz	r0, 801442a <rcl_wait_set_add_subscription+0x4a>
 80143e2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80143e4:	b570      	push	{r4, r5, r6, lr}
 80143e6:	4604      	mov	r4, r0
 80143e8:	b30b      	cbz	r3, 801442e <rcl_wait_set_add_subscription+0x4e>
 80143ea:	b319      	cbz	r1, 8014434 <rcl_wait_set_add_subscription+0x54>
 80143ec:	681d      	ldr	r5, [r3, #0]
 80143ee:	6840      	ldr	r0, [r0, #4]
 80143f0:	4285      	cmp	r5, r0
 80143f2:	d217      	bcs.n	8014424 <rcl_wait_set_add_subscription+0x44>
 80143f4:	6820      	ldr	r0, [r4, #0]
 80143f6:	1c6e      	adds	r6, r5, #1
 80143f8:	601e      	str	r6, [r3, #0]
 80143fa:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80143fe:	b102      	cbz	r2, 8014402 <rcl_wait_set_add_subscription+0x22>
 8014400:	6015      	str	r5, [r2, #0]
 8014402:	4608      	mov	r0, r1
 8014404:	f7ff fa36 	bl	8013874 <rcl_subscription_get_rmw_handle>
 8014408:	b150      	cbz	r0, 8014420 <rcl_wait_set_add_subscription+0x40>
 801440a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801440c:	6842      	ldr	r2, [r0, #4]
 801440e:	689b      	ldr	r3, [r3, #8]
 8014410:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014414:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014416:	6853      	ldr	r3, [r2, #4]
 8014418:	3301      	adds	r3, #1
 801441a:	2000      	movs	r0, #0
 801441c:	6053      	str	r3, [r2, #4]
 801441e:	bd70      	pop	{r4, r5, r6, pc}
 8014420:	2001      	movs	r0, #1
 8014422:	bd70      	pop	{r4, r5, r6, pc}
 8014424:	f240 3086 	movw	r0, #902	@ 0x386
 8014428:	bd70      	pop	{r4, r5, r6, pc}
 801442a:	200b      	movs	r0, #11
 801442c:	4770      	bx	lr
 801442e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014432:	bd70      	pop	{r4, r5, r6, pc}
 8014434:	200b      	movs	r0, #11
 8014436:	bd70      	pop	{r4, r5, r6, pc}

08014438 <rcl_wait_set_clear>:
 8014438:	2800      	cmp	r0, #0
 801443a:	d073      	beq.n	8014524 <rcl_wait_set_clear+0xec>
 801443c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801443e:	b510      	push	{r4, lr}
 8014440:	4604      	mov	r4, r0
 8014442:	2b00      	cmp	r3, #0
 8014444:	d070      	beq.n	8014528 <rcl_wait_set_clear+0xf0>
 8014446:	6800      	ldr	r0, [r0, #0]
 8014448:	b138      	cbz	r0, 801445a <rcl_wait_set_clear+0x22>
 801444a:	6862      	ldr	r2, [r4, #4]
 801444c:	2100      	movs	r1, #0
 801444e:	0092      	lsls	r2, r2, #2
 8014450:	f003 f9da 	bl	8017808 <memset>
 8014454:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014456:	2200      	movs	r2, #0
 8014458:	601a      	str	r2, [r3, #0]
 801445a:	68a0      	ldr	r0, [r4, #8]
 801445c:	b138      	cbz	r0, 801446e <rcl_wait_set_clear+0x36>
 801445e:	68e2      	ldr	r2, [r4, #12]
 8014460:	2100      	movs	r1, #0
 8014462:	0092      	lsls	r2, r2, #2
 8014464:	f003 f9d0 	bl	8017808 <memset>
 8014468:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801446a:	2200      	movs	r2, #0
 801446c:	60da      	str	r2, [r3, #12]
 801446e:	69a0      	ldr	r0, [r4, #24]
 8014470:	b138      	cbz	r0, 8014482 <rcl_wait_set_clear+0x4a>
 8014472:	69e2      	ldr	r2, [r4, #28]
 8014474:	2100      	movs	r1, #0
 8014476:	0092      	lsls	r2, r2, #2
 8014478:	f003 f9c6 	bl	8017808 <memset>
 801447c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801447e:	2200      	movs	r2, #0
 8014480:	619a      	str	r2, [r3, #24]
 8014482:	6a20      	ldr	r0, [r4, #32]
 8014484:	b138      	cbz	r0, 8014496 <rcl_wait_set_clear+0x5e>
 8014486:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014488:	2100      	movs	r1, #0
 801448a:	0092      	lsls	r2, r2, #2
 801448c:	f003 f9bc 	bl	8017808 <memset>
 8014490:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014492:	2200      	movs	r2, #0
 8014494:	625a      	str	r2, [r3, #36]	@ 0x24
 8014496:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014498:	b138      	cbz	r0, 80144aa <rcl_wait_set_clear+0x72>
 801449a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801449c:	2100      	movs	r1, #0
 801449e:	0092      	lsls	r2, r2, #2
 80144a0:	f003 f9b2 	bl	8017808 <memset>
 80144a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80144a6:	2200      	movs	r2, #0
 80144a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80144aa:	6920      	ldr	r0, [r4, #16]
 80144ac:	b138      	cbz	r0, 80144be <rcl_wait_set_clear+0x86>
 80144ae:	6962      	ldr	r2, [r4, #20]
 80144b0:	2100      	movs	r1, #0
 80144b2:	0092      	lsls	r2, r2, #2
 80144b4:	f003 f9a8 	bl	8017808 <memset>
 80144b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80144ba:	2200      	movs	r2, #0
 80144bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80144be:	6898      	ldr	r0, [r3, #8]
 80144c0:	b138      	cbz	r0, 80144d2 <rcl_wait_set_clear+0x9a>
 80144c2:	685a      	ldr	r2, [r3, #4]
 80144c4:	2100      	movs	r1, #0
 80144c6:	0092      	lsls	r2, r2, #2
 80144c8:	f003 f99e 	bl	8017808 <memset>
 80144cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80144ce:	2200      	movs	r2, #0
 80144d0:	605a      	str	r2, [r3, #4]
 80144d2:	6958      	ldr	r0, [r3, #20]
 80144d4:	b138      	cbz	r0, 80144e6 <rcl_wait_set_clear+0xae>
 80144d6:	691a      	ldr	r2, [r3, #16]
 80144d8:	2100      	movs	r1, #0
 80144da:	0092      	lsls	r2, r2, #2
 80144dc:	f003 f994 	bl	8017808 <memset>
 80144e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80144e2:	2200      	movs	r2, #0
 80144e4:	611a      	str	r2, [r3, #16]
 80144e6:	6a18      	ldr	r0, [r3, #32]
 80144e8:	b138      	cbz	r0, 80144fa <rcl_wait_set_clear+0xc2>
 80144ea:	69da      	ldr	r2, [r3, #28]
 80144ec:	2100      	movs	r1, #0
 80144ee:	0092      	lsls	r2, r2, #2
 80144f0:	f003 f98a 	bl	8017808 <memset>
 80144f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80144f6:	2200      	movs	r2, #0
 80144f8:	61da      	str	r2, [r3, #28]
 80144fa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80144fc:	b138      	cbz	r0, 801450e <rcl_wait_set_clear+0xd6>
 80144fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014500:	2100      	movs	r1, #0
 8014502:	0092      	lsls	r2, r2, #2
 8014504:	f003 f980 	bl	8017808 <memset>
 8014508:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801450a:	2200      	movs	r2, #0
 801450c:	629a      	str	r2, [r3, #40]	@ 0x28
 801450e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8014510:	b138      	cbz	r0, 8014522 <rcl_wait_set_clear+0xea>
 8014512:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014514:	2100      	movs	r1, #0
 8014516:	0092      	lsls	r2, r2, #2
 8014518:	f003 f976 	bl	8017808 <memset>
 801451c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801451e:	2000      	movs	r0, #0
 8014520:	6358      	str	r0, [r3, #52]	@ 0x34
 8014522:	bd10      	pop	{r4, pc}
 8014524:	200b      	movs	r0, #11
 8014526:	4770      	bx	lr
 8014528:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801452c:	bd10      	pop	{r4, pc}
 801452e:	bf00      	nop

08014530 <rcl_wait_set_resize>:
 8014530:	2800      	cmp	r0, #0
 8014532:	f000 8185 	beq.w	8014840 <rcl_wait_set_resize+0x310>
 8014536:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801453a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801453c:	b083      	sub	sp, #12
 801453e:	4605      	mov	r5, r0
 8014540:	2c00      	cmp	r4, #0
 8014542:	f000 817f 	beq.w	8014844 <rcl_wait_set_resize+0x314>
 8014546:	f04f 0900 	mov.w	r9, #0
 801454a:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801454e:	461f      	mov	r7, r3
 8014550:	4688      	mov	r8, r1
 8014552:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8014556:	4616      	mov	r6, r2
 8014558:	f8c0 9004 	str.w	r9, [r0, #4]
 801455c:	f8c4 9000 	str.w	r9, [r4]
 8014560:	2900      	cmp	r1, #0
 8014562:	f000 80bd 	beq.w	80146e0 <rcl_wait_set_resize+0x1b0>
 8014566:	008c      	lsls	r4, r1, #2
 8014568:	6800      	ldr	r0, [r0, #0]
 801456a:	9301      	str	r3, [sp, #4]
 801456c:	4652      	mov	r2, sl
 801456e:	4621      	mov	r1, r4
 8014570:	4798      	blx	r3
 8014572:	9b01      	ldr	r3, [sp, #4]
 8014574:	6028      	str	r0, [r5, #0]
 8014576:	2800      	cmp	r0, #0
 8014578:	f000 80cb 	beq.w	8014712 <rcl_wait_set_resize+0x1e2>
 801457c:	4622      	mov	r2, r4
 801457e:	4649      	mov	r1, r9
 8014580:	9301      	str	r3, [sp, #4]
 8014582:	f003 f941 	bl	8017808 <memset>
 8014586:	f8c5 8004 	str.w	r8, [r5, #4]
 801458a:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801458e:	9b01      	ldr	r3, [sp, #4]
 8014590:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8014594:	f8c8 9004 	str.w	r9, [r8, #4]
 8014598:	4652      	mov	r2, sl
 801459a:	4621      	mov	r1, r4
 801459c:	4798      	blx	r3
 801459e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80145a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80145a4:	689b      	ldr	r3, [r3, #8]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	f000 80ac 	beq.w	8014704 <rcl_wait_set_resize+0x1d4>
 80145ac:	4622      	mov	r2, r4
 80145ae:	4649      	mov	r1, r9
 80145b0:	4618      	mov	r0, r3
 80145b2:	f003 f929 	bl	8017808 <memset>
 80145b6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80145b8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80145bc:	f04f 0800 	mov.w	r8, #0
 80145c0:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80145c4:	f8c5 800c 	str.w	r8, [r5, #12]
 80145c8:	f8c4 800c 	str.w	r8, [r4, #12]
 80145cc:	2e00      	cmp	r6, #0
 80145ce:	f040 80a4 	bne.w	801471a <rcl_wait_set_resize+0x1ea>
 80145d2:	68a8      	ldr	r0, [r5, #8]
 80145d4:	b128      	cbz	r0, 80145e2 <rcl_wait_set_resize+0xb2>
 80145d6:	4649      	mov	r1, r9
 80145d8:	4790      	blx	r2
 80145da:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80145dc:	60ae      	str	r6, [r5, #8]
 80145de:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80145e2:	f04f 0800 	mov.w	r8, #0
 80145e6:	19f6      	adds	r6, r6, r7
 80145e8:	f8c4 8010 	str.w	r8, [r4, #16]
 80145ec:	f040 80ac 	bne.w	8014748 <rcl_wait_set_resize+0x218>
 80145f0:	6960      	ldr	r0, [r4, #20]
 80145f2:	b130      	cbz	r0, 8014602 <rcl_wait_set_resize+0xd2>
 80145f4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80145f6:	4649      	mov	r1, r9
 80145f8:	4798      	blx	r3
 80145fa:	6166      	str	r6, [r4, #20]
 80145fc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80145fe:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014602:	2600      	movs	r6, #0
 8014604:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014608:	616e      	str	r6, [r5, #20]
 801460a:	6426      	str	r6, [r4, #64]	@ 0x40
 801460c:	2f00      	cmp	r7, #0
 801460e:	f040 80ad 	bne.w	801476c <rcl_wait_set_resize+0x23c>
 8014612:	6928      	ldr	r0, [r5, #16]
 8014614:	b138      	cbz	r0, 8014626 <rcl_wait_set_resize+0xf6>
 8014616:	4649      	mov	r1, r9
 8014618:	47d0      	blx	sl
 801461a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801461c:	612f      	str	r7, [r5, #16]
 801461e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014622:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014626:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014628:	2600      	movs	r6, #0
 801462a:	61ee      	str	r6, [r5, #28]
 801462c:	61a6      	str	r6, [r4, #24]
 801462e:	2b00      	cmp	r3, #0
 8014630:	f040 80af 	bne.w	8014792 <rcl_wait_set_resize+0x262>
 8014634:	69a8      	ldr	r0, [r5, #24]
 8014636:	b120      	cbz	r0, 8014642 <rcl_wait_set_resize+0x112>
 8014638:	4649      	mov	r1, r9
 801463a:	47d0      	blx	sl
 801463c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801463e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014640:	61ab      	str	r3, [r5, #24]
 8014642:	6a20      	ldr	r0, [r4, #32]
 8014644:	b128      	cbz	r0, 8014652 <rcl_wait_set_resize+0x122>
 8014646:	4649      	mov	r1, r9
 8014648:	47d0      	blx	sl
 801464a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801464c:	2300      	movs	r3, #0
 801464e:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8014652:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014654:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014656:	2600      	movs	r6, #0
 8014658:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801465c:	626e      	str	r6, [r5, #36]	@ 0x24
 801465e:	6266      	str	r6, [r4, #36]	@ 0x24
 8014660:	2b00      	cmp	r3, #0
 8014662:	f000 80b6 	beq.w	80147d2 <rcl_wait_set_resize+0x2a2>
 8014666:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801466a:	6a28      	ldr	r0, [r5, #32]
 801466c:	463a      	mov	r2, r7
 801466e:	4651      	mov	r1, sl
 8014670:	47c8      	blx	r9
 8014672:	6228      	str	r0, [r5, #32]
 8014674:	2800      	cmp	r0, #0
 8014676:	d04c      	beq.n	8014712 <rcl_wait_set_resize+0x1e2>
 8014678:	4652      	mov	r2, sl
 801467a:	4631      	mov	r1, r6
 801467c:	f003 f8c4 	bl	8017808 <memset>
 8014680:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014682:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014684:	626b      	str	r3, [r5, #36]	@ 0x24
 8014686:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8014688:	62a6      	str	r6, [r4, #40]	@ 0x28
 801468a:	463a      	mov	r2, r7
 801468c:	4651      	mov	r1, sl
 801468e:	47c8      	blx	r9
 8014690:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014692:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8014694:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8014696:	2c00      	cmp	r4, #0
 8014698:	f000 80f0 	beq.w	801487c <rcl_wait_set_resize+0x34c>
 801469c:	4620      	mov	r0, r4
 801469e:	4652      	mov	r2, sl
 80146a0:	4631      	mov	r1, r6
 80146a2:	f003 f8b1 	bl	8017808 <memset>
 80146a6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80146a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80146aa:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80146ac:	2600      	movs	r6, #0
 80146ae:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80146b2:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80146b4:	6326      	str	r6, [r4, #48]	@ 0x30
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	f040 809d 	bne.w	80147f6 <rcl_wait_set_resize+0x2c6>
 80146bc:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80146be:	b120      	cbz	r0, 80146ca <rcl_wait_set_resize+0x19a>
 80146c0:	4639      	mov	r1, r7
 80146c2:	47c0      	blx	r8
 80146c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80146c6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80146c8:	62ab      	str	r3, [r5, #40]	@ 0x28
 80146ca:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80146cc:	b310      	cbz	r0, 8014714 <rcl_wait_set_resize+0x1e4>
 80146ce:	4639      	mov	r1, r7
 80146d0:	47c0      	blx	r8
 80146d2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80146d4:	2000      	movs	r0, #0
 80146d6:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 80146da:	b003      	add	sp, #12
 80146dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146e0:	6800      	ldr	r0, [r0, #0]
 80146e2:	b120      	cbz	r0, 80146ee <rcl_wait_set_resize+0x1be>
 80146e4:	4651      	mov	r1, sl
 80146e6:	47d8      	blx	fp
 80146e8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80146ea:	f8c5 8000 	str.w	r8, [r5]
 80146ee:	68a0      	ldr	r0, [r4, #8]
 80146f0:	2800      	cmp	r0, #0
 80146f2:	f43f af61 	beq.w	80145b8 <rcl_wait_set_resize+0x88>
 80146f6:	4651      	mov	r1, sl
 80146f8:	47d8      	blx	fp
 80146fa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80146fc:	2300      	movs	r3, #0
 80146fe:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8014702:	e759      	b.n	80145b8 <rcl_wait_set_resize+0x88>
 8014704:	6828      	ldr	r0, [r5, #0]
 8014706:	9301      	str	r3, [sp, #4]
 8014708:	4651      	mov	r1, sl
 801470a:	47d8      	blx	fp
 801470c:	9b01      	ldr	r3, [sp, #4]
 801470e:	e9c5 3300 	strd	r3, r3, [r5]
 8014712:	200a      	movs	r0, #10
 8014714:	b003      	add	sp, #12
 8014716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801471a:	00b4      	lsls	r4, r6, #2
 801471c:	68a8      	ldr	r0, [r5, #8]
 801471e:	464a      	mov	r2, r9
 8014720:	4621      	mov	r1, r4
 8014722:	4798      	blx	r3
 8014724:	60a8      	str	r0, [r5, #8]
 8014726:	2800      	cmp	r0, #0
 8014728:	d0f3      	beq.n	8014712 <rcl_wait_set_resize+0x1e2>
 801472a:	4622      	mov	r2, r4
 801472c:	4641      	mov	r1, r8
 801472e:	f003 f86b 	bl	8017808 <memset>
 8014732:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014734:	60ee      	str	r6, [r5, #12]
 8014736:	f04f 0800 	mov.w	r8, #0
 801473a:	19f6      	adds	r6, r6, r7
 801473c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014740:	f8c4 8010 	str.w	r8, [r4, #16]
 8014744:	f43f af54 	beq.w	80145f0 <rcl_wait_set_resize+0xc0>
 8014748:	00b6      	lsls	r6, r6, #2
 801474a:	464a      	mov	r2, r9
 801474c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801474e:	6960      	ldr	r0, [r4, #20]
 8014750:	4631      	mov	r1, r6
 8014752:	4798      	blx	r3
 8014754:	4681      	mov	r9, r0
 8014756:	6160      	str	r0, [r4, #20]
 8014758:	2800      	cmp	r0, #0
 801475a:	d076      	beq.n	801484a <rcl_wait_set_resize+0x31a>
 801475c:	4632      	mov	r2, r6
 801475e:	4641      	mov	r1, r8
 8014760:	f003 f852 	bl	8017808 <memset>
 8014764:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014766:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801476a:	e74a      	b.n	8014602 <rcl_wait_set_resize+0xd2>
 801476c:	00bc      	lsls	r4, r7, #2
 801476e:	6928      	ldr	r0, [r5, #16]
 8014770:	464a      	mov	r2, r9
 8014772:	4621      	mov	r1, r4
 8014774:	47c0      	blx	r8
 8014776:	6128      	str	r0, [r5, #16]
 8014778:	2800      	cmp	r0, #0
 801477a:	d0ca      	beq.n	8014712 <rcl_wait_set_resize+0x1e2>
 801477c:	4622      	mov	r2, r4
 801477e:	4631      	mov	r1, r6
 8014780:	f003 f842 	bl	8017808 <memset>
 8014784:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014786:	616f      	str	r7, [r5, #20]
 8014788:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801478c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014790:	e749      	b.n	8014626 <rcl_wait_set_resize+0xf6>
 8014792:	009c      	lsls	r4, r3, #2
 8014794:	69a8      	ldr	r0, [r5, #24]
 8014796:	464a      	mov	r2, r9
 8014798:	4621      	mov	r1, r4
 801479a:	47c0      	blx	r8
 801479c:	61a8      	str	r0, [r5, #24]
 801479e:	2800      	cmp	r0, #0
 80147a0:	d0b7      	beq.n	8014712 <rcl_wait_set_resize+0x1e2>
 80147a2:	4622      	mov	r2, r4
 80147a4:	4631      	mov	r1, r6
 80147a6:	f003 f82f 	bl	8017808 <memset>
 80147aa:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 80147ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80147ae:	61eb      	str	r3, [r5, #28]
 80147b0:	6a38      	ldr	r0, [r7, #32]
 80147b2:	61fe      	str	r6, [r7, #28]
 80147b4:	464a      	mov	r2, r9
 80147b6:	4621      	mov	r1, r4
 80147b8:	47c0      	blx	r8
 80147ba:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80147bc:	6238      	str	r0, [r7, #32]
 80147be:	6a1f      	ldr	r7, [r3, #32]
 80147c0:	2f00      	cmp	r7, #0
 80147c2:	d054      	beq.n	801486e <rcl_wait_set_resize+0x33e>
 80147c4:	4622      	mov	r2, r4
 80147c6:	4631      	mov	r1, r6
 80147c8:	4638      	mov	r0, r7
 80147ca:	f003 f81d 	bl	8017808 <memset>
 80147ce:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80147d0:	e73f      	b.n	8014652 <rcl_wait_set_resize+0x122>
 80147d2:	6a28      	ldr	r0, [r5, #32]
 80147d4:	b120      	cbz	r0, 80147e0 <rcl_wait_set_resize+0x2b0>
 80147d6:	4639      	mov	r1, r7
 80147d8:	47c0      	blx	r8
 80147da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80147dc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80147de:	622b      	str	r3, [r5, #32]
 80147e0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80147e2:	2800      	cmp	r0, #0
 80147e4:	f43f af60 	beq.w	80146a8 <rcl_wait_set_resize+0x178>
 80147e8:	4639      	mov	r1, r7
 80147ea:	47c0      	blx	r8
 80147ec:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80147ee:	2300      	movs	r3, #0
 80147f0:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80147f4:	e758      	b.n	80146a8 <rcl_wait_set_resize+0x178>
 80147f6:	009c      	lsls	r4, r3, #2
 80147f8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80147fa:	463a      	mov	r2, r7
 80147fc:	4621      	mov	r1, r4
 80147fe:	47c8      	blx	r9
 8014800:	62a8      	str	r0, [r5, #40]	@ 0x28
 8014802:	2800      	cmp	r0, #0
 8014804:	d085      	beq.n	8014712 <rcl_wait_set_resize+0x1e2>
 8014806:	4622      	mov	r2, r4
 8014808:	4631      	mov	r1, r6
 801480a:	f002 fffd 	bl	8017808 <memset>
 801480e:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8014812:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014814:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8014816:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801481a:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801481e:	463a      	mov	r2, r7
 8014820:	4621      	mov	r1, r4
 8014822:	47c8      	blx	r9
 8014824:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014826:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801482a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801482c:	b36b      	cbz	r3, 801488a <rcl_wait_set_resize+0x35a>
 801482e:	4622      	mov	r2, r4
 8014830:	4631      	mov	r1, r6
 8014832:	4618      	mov	r0, r3
 8014834:	f002 ffe8 	bl	8017808 <memset>
 8014838:	4630      	mov	r0, r6
 801483a:	b003      	add	sp, #12
 801483c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014840:	200b      	movs	r0, #11
 8014842:	4770      	bx	lr
 8014844:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014848:	e764      	b.n	8014714 <rcl_wait_set_resize+0x1e4>
 801484a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801484c:	68a8      	ldr	r0, [r5, #8]
 801484e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8014850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014852:	4798      	blx	r3
 8014854:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014856:	6928      	ldr	r0, [r5, #16]
 8014858:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801485a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801485c:	f8c5 900c 	str.w	r9, [r5, #12]
 8014860:	f8c5 9008 	str.w	r9, [r5, #8]
 8014864:	4790      	blx	r2
 8014866:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801486a:	200a      	movs	r0, #10
 801486c:	e752      	b.n	8014714 <rcl_wait_set_resize+0x1e4>
 801486e:	69a8      	ldr	r0, [r5, #24]
 8014870:	4649      	mov	r1, r9
 8014872:	47d0      	blx	sl
 8014874:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8014878:	200a      	movs	r0, #10
 801487a:	e74b      	b.n	8014714 <rcl_wait_set_resize+0x1e4>
 801487c:	6a28      	ldr	r0, [r5, #32]
 801487e:	4639      	mov	r1, r7
 8014880:	47c0      	blx	r8
 8014882:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8014886:	200a      	movs	r0, #10
 8014888:	e744      	b.n	8014714 <rcl_wait_set_resize+0x1e4>
 801488a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801488c:	9301      	str	r3, [sp, #4]
 801488e:	4639      	mov	r1, r7
 8014890:	47c0      	blx	r8
 8014892:	9b01      	ldr	r3, [sp, #4]
 8014894:	200a      	movs	r0, #10
 8014896:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801489a:	e73b      	b.n	8014714 <rcl_wait_set_resize+0x1e4>

0801489c <rcl_wait_set_init>:
 801489c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148a0:	b084      	sub	sp, #16
 80148a2:	4604      	mov	r4, r0
 80148a4:	a810      	add	r0, sp, #64	@ 0x40
 80148a6:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 80148aa:	460f      	mov	r7, r1
 80148ac:	4690      	mov	r8, r2
 80148ae:	4699      	mov	r9, r3
 80148b0:	f7f8 fbdc 	bl	800d06c <rcutils_allocator_is_valid>
 80148b4:	2800      	cmp	r0, #0
 80148b6:	d06b      	beq.n	8014990 <rcl_wait_set_init+0xf4>
 80148b8:	2c00      	cmp	r4, #0
 80148ba:	d069      	beq.n	8014990 <rcl_wait_set_init+0xf4>
 80148bc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80148be:	b125      	cbz	r5, 80148ca <rcl_wait_set_init+0x2e>
 80148c0:	2564      	movs	r5, #100	@ 0x64
 80148c2:	4628      	mov	r0, r5
 80148c4:	b004      	add	sp, #16
 80148c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148ca:	f1ba 0f00 	cmp.w	sl, #0
 80148ce:	d05f      	beq.n	8014990 <rcl_wait_set_init+0xf4>
 80148d0:	4650      	mov	r0, sl
 80148d2:	f7fe fa15 	bl	8012d00 <rcl_context_is_valid>
 80148d6:	2800      	cmp	r0, #0
 80148d8:	d067      	beq.n	80149aa <rcl_wait_set_init+0x10e>
 80148da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80148dc:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80148de:	205c      	movs	r0, #92	@ 0x5c
 80148e0:	4798      	blx	r3
 80148e2:	6320      	str	r0, [r4, #48]	@ 0x30
 80148e4:	2800      	cmp	r0, #0
 80148e6:	d062      	beq.n	80149ae <rcl_wait_set_init+0x112>
 80148e8:	4629      	mov	r1, r5
 80148ea:	225c      	movs	r2, #92	@ 0x5c
 80148ec:	f002 ff8c 	bl	8017808 <memset>
 80148f0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 80148f4:	eb03 0e02 	add.w	lr, r3, r2
 80148f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80148fa:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80148fc:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8014900:	449e      	add	lr, r3
 8014902:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014906:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801490a:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801490e:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8014912:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8014916:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 801491a:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 801491e:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8014922:	f8da a000 	ldr.w	sl, [sl]
 8014926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014928:	44c6      	add	lr, r8
 801492a:	f8dc 3000 	ldr.w	r3, [ip]
 801492e:	602b      	str	r3, [r5, #0]
 8014930:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8014934:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8014938:	f001 fc18 	bl	801616c <rmw_create_wait_set>
 801493c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801493e:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8014940:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014942:	b350      	cbz	r0, 801499a <rcl_wait_set_init+0xfe>
 8014944:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014946:	9302      	str	r3, [sp, #8]
 8014948:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801494a:	9301      	str	r3, [sp, #4]
 801494c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801494e:	9300      	str	r3, [sp, #0]
 8014950:	4642      	mov	r2, r8
 8014952:	464b      	mov	r3, r9
 8014954:	4639      	mov	r1, r7
 8014956:	4620      	mov	r0, r4
 8014958:	f7ff fdea 	bl	8014530 <rcl_wait_set_resize>
 801495c:	4605      	mov	r5, r0
 801495e:	2800      	cmp	r0, #0
 8014960:	d0af      	beq.n	80148c2 <rcl_wait_set_init+0x26>
 8014962:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014964:	bb2b      	cbnz	r3, 80149b2 <rcl_wait_set_init+0x116>
 8014966:	2600      	movs	r6, #0
 8014968:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801496c:	9600      	str	r6, [sp, #0]
 801496e:	4633      	mov	r3, r6
 8014970:	4632      	mov	r2, r6
 8014972:	4631      	mov	r1, r6
 8014974:	4620      	mov	r0, r4
 8014976:	f7ff fddb 	bl	8014530 <rcl_wait_set_resize>
 801497a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801497c:	2800      	cmp	r0, #0
 801497e:	d0a0      	beq.n	80148c2 <rcl_wait_set_init+0x26>
 8014980:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8014982:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8014984:	4798      	blx	r3
 8014986:	4628      	mov	r0, r5
 8014988:	6326      	str	r6, [r4, #48]	@ 0x30
 801498a:	b004      	add	sp, #16
 801498c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014990:	250b      	movs	r5, #11
 8014992:	4628      	mov	r0, r5
 8014994:	b004      	add	sp, #16
 8014996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801499a:	2501      	movs	r5, #1
 801499c:	f001 fbf0 	bl	8016180 <rmw_destroy_wait_set>
 80149a0:	2800      	cmp	r0, #0
 80149a2:	bf18      	it	ne
 80149a4:	f44f 7561 	movne.w	r5, #900	@ 0x384
 80149a8:	e7dd      	b.n	8014966 <rcl_wait_set_init+0xca>
 80149aa:	2565      	movs	r5, #101	@ 0x65
 80149ac:	e789      	b.n	80148c2 <rcl_wait_set_init+0x26>
 80149ae:	250a      	movs	r5, #10
 80149b0:	e787      	b.n	80148c2 <rcl_wait_set_init+0x26>
 80149b2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80149b4:	e7f2      	b.n	801499c <rcl_wait_set_init+0x100>
 80149b6:	bf00      	nop

080149b8 <rcl_wait_set_add_guard_condition>:
 80149b8:	b318      	cbz	r0, 8014a02 <rcl_wait_set_add_guard_condition+0x4a>
 80149ba:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80149bc:	b570      	push	{r4, r5, r6, lr}
 80149be:	4604      	mov	r4, r0
 80149c0:	b30b      	cbz	r3, 8014a06 <rcl_wait_set_add_guard_condition+0x4e>
 80149c2:	b319      	cbz	r1, 8014a0c <rcl_wait_set_add_guard_condition+0x54>
 80149c4:	68dd      	ldr	r5, [r3, #12]
 80149c6:	68c0      	ldr	r0, [r0, #12]
 80149c8:	4285      	cmp	r5, r0
 80149ca:	d217      	bcs.n	80149fc <rcl_wait_set_add_guard_condition+0x44>
 80149cc:	68a0      	ldr	r0, [r4, #8]
 80149ce:	1c6e      	adds	r6, r5, #1
 80149d0:	60de      	str	r6, [r3, #12]
 80149d2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80149d6:	b102      	cbz	r2, 80149da <rcl_wait_set_add_guard_condition+0x22>
 80149d8:	6015      	str	r5, [r2, #0]
 80149da:	4608      	mov	r0, r1
 80149dc:	f7fe fc62 	bl	80132a4 <rcl_guard_condition_get_rmw_handle>
 80149e0:	b150      	cbz	r0, 80149f8 <rcl_wait_set_add_guard_condition+0x40>
 80149e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80149e4:	6842      	ldr	r2, [r0, #4]
 80149e6:	695b      	ldr	r3, [r3, #20]
 80149e8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80149ec:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80149ee:	6913      	ldr	r3, [r2, #16]
 80149f0:	3301      	adds	r3, #1
 80149f2:	2000      	movs	r0, #0
 80149f4:	6113      	str	r3, [r2, #16]
 80149f6:	bd70      	pop	{r4, r5, r6, pc}
 80149f8:	2001      	movs	r0, #1
 80149fa:	bd70      	pop	{r4, r5, r6, pc}
 80149fc:	f240 3086 	movw	r0, #902	@ 0x386
 8014a00:	bd70      	pop	{r4, r5, r6, pc}
 8014a02:	200b      	movs	r0, #11
 8014a04:	4770      	bx	lr
 8014a06:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014a0a:	bd70      	pop	{r4, r5, r6, pc}
 8014a0c:	200b      	movs	r0, #11
 8014a0e:	bd70      	pop	{r4, r5, r6, pc}

08014a10 <rcl_wait_set_add_timer>:
 8014a10:	b328      	cbz	r0, 8014a5e <rcl_wait_set_add_timer+0x4e>
 8014a12:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014a14:	b570      	push	{r4, r5, r6, lr}
 8014a16:	4604      	mov	r4, r0
 8014a18:	b31b      	cbz	r3, 8014a62 <rcl_wait_set_add_timer+0x52>
 8014a1a:	b329      	cbz	r1, 8014a68 <rcl_wait_set_add_timer+0x58>
 8014a1c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8014a1e:	6965      	ldr	r5, [r4, #20]
 8014a20:	42a8      	cmp	r0, r5
 8014a22:	d219      	bcs.n	8014a58 <rcl_wait_set_add_timer+0x48>
 8014a24:	6925      	ldr	r5, [r4, #16]
 8014a26:	1c46      	adds	r6, r0, #1
 8014a28:	641e      	str	r6, [r3, #64]	@ 0x40
 8014a2a:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8014a2e:	b102      	cbz	r2, 8014a32 <rcl_wait_set_add_timer+0x22>
 8014a30:	6010      	str	r0, [r2, #0]
 8014a32:	4608      	mov	r0, r1
 8014a34:	f7ff fad4 	bl	8013fe0 <rcl_timer_get_guard_condition>
 8014a38:	b168      	cbz	r0, 8014a56 <rcl_wait_set_add_timer+0x46>
 8014a3a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014a3c:	68e3      	ldr	r3, [r4, #12]
 8014a3e:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8014a40:	3b01      	subs	r3, #1
 8014a42:	441d      	add	r5, r3
 8014a44:	f7fe fc2e 	bl	80132a4 <rcl_guard_condition_get_rmw_handle>
 8014a48:	b180      	cbz	r0, 8014a6c <rcl_wait_set_add_timer+0x5c>
 8014a4a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014a4c:	6842      	ldr	r2, [r0, #4]
 8014a4e:	695b      	ldr	r3, [r3, #20]
 8014a50:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014a54:	2000      	movs	r0, #0
 8014a56:	bd70      	pop	{r4, r5, r6, pc}
 8014a58:	f240 3086 	movw	r0, #902	@ 0x386
 8014a5c:	bd70      	pop	{r4, r5, r6, pc}
 8014a5e:	200b      	movs	r0, #11
 8014a60:	4770      	bx	lr
 8014a62:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014a66:	bd70      	pop	{r4, r5, r6, pc}
 8014a68:	200b      	movs	r0, #11
 8014a6a:	bd70      	pop	{r4, r5, r6, pc}
 8014a6c:	2001      	movs	r0, #1
 8014a6e:	bd70      	pop	{r4, r5, r6, pc}

08014a70 <rcl_wait_set_add_client>:
 8014a70:	b318      	cbz	r0, 8014aba <rcl_wait_set_add_client+0x4a>
 8014a72:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014a74:	b570      	push	{r4, r5, r6, lr}
 8014a76:	4604      	mov	r4, r0
 8014a78:	b30b      	cbz	r3, 8014abe <rcl_wait_set_add_client+0x4e>
 8014a7a:	b319      	cbz	r1, 8014ac4 <rcl_wait_set_add_client+0x54>
 8014a7c:	699d      	ldr	r5, [r3, #24]
 8014a7e:	69c0      	ldr	r0, [r0, #28]
 8014a80:	4285      	cmp	r5, r0
 8014a82:	d217      	bcs.n	8014ab4 <rcl_wait_set_add_client+0x44>
 8014a84:	69a0      	ldr	r0, [r4, #24]
 8014a86:	1c6e      	adds	r6, r5, #1
 8014a88:	619e      	str	r6, [r3, #24]
 8014a8a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014a8e:	b102      	cbz	r2, 8014a92 <rcl_wait_set_add_client+0x22>
 8014a90:	6015      	str	r5, [r2, #0]
 8014a92:	4608      	mov	r0, r1
 8014a94:	f7f6 fe94 	bl	800b7c0 <rcl_client_get_rmw_handle>
 8014a98:	b150      	cbz	r0, 8014ab0 <rcl_wait_set_add_client+0x40>
 8014a9a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014a9c:	6842      	ldr	r2, [r0, #4]
 8014a9e:	6a1b      	ldr	r3, [r3, #32]
 8014aa0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014aa4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014aa6:	69d3      	ldr	r3, [r2, #28]
 8014aa8:	3301      	adds	r3, #1
 8014aaa:	2000      	movs	r0, #0
 8014aac:	61d3      	str	r3, [r2, #28]
 8014aae:	bd70      	pop	{r4, r5, r6, pc}
 8014ab0:	2001      	movs	r0, #1
 8014ab2:	bd70      	pop	{r4, r5, r6, pc}
 8014ab4:	f240 3086 	movw	r0, #902	@ 0x386
 8014ab8:	bd70      	pop	{r4, r5, r6, pc}
 8014aba:	200b      	movs	r0, #11
 8014abc:	4770      	bx	lr
 8014abe:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014ac2:	bd70      	pop	{r4, r5, r6, pc}
 8014ac4:	200b      	movs	r0, #11
 8014ac6:	bd70      	pop	{r4, r5, r6, pc}

08014ac8 <rcl_wait_set_add_service>:
 8014ac8:	b318      	cbz	r0, 8014b12 <rcl_wait_set_add_service+0x4a>
 8014aca:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014acc:	b570      	push	{r4, r5, r6, lr}
 8014ace:	4604      	mov	r4, r0
 8014ad0:	b30b      	cbz	r3, 8014b16 <rcl_wait_set_add_service+0x4e>
 8014ad2:	b319      	cbz	r1, 8014b1c <rcl_wait_set_add_service+0x54>
 8014ad4:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8014ad6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8014ad8:	4285      	cmp	r5, r0
 8014ada:	d217      	bcs.n	8014b0c <rcl_wait_set_add_service+0x44>
 8014adc:	6a20      	ldr	r0, [r4, #32]
 8014ade:	1c6e      	adds	r6, r5, #1
 8014ae0:	625e      	str	r6, [r3, #36]	@ 0x24
 8014ae2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014ae6:	b102      	cbz	r2, 8014aea <rcl_wait_set_add_service+0x22>
 8014ae8:	6015      	str	r5, [r2, #0]
 8014aea:	4608      	mov	r0, r1
 8014aec:	f7fe fe02 	bl	80136f4 <rcl_service_get_rmw_handle>
 8014af0:	b150      	cbz	r0, 8014b08 <rcl_wait_set_add_service+0x40>
 8014af2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014af4:	6842      	ldr	r2, [r0, #4]
 8014af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014af8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014afc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014afe:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8014b00:	3301      	adds	r3, #1
 8014b02:	2000      	movs	r0, #0
 8014b04:	6293      	str	r3, [r2, #40]	@ 0x28
 8014b06:	bd70      	pop	{r4, r5, r6, pc}
 8014b08:	2001      	movs	r0, #1
 8014b0a:	bd70      	pop	{r4, r5, r6, pc}
 8014b0c:	f240 3086 	movw	r0, #902	@ 0x386
 8014b10:	bd70      	pop	{r4, r5, r6, pc}
 8014b12:	200b      	movs	r0, #11
 8014b14:	4770      	bx	lr
 8014b16:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014b1a:	bd70      	pop	{r4, r5, r6, pc}
 8014b1c:	200b      	movs	r0, #11
 8014b1e:	bd70      	pop	{r4, r5, r6, pc}

08014b20 <rcl_wait>:
 8014b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b24:	ed2d 8b02 	vpush	{d8}
 8014b28:	b08d      	sub	sp, #52	@ 0x34
 8014b2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014b2e:	2800      	cmp	r0, #0
 8014b30:	f000 8143 	beq.w	8014dba <rcl_wait+0x29a>
 8014b34:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8014b36:	4605      	mov	r5, r0
 8014b38:	2e00      	cmp	r6, #0
 8014b3a:	f000 8112 	beq.w	8014d62 <rcl_wait+0x242>
 8014b3e:	6843      	ldr	r3, [r0, #4]
 8014b40:	b983      	cbnz	r3, 8014b64 <rcl_wait+0x44>
 8014b42:	68eb      	ldr	r3, [r5, #12]
 8014b44:	b973      	cbnz	r3, 8014b64 <rcl_wait+0x44>
 8014b46:	696b      	ldr	r3, [r5, #20]
 8014b48:	b963      	cbnz	r3, 8014b64 <rcl_wait+0x44>
 8014b4a:	69eb      	ldr	r3, [r5, #28]
 8014b4c:	b953      	cbnz	r3, 8014b64 <rcl_wait+0x44>
 8014b4e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8014b50:	b943      	cbnz	r3, 8014b64 <rcl_wait+0x44>
 8014b52:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8014b54:	b933      	cbnz	r3, 8014b64 <rcl_wait+0x44>
 8014b56:	f240 3085 	movw	r0, #901	@ 0x385
 8014b5a:	b00d      	add	sp, #52	@ 0x34
 8014b5c:	ecbd 8b02 	vpop	{d8}
 8014b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b64:	9b04      	ldr	r3, [sp, #16]
 8014b66:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8014b68:	2b01      	cmp	r3, #1
 8014b6a:	9b05      	ldr	r3, [sp, #20]
 8014b6c:	f173 0300 	sbcs.w	r3, r3, #0
 8014b70:	f2c0 80f0 	blt.w	8014d54 <rcl_wait+0x234>
 8014b74:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8014b78:	4643      	mov	r3, r8
 8014b7a:	2a00      	cmp	r2, #0
 8014b7c:	f000 8133 	beq.w	8014de6 <rcl_wait+0x2c6>
 8014b80:	2400      	movs	r4, #0
 8014b82:	4613      	mov	r3, r2
 8014b84:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8014df8 <rcl_wait+0x2d8>
 8014b88:	46a2      	mov	sl, r4
 8014b8a:	46a3      	mov	fp, r4
 8014b8c:	f240 3921 	movw	r9, #801	@ 0x321
 8014b90:	4632      	mov	r2, r6
 8014b92:	e014      	b.n	8014bbe <rcl_wait+0x9e>
 8014b94:	2800      	cmp	r0, #0
 8014b96:	d1e0      	bne.n	8014b5a <rcl_wait+0x3a>
 8014b98:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014b9c:	4542      	cmp	r2, r8
 8014b9e:	eb73 0107 	sbcs.w	r1, r3, r7
 8014ba2:	da03      	bge.n	8014bac <rcl_wait+0x8c>
 8014ba4:	4690      	mov	r8, r2
 8014ba6:	461f      	mov	r7, r3
 8014ba8:	f04f 0b01 	mov.w	fp, #1
 8014bac:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8014bae:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8014bb0:	3401      	adds	r4, #1
 8014bb2:	f14a 0a00 	adc.w	sl, sl, #0
 8014bb6:	429c      	cmp	r4, r3
 8014bb8:	f17a 0100 	sbcs.w	r1, sl, #0
 8014bbc:	d228      	bcs.n	8014c10 <rcl_wait+0xf0>
 8014bbe:	6928      	ldr	r0, [r5, #16]
 8014bc0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8014bc4:	a908      	add	r1, sp, #32
 8014bc6:	00a6      	lsls	r6, r4, #2
 8014bc8:	2800      	cmp	r0, #0
 8014bca:	d0f1      	beq.n	8014bb0 <rcl_wait+0x90>
 8014bcc:	68eb      	ldr	r3, [r5, #12]
 8014bce:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8014bd2:	4423      	add	r3, r4
 8014bd4:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8014bd8:	f1be 0f00 	cmp.w	lr, #0
 8014bdc:	d006      	beq.n	8014bec <rcl_wait+0xcc>
 8014bde:	6913      	ldr	r3, [r2, #16]
 8014be0:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8014be4:	3301      	adds	r3, #1
 8014be6:	6113      	str	r3, [r2, #16]
 8014be8:	692b      	ldr	r3, [r5, #16]
 8014bea:	5998      	ldr	r0, [r3, r6]
 8014bec:	ed8d 8b08 	vstr	d8, [sp, #32]
 8014bf0:	f7ff f9c4 	bl	8013f7c <rcl_timer_get_time_until_next_call>
 8014bf4:	4548      	cmp	r0, r9
 8014bf6:	d1cd      	bne.n	8014b94 <rcl_wait+0x74>
 8014bf8:	692b      	ldr	r3, [r5, #16]
 8014bfa:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8014bfc:	2100      	movs	r1, #0
 8014bfe:	5199      	str	r1, [r3, r6]
 8014c00:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8014c02:	3401      	adds	r4, #1
 8014c04:	f14a 0a00 	adc.w	sl, sl, #0
 8014c08:	429c      	cmp	r4, r3
 8014c0a:	f17a 0100 	sbcs.w	r1, sl, #0
 8014c0e:	d3d6      	bcc.n	8014bbe <rcl_wait+0x9e>
 8014c10:	4616      	mov	r6, r2
 8014c12:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8014c16:	4313      	orrs	r3, r2
 8014c18:	46d9      	mov	r9, fp
 8014c1a:	f040 80a9 	bne.w	8014d70 <rcl_wait+0x250>
 8014c1e:	2300      	movs	r3, #0
 8014c20:	2200      	movs	r2, #0
 8014c22:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014c26:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8014c2a:	ab08      	add	r3, sp, #32
 8014c2c:	9302      	str	r3, [sp, #8]
 8014c2e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8014c30:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8014c34:	e9cd 3200 	strd	r3, r2, [sp]
 8014c38:	f106 0110 	add.w	r1, r6, #16
 8014c3c:	f106 031c 	add.w	r3, r6, #28
 8014c40:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8014c44:	1d30      	adds	r0, r6, #4
 8014c46:	f001 f919 	bl	8015e7c <rmw_wait>
 8014c4a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014c4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014c4e:	4680      	mov	r8, r0
 8014c50:	b1ca      	cbz	r2, 8014c86 <rcl_wait+0x166>
 8014c52:	2400      	movs	r4, #0
 8014c54:	4627      	mov	r7, r4
 8014c56:	692a      	ldr	r2, [r5, #16]
 8014c58:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8014c5c:	f10d 011f 	add.w	r1, sp, #31
 8014c60:	00a6      	lsls	r6, r4, #2
 8014c62:	b160      	cbz	r0, 8014c7e <rcl_wait+0x15e>
 8014c64:	f88d 701f 	strb.w	r7, [sp, #31]
 8014c68:	f7ff f94e 	bl	8013f08 <rcl_timer_is_ready>
 8014c6c:	2800      	cmp	r0, #0
 8014c6e:	f47f af74 	bne.w	8014b5a <rcl_wait+0x3a>
 8014c72:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8014c76:	b90b      	cbnz	r3, 8014c7c <rcl_wait+0x15c>
 8014c78:	692a      	ldr	r2, [r5, #16]
 8014c7a:	5193      	str	r3, [r2, r6]
 8014c7c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014c7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014c80:	3401      	adds	r4, #1
 8014c82:	42a2      	cmp	r2, r4
 8014c84:	d8e7      	bhi.n	8014c56 <rcl_wait+0x136>
 8014c86:	f038 0002 	bics.w	r0, r8, #2
 8014c8a:	f040 8090 	bne.w	8014dae <rcl_wait+0x28e>
 8014c8e:	686e      	ldr	r6, [r5, #4]
 8014c90:	4602      	mov	r2, r0
 8014c92:	b91e      	cbnz	r6, 8014c9c <rcl_wait+0x17c>
 8014c94:	e00d      	b.n	8014cb2 <rcl_wait+0x192>
 8014c96:	3201      	adds	r2, #1
 8014c98:	42b2      	cmp	r2, r6
 8014c9a:	d00a      	beq.n	8014cb2 <rcl_wait+0x192>
 8014c9c:	6899      	ldr	r1, [r3, #8]
 8014c9e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014ca2:	2900      	cmp	r1, #0
 8014ca4:	d1f7      	bne.n	8014c96 <rcl_wait+0x176>
 8014ca6:	682c      	ldr	r4, [r5, #0]
 8014ca8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014cac:	3201      	adds	r2, #1
 8014cae:	42b2      	cmp	r2, r6
 8014cb0:	d1f4      	bne.n	8014c9c <rcl_wait+0x17c>
 8014cb2:	68ee      	ldr	r6, [r5, #12]
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	b91e      	cbnz	r6, 8014cc0 <rcl_wait+0x1a0>
 8014cb8:	e00d      	b.n	8014cd6 <rcl_wait+0x1b6>
 8014cba:	3201      	adds	r2, #1
 8014cbc:	42b2      	cmp	r2, r6
 8014cbe:	d00a      	beq.n	8014cd6 <rcl_wait+0x1b6>
 8014cc0:	6959      	ldr	r1, [r3, #20]
 8014cc2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014cc6:	2900      	cmp	r1, #0
 8014cc8:	d1f7      	bne.n	8014cba <rcl_wait+0x19a>
 8014cca:	68ac      	ldr	r4, [r5, #8]
 8014ccc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014cd0:	3201      	adds	r2, #1
 8014cd2:	42b2      	cmp	r2, r6
 8014cd4:	d1f4      	bne.n	8014cc0 <rcl_wait+0x1a0>
 8014cd6:	69ee      	ldr	r6, [r5, #28]
 8014cd8:	2200      	movs	r2, #0
 8014cda:	b91e      	cbnz	r6, 8014ce4 <rcl_wait+0x1c4>
 8014cdc:	e00d      	b.n	8014cfa <rcl_wait+0x1da>
 8014cde:	3201      	adds	r2, #1
 8014ce0:	42b2      	cmp	r2, r6
 8014ce2:	d00a      	beq.n	8014cfa <rcl_wait+0x1da>
 8014ce4:	6a19      	ldr	r1, [r3, #32]
 8014ce6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014cea:	2900      	cmp	r1, #0
 8014cec:	d1f7      	bne.n	8014cde <rcl_wait+0x1be>
 8014cee:	69ac      	ldr	r4, [r5, #24]
 8014cf0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014cf4:	3201      	adds	r2, #1
 8014cf6:	42b2      	cmp	r2, r6
 8014cf8:	d1f4      	bne.n	8014ce4 <rcl_wait+0x1c4>
 8014cfa:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	b91e      	cbnz	r6, 8014d08 <rcl_wait+0x1e8>
 8014d00:	e00d      	b.n	8014d1e <rcl_wait+0x1fe>
 8014d02:	3201      	adds	r2, #1
 8014d04:	4296      	cmp	r6, r2
 8014d06:	d00a      	beq.n	8014d1e <rcl_wait+0x1fe>
 8014d08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8014d0a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014d0e:	2900      	cmp	r1, #0
 8014d10:	d1f7      	bne.n	8014d02 <rcl_wait+0x1e2>
 8014d12:	6a2c      	ldr	r4, [r5, #32]
 8014d14:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014d18:	3201      	adds	r2, #1
 8014d1a:	4296      	cmp	r6, r2
 8014d1c:	d1f4      	bne.n	8014d08 <rcl_wait+0x1e8>
 8014d1e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8014d20:	2200      	movs	r2, #0
 8014d22:	b91e      	cbnz	r6, 8014d2c <rcl_wait+0x20c>
 8014d24:	e00d      	b.n	8014d42 <rcl_wait+0x222>
 8014d26:	3201      	adds	r2, #1
 8014d28:	42b2      	cmp	r2, r6
 8014d2a:	d00a      	beq.n	8014d42 <rcl_wait+0x222>
 8014d2c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8014d2e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014d32:	2900      	cmp	r1, #0
 8014d34:	d1f7      	bne.n	8014d26 <rcl_wait+0x206>
 8014d36:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8014d38:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014d3c:	3201      	adds	r2, #1
 8014d3e:	42b2      	cmp	r2, r6
 8014d40:	d1f4      	bne.n	8014d2c <rcl_wait+0x20c>
 8014d42:	f1b8 0f02 	cmp.w	r8, #2
 8014d46:	f47f af08 	bne.w	8014b5a <rcl_wait+0x3a>
 8014d4a:	464b      	mov	r3, r9
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	bf08      	it	eq
 8014d50:	2002      	moveq	r0, #2
 8014d52:	e702      	b.n	8014b5a <rcl_wait+0x3a>
 8014d54:	2a00      	cmp	r2, #0
 8014d56:	d03a      	beq.n	8014dce <rcl_wait+0x2ae>
 8014d58:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8014d5c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8014d60:	e70e      	b.n	8014b80 <rcl_wait+0x60>
 8014d62:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014d66:	b00d      	add	sp, #52	@ 0x34
 8014d68:	ecbd 8b02 	vpop	{d8}
 8014d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d70:	9b04      	ldr	r3, [sp, #16]
 8014d72:	2b01      	cmp	r3, #1
 8014d74:	9b05      	ldr	r3, [sp, #20]
 8014d76:	f173 0300 	sbcs.w	r3, r3, #0
 8014d7a:	db24      	blt.n	8014dc6 <rcl_wait+0x2a6>
 8014d7c:	2f00      	cmp	r7, #0
 8014d7e:	bfbc      	itt	lt
 8014d80:	f04f 0800 	movlt.w	r8, #0
 8014d84:	4647      	movlt	r7, r8
 8014d86:	a31e      	add	r3, pc, #120	@ (adr r3, 8014e00 <rcl_wait+0x2e0>)
 8014d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d8c:	4640      	mov	r0, r8
 8014d8e:	4639      	mov	r1, r7
 8014d90:	f7eb fc6a 	bl	8000668 <__aeabi_ldivmod>
 8014d94:	a31a      	add	r3, pc, #104	@ (adr r3, 8014e00 <rcl_wait+0x2e0>)
 8014d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d9a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014d9e:	4640      	mov	r0, r8
 8014da0:	4639      	mov	r1, r7
 8014da2:	f7eb fc61 	bl	8000668 <__aeabi_ldivmod>
 8014da6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8014daa:	ab08      	add	r3, sp, #32
 8014dac:	e73e      	b.n	8014c2c <rcl_wait+0x10c>
 8014dae:	2001      	movs	r0, #1
 8014db0:	b00d      	add	sp, #52	@ 0x34
 8014db2:	ecbd 8b02 	vpop	{d8}
 8014db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dba:	200b      	movs	r0, #11
 8014dbc:	b00d      	add	sp, #52	@ 0x34
 8014dbe:	ecbd 8b02 	vpop	{d8}
 8014dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dc6:	465b      	mov	r3, fp
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d1d7      	bne.n	8014d7c <rcl_wait+0x25c>
 8014dcc:	e72e      	b.n	8014c2c <rcl_wait+0x10c>
 8014dce:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8014dd2:	430b      	orrs	r3, r1
 8014dd4:	bf08      	it	eq
 8014dd6:	4691      	moveq	r9, r2
 8014dd8:	f43f af21 	beq.w	8014c1e <rcl_wait+0xfe>
 8014ddc:	9b04      	ldr	r3, [sp, #16]
 8014dde:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8014de2:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8014de6:	2b01      	cmp	r3, #1
 8014de8:	9b05      	ldr	r3, [sp, #20]
 8014dea:	f173 0300 	sbcs.w	r3, r3, #0
 8014dee:	f04f 0300 	mov.w	r3, #0
 8014df2:	4699      	mov	r9, r3
 8014df4:	dac2      	bge.n	8014d7c <rcl_wait+0x25c>
 8014df6:	e719      	b.n	8014c2c <rcl_wait+0x10c>
 8014df8:	ffffffff 	.word	0xffffffff
 8014dfc:	7fffffff 	.word	0x7fffffff
 8014e00:	3b9aca00 	.word	0x3b9aca00
 8014e04:	00000000 	.word	0x00000000

08014e08 <rcl_action_take_goal_response>:
 8014e08:	2800      	cmp	r0, #0
 8014e0a:	d039      	beq.n	8014e80 <rcl_action_take_goal_response+0x78>
 8014e0c:	b570      	push	{r4, r5, r6, lr}
 8014e0e:	4604      	mov	r4, r0
 8014e10:	6800      	ldr	r0, [r0, #0]
 8014e12:	b380      	cbz	r0, 8014e76 <rcl_action_take_goal_response+0x6e>
 8014e14:	460d      	mov	r5, r1
 8014e16:	4616      	mov	r6, r2
 8014e18:	f7f6 fd56 	bl	800b8c8 <rcl_client_is_valid>
 8014e1c:	b330      	cbz	r0, 8014e6c <rcl_action_take_goal_response+0x64>
 8014e1e:	6820      	ldr	r0, [r4, #0]
 8014e20:	3004      	adds	r0, #4
 8014e22:	f7f6 fd51 	bl	800b8c8 <rcl_client_is_valid>
 8014e26:	b308      	cbz	r0, 8014e6c <rcl_action_take_goal_response+0x64>
 8014e28:	6820      	ldr	r0, [r4, #0]
 8014e2a:	3008      	adds	r0, #8
 8014e2c:	f7f6 fd4c 	bl	800b8c8 <rcl_client_is_valid>
 8014e30:	b1e0      	cbz	r0, 8014e6c <rcl_action_take_goal_response+0x64>
 8014e32:	6820      	ldr	r0, [r4, #0]
 8014e34:	300c      	adds	r0, #12
 8014e36:	f7fe fd23 	bl	8013880 <rcl_subscription_is_valid>
 8014e3a:	b1b8      	cbz	r0, 8014e6c <rcl_action_take_goal_response+0x64>
 8014e3c:	6820      	ldr	r0, [r4, #0]
 8014e3e:	3010      	adds	r0, #16
 8014e40:	f7fe fd1e 	bl	8013880 <rcl_subscription_is_valid>
 8014e44:	b190      	cbz	r0, 8014e6c <rcl_action_take_goal_response+0x64>
 8014e46:	b1cd      	cbz	r5, 8014e7c <rcl_action_take_goal_response+0x74>
 8014e48:	b1c6      	cbz	r6, 8014e7c <rcl_action_take_goal_response+0x74>
 8014e4a:	6820      	ldr	r0, [r4, #0]
 8014e4c:	4632      	mov	r2, r6
 8014e4e:	4629      	mov	r1, r5
 8014e50:	f7f6 fcf2 	bl	800b838 <rcl_take_response>
 8014e54:	b148      	cbz	r0, 8014e6a <rcl_action_take_goal_response+0x62>
 8014e56:	280a      	cmp	r0, #10
 8014e58:	d007      	beq.n	8014e6a <rcl_action_take_goal_response+0x62>
 8014e5a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014e5e:	f640 0337 	movw	r3, #2103	@ 0x837
 8014e62:	4290      	cmp	r0, r2
 8014e64:	bf0c      	ite	eq
 8014e66:	4618      	moveq	r0, r3
 8014e68:	2001      	movne	r0, #1
 8014e6a:	bd70      	pop	{r4, r5, r6, pc}
 8014e6c:	f7f8 f9e0 	bl	800d230 <rcutils_reset_error>
 8014e70:	f640 0036 	movw	r0, #2102	@ 0x836
 8014e74:	bd70      	pop	{r4, r5, r6, pc}
 8014e76:	f640 0036 	movw	r0, #2102	@ 0x836
 8014e7a:	bd70      	pop	{r4, r5, r6, pc}
 8014e7c:	200b      	movs	r0, #11
 8014e7e:	bd70      	pop	{r4, r5, r6, pc}
 8014e80:	f640 0036 	movw	r0, #2102	@ 0x836
 8014e84:	4770      	bx	lr
 8014e86:	bf00      	nop

08014e88 <rcl_action_send_result_request>:
 8014e88:	b390      	cbz	r0, 8014ef0 <rcl_action_send_result_request+0x68>
 8014e8a:	b570      	push	{r4, r5, r6, lr}
 8014e8c:	4604      	mov	r4, r0
 8014e8e:	6800      	ldr	r0, [r0, #0]
 8014e90:	b348      	cbz	r0, 8014ee6 <rcl_action_send_result_request+0x5e>
 8014e92:	460d      	mov	r5, r1
 8014e94:	4616      	mov	r6, r2
 8014e96:	f7f6 fd17 	bl	800b8c8 <rcl_client_is_valid>
 8014e9a:	b1f8      	cbz	r0, 8014edc <rcl_action_send_result_request+0x54>
 8014e9c:	6820      	ldr	r0, [r4, #0]
 8014e9e:	3004      	adds	r0, #4
 8014ea0:	f7f6 fd12 	bl	800b8c8 <rcl_client_is_valid>
 8014ea4:	b1d0      	cbz	r0, 8014edc <rcl_action_send_result_request+0x54>
 8014ea6:	6820      	ldr	r0, [r4, #0]
 8014ea8:	3008      	adds	r0, #8
 8014eaa:	f7f6 fd0d 	bl	800b8c8 <rcl_client_is_valid>
 8014eae:	b1a8      	cbz	r0, 8014edc <rcl_action_send_result_request+0x54>
 8014eb0:	6820      	ldr	r0, [r4, #0]
 8014eb2:	300c      	adds	r0, #12
 8014eb4:	f7fe fce4 	bl	8013880 <rcl_subscription_is_valid>
 8014eb8:	b180      	cbz	r0, 8014edc <rcl_action_send_result_request+0x54>
 8014eba:	6820      	ldr	r0, [r4, #0]
 8014ebc:	3010      	adds	r0, #16
 8014ebe:	f7fe fcdf 	bl	8013880 <rcl_subscription_is_valid>
 8014ec2:	b158      	cbz	r0, 8014edc <rcl_action_send_result_request+0x54>
 8014ec4:	b195      	cbz	r5, 8014eec <rcl_action_send_result_request+0x64>
 8014ec6:	b18e      	cbz	r6, 8014eec <rcl_action_send_result_request+0x64>
 8014ec8:	6820      	ldr	r0, [r4, #0]
 8014eca:	4632      	mov	r2, r6
 8014ecc:	4629      	mov	r1, r5
 8014ece:	3008      	adds	r0, #8
 8014ed0:	f7f6 fc7c 	bl	800b7cc <rcl_send_request>
 8014ed4:	3800      	subs	r0, #0
 8014ed6:	bf18      	it	ne
 8014ed8:	2001      	movne	r0, #1
 8014eda:	bd70      	pop	{r4, r5, r6, pc}
 8014edc:	f7f8 f9a8 	bl	800d230 <rcutils_reset_error>
 8014ee0:	f640 0036 	movw	r0, #2102	@ 0x836
 8014ee4:	bd70      	pop	{r4, r5, r6, pc}
 8014ee6:	f640 0036 	movw	r0, #2102	@ 0x836
 8014eea:	bd70      	pop	{r4, r5, r6, pc}
 8014eec:	200b      	movs	r0, #11
 8014eee:	bd70      	pop	{r4, r5, r6, pc}
 8014ef0:	f640 0036 	movw	r0, #2102	@ 0x836
 8014ef4:	4770      	bx	lr
 8014ef6:	bf00      	nop

08014ef8 <rcl_action_take_result_response>:
 8014ef8:	2800      	cmp	r0, #0
 8014efa:	d03a      	beq.n	8014f72 <rcl_action_take_result_response+0x7a>
 8014efc:	b570      	push	{r4, r5, r6, lr}
 8014efe:	4604      	mov	r4, r0
 8014f00:	6800      	ldr	r0, [r0, #0]
 8014f02:	b388      	cbz	r0, 8014f68 <rcl_action_take_result_response+0x70>
 8014f04:	460d      	mov	r5, r1
 8014f06:	4616      	mov	r6, r2
 8014f08:	f7f6 fcde 	bl	800b8c8 <rcl_client_is_valid>
 8014f0c:	b338      	cbz	r0, 8014f5e <rcl_action_take_result_response+0x66>
 8014f0e:	6820      	ldr	r0, [r4, #0]
 8014f10:	3004      	adds	r0, #4
 8014f12:	f7f6 fcd9 	bl	800b8c8 <rcl_client_is_valid>
 8014f16:	b310      	cbz	r0, 8014f5e <rcl_action_take_result_response+0x66>
 8014f18:	6820      	ldr	r0, [r4, #0]
 8014f1a:	3008      	adds	r0, #8
 8014f1c:	f7f6 fcd4 	bl	800b8c8 <rcl_client_is_valid>
 8014f20:	b1e8      	cbz	r0, 8014f5e <rcl_action_take_result_response+0x66>
 8014f22:	6820      	ldr	r0, [r4, #0]
 8014f24:	300c      	adds	r0, #12
 8014f26:	f7fe fcab 	bl	8013880 <rcl_subscription_is_valid>
 8014f2a:	b1c0      	cbz	r0, 8014f5e <rcl_action_take_result_response+0x66>
 8014f2c:	6820      	ldr	r0, [r4, #0]
 8014f2e:	3010      	adds	r0, #16
 8014f30:	f7fe fca6 	bl	8013880 <rcl_subscription_is_valid>
 8014f34:	b198      	cbz	r0, 8014f5e <rcl_action_take_result_response+0x66>
 8014f36:	b1d5      	cbz	r5, 8014f6e <rcl_action_take_result_response+0x76>
 8014f38:	b1ce      	cbz	r6, 8014f6e <rcl_action_take_result_response+0x76>
 8014f3a:	6820      	ldr	r0, [r4, #0]
 8014f3c:	4632      	mov	r2, r6
 8014f3e:	4629      	mov	r1, r5
 8014f40:	3008      	adds	r0, #8
 8014f42:	f7f6 fc79 	bl	800b838 <rcl_take_response>
 8014f46:	b148      	cbz	r0, 8014f5c <rcl_action_take_result_response+0x64>
 8014f48:	280a      	cmp	r0, #10
 8014f4a:	d007      	beq.n	8014f5c <rcl_action_take_result_response+0x64>
 8014f4c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014f50:	f640 0337 	movw	r3, #2103	@ 0x837
 8014f54:	4290      	cmp	r0, r2
 8014f56:	bf0c      	ite	eq
 8014f58:	4618      	moveq	r0, r3
 8014f5a:	2001      	movne	r0, #1
 8014f5c:	bd70      	pop	{r4, r5, r6, pc}
 8014f5e:	f7f8 f967 	bl	800d230 <rcutils_reset_error>
 8014f62:	f640 0036 	movw	r0, #2102	@ 0x836
 8014f66:	bd70      	pop	{r4, r5, r6, pc}
 8014f68:	f640 0036 	movw	r0, #2102	@ 0x836
 8014f6c:	bd70      	pop	{r4, r5, r6, pc}
 8014f6e:	200b      	movs	r0, #11
 8014f70:	bd70      	pop	{r4, r5, r6, pc}
 8014f72:	f640 0036 	movw	r0, #2102	@ 0x836
 8014f76:	4770      	bx	lr

08014f78 <rcl_action_take_cancel_response>:
 8014f78:	2800      	cmp	r0, #0
 8014f7a:	d03a      	beq.n	8014ff2 <rcl_action_take_cancel_response+0x7a>
 8014f7c:	b570      	push	{r4, r5, r6, lr}
 8014f7e:	4604      	mov	r4, r0
 8014f80:	6800      	ldr	r0, [r0, #0]
 8014f82:	b388      	cbz	r0, 8014fe8 <rcl_action_take_cancel_response+0x70>
 8014f84:	460d      	mov	r5, r1
 8014f86:	4616      	mov	r6, r2
 8014f88:	f7f6 fc9e 	bl	800b8c8 <rcl_client_is_valid>
 8014f8c:	b338      	cbz	r0, 8014fde <rcl_action_take_cancel_response+0x66>
 8014f8e:	6820      	ldr	r0, [r4, #0]
 8014f90:	3004      	adds	r0, #4
 8014f92:	f7f6 fc99 	bl	800b8c8 <rcl_client_is_valid>
 8014f96:	b310      	cbz	r0, 8014fde <rcl_action_take_cancel_response+0x66>
 8014f98:	6820      	ldr	r0, [r4, #0]
 8014f9a:	3008      	adds	r0, #8
 8014f9c:	f7f6 fc94 	bl	800b8c8 <rcl_client_is_valid>
 8014fa0:	b1e8      	cbz	r0, 8014fde <rcl_action_take_cancel_response+0x66>
 8014fa2:	6820      	ldr	r0, [r4, #0]
 8014fa4:	300c      	adds	r0, #12
 8014fa6:	f7fe fc6b 	bl	8013880 <rcl_subscription_is_valid>
 8014faa:	b1c0      	cbz	r0, 8014fde <rcl_action_take_cancel_response+0x66>
 8014fac:	6820      	ldr	r0, [r4, #0]
 8014fae:	3010      	adds	r0, #16
 8014fb0:	f7fe fc66 	bl	8013880 <rcl_subscription_is_valid>
 8014fb4:	b198      	cbz	r0, 8014fde <rcl_action_take_cancel_response+0x66>
 8014fb6:	b1d5      	cbz	r5, 8014fee <rcl_action_take_cancel_response+0x76>
 8014fb8:	b1ce      	cbz	r6, 8014fee <rcl_action_take_cancel_response+0x76>
 8014fba:	6820      	ldr	r0, [r4, #0]
 8014fbc:	4632      	mov	r2, r6
 8014fbe:	4629      	mov	r1, r5
 8014fc0:	3004      	adds	r0, #4
 8014fc2:	f7f6 fc39 	bl	800b838 <rcl_take_response>
 8014fc6:	b148      	cbz	r0, 8014fdc <rcl_action_take_cancel_response+0x64>
 8014fc8:	280a      	cmp	r0, #10
 8014fca:	d007      	beq.n	8014fdc <rcl_action_take_cancel_response+0x64>
 8014fcc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014fd0:	f640 0337 	movw	r3, #2103	@ 0x837
 8014fd4:	4290      	cmp	r0, r2
 8014fd6:	bf0c      	ite	eq
 8014fd8:	4618      	moveq	r0, r3
 8014fda:	2001      	movne	r0, #1
 8014fdc:	bd70      	pop	{r4, r5, r6, pc}
 8014fde:	f7f8 f927 	bl	800d230 <rcutils_reset_error>
 8014fe2:	f640 0036 	movw	r0, #2102	@ 0x836
 8014fe6:	bd70      	pop	{r4, r5, r6, pc}
 8014fe8:	f640 0036 	movw	r0, #2102	@ 0x836
 8014fec:	bd70      	pop	{r4, r5, r6, pc}
 8014fee:	200b      	movs	r0, #11
 8014ff0:	bd70      	pop	{r4, r5, r6, pc}
 8014ff2:	f640 0036 	movw	r0, #2102	@ 0x836
 8014ff6:	4770      	bx	lr

08014ff8 <rcl_action_take_feedback>:
 8014ff8:	2800      	cmp	r0, #0
 8014ffa:	d038      	beq.n	801506e <rcl_action_take_feedback+0x76>
 8014ffc:	b530      	push	{r4, r5, lr}
 8014ffe:	4604      	mov	r4, r0
 8015000:	6800      	ldr	r0, [r0, #0]
 8015002:	b091      	sub	sp, #68	@ 0x44
 8015004:	b378      	cbz	r0, 8015066 <rcl_action_take_feedback+0x6e>
 8015006:	460d      	mov	r5, r1
 8015008:	f7f6 fc5e 	bl	800b8c8 <rcl_client_is_valid>
 801500c:	b328      	cbz	r0, 801505a <rcl_action_take_feedback+0x62>
 801500e:	6820      	ldr	r0, [r4, #0]
 8015010:	3004      	adds	r0, #4
 8015012:	f7f6 fc59 	bl	800b8c8 <rcl_client_is_valid>
 8015016:	b300      	cbz	r0, 801505a <rcl_action_take_feedback+0x62>
 8015018:	6820      	ldr	r0, [r4, #0]
 801501a:	3008      	adds	r0, #8
 801501c:	f7f6 fc54 	bl	800b8c8 <rcl_client_is_valid>
 8015020:	b1d8      	cbz	r0, 801505a <rcl_action_take_feedback+0x62>
 8015022:	6820      	ldr	r0, [r4, #0]
 8015024:	300c      	adds	r0, #12
 8015026:	f7fe fc2b 	bl	8013880 <rcl_subscription_is_valid>
 801502a:	b1b0      	cbz	r0, 801505a <rcl_action_take_feedback+0x62>
 801502c:	6820      	ldr	r0, [r4, #0]
 801502e:	3010      	adds	r0, #16
 8015030:	f7fe fc26 	bl	8013880 <rcl_subscription_is_valid>
 8015034:	b188      	cbz	r0, 801505a <rcl_action_take_feedback+0x62>
 8015036:	b1ed      	cbz	r5, 8015074 <rcl_action_take_feedback+0x7c>
 8015038:	6820      	ldr	r0, [r4, #0]
 801503a:	2300      	movs	r3, #0
 801503c:	466a      	mov	r2, sp
 801503e:	4629      	mov	r1, r5
 8015040:	300c      	adds	r0, #12
 8015042:	f7fe fbbf 	bl	80137c4 <rcl_take>
 8015046:	b160      	cbz	r0, 8015062 <rcl_action_take_feedback+0x6a>
 8015048:	f240 1391 	movw	r3, #401	@ 0x191
 801504c:	4298      	cmp	r0, r3
 801504e:	d014      	beq.n	801507a <rcl_action_take_feedback+0x82>
 8015050:	280a      	cmp	r0, #10
 8015052:	bf18      	it	ne
 8015054:	2001      	movne	r0, #1
 8015056:	b011      	add	sp, #68	@ 0x44
 8015058:	bd30      	pop	{r4, r5, pc}
 801505a:	f7f8 f8e9 	bl	800d230 <rcutils_reset_error>
 801505e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015062:	b011      	add	sp, #68	@ 0x44
 8015064:	bd30      	pop	{r4, r5, pc}
 8015066:	f640 0036 	movw	r0, #2102	@ 0x836
 801506a:	b011      	add	sp, #68	@ 0x44
 801506c:	bd30      	pop	{r4, r5, pc}
 801506e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015072:	4770      	bx	lr
 8015074:	200b      	movs	r0, #11
 8015076:	b011      	add	sp, #68	@ 0x44
 8015078:	bd30      	pop	{r4, r5, pc}
 801507a:	f640 0037 	movw	r0, #2103	@ 0x837
 801507e:	e7f0      	b.n	8015062 <rcl_action_take_feedback+0x6a>

08015080 <rcl_action_wait_set_add_action_client>:
 8015080:	2800      	cmp	r0, #0
 8015082:	d048      	beq.n	8015116 <rcl_action_wait_set_add_action_client+0x96>
 8015084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015086:	460c      	mov	r4, r1
 8015088:	2900      	cmp	r1, #0
 801508a:	d03c      	beq.n	8015106 <rcl_action_wait_set_add_action_client+0x86>
 801508c:	4605      	mov	r5, r0
 801508e:	6808      	ldr	r0, [r1, #0]
 8015090:	2800      	cmp	r0, #0
 8015092:	d038      	beq.n	8015106 <rcl_action_wait_set_add_action_client+0x86>
 8015094:	4617      	mov	r7, r2
 8015096:	461e      	mov	r6, r3
 8015098:	f7f6 fc16 	bl	800b8c8 <rcl_client_is_valid>
 801509c:	b3b0      	cbz	r0, 801510c <rcl_action_wait_set_add_action_client+0x8c>
 801509e:	6820      	ldr	r0, [r4, #0]
 80150a0:	3004      	adds	r0, #4
 80150a2:	f7f6 fc11 	bl	800b8c8 <rcl_client_is_valid>
 80150a6:	b388      	cbz	r0, 801510c <rcl_action_wait_set_add_action_client+0x8c>
 80150a8:	6820      	ldr	r0, [r4, #0]
 80150aa:	3008      	adds	r0, #8
 80150ac:	f7f6 fc0c 	bl	800b8c8 <rcl_client_is_valid>
 80150b0:	b360      	cbz	r0, 801510c <rcl_action_wait_set_add_action_client+0x8c>
 80150b2:	6820      	ldr	r0, [r4, #0]
 80150b4:	300c      	adds	r0, #12
 80150b6:	f7fe fbe3 	bl	8013880 <rcl_subscription_is_valid>
 80150ba:	b338      	cbz	r0, 801510c <rcl_action_wait_set_add_action_client+0x8c>
 80150bc:	6820      	ldr	r0, [r4, #0]
 80150be:	3010      	adds	r0, #16
 80150c0:	f7fe fbde 	bl	8013880 <rcl_subscription_is_valid>
 80150c4:	b310      	cbz	r0, 801510c <rcl_action_wait_set_add_action_client+0x8c>
 80150c6:	6821      	ldr	r1, [r4, #0]
 80150c8:	4628      	mov	r0, r5
 80150ca:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80150ce:	f7ff fccf 	bl	8014a70 <rcl_wait_set_add_client>
 80150d2:	b9b8      	cbnz	r0, 8015104 <rcl_action_wait_set_add_action_client+0x84>
 80150d4:	6821      	ldr	r1, [r4, #0]
 80150d6:	4628      	mov	r0, r5
 80150d8:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80150dc:	3104      	adds	r1, #4
 80150de:	f7ff fcc7 	bl	8014a70 <rcl_wait_set_add_client>
 80150e2:	b978      	cbnz	r0, 8015104 <rcl_action_wait_set_add_action_client+0x84>
 80150e4:	6821      	ldr	r1, [r4, #0]
 80150e6:	4628      	mov	r0, r5
 80150e8:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80150ec:	3108      	adds	r1, #8
 80150ee:	f7ff fcbf 	bl	8014a70 <rcl_wait_set_add_client>
 80150f2:	b938      	cbnz	r0, 8015104 <rcl_action_wait_set_add_action_client+0x84>
 80150f4:	6821      	ldr	r1, [r4, #0]
 80150f6:	4628      	mov	r0, r5
 80150f8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80150fc:	310c      	adds	r1, #12
 80150fe:	f7ff f96f 	bl	80143e0 <rcl_wait_set_add_subscription>
 8015102:	b158      	cbz	r0, 801511c <rcl_action_wait_set_add_action_client+0x9c>
 8015104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015106:	f640 0036 	movw	r0, #2102	@ 0x836
 801510a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801510c:	f7f8 f890 	bl	800d230 <rcutils_reset_error>
 8015110:	f640 0036 	movw	r0, #2102	@ 0x836
 8015114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015116:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801511a:	4770      	bx	lr
 801511c:	6821      	ldr	r1, [r4, #0]
 801511e:	4628      	mov	r0, r5
 8015120:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8015124:	3110      	adds	r1, #16
 8015126:	f7ff f95b 	bl	80143e0 <rcl_wait_set_add_subscription>
 801512a:	2800      	cmp	r0, #0
 801512c:	d1ea      	bne.n	8015104 <rcl_action_wait_set_add_action_client+0x84>
 801512e:	b11f      	cbz	r7, 8015138 <rcl_action_wait_set_add_action_client+0xb8>
 8015130:	6823      	ldr	r3, [r4, #0]
 8015132:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8015136:	603b      	str	r3, [r7, #0]
 8015138:	2e00      	cmp	r6, #0
 801513a:	d0e3      	beq.n	8015104 <rcl_action_wait_set_add_action_client+0x84>
 801513c:	6823      	ldr	r3, [r4, #0]
 801513e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8015142:	6033      	str	r3, [r6, #0]
 8015144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015146:	bf00      	nop

08015148 <rcl_action_client_wait_set_get_entities_ready>:
 8015148:	2800      	cmp	r0, #0
 801514a:	f000 808d 	beq.w	8015268 <rcl_action_client_wait_set_get_entities_ready+0x120>
 801514e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015152:	460c      	mov	r4, r1
 8015154:	2900      	cmp	r1, #0
 8015156:	d077      	beq.n	8015248 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8015158:	4605      	mov	r5, r0
 801515a:	6808      	ldr	r0, [r1, #0]
 801515c:	2800      	cmp	r0, #0
 801515e:	d073      	beq.n	8015248 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8015160:	4616      	mov	r6, r2
 8015162:	461f      	mov	r7, r3
 8015164:	f7f6 fbb0 	bl	800b8c8 <rcl_client_is_valid>
 8015168:	2800      	cmp	r0, #0
 801516a:	d071      	beq.n	8015250 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801516c:	6820      	ldr	r0, [r4, #0]
 801516e:	3004      	adds	r0, #4
 8015170:	f7f6 fbaa 	bl	800b8c8 <rcl_client_is_valid>
 8015174:	2800      	cmp	r0, #0
 8015176:	d06b      	beq.n	8015250 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015178:	6820      	ldr	r0, [r4, #0]
 801517a:	3008      	adds	r0, #8
 801517c:	f7f6 fba4 	bl	800b8c8 <rcl_client_is_valid>
 8015180:	2800      	cmp	r0, #0
 8015182:	d065      	beq.n	8015250 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015184:	6820      	ldr	r0, [r4, #0]
 8015186:	300c      	adds	r0, #12
 8015188:	f7fe fb7a 	bl	8013880 <rcl_subscription_is_valid>
 801518c:	2800      	cmp	r0, #0
 801518e:	d05f      	beq.n	8015250 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015190:	6820      	ldr	r0, [r4, #0]
 8015192:	3010      	adds	r0, #16
 8015194:	f7fe fb74 	bl	8013880 <rcl_subscription_is_valid>
 8015198:	2800      	cmp	r0, #0
 801519a:	d059      	beq.n	8015250 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801519c:	2e00      	cmp	r6, #0
 801519e:	d060      	beq.n	8015262 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80151a0:	2f00      	cmp	r7, #0
 80151a2:	d05e      	beq.n	8015262 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80151a4:	9b06      	ldr	r3, [sp, #24]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d05b      	beq.n	8015262 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80151aa:	9b07      	ldr	r3, [sp, #28]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d058      	beq.n	8015262 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80151b0:	9b08      	ldr	r3, [sp, #32]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d055      	beq.n	8015262 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80151b6:	6823      	ldr	r3, [r4, #0]
 80151b8:	686a      	ldr	r2, [r5, #4]
 80151ba:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80151be:	428a      	cmp	r2, r1
 80151c0:	d94c      	bls.n	801525c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80151c2:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80151c6:	4282      	cmp	r2, r0
 80151c8:	d948      	bls.n	801525c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80151ca:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80151ce:	69ea      	ldr	r2, [r5, #28]
 80151d0:	42a2      	cmp	r2, r4
 80151d2:	d943      	bls.n	801525c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80151d4:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80151d8:	4562      	cmp	r2, ip
 80151da:	d93f      	bls.n	801525c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80151dc:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80151e0:	4572      	cmp	r2, lr
 80151e2:	d93b      	bls.n	801525c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80151e4:	69aa      	ldr	r2, [r5, #24]
 80151e6:	682d      	ldr	r5, [r5, #0]
 80151e8:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80151ec:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80151f0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80151f4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80151f8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80151fc:	f103 0c0c 	add.w	ip, r3, #12
 8015200:	eba5 050c 	sub.w	r5, r5, ip
 8015204:	fab5 f585 	clz	r5, r5
 8015208:	096d      	lsrs	r5, r5, #5
 801520a:	7035      	strb	r5, [r6, #0]
 801520c:	f103 0510 	add.w	r5, r3, #16
 8015210:	1b64      	subs	r4, r4, r5
 8015212:	fab4 f484 	clz	r4, r4
 8015216:	0964      	lsrs	r4, r4, #5
 8015218:	703c      	strb	r4, [r7, #0]
 801521a:	eba3 0008 	sub.w	r0, r3, r8
 801521e:	1d1c      	adds	r4, r3, #4
 8015220:	3308      	adds	r3, #8
 8015222:	1ad3      	subs	r3, r2, r3
 8015224:	fab0 f080 	clz	r0, r0
 8015228:	9a06      	ldr	r2, [sp, #24]
 801522a:	0940      	lsrs	r0, r0, #5
 801522c:	1b09      	subs	r1, r1, r4
 801522e:	7010      	strb	r0, [r2, #0]
 8015230:	fab1 f181 	clz	r1, r1
 8015234:	9a07      	ldr	r2, [sp, #28]
 8015236:	0949      	lsrs	r1, r1, #5
 8015238:	7011      	strb	r1, [r2, #0]
 801523a:	fab3 f383 	clz	r3, r3
 801523e:	9a08      	ldr	r2, [sp, #32]
 8015240:	095b      	lsrs	r3, r3, #5
 8015242:	2000      	movs	r0, #0
 8015244:	7013      	strb	r3, [r2, #0]
 8015246:	e001      	b.n	801524c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8015248:	f640 0036 	movw	r0, #2102	@ 0x836
 801524c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015250:	f7f7 ffee 	bl	800d230 <rcutils_reset_error>
 8015254:	f640 0036 	movw	r0, #2102	@ 0x836
 8015258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801525c:	2001      	movs	r0, #1
 801525e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015262:	200b      	movs	r0, #11
 8015264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015268:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801526c:	4770      	bx	lr
 801526e:	bf00      	nop

08015270 <rcl_action_take_goal_request>:
 8015270:	2800      	cmp	r0, #0
 8015272:	d039      	beq.n	80152e8 <rcl_action_take_goal_request+0x78>
 8015274:	b570      	push	{r4, r5, r6, lr}
 8015276:	4604      	mov	r4, r0
 8015278:	6800      	ldr	r0, [r0, #0]
 801527a:	b380      	cbz	r0, 80152de <rcl_action_take_goal_request+0x6e>
 801527c:	460d      	mov	r5, r1
 801527e:	4616      	mov	r6, r2
 8015280:	f7fe fa96 	bl	80137b0 <rcl_service_is_valid>
 8015284:	b330      	cbz	r0, 80152d4 <rcl_action_take_goal_request+0x64>
 8015286:	6820      	ldr	r0, [r4, #0]
 8015288:	3004      	adds	r0, #4
 801528a:	f7fe fa91 	bl	80137b0 <rcl_service_is_valid>
 801528e:	b308      	cbz	r0, 80152d4 <rcl_action_take_goal_request+0x64>
 8015290:	6820      	ldr	r0, [r4, #0]
 8015292:	3008      	adds	r0, #8
 8015294:	f7fe fa8c 	bl	80137b0 <rcl_service_is_valid>
 8015298:	b1e0      	cbz	r0, 80152d4 <rcl_action_take_goal_request+0x64>
 801529a:	6820      	ldr	r0, [r4, #0]
 801529c:	300c      	adds	r0, #12
 801529e:	f7f6 ff5d 	bl	800c15c <rcl_publisher_is_valid>
 80152a2:	b1b8      	cbz	r0, 80152d4 <rcl_action_take_goal_request+0x64>
 80152a4:	6820      	ldr	r0, [r4, #0]
 80152a6:	3010      	adds	r0, #16
 80152a8:	f7f6 ff58 	bl	800c15c <rcl_publisher_is_valid>
 80152ac:	b190      	cbz	r0, 80152d4 <rcl_action_take_goal_request+0x64>
 80152ae:	b1cd      	cbz	r5, 80152e4 <rcl_action_take_goal_request+0x74>
 80152b0:	b1c6      	cbz	r6, 80152e4 <rcl_action_take_goal_request+0x74>
 80152b2:	6820      	ldr	r0, [r4, #0]
 80152b4:	4632      	mov	r2, r6
 80152b6:	4629      	mov	r1, r5
 80152b8:	f7fe fa22 	bl	8013700 <rcl_take_request>
 80152bc:	b148      	cbz	r0, 80152d2 <rcl_action_take_goal_request+0x62>
 80152be:	280a      	cmp	r0, #10
 80152c0:	d007      	beq.n	80152d2 <rcl_action_take_goal_request+0x62>
 80152c2:	f240 2259 	movw	r2, #601	@ 0x259
 80152c6:	f640 0399 	movw	r3, #2201	@ 0x899
 80152ca:	4290      	cmp	r0, r2
 80152cc:	bf0c      	ite	eq
 80152ce:	4618      	moveq	r0, r3
 80152d0:	2001      	movne	r0, #1
 80152d2:	bd70      	pop	{r4, r5, r6, pc}
 80152d4:	f7f7 ffac 	bl	800d230 <rcutils_reset_error>
 80152d8:	f640 0098 	movw	r0, #2200	@ 0x898
 80152dc:	bd70      	pop	{r4, r5, r6, pc}
 80152de:	f640 0098 	movw	r0, #2200	@ 0x898
 80152e2:	bd70      	pop	{r4, r5, r6, pc}
 80152e4:	200b      	movs	r0, #11
 80152e6:	bd70      	pop	{r4, r5, r6, pc}
 80152e8:	f640 0098 	movw	r0, #2200	@ 0x898
 80152ec:	4770      	bx	lr
 80152ee:	bf00      	nop

080152f0 <rcl_action_send_goal_response>:
 80152f0:	b390      	cbz	r0, 8015358 <rcl_action_send_goal_response+0x68>
 80152f2:	b570      	push	{r4, r5, r6, lr}
 80152f4:	4604      	mov	r4, r0
 80152f6:	6800      	ldr	r0, [r0, #0]
 80152f8:	b348      	cbz	r0, 801534e <rcl_action_send_goal_response+0x5e>
 80152fa:	460d      	mov	r5, r1
 80152fc:	4616      	mov	r6, r2
 80152fe:	f7fe fa57 	bl	80137b0 <rcl_service_is_valid>
 8015302:	b1f8      	cbz	r0, 8015344 <rcl_action_send_goal_response+0x54>
 8015304:	6820      	ldr	r0, [r4, #0]
 8015306:	3004      	adds	r0, #4
 8015308:	f7fe fa52 	bl	80137b0 <rcl_service_is_valid>
 801530c:	b1d0      	cbz	r0, 8015344 <rcl_action_send_goal_response+0x54>
 801530e:	6820      	ldr	r0, [r4, #0]
 8015310:	3008      	adds	r0, #8
 8015312:	f7fe fa4d 	bl	80137b0 <rcl_service_is_valid>
 8015316:	b1a8      	cbz	r0, 8015344 <rcl_action_send_goal_response+0x54>
 8015318:	6820      	ldr	r0, [r4, #0]
 801531a:	300c      	adds	r0, #12
 801531c:	f7f6 ff1e 	bl	800c15c <rcl_publisher_is_valid>
 8015320:	b180      	cbz	r0, 8015344 <rcl_action_send_goal_response+0x54>
 8015322:	6820      	ldr	r0, [r4, #0]
 8015324:	3010      	adds	r0, #16
 8015326:	f7f6 ff19 	bl	800c15c <rcl_publisher_is_valid>
 801532a:	b158      	cbz	r0, 8015344 <rcl_action_send_goal_response+0x54>
 801532c:	b195      	cbz	r5, 8015354 <rcl_action_send_goal_response+0x64>
 801532e:	b18e      	cbz	r6, 8015354 <rcl_action_send_goal_response+0x64>
 8015330:	6820      	ldr	r0, [r4, #0]
 8015332:	4632      	mov	r2, r6
 8015334:	4629      	mov	r1, r5
 8015336:	f7fe fa23 	bl	8013780 <rcl_send_response>
 801533a:	b110      	cbz	r0, 8015342 <rcl_action_send_goal_response+0x52>
 801533c:	2802      	cmp	r0, #2
 801533e:	bf18      	it	ne
 8015340:	2001      	movne	r0, #1
 8015342:	bd70      	pop	{r4, r5, r6, pc}
 8015344:	f7f7 ff74 	bl	800d230 <rcutils_reset_error>
 8015348:	f640 0098 	movw	r0, #2200	@ 0x898
 801534c:	bd70      	pop	{r4, r5, r6, pc}
 801534e:	f640 0098 	movw	r0, #2200	@ 0x898
 8015352:	bd70      	pop	{r4, r5, r6, pc}
 8015354:	200b      	movs	r0, #11
 8015356:	bd70      	pop	{r4, r5, r6, pc}
 8015358:	f640 0098 	movw	r0, #2200	@ 0x898
 801535c:	4770      	bx	lr
 801535e:	bf00      	nop

08015360 <rcl_action_take_result_request>:
 8015360:	2800      	cmp	r0, #0
 8015362:	d03a      	beq.n	80153da <rcl_action_take_result_request+0x7a>
 8015364:	b570      	push	{r4, r5, r6, lr}
 8015366:	4604      	mov	r4, r0
 8015368:	6800      	ldr	r0, [r0, #0]
 801536a:	b388      	cbz	r0, 80153d0 <rcl_action_take_result_request+0x70>
 801536c:	460d      	mov	r5, r1
 801536e:	4616      	mov	r6, r2
 8015370:	f7fe fa1e 	bl	80137b0 <rcl_service_is_valid>
 8015374:	b338      	cbz	r0, 80153c6 <rcl_action_take_result_request+0x66>
 8015376:	6820      	ldr	r0, [r4, #0]
 8015378:	3004      	adds	r0, #4
 801537a:	f7fe fa19 	bl	80137b0 <rcl_service_is_valid>
 801537e:	b310      	cbz	r0, 80153c6 <rcl_action_take_result_request+0x66>
 8015380:	6820      	ldr	r0, [r4, #0]
 8015382:	3008      	adds	r0, #8
 8015384:	f7fe fa14 	bl	80137b0 <rcl_service_is_valid>
 8015388:	b1e8      	cbz	r0, 80153c6 <rcl_action_take_result_request+0x66>
 801538a:	6820      	ldr	r0, [r4, #0]
 801538c:	300c      	adds	r0, #12
 801538e:	f7f6 fee5 	bl	800c15c <rcl_publisher_is_valid>
 8015392:	b1c0      	cbz	r0, 80153c6 <rcl_action_take_result_request+0x66>
 8015394:	6820      	ldr	r0, [r4, #0]
 8015396:	3010      	adds	r0, #16
 8015398:	f7f6 fee0 	bl	800c15c <rcl_publisher_is_valid>
 801539c:	b198      	cbz	r0, 80153c6 <rcl_action_take_result_request+0x66>
 801539e:	b1d5      	cbz	r5, 80153d6 <rcl_action_take_result_request+0x76>
 80153a0:	b1ce      	cbz	r6, 80153d6 <rcl_action_take_result_request+0x76>
 80153a2:	6820      	ldr	r0, [r4, #0]
 80153a4:	4632      	mov	r2, r6
 80153a6:	4629      	mov	r1, r5
 80153a8:	3008      	adds	r0, #8
 80153aa:	f7fe f9a9 	bl	8013700 <rcl_take_request>
 80153ae:	b148      	cbz	r0, 80153c4 <rcl_action_take_result_request+0x64>
 80153b0:	280a      	cmp	r0, #10
 80153b2:	d007      	beq.n	80153c4 <rcl_action_take_result_request+0x64>
 80153b4:	f240 2259 	movw	r2, #601	@ 0x259
 80153b8:	f640 0399 	movw	r3, #2201	@ 0x899
 80153bc:	4290      	cmp	r0, r2
 80153be:	bf0c      	ite	eq
 80153c0:	4618      	moveq	r0, r3
 80153c2:	2001      	movne	r0, #1
 80153c4:	bd70      	pop	{r4, r5, r6, pc}
 80153c6:	f7f7 ff33 	bl	800d230 <rcutils_reset_error>
 80153ca:	f640 0098 	movw	r0, #2200	@ 0x898
 80153ce:	bd70      	pop	{r4, r5, r6, pc}
 80153d0:	f640 0098 	movw	r0, #2200	@ 0x898
 80153d4:	bd70      	pop	{r4, r5, r6, pc}
 80153d6:	200b      	movs	r0, #11
 80153d8:	bd70      	pop	{r4, r5, r6, pc}
 80153da:	f640 0098 	movw	r0, #2200	@ 0x898
 80153de:	4770      	bx	lr

080153e0 <rcl_action_take_cancel_request>:
 80153e0:	2800      	cmp	r0, #0
 80153e2:	d03a      	beq.n	801545a <rcl_action_take_cancel_request+0x7a>
 80153e4:	b570      	push	{r4, r5, r6, lr}
 80153e6:	4604      	mov	r4, r0
 80153e8:	6800      	ldr	r0, [r0, #0]
 80153ea:	b388      	cbz	r0, 8015450 <rcl_action_take_cancel_request+0x70>
 80153ec:	460d      	mov	r5, r1
 80153ee:	4616      	mov	r6, r2
 80153f0:	f7fe f9de 	bl	80137b0 <rcl_service_is_valid>
 80153f4:	b338      	cbz	r0, 8015446 <rcl_action_take_cancel_request+0x66>
 80153f6:	6820      	ldr	r0, [r4, #0]
 80153f8:	3004      	adds	r0, #4
 80153fa:	f7fe f9d9 	bl	80137b0 <rcl_service_is_valid>
 80153fe:	b310      	cbz	r0, 8015446 <rcl_action_take_cancel_request+0x66>
 8015400:	6820      	ldr	r0, [r4, #0]
 8015402:	3008      	adds	r0, #8
 8015404:	f7fe f9d4 	bl	80137b0 <rcl_service_is_valid>
 8015408:	b1e8      	cbz	r0, 8015446 <rcl_action_take_cancel_request+0x66>
 801540a:	6820      	ldr	r0, [r4, #0]
 801540c:	300c      	adds	r0, #12
 801540e:	f7f6 fea5 	bl	800c15c <rcl_publisher_is_valid>
 8015412:	b1c0      	cbz	r0, 8015446 <rcl_action_take_cancel_request+0x66>
 8015414:	6820      	ldr	r0, [r4, #0]
 8015416:	3010      	adds	r0, #16
 8015418:	f7f6 fea0 	bl	800c15c <rcl_publisher_is_valid>
 801541c:	b198      	cbz	r0, 8015446 <rcl_action_take_cancel_request+0x66>
 801541e:	b1d5      	cbz	r5, 8015456 <rcl_action_take_cancel_request+0x76>
 8015420:	b1ce      	cbz	r6, 8015456 <rcl_action_take_cancel_request+0x76>
 8015422:	6820      	ldr	r0, [r4, #0]
 8015424:	4632      	mov	r2, r6
 8015426:	4629      	mov	r1, r5
 8015428:	3004      	adds	r0, #4
 801542a:	f7fe f969 	bl	8013700 <rcl_take_request>
 801542e:	b148      	cbz	r0, 8015444 <rcl_action_take_cancel_request+0x64>
 8015430:	280a      	cmp	r0, #10
 8015432:	d007      	beq.n	8015444 <rcl_action_take_cancel_request+0x64>
 8015434:	f240 2259 	movw	r2, #601	@ 0x259
 8015438:	f640 0399 	movw	r3, #2201	@ 0x899
 801543c:	4290      	cmp	r0, r2
 801543e:	bf0c      	ite	eq
 8015440:	4618      	moveq	r0, r3
 8015442:	2001      	movne	r0, #1
 8015444:	bd70      	pop	{r4, r5, r6, pc}
 8015446:	f7f7 fef3 	bl	800d230 <rcutils_reset_error>
 801544a:	f640 0098 	movw	r0, #2200	@ 0x898
 801544e:	bd70      	pop	{r4, r5, r6, pc}
 8015450:	f640 0098 	movw	r0, #2200	@ 0x898
 8015454:	bd70      	pop	{r4, r5, r6, pc}
 8015456:	200b      	movs	r0, #11
 8015458:	bd70      	pop	{r4, r5, r6, pc}
 801545a:	f640 0098 	movw	r0, #2200	@ 0x898
 801545e:	4770      	bx	lr

08015460 <rcl_action_send_cancel_response>:
 8015460:	b398      	cbz	r0, 80154ca <rcl_action_send_cancel_response+0x6a>
 8015462:	b570      	push	{r4, r5, r6, lr}
 8015464:	4604      	mov	r4, r0
 8015466:	6800      	ldr	r0, [r0, #0]
 8015468:	b350      	cbz	r0, 80154c0 <rcl_action_send_cancel_response+0x60>
 801546a:	460d      	mov	r5, r1
 801546c:	4616      	mov	r6, r2
 801546e:	f7fe f99f 	bl	80137b0 <rcl_service_is_valid>
 8015472:	b300      	cbz	r0, 80154b6 <rcl_action_send_cancel_response+0x56>
 8015474:	6820      	ldr	r0, [r4, #0]
 8015476:	3004      	adds	r0, #4
 8015478:	f7fe f99a 	bl	80137b0 <rcl_service_is_valid>
 801547c:	b1d8      	cbz	r0, 80154b6 <rcl_action_send_cancel_response+0x56>
 801547e:	6820      	ldr	r0, [r4, #0]
 8015480:	3008      	adds	r0, #8
 8015482:	f7fe f995 	bl	80137b0 <rcl_service_is_valid>
 8015486:	b1b0      	cbz	r0, 80154b6 <rcl_action_send_cancel_response+0x56>
 8015488:	6820      	ldr	r0, [r4, #0]
 801548a:	300c      	adds	r0, #12
 801548c:	f7f6 fe66 	bl	800c15c <rcl_publisher_is_valid>
 8015490:	b188      	cbz	r0, 80154b6 <rcl_action_send_cancel_response+0x56>
 8015492:	6820      	ldr	r0, [r4, #0]
 8015494:	3010      	adds	r0, #16
 8015496:	f7f6 fe61 	bl	800c15c <rcl_publisher_is_valid>
 801549a:	b160      	cbz	r0, 80154b6 <rcl_action_send_cancel_response+0x56>
 801549c:	b19d      	cbz	r5, 80154c6 <rcl_action_send_cancel_response+0x66>
 801549e:	b196      	cbz	r6, 80154c6 <rcl_action_send_cancel_response+0x66>
 80154a0:	6820      	ldr	r0, [r4, #0]
 80154a2:	4632      	mov	r2, r6
 80154a4:	4629      	mov	r1, r5
 80154a6:	3004      	adds	r0, #4
 80154a8:	f7fe f96a 	bl	8013780 <rcl_send_response>
 80154ac:	b110      	cbz	r0, 80154b4 <rcl_action_send_cancel_response+0x54>
 80154ae:	2802      	cmp	r0, #2
 80154b0:	bf18      	it	ne
 80154b2:	2001      	movne	r0, #1
 80154b4:	bd70      	pop	{r4, r5, r6, pc}
 80154b6:	f7f7 febb 	bl	800d230 <rcutils_reset_error>
 80154ba:	f640 0098 	movw	r0, #2200	@ 0x898
 80154be:	bd70      	pop	{r4, r5, r6, pc}
 80154c0:	f640 0098 	movw	r0, #2200	@ 0x898
 80154c4:	bd70      	pop	{r4, r5, r6, pc}
 80154c6:	200b      	movs	r0, #11
 80154c8:	bd70      	pop	{r4, r5, r6, pc}
 80154ca:	f640 0098 	movw	r0, #2200	@ 0x898
 80154ce:	4770      	bx	lr

080154d0 <rcl_action_wait_set_add_action_server>:
 80154d0:	2800      	cmp	r0, #0
 80154d2:	d04d      	beq.n	8015570 <rcl_action_wait_set_add_action_server+0xa0>
 80154d4:	b570      	push	{r4, r5, r6, lr}
 80154d6:	460c      	mov	r4, r1
 80154d8:	b159      	cbz	r1, 80154f2 <rcl_action_wait_set_add_action_server+0x22>
 80154da:	4605      	mov	r5, r0
 80154dc:	6808      	ldr	r0, [r1, #0]
 80154de:	b140      	cbz	r0, 80154f2 <rcl_action_wait_set_add_action_server+0x22>
 80154e0:	4616      	mov	r6, r2
 80154e2:	f7fe f965 	bl	80137b0 <rcl_service_is_valid>
 80154e6:	b120      	cbz	r0, 80154f2 <rcl_action_wait_set_add_action_server+0x22>
 80154e8:	6820      	ldr	r0, [r4, #0]
 80154ea:	3004      	adds	r0, #4
 80154ec:	f7fe f960 	bl	80137b0 <rcl_service_is_valid>
 80154f0:	b910      	cbnz	r0, 80154f8 <rcl_action_wait_set_add_action_server+0x28>
 80154f2:	f640 0098 	movw	r0, #2200	@ 0x898
 80154f6:	bd70      	pop	{r4, r5, r6, pc}
 80154f8:	6820      	ldr	r0, [r4, #0]
 80154fa:	3008      	adds	r0, #8
 80154fc:	f7fe f958 	bl	80137b0 <rcl_service_is_valid>
 8015500:	2800      	cmp	r0, #0
 8015502:	d0f6      	beq.n	80154f2 <rcl_action_wait_set_add_action_server+0x22>
 8015504:	6820      	ldr	r0, [r4, #0]
 8015506:	300c      	adds	r0, #12
 8015508:	f7f6 fe40 	bl	800c18c <rcl_publisher_is_valid_except_context>
 801550c:	2800      	cmp	r0, #0
 801550e:	d0f0      	beq.n	80154f2 <rcl_action_wait_set_add_action_server+0x22>
 8015510:	6820      	ldr	r0, [r4, #0]
 8015512:	3010      	adds	r0, #16
 8015514:	f7f6 fe3a 	bl	800c18c <rcl_publisher_is_valid_except_context>
 8015518:	2800      	cmp	r0, #0
 801551a:	d0ea      	beq.n	80154f2 <rcl_action_wait_set_add_action_server+0x22>
 801551c:	6821      	ldr	r1, [r4, #0]
 801551e:	4628      	mov	r0, r5
 8015520:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8015524:	f7ff fad0 	bl	8014ac8 <rcl_wait_set_add_service>
 8015528:	2800      	cmp	r0, #0
 801552a:	d1e4      	bne.n	80154f6 <rcl_action_wait_set_add_action_server+0x26>
 801552c:	6821      	ldr	r1, [r4, #0]
 801552e:	4628      	mov	r0, r5
 8015530:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8015534:	3104      	adds	r1, #4
 8015536:	f7ff fac7 	bl	8014ac8 <rcl_wait_set_add_service>
 801553a:	2800      	cmp	r0, #0
 801553c:	d1db      	bne.n	80154f6 <rcl_action_wait_set_add_action_server+0x26>
 801553e:	6821      	ldr	r1, [r4, #0]
 8015540:	4628      	mov	r0, r5
 8015542:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8015546:	3108      	adds	r1, #8
 8015548:	f7ff fabe 	bl	8014ac8 <rcl_wait_set_add_service>
 801554c:	2800      	cmp	r0, #0
 801554e:	d1d2      	bne.n	80154f6 <rcl_action_wait_set_add_action_server+0x26>
 8015550:	6821      	ldr	r1, [r4, #0]
 8015552:	4628      	mov	r0, r5
 8015554:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8015558:	3114      	adds	r1, #20
 801555a:	f7ff fa59 	bl	8014a10 <rcl_wait_set_add_timer>
 801555e:	2800      	cmp	r0, #0
 8015560:	d1c9      	bne.n	80154f6 <rcl_action_wait_set_add_action_server+0x26>
 8015562:	2e00      	cmp	r6, #0
 8015564:	d0c7      	beq.n	80154f6 <rcl_action_wait_set_add_action_server+0x26>
 8015566:	6823      	ldr	r3, [r4, #0]
 8015568:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801556c:	6033      	str	r3, [r6, #0]
 801556e:	bd70      	pop	{r4, r5, r6, pc}
 8015570:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015574:	4770      	bx	lr
 8015576:	bf00      	nop

08015578 <rcl_action_server_wait_set_get_entities_ready>:
 8015578:	2800      	cmp	r0, #0
 801557a:	d05a      	beq.n	8015632 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801557e:	460c      	mov	r4, r1
 8015580:	b161      	cbz	r1, 801559c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015582:	4605      	mov	r5, r0
 8015584:	6808      	ldr	r0, [r1, #0]
 8015586:	b148      	cbz	r0, 801559c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015588:	4616      	mov	r6, r2
 801558a:	461f      	mov	r7, r3
 801558c:	f7fe f910 	bl	80137b0 <rcl_service_is_valid>
 8015590:	b120      	cbz	r0, 801559c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015592:	6820      	ldr	r0, [r4, #0]
 8015594:	3004      	adds	r0, #4
 8015596:	f7fe f90b 	bl	80137b0 <rcl_service_is_valid>
 801559a:	b910      	cbnz	r0, 80155a2 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801559c:	f640 0098 	movw	r0, #2200	@ 0x898
 80155a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155a2:	6820      	ldr	r0, [r4, #0]
 80155a4:	3008      	adds	r0, #8
 80155a6:	f7fe f903 	bl	80137b0 <rcl_service_is_valid>
 80155aa:	2800      	cmp	r0, #0
 80155ac:	d0f6      	beq.n	801559c <rcl_action_server_wait_set_get_entities_ready+0x24>
 80155ae:	6820      	ldr	r0, [r4, #0]
 80155b0:	300c      	adds	r0, #12
 80155b2:	f7f6 fdeb 	bl	800c18c <rcl_publisher_is_valid_except_context>
 80155b6:	2800      	cmp	r0, #0
 80155b8:	d0f0      	beq.n	801559c <rcl_action_server_wait_set_get_entities_ready+0x24>
 80155ba:	6820      	ldr	r0, [r4, #0]
 80155bc:	3010      	adds	r0, #16
 80155be:	f7f6 fde5 	bl	800c18c <rcl_publisher_is_valid_except_context>
 80155c2:	2800      	cmp	r0, #0
 80155c4:	d0ea      	beq.n	801559c <rcl_action_server_wait_set_get_entities_ready+0x24>
 80155c6:	b3be      	cbz	r6, 8015638 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80155c8:	b3b7      	cbz	r7, 8015638 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80155ca:	9b06      	ldr	r3, [sp, #24]
 80155cc:	b3a3      	cbz	r3, 8015638 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80155ce:	9b07      	ldr	r3, [sp, #28]
 80155d0:	b393      	cbz	r3, 8015638 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80155d2:	6821      	ldr	r1, [r4, #0]
 80155d4:	692a      	ldr	r2, [r5, #16]
 80155d6:	6a2c      	ldr	r4, [r5, #32]
 80155d8:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80155dc:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80155e0:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80155e4:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 80155e8:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 80155ec:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80155f0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80155f4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80155f8:	1a64      	subs	r4, r4, r1
 80155fa:	fab4 f484 	clz	r4, r4
 80155fe:	0964      	lsrs	r4, r4, #5
 8015600:	7034      	strb	r4, [r6, #0]
 8015602:	1d0c      	adds	r4, r1, #4
 8015604:	1b1b      	subs	r3, r3, r4
 8015606:	fab3 f383 	clz	r3, r3
 801560a:	095b      	lsrs	r3, r3, #5
 801560c:	f101 0408 	add.w	r4, r1, #8
 8015610:	703b      	strb	r3, [r7, #0]
 8015612:	f101 0314 	add.w	r3, r1, #20
 8015616:	1b01      	subs	r1, r0, r4
 8015618:	1ad3      	subs	r3, r2, r3
 801561a:	fab1 f181 	clz	r1, r1
 801561e:	9a06      	ldr	r2, [sp, #24]
 8015620:	0949      	lsrs	r1, r1, #5
 8015622:	7011      	strb	r1, [r2, #0]
 8015624:	fab3 f383 	clz	r3, r3
 8015628:	9a07      	ldr	r2, [sp, #28]
 801562a:	095b      	lsrs	r3, r3, #5
 801562c:	2000      	movs	r0, #0
 801562e:	7013      	strb	r3, [r2, #0]
 8015630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015632:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015636:	4770      	bx	lr
 8015638:	200b      	movs	r0, #11
 801563a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801563c <_execute_event_handler>:
 801563c:	2002      	movs	r0, #2
 801563e:	4770      	bx	lr

08015640 <_cancel_goal_event_handler>:
 8015640:	2003      	movs	r0, #3
 8015642:	4770      	bx	lr

08015644 <_succeed_event_handler>:
 8015644:	2004      	movs	r0, #4
 8015646:	4770      	bx	lr

08015648 <_abort_event_handler>:
 8015648:	2006      	movs	r0, #6
 801564a:	4770      	bx	lr

0801564c <_canceled_event_handler>:
 801564c:	2005      	movs	r0, #5
 801564e:	4770      	bx	lr

08015650 <rcl_action_transition_goal_state>:
 8015650:	b2c2      	uxtb	r2, r0
 8015652:	2a06      	cmp	r2, #6
 8015654:	d80c      	bhi.n	8015670 <rcl_action_transition_goal_state+0x20>
 8015656:	2904      	cmp	r1, #4
 8015658:	d80a      	bhi.n	8015670 <rcl_action_transition_goal_state+0x20>
 801565a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801565e:	b410      	push	{r4}
 8015660:	1853      	adds	r3, r2, r1
 8015662:	4c06      	ldr	r4, [pc, #24]	@ (801567c <rcl_action_transition_goal_state+0x2c>)
 8015664:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8015668:	b123      	cbz	r3, 8015674 <rcl_action_transition_goal_state+0x24>
 801566a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801566e:	4718      	bx	r3
 8015670:	2000      	movs	r0, #0
 8015672:	4770      	bx	lr
 8015674:	2000      	movs	r0, #0
 8015676:	f85d 4b04 	ldr.w	r4, [sp], #4
 801567a:	4770      	bx	lr
 801567c:	080196f8 	.word	0x080196f8

08015680 <rcl_action_get_zero_initialized_cancel_response>:
 8015680:	b510      	push	{r4, lr}
 8015682:	4c07      	ldr	r4, [pc, #28]	@ (80156a0 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8015684:	4686      	mov	lr, r0
 8015686:	4684      	mov	ip, r0
 8015688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801568a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801568e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015690:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015694:	6823      	ldr	r3, [r4, #0]
 8015696:	f8cc 3000 	str.w	r3, [ip]
 801569a:	4670      	mov	r0, lr
 801569c:	bd10      	pop	{r4, pc}
 801569e:	bf00      	nop
 80156a0:	08019784 	.word	0x08019784

080156a4 <rclc_action_send_result_request>:
 80156a4:	b1d0      	cbz	r0, 80156dc <rclc_action_send_result_request+0x38>
 80156a6:	b500      	push	{lr}
 80156a8:	4684      	mov	ip, r0
 80156aa:	b087      	sub	sp, #28
 80156ac:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80156b0:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80156b4:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80156b8:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80156bc:	f10d 0e08 	add.w	lr, sp, #8
 80156c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80156c4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80156c8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80156cc:	a902      	add	r1, sp, #8
 80156ce:	3010      	adds	r0, #16
 80156d0:	f7ff fbda 	bl	8014e88 <rcl_action_send_result_request>
 80156d4:	b920      	cbnz	r0, 80156e0 <rclc_action_send_result_request+0x3c>
 80156d6:	b007      	add	sp, #28
 80156d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80156dc:	200b      	movs	r0, #11
 80156de:	4770      	bx	lr
 80156e0:	9001      	str	r0, [sp, #4]
 80156e2:	f7f7 fda5 	bl	800d230 <rcutils_reset_error>
 80156e6:	9801      	ldr	r0, [sp, #4]
 80156e8:	b007      	add	sp, #28
 80156ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80156ee:	bf00      	nop

080156f0 <rclc_action_take_goal_handle>:
 80156f0:	b160      	cbz	r0, 801570c <rclc_action_take_goal_handle+0x1c>
 80156f2:	6883      	ldr	r3, [r0, #8]
 80156f4:	b143      	cbz	r3, 8015708 <rclc_action_take_goal_handle+0x18>
 80156f6:	6819      	ldr	r1, [r3, #0]
 80156f8:	6081      	str	r1, [r0, #8]
 80156fa:	2200      	movs	r2, #0
 80156fc:	721a      	strb	r2, [r3, #8]
 80156fe:	68c1      	ldr	r1, [r0, #12]
 8015700:	6019      	str	r1, [r3, #0]
 8015702:	621a      	str	r2, [r3, #32]
 8015704:	849a      	strh	r2, [r3, #36]	@ 0x24
 8015706:	60c3      	str	r3, [r0, #12]
 8015708:	4618      	mov	r0, r3
 801570a:	4770      	bx	lr
 801570c:	4603      	mov	r3, r0
 801570e:	e7fb      	b.n	8015708 <rclc_action_take_goal_handle+0x18>

08015710 <rclc_action_remove_used_goal_handle>:
 8015710:	b180      	cbz	r0, 8015734 <rclc_action_remove_used_goal_handle+0x24>
 8015712:	b179      	cbz	r1, 8015734 <rclc_action_remove_used_goal_handle+0x24>
 8015714:	68c3      	ldr	r3, [r0, #12]
 8015716:	4299      	cmp	r1, r3
 8015718:	d00d      	beq.n	8015736 <rclc_action_remove_used_goal_handle+0x26>
 801571a:	b12b      	cbz	r3, 8015728 <rclc_action_remove_used_goal_handle+0x18>
 801571c:	681a      	ldr	r2, [r3, #0]
 801571e:	4291      	cmp	r1, r2
 8015720:	d003      	beq.n	801572a <rclc_action_remove_used_goal_handle+0x1a>
 8015722:	4613      	mov	r3, r2
 8015724:	2b00      	cmp	r3, #0
 8015726:	d1f9      	bne.n	801571c <rclc_action_remove_used_goal_handle+0xc>
 8015728:	4770      	bx	lr
 801572a:	680a      	ldr	r2, [r1, #0]
 801572c:	601a      	str	r2, [r3, #0]
 801572e:	6883      	ldr	r3, [r0, #8]
 8015730:	600b      	str	r3, [r1, #0]
 8015732:	6081      	str	r1, [r0, #8]
 8015734:	4770      	bx	lr
 8015736:	680b      	ldr	r3, [r1, #0]
 8015738:	60c3      	str	r3, [r0, #12]
 801573a:	e7f8      	b.n	801572e <rclc_action_remove_used_goal_handle+0x1e>

0801573c <rclc_action_find_goal_handle_by_uuid>:
 801573c:	b538      	push	{r3, r4, r5, lr}
 801573e:	b180      	cbz	r0, 8015762 <rclc_action_find_goal_handle_by_uuid+0x26>
 8015740:	460d      	mov	r5, r1
 8015742:	b181      	cbz	r1, 8015766 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8015744:	68c4      	ldr	r4, [r0, #12]
 8015746:	b914      	cbnz	r4, 801574e <rclc_action_find_goal_handle_by_uuid+0x12>
 8015748:	e009      	b.n	801575e <rclc_action_find_goal_handle_by_uuid+0x22>
 801574a:	6824      	ldr	r4, [r4, #0]
 801574c:	b13c      	cbz	r4, 801575e <rclc_action_find_goal_handle_by_uuid+0x22>
 801574e:	f104 0009 	add.w	r0, r4, #9
 8015752:	2210      	movs	r2, #16
 8015754:	4629      	mov	r1, r5
 8015756:	f002 f82d 	bl	80177b4 <memcmp>
 801575a:	2800      	cmp	r0, #0
 801575c:	d1f5      	bne.n	801574a <rclc_action_find_goal_handle_by_uuid+0xe>
 801575e:	4620      	mov	r0, r4
 8015760:	bd38      	pop	{r3, r4, r5, pc}
 8015762:	4604      	mov	r4, r0
 8015764:	e7fb      	b.n	801575e <rclc_action_find_goal_handle_by_uuid+0x22>
 8015766:	460c      	mov	r4, r1
 8015768:	e7f9      	b.n	801575e <rclc_action_find_goal_handle_by_uuid+0x22>
 801576a:	bf00      	nop

0801576c <rclc_action_find_first_handle_by_status>:
 801576c:	b140      	cbz	r0, 8015780 <rclc_action_find_first_handle_by_status+0x14>
 801576e:	68c0      	ldr	r0, [r0, #12]
 8015770:	b910      	cbnz	r0, 8015778 <rclc_action_find_first_handle_by_status+0xc>
 8015772:	e005      	b.n	8015780 <rclc_action_find_first_handle_by_status+0x14>
 8015774:	6800      	ldr	r0, [r0, #0]
 8015776:	b118      	cbz	r0, 8015780 <rclc_action_find_first_handle_by_status+0x14>
 8015778:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801577c:	428b      	cmp	r3, r1
 801577e:	d1f9      	bne.n	8015774 <rclc_action_find_first_handle_by_status+0x8>
 8015780:	4770      	bx	lr
 8015782:	bf00      	nop

08015784 <rclc_action_find_first_terminated_handle>:
 8015784:	b140      	cbz	r0, 8015798 <rclc_action_find_first_terminated_handle+0x14>
 8015786:	68c0      	ldr	r0, [r0, #12]
 8015788:	b910      	cbnz	r0, 8015790 <rclc_action_find_first_terminated_handle+0xc>
 801578a:	e005      	b.n	8015798 <rclc_action_find_first_terminated_handle+0x14>
 801578c:	6800      	ldr	r0, [r0, #0]
 801578e:	b118      	cbz	r0, 8015798 <rclc_action_find_first_terminated_handle+0x14>
 8015790:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8015794:	2b03      	cmp	r3, #3
 8015796:	ddf9      	ble.n	801578c <rclc_action_find_first_terminated_handle+0x8>
 8015798:	4770      	bx	lr
 801579a:	bf00      	nop

0801579c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801579c:	b170      	cbz	r0, 80157bc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801579e:	68c0      	ldr	r0, [r0, #12]
 80157a0:	b160      	cbz	r0, 80157bc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80157a2:	b410      	push	{r4}
 80157a4:	e001      	b.n	80157aa <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80157a6:	6800      	ldr	r0, [r0, #0]
 80157a8:	b128      	cbz	r0, 80157b6 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80157aa:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 80157ae:	4299      	cmp	r1, r3
 80157b0:	bf08      	it	eq
 80157b2:	4294      	cmpeq	r4, r2
 80157b4:	d1f7      	bne.n	80157a6 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80157b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80157ba:	4770      	bx	lr
 80157bc:	4770      	bx	lr
 80157be:	bf00      	nop

080157c0 <rclc_action_find_handle_by_result_request_sequence_number>:
 80157c0:	b170      	cbz	r0, 80157e0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80157c2:	68c0      	ldr	r0, [r0, #12]
 80157c4:	b160      	cbz	r0, 80157e0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80157c6:	b410      	push	{r4}
 80157c8:	e001      	b.n	80157ce <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80157ca:	6800      	ldr	r0, [r0, #0]
 80157cc:	b128      	cbz	r0, 80157da <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80157ce:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80157d2:	4299      	cmp	r1, r3
 80157d4:	bf08      	it	eq
 80157d6:	4294      	cmpeq	r4, r2
 80157d8:	d1f7      	bne.n	80157ca <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80157da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80157de:	4770      	bx	lr
 80157e0:	4770      	bx	lr
 80157e2:	bf00      	nop

080157e4 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80157e4:	b170      	cbz	r0, 8015804 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80157e6:	68c0      	ldr	r0, [r0, #12]
 80157e8:	b160      	cbz	r0, 8015804 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80157ea:	b410      	push	{r4}
 80157ec:	e001      	b.n	80157f2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80157ee:	6800      	ldr	r0, [r0, #0]
 80157f0:	b128      	cbz	r0, 80157fe <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80157f2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80157f6:	4299      	cmp	r1, r3
 80157f8:	bf08      	it	eq
 80157fa:	4294      	cmpeq	r4, r2
 80157fc:	d1f7      	bne.n	80157ee <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80157fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015802:	4770      	bx	lr
 8015804:	4770      	bx	lr
 8015806:	bf00      	nop

08015808 <rclc_action_find_first_handle_with_goal_response>:
 8015808:	b140      	cbz	r0, 801581c <rclc_action_find_first_handle_with_goal_response+0x14>
 801580a:	68c0      	ldr	r0, [r0, #12]
 801580c:	b910      	cbnz	r0, 8015814 <rclc_action_find_first_handle_with_goal_response+0xc>
 801580e:	e005      	b.n	801581c <rclc_action_find_first_handle_with_goal_response+0x14>
 8015810:	6800      	ldr	r0, [r0, #0]
 8015812:	b118      	cbz	r0, 801581c <rclc_action_find_first_handle_with_goal_response+0x14>
 8015814:	f890 3020 	ldrb.w	r3, [r0, #32]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d0f9      	beq.n	8015810 <rclc_action_find_first_handle_with_goal_response+0x8>
 801581c:	4770      	bx	lr
 801581e:	bf00      	nop

08015820 <rclc_action_find_first_handle_with_result_response>:
 8015820:	b140      	cbz	r0, 8015834 <rclc_action_find_first_handle_with_result_response+0x14>
 8015822:	68c0      	ldr	r0, [r0, #12]
 8015824:	b910      	cbnz	r0, 801582c <rclc_action_find_first_handle_with_result_response+0xc>
 8015826:	e005      	b.n	8015834 <rclc_action_find_first_handle_with_result_response+0x14>
 8015828:	6800      	ldr	r0, [r0, #0]
 801582a:	b118      	cbz	r0, 8015834 <rclc_action_find_first_handle_with_result_response+0x14>
 801582c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8015830:	2b00      	cmp	r3, #0
 8015832:	d0f9      	beq.n	8015828 <rclc_action_find_first_handle_with_result_response+0x8>
 8015834:	4770      	bx	lr
 8015836:	bf00      	nop

08015838 <rclc_action_server_response_goal_request>:
 8015838:	b198      	cbz	r0, 8015862 <rclc_action_server_response_goal_request+0x2a>
 801583a:	b510      	push	{r4, lr}
 801583c:	6844      	ldr	r4, [r0, #4]
 801583e:	b086      	sub	sp, #24
 8015840:	2200      	movs	r2, #0
 8015842:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8015846:	460b      	mov	r3, r1
 8015848:	9205      	str	r2, [sp, #20]
 801584a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801584e:	aa03      	add	r2, sp, #12
 8015850:	f104 0010 	add.w	r0, r4, #16
 8015854:	f88d 300c 	strb.w	r3, [sp, #12]
 8015858:	f7ff fd4a 	bl	80152f0 <rcl_action_send_goal_response>
 801585c:	b918      	cbnz	r0, 8015866 <rclc_action_server_response_goal_request+0x2e>
 801585e:	b006      	add	sp, #24
 8015860:	bd10      	pop	{r4, pc}
 8015862:	200b      	movs	r0, #11
 8015864:	4770      	bx	lr
 8015866:	9001      	str	r0, [sp, #4]
 8015868:	f7f7 fce2 	bl	800d230 <rcutils_reset_error>
 801586c:	9801      	ldr	r0, [sp, #4]
 801586e:	b006      	add	sp, #24
 8015870:	bd10      	pop	{r4, pc}
 8015872:	bf00      	nop
 8015874:	0000      	movs	r0, r0
	...

08015878 <rclc_action_server_goal_cancel_accept>:
 8015878:	b310      	cbz	r0, 80158c0 <rclc_action_server_goal_cancel_accept+0x48>
 801587a:	b510      	push	{r4, lr}
 801587c:	b090      	sub	sp, #64	@ 0x40
 801587e:	4604      	mov	r4, r0
 8015880:	a806      	add	r0, sp, #24
 8015882:	f7ff fefd 	bl	8015680 <rcl_action_get_zero_initialized_cancel_response>
 8015886:	2300      	movs	r3, #0
 8015888:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801588c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8015890:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8015894:	f88d 3018 	strb.w	r3, [sp, #24]
 8015898:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801589c:	f8cd d01c 	str.w	sp, [sp, #28]
 80158a0:	46ec      	mov	ip, sp
 80158a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158a6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80158c8 <rclc_action_server_goal_cancel_accept+0x50>
 80158aa:	6860      	ldr	r0, [r4, #4]
 80158ac:	aa06      	add	r2, sp, #24
 80158ae:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80158b2:	3010      	adds	r0, #16
 80158b4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80158b8:	f7ff fdd2 	bl	8015460 <rcl_action_send_cancel_response>
 80158bc:	b010      	add	sp, #64	@ 0x40
 80158be:	bd10      	pop	{r4, pc}
 80158c0:	200b      	movs	r0, #11
 80158c2:	4770      	bx	lr
 80158c4:	f3af 8000 	nop.w
 80158c8:	00000001 	.word	0x00000001
 80158cc:	00000001 	.word	0x00000001

080158d0 <rclc_action_server_goal_cancel_reject>:
 80158d0:	b082      	sub	sp, #8
 80158d2:	b530      	push	{r4, r5, lr}
 80158d4:	b08b      	sub	sp, #44	@ 0x2c
 80158d6:	ac0e      	add	r4, sp, #56	@ 0x38
 80158d8:	e884 000c 	stmia.w	r4, {r2, r3}
 80158dc:	b188      	cbz	r0, 8015902 <rclc_action_server_goal_cancel_reject+0x32>
 80158de:	4604      	mov	r4, r0
 80158e0:	a801      	add	r0, sp, #4
 80158e2:	460d      	mov	r5, r1
 80158e4:	f7ff fecc 	bl	8015680 <rcl_action_get_zero_initialized_cancel_response>
 80158e8:	aa01      	add	r2, sp, #4
 80158ea:	a90e      	add	r1, sp, #56	@ 0x38
 80158ec:	f104 0010 	add.w	r0, r4, #16
 80158f0:	f88d 5004 	strb.w	r5, [sp, #4]
 80158f4:	f7ff fdb4 	bl	8015460 <rcl_action_send_cancel_response>
 80158f8:	b00b      	add	sp, #44	@ 0x2c
 80158fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80158fe:	b002      	add	sp, #8
 8015900:	4770      	bx	lr
 8015902:	200b      	movs	r0, #11
 8015904:	b00b      	add	sp, #44	@ 0x2c
 8015906:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801590a:	b002      	add	sp, #8
 801590c:	4770      	bx	lr
 801590e:	bf00      	nop

08015910 <rcutils_is_directory>:
 8015910:	2000      	movs	r0, #0
 8015912:	4770      	bx	lr

08015914 <rcutils_join_path>:
 8015914:	b082      	sub	sp, #8
 8015916:	e88d 000c 	stmia.w	sp, {r2, r3}
 801591a:	2000      	movs	r0, #0
 801591c:	b002      	add	sp, #8
 801591e:	4770      	bx	lr

08015920 <rcutils_to_native_path>:
 8015920:	b084      	sub	sp, #16
 8015922:	a801      	add	r0, sp, #4
 8015924:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8015928:	b004      	add	sp, #16
 801592a:	2000      	movs	r0, #0
 801592c:	4770      	bx	lr
 801592e:	bf00      	nop

08015930 <rmw_get_zero_initialized_context>:
 8015930:	b510      	push	{r4, lr}
 8015932:	4604      	mov	r4, r0
 8015934:	3010      	adds	r0, #16
 8015936:	f7f7 ff6b 	bl	800d810 <rmw_get_zero_initialized_init_options>
 801593a:	2300      	movs	r3, #0
 801593c:	2000      	movs	r0, #0
 801593e:	2100      	movs	r1, #0
 8015940:	e9c4 0100 	strd	r0, r1, [r4]
 8015944:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8015948:	60a3      	str	r3, [r4, #8]
 801594a:	4620      	mov	r0, r4
 801594c:	bd10      	pop	{r4, pc}
 801594e:	bf00      	nop

08015950 <rmw_time_equal>:
 8015950:	b4f0      	push	{r4, r5, r6, r7}
 8015952:	b084      	sub	sp, #16
 8015954:	ac04      	add	r4, sp, #16
 8015956:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801595a:	4603      	mov	r3, r0
 801595c:	4924      	ldr	r1, [pc, #144]	@ (80159f0 <rmw_time_equal+0xa0>)
 801595e:	9e03      	ldr	r6, [sp, #12]
 8015960:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8015964:	2202      	movs	r2, #2
 8015966:	4299      	cmp	r1, r3
 8015968:	41aa      	sbcs	r2, r5
 801596a:	d330      	bcc.n	80159ce <rmw_time_equal+0x7e>
 801596c:	4c21      	ldr	r4, [pc, #132]	@ (80159f4 <rmw_time_equal+0xa4>)
 801596e:	fba3 3204 	umull	r3, r2, r3, r4
 8015972:	fb04 2205 	mla	r2, r4, r5, r2
 8015976:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801597a:	43dd      	mvns	r5, r3
 801597c:	1a8c      	subs	r4, r1, r2
 801597e:	4285      	cmp	r5, r0
 8015980:	41b4      	sbcs	r4, r6
 8015982:	d332      	bcc.n	80159ea <rmw_time_equal+0x9a>
 8015984:	eb10 0c03 	adds.w	ip, r0, r3
 8015988:	eb42 0106 	adc.w	r1, r2, r6
 801598c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8015990:	4817      	ldr	r0, [pc, #92]	@ (80159f0 <rmw_time_equal+0xa0>)
 8015992:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8015994:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8015996:	2202      	movs	r2, #2
 8015998:	4298      	cmp	r0, r3
 801599a:	41b2      	sbcs	r2, r6
 801599c:	d31c      	bcc.n	80159d8 <rmw_time_equal+0x88>
 801599e:	4c15      	ldr	r4, [pc, #84]	@ (80159f4 <rmw_time_equal+0xa4>)
 80159a0:	fba3 3204 	umull	r3, r2, r3, r4
 80159a4:	fb04 2206 	mla	r2, r4, r6, r2
 80159a8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80159ac:	43de      	mvns	r6, r3
 80159ae:	1a84      	subs	r4, r0, r2
 80159b0:	42ae      	cmp	r6, r5
 80159b2:	41bc      	sbcs	r4, r7
 80159b4:	d315      	bcc.n	80159e2 <rmw_time_equal+0x92>
 80159b6:	195b      	adds	r3, r3, r5
 80159b8:	eb42 0207 	adc.w	r2, r2, r7
 80159bc:	428a      	cmp	r2, r1
 80159be:	bf08      	it	eq
 80159c0:	4563      	cmpeq	r3, ip
 80159c2:	bf0c      	ite	eq
 80159c4:	2001      	moveq	r0, #1
 80159c6:	2000      	movne	r0, #0
 80159c8:	b004      	add	sp, #16
 80159ca:	bcf0      	pop	{r4, r5, r6, r7}
 80159cc:	4770      	bx	lr
 80159ce:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80159d2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80159d6:	e7d9      	b.n	801598c <rmw_time_equal+0x3c>
 80159d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80159dc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80159e0:	e7ec      	b.n	80159bc <rmw_time_equal+0x6c>
 80159e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80159e6:	4602      	mov	r2, r0
 80159e8:	e7e8      	b.n	80159bc <rmw_time_equal+0x6c>
 80159ea:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80159ee:	e7cd      	b.n	801598c <rmw_time_equal+0x3c>
 80159f0:	25c17d04 	.word	0x25c17d04
 80159f4:	3b9aca00 	.word	0x3b9aca00

080159f8 <rmw_time_total_nsec>:
 80159f8:	b470      	push	{r4, r5, r6}
 80159fa:	b085      	sub	sp, #20
 80159fc:	ac04      	add	r4, sp, #16
 80159fe:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8015a02:	4603      	mov	r3, r0
 8015a04:	4912      	ldr	r1, [pc, #72]	@ (8015a50 <rmw_time_total_nsec+0x58>)
 8015a06:	9e03      	ldr	r6, [sp, #12]
 8015a08:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8015a0c:	2202      	movs	r2, #2
 8015a0e:	4299      	cmp	r1, r3
 8015a10:	41aa      	sbcs	r2, r5
 8015a12:	d311      	bcc.n	8015a38 <rmw_time_total_nsec+0x40>
 8015a14:	4c0f      	ldr	r4, [pc, #60]	@ (8015a54 <rmw_time_total_nsec+0x5c>)
 8015a16:	fba3 3204 	umull	r3, r2, r3, r4
 8015a1a:	fb04 2205 	mla	r2, r4, r5, r2
 8015a1e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015a22:	43dd      	mvns	r5, r3
 8015a24:	1a8c      	subs	r4, r1, r2
 8015a26:	4285      	cmp	r5, r0
 8015a28:	41b4      	sbcs	r4, r6
 8015a2a:	d30c      	bcc.n	8015a46 <rmw_time_total_nsec+0x4e>
 8015a2c:	1818      	adds	r0, r3, r0
 8015a2e:	eb42 0106 	adc.w	r1, r2, r6
 8015a32:	b005      	add	sp, #20
 8015a34:	bc70      	pop	{r4, r5, r6}
 8015a36:	4770      	bx	lr
 8015a38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015a3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015a40:	b005      	add	sp, #20
 8015a42:	bc70      	pop	{r4, r5, r6}
 8015a44:	4770      	bx	lr
 8015a46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015a4a:	b005      	add	sp, #20
 8015a4c:	bc70      	pop	{r4, r5, r6}
 8015a4e:	4770      	bx	lr
 8015a50:	25c17d04 	.word	0x25c17d04
 8015a54:	3b9aca00 	.word	0x3b9aca00

08015a58 <rmw_get_zero_initialized_message_info>:
 8015a58:	b510      	push	{r4, lr}
 8015a5a:	2240      	movs	r2, #64	@ 0x40
 8015a5c:	4604      	mov	r4, r0
 8015a5e:	2100      	movs	r1, #0
 8015a60:	f001 fed2 	bl	8017808 <memset>
 8015a64:	4620      	mov	r0, r4
 8015a66:	bd10      	pop	{r4, pc}

08015a68 <on_status>:
 8015a68:	b082      	sub	sp, #8
 8015a6a:	b002      	add	sp, #8
 8015a6c:	4770      	bx	lr
 8015a6e:	bf00      	nop

08015a70 <on_topic>:
 8015a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a74:	4a22      	ldr	r2, [pc, #136]	@ (8015b00 <on_topic+0x90>)
 8015a76:	b094      	sub	sp, #80	@ 0x50
 8015a78:	6812      	ldr	r2, [r2, #0]
 8015a7a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8015a7c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015a80:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8015a84:	b3c2      	cbz	r2, 8015af8 <on_topic+0x88>
 8015a86:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8015a8a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8015a8e:	e001      	b.n	8015a94 <on_topic+0x24>
 8015a90:	6852      	ldr	r2, [r2, #4]
 8015a92:	b38a      	cbz	r2, 8015af8 <on_topic+0x88>
 8015a94:	6894      	ldr	r4, [r2, #8]
 8015a96:	8aa3      	ldrh	r3, [r4, #20]
 8015a98:	428b      	cmp	r3, r1
 8015a9a:	d1f9      	bne.n	8015a90 <on_topic+0x20>
 8015a9c:	7da3      	ldrb	r3, [r4, #22]
 8015a9e:	4283      	cmp	r3, r0
 8015aa0:	d1f6      	bne.n	8015a90 <on_topic+0x20>
 8015aa2:	2248      	movs	r2, #72	@ 0x48
 8015aa4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015aa8:	4668      	mov	r0, sp
 8015aaa:	f001 ff76 	bl	801799a <memcpy>
 8015aae:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8015ab2:	cb0c      	ldmia	r3, {r2, r3}
 8015ab4:	4620      	mov	r0, r4
 8015ab6:	f7f9 fa5d 	bl	800ef74 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015aba:	4607      	mov	r7, r0
 8015abc:	b1e0      	cbz	r0, 8015af8 <on_topic+0x88>
 8015abe:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8015ac2:	4632      	mov	r2, r6
 8015ac4:	4628      	mov	r0, r5
 8015ac6:	f108 0110 	add.w	r1, r8, #16
 8015aca:	f000 fc43 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 8015ace:	b930      	cbnz	r0, 8015ade <on_topic+0x6e>
 8015ad0:	480c      	ldr	r0, [pc, #48]	@ (8015b04 <on_topic+0x94>)
 8015ad2:	4639      	mov	r1, r7
 8015ad4:	b014      	add	sp, #80	@ 0x50
 8015ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ada:	f000 b8bd 	b.w	8015c58 <put_memory>
 8015ade:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8015ae2:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8015ae6:	f000 fb5f 	bl	80161a8 <rmw_uros_epoch_nanos>
 8015aea:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8015aee:	2305      	movs	r3, #5
 8015af0:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015af4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8015af8:	b014      	add	sp, #80	@ 0x50
 8015afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015afe:	bf00      	nop
 8015b00:	2000b10c 	.word	0x2000b10c
 8015b04:	2000b0fc 	.word	0x2000b0fc

08015b08 <on_request>:
 8015b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b0c:	4823      	ldr	r0, [pc, #140]	@ (8015b9c <on_request+0x94>)
 8015b0e:	b094      	sub	sp, #80	@ 0x50
 8015b10:	6800      	ldr	r0, [r0, #0]
 8015b12:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015b14:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015b18:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015b1a:	2800      	cmp	r0, #0
 8015b1c:	d03b      	beq.n	8015b96 <on_request+0x8e>
 8015b1e:	461d      	mov	r5, r3
 8015b20:	e001      	b.n	8015b26 <on_request+0x1e>
 8015b22:	6840      	ldr	r0, [r0, #4]
 8015b24:	b3b8      	cbz	r0, 8015b96 <on_request+0x8e>
 8015b26:	6884      	ldr	r4, [r0, #8]
 8015b28:	8b21      	ldrh	r1, [r4, #24]
 8015b2a:	4291      	cmp	r1, r2
 8015b2c:	d1f9      	bne.n	8015b22 <on_request+0x1a>
 8015b2e:	2248      	movs	r2, #72	@ 0x48
 8015b30:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015b34:	4668      	mov	r0, sp
 8015b36:	f001 ff30 	bl	801799a <memcpy>
 8015b3a:	f104 0320 	add.w	r3, r4, #32
 8015b3e:	cb0c      	ldmia	r3, {r2, r3}
 8015b40:	4620      	mov	r0, r4
 8015b42:	f7f9 fa17 	bl	800ef74 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015b46:	4680      	mov	r8, r0
 8015b48:	b328      	cbz	r0, 8015b96 <on_request+0x8e>
 8015b4a:	4638      	mov	r0, r7
 8015b4c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015b50:	4632      	mov	r2, r6
 8015b52:	f107 0110 	add.w	r1, r7, #16
 8015b56:	f000 fbfd 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 8015b5a:	b930      	cbnz	r0, 8015b6a <on_request+0x62>
 8015b5c:	4810      	ldr	r0, [pc, #64]	@ (8015ba0 <on_request+0x98>)
 8015b5e:	4641      	mov	r1, r8
 8015b60:	b014      	add	sp, #80	@ 0x50
 8015b62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b66:	f000 b877 	b.w	8015c58 <put_memory>
 8015b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015b6c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8015b70:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015b74:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015b78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015b80:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015b84:	f000 fb10 	bl	80161a8 <rmw_uros_epoch_nanos>
 8015b88:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8015b8c:	2303      	movs	r3, #3
 8015b8e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015b92:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015b96:	b014      	add	sp, #80	@ 0x50
 8015b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b9c:	2000b0dc 	.word	0x2000b0dc
 8015ba0:	2000b0fc 	.word	0x2000b0fc

08015ba4 <on_reply>:
 8015ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ba8:	4821      	ldr	r0, [pc, #132]	@ (8015c30 <on_reply+0x8c>)
 8015baa:	b094      	sub	sp, #80	@ 0x50
 8015bac:	6800      	ldr	r0, [r0, #0]
 8015bae:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015bb0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015bb4:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015bb6:	b3b8      	cbz	r0, 8015c28 <on_reply+0x84>
 8015bb8:	461d      	mov	r5, r3
 8015bba:	e001      	b.n	8015bc0 <on_reply+0x1c>
 8015bbc:	6840      	ldr	r0, [r0, #4]
 8015bbe:	b398      	cbz	r0, 8015c28 <on_reply+0x84>
 8015bc0:	6884      	ldr	r4, [r0, #8]
 8015bc2:	8b21      	ldrh	r1, [r4, #24]
 8015bc4:	4291      	cmp	r1, r2
 8015bc6:	d1f9      	bne.n	8015bbc <on_reply+0x18>
 8015bc8:	2248      	movs	r2, #72	@ 0x48
 8015bca:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015bce:	4668      	mov	r0, sp
 8015bd0:	f001 fee3 	bl	801799a <memcpy>
 8015bd4:	f104 0320 	add.w	r3, r4, #32
 8015bd8:	cb0c      	ldmia	r3, {r2, r3}
 8015bda:	4620      	mov	r0, r4
 8015bdc:	f7f9 f9ca 	bl	800ef74 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015be0:	4680      	mov	r8, r0
 8015be2:	b308      	cbz	r0, 8015c28 <on_reply+0x84>
 8015be4:	4638      	mov	r0, r7
 8015be6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015bea:	4632      	mov	r2, r6
 8015bec:	f107 0110 	add.w	r1, r7, #16
 8015bf0:	f000 fbb0 	bl	8016354 <ucdr_deserialize_array_uint8_t>
 8015bf4:	b930      	cbnz	r0, 8015c04 <on_reply+0x60>
 8015bf6:	480f      	ldr	r0, [pc, #60]	@ (8015c34 <on_reply+0x90>)
 8015bf8:	4641      	mov	r1, r8
 8015bfa:	b014      	add	sp, #80	@ 0x50
 8015bfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c00:	f000 b82a 	b.w	8015c58 <put_memory>
 8015c04:	2200      	movs	r2, #0
 8015c06:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8015c0a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015c0e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015c12:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8015c16:	f000 fac7 	bl	80161a8 <rmw_uros_epoch_nanos>
 8015c1a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8015c1e:	2304      	movs	r3, #4
 8015c20:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015c24:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015c28:	b014      	add	sp, #80	@ 0x50
 8015c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c2e:	bf00      	nop
 8015c30:	200067f0 	.word	0x200067f0
 8015c34:	2000b0fc 	.word	0x2000b0fc

08015c38 <get_memory>:
 8015c38:	4603      	mov	r3, r0
 8015c3a:	6840      	ldr	r0, [r0, #4]
 8015c3c:	b158      	cbz	r0, 8015c56 <get_memory+0x1e>
 8015c3e:	6842      	ldr	r2, [r0, #4]
 8015c40:	605a      	str	r2, [r3, #4]
 8015c42:	b10a      	cbz	r2, 8015c48 <get_memory+0x10>
 8015c44:	2100      	movs	r1, #0
 8015c46:	6011      	str	r1, [r2, #0]
 8015c48:	681a      	ldr	r2, [r3, #0]
 8015c4a:	6042      	str	r2, [r0, #4]
 8015c4c:	b102      	cbz	r2, 8015c50 <get_memory+0x18>
 8015c4e:	6010      	str	r0, [r2, #0]
 8015c50:	2200      	movs	r2, #0
 8015c52:	6002      	str	r2, [r0, #0]
 8015c54:	6018      	str	r0, [r3, #0]
 8015c56:	4770      	bx	lr

08015c58 <put_memory>:
 8015c58:	680b      	ldr	r3, [r1, #0]
 8015c5a:	b10b      	cbz	r3, 8015c60 <put_memory+0x8>
 8015c5c:	684a      	ldr	r2, [r1, #4]
 8015c5e:	605a      	str	r2, [r3, #4]
 8015c60:	684a      	ldr	r2, [r1, #4]
 8015c62:	b102      	cbz	r2, 8015c66 <put_memory+0xe>
 8015c64:	6013      	str	r3, [r2, #0]
 8015c66:	6803      	ldr	r3, [r0, #0]
 8015c68:	428b      	cmp	r3, r1
 8015c6a:	6843      	ldr	r3, [r0, #4]
 8015c6c:	bf08      	it	eq
 8015c6e:	6002      	streq	r2, [r0, #0]
 8015c70:	604b      	str	r3, [r1, #4]
 8015c72:	b103      	cbz	r3, 8015c76 <put_memory+0x1e>
 8015c74:	6019      	str	r1, [r3, #0]
 8015c76:	2300      	movs	r3, #0
 8015c78:	600b      	str	r3, [r1, #0]
 8015c7a:	6041      	str	r1, [r0, #4]
 8015c7c:	4770      	bx	lr
 8015c7e:	bf00      	nop

08015c80 <rmw_create_guard_condition>:
 8015c80:	b538      	push	{r3, r4, r5, lr}
 8015c82:	4605      	mov	r5, r0
 8015c84:	4807      	ldr	r0, [pc, #28]	@ (8015ca4 <rmw_create_guard_condition+0x24>)
 8015c86:	f7ff ffd7 	bl	8015c38 <get_memory>
 8015c8a:	b148      	cbz	r0, 8015ca0 <rmw_create_guard_condition+0x20>
 8015c8c:	6884      	ldr	r4, [r0, #8]
 8015c8e:	2300      	movs	r3, #0
 8015c90:	7423      	strb	r3, [r4, #16]
 8015c92:	61e5      	str	r5, [r4, #28]
 8015c94:	f7f8 f860 	bl	800dd58 <rmw_get_implementation_identifier>
 8015c98:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8015c9c:	f104 0014 	add.w	r0, r4, #20
 8015ca0:	bd38      	pop	{r3, r4, r5, pc}
 8015ca2:	bf00      	nop
 8015ca4:	2000b09c 	.word	0x2000b09c

08015ca8 <rmw_destroy_guard_condition>:
 8015ca8:	b508      	push	{r3, lr}
 8015caa:	4b08      	ldr	r3, [pc, #32]	@ (8015ccc <rmw_destroy_guard_condition+0x24>)
 8015cac:	6819      	ldr	r1, [r3, #0]
 8015cae:	b911      	cbnz	r1, 8015cb6 <rmw_destroy_guard_condition+0xe>
 8015cb0:	e00a      	b.n	8015cc8 <rmw_destroy_guard_condition+0x20>
 8015cb2:	6849      	ldr	r1, [r1, #4]
 8015cb4:	b141      	cbz	r1, 8015cc8 <rmw_destroy_guard_condition+0x20>
 8015cb6:	688b      	ldr	r3, [r1, #8]
 8015cb8:	3314      	adds	r3, #20
 8015cba:	4298      	cmp	r0, r3
 8015cbc:	d1f9      	bne.n	8015cb2 <rmw_destroy_guard_condition+0xa>
 8015cbe:	4803      	ldr	r0, [pc, #12]	@ (8015ccc <rmw_destroy_guard_condition+0x24>)
 8015cc0:	f7ff ffca 	bl	8015c58 <put_memory>
 8015cc4:	2000      	movs	r0, #0
 8015cc6:	bd08      	pop	{r3, pc}
 8015cc8:	2001      	movs	r0, #1
 8015cca:	bd08      	pop	{r3, pc}
 8015ccc:	2000b09c 	.word	0x2000b09c

08015cd0 <create_topic>:
 8015cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cd4:	4605      	mov	r5, r0
 8015cd6:	b084      	sub	sp, #16
 8015cd8:	4822      	ldr	r0, [pc, #136]	@ (8015d64 <create_topic+0x94>)
 8015cda:	460f      	mov	r7, r1
 8015cdc:	4616      	mov	r6, r2
 8015cde:	f7ff ffab 	bl	8015c38 <get_memory>
 8015ce2:	4604      	mov	r4, r0
 8015ce4:	2800      	cmp	r0, #0
 8015ce6:	d039      	beq.n	8015d5c <create_topic+0x8c>
 8015ce8:	692b      	ldr	r3, [r5, #16]
 8015cea:	6884      	ldr	r4, [r0, #8]
 8015cec:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8015d6c <create_topic+0x9c>
 8015cf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015cf4:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8015cf8:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8015cfc:	1c42      	adds	r2, r0, #1
 8015cfe:	2102      	movs	r1, #2
 8015d00:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8015d04:	f7f9 fe52 	bl	800f9ac <uxr_object_id>
 8015d08:	223c      	movs	r2, #60	@ 0x3c
 8015d0a:	6120      	str	r0, [r4, #16]
 8015d0c:	4641      	mov	r1, r8
 8015d0e:	4638      	mov	r0, r7
 8015d10:	f7f9 fb24 	bl	800f35c <generate_topic_name>
 8015d14:	b1f0      	cbz	r0, 8015d54 <create_topic+0x84>
 8015d16:	4f14      	ldr	r7, [pc, #80]	@ (8015d68 <create_topic+0x98>)
 8015d18:	4630      	mov	r0, r6
 8015d1a:	2264      	movs	r2, #100	@ 0x64
 8015d1c:	4639      	mov	r1, r7
 8015d1e:	f7f9 faed 	bl	800f2fc <generate_type_name>
 8015d22:	b1b8      	cbz	r0, 8015d54 <create_topic+0x84>
 8015d24:	6928      	ldr	r0, [r5, #16]
 8015d26:	2306      	movs	r3, #6
 8015d28:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8015d2c:	f8cd 8000 	str.w	r8, [sp]
 8015d30:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8015d34:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015d38:	6811      	ldr	r1, [r2, #0]
 8015d3a:	696b      	ldr	r3, [r5, #20]
 8015d3c:	6922      	ldr	r2, [r4, #16]
 8015d3e:	f7f9 fc5d 	bl	800f5fc <uxr_buffer_create_topic_bin>
 8015d42:	4602      	mov	r2, r0
 8015d44:	6928      	ldr	r0, [r5, #16]
 8015d46:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015d4a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015d4e:	f7f9 fa05 	bl	800f15c <run_xrce_session>
 8015d52:	b918      	cbnz	r0, 8015d5c <create_topic+0x8c>
 8015d54:	4620      	mov	r0, r4
 8015d56:	f7f9 f901 	bl	800ef5c <rmw_uxrce_fini_topic_memory>
 8015d5a:	2400      	movs	r4, #0
 8015d5c:	4620      	mov	r0, r4
 8015d5e:	b004      	add	sp, #16
 8015d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d64:	2000b11c 	.word	0x2000b11c
 8015d68:	2000b194 	.word	0x2000b194
 8015d6c:	2000b158 	.word	0x2000b158

08015d70 <destroy_topic>:
 8015d70:	b538      	push	{r3, r4, r5, lr}
 8015d72:	6985      	ldr	r5, [r0, #24]
 8015d74:	b1d5      	cbz	r5, 8015dac <destroy_topic+0x3c>
 8015d76:	4604      	mov	r4, r0
 8015d78:	6928      	ldr	r0, [r5, #16]
 8015d7a:	6922      	ldr	r2, [r4, #16]
 8015d7c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015d80:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015d84:	6819      	ldr	r1, [r3, #0]
 8015d86:	f7f9 fbbb 	bl	800f500 <uxr_buffer_delete_entity>
 8015d8a:	4602      	mov	r2, r0
 8015d8c:	6928      	ldr	r0, [r5, #16]
 8015d8e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015d92:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015d96:	f7f9 f9e1 	bl	800f15c <run_xrce_session>
 8015d9a:	2800      	cmp	r0, #0
 8015d9c:	4620      	mov	r0, r4
 8015d9e:	bf14      	ite	ne
 8015da0:	2400      	movne	r4, #0
 8015da2:	2402      	moveq	r4, #2
 8015da4:	f7f9 f8da 	bl	800ef5c <rmw_uxrce_fini_topic_memory>
 8015da8:	4620      	mov	r0, r4
 8015daa:	bd38      	pop	{r3, r4, r5, pc}
 8015dac:	2401      	movs	r4, #1
 8015dae:	4620      	mov	r0, r4
 8015db0:	bd38      	pop	{r3, r4, r5, pc}
 8015db2:	bf00      	nop

08015db4 <rmw_take_with_info>:
 8015db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015db6:	4604      	mov	r4, r0
 8015db8:	6800      	ldr	r0, [r0, #0]
 8015dba:	b089      	sub	sp, #36	@ 0x24
 8015dbc:	460f      	mov	r7, r1
 8015dbe:	4615      	mov	r5, r2
 8015dc0:	b128      	cbz	r0, 8015dce <rmw_take_with_info+0x1a>
 8015dc2:	4b24      	ldr	r3, [pc, #144]	@ (8015e54 <rmw_take_with_info+0xa0>)
 8015dc4:	6819      	ldr	r1, [r3, #0]
 8015dc6:	f7ea fa2b 	bl	8000220 <strcmp>
 8015dca:	2800      	cmp	r0, #0
 8015dcc:	d13e      	bne.n	8015e4c <rmw_take_with_info+0x98>
 8015dce:	b305      	cbz	r5, 8015e12 <rmw_take_with_info+0x5e>
 8015dd0:	6864      	ldr	r4, [r4, #4]
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	702b      	strb	r3, [r5, #0]
 8015dd6:	f7f9 f943 	bl	800f060 <rmw_uxrce_clean_expired_static_input_buffer>
 8015dda:	4620      	mov	r0, r4
 8015ddc:	f7f9 f91a 	bl	800f014 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015de0:	4606      	mov	r6, r0
 8015de2:	b1f0      	cbz	r0, 8015e22 <rmw_take_with_info+0x6e>
 8015de4:	6881      	ldr	r1, [r0, #8]
 8015de6:	4668      	mov	r0, sp
 8015de8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015dec:	3110      	adds	r1, #16
 8015dee:	f7f5 fbbf 	bl	800b570 <ucdr_init_buffer>
 8015df2:	69a3      	ldr	r3, [r4, #24]
 8015df4:	4639      	mov	r1, r7
 8015df6:	68db      	ldr	r3, [r3, #12]
 8015df8:	4668      	mov	r0, sp
 8015dfa:	4798      	blx	r3
 8015dfc:	4631      	mov	r1, r6
 8015dfe:	4604      	mov	r4, r0
 8015e00:	4815      	ldr	r0, [pc, #84]	@ (8015e58 <rmw_take_with_info+0xa4>)
 8015e02:	f7ff ff29 	bl	8015c58 <put_memory>
 8015e06:	702c      	strb	r4, [r5, #0]
 8015e08:	f084 0001 	eor.w	r0, r4, #1
 8015e0c:	b2c0      	uxtb	r0, r0
 8015e0e:	b009      	add	sp, #36	@ 0x24
 8015e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e12:	6864      	ldr	r4, [r4, #4]
 8015e14:	f7f9 f924 	bl	800f060 <rmw_uxrce_clean_expired_static_input_buffer>
 8015e18:	4620      	mov	r0, r4
 8015e1a:	f7f9 f8fb 	bl	800f014 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015e1e:	4605      	mov	r5, r0
 8015e20:	b910      	cbnz	r0, 8015e28 <rmw_take_with_info+0x74>
 8015e22:	2001      	movs	r0, #1
 8015e24:	b009      	add	sp, #36	@ 0x24
 8015e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e28:	68a9      	ldr	r1, [r5, #8]
 8015e2a:	4668      	mov	r0, sp
 8015e2c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015e30:	3110      	adds	r1, #16
 8015e32:	f7f5 fb9d 	bl	800b570 <ucdr_init_buffer>
 8015e36:	69a3      	ldr	r3, [r4, #24]
 8015e38:	4639      	mov	r1, r7
 8015e3a:	68db      	ldr	r3, [r3, #12]
 8015e3c:	4668      	mov	r0, sp
 8015e3e:	4798      	blx	r3
 8015e40:	4629      	mov	r1, r5
 8015e42:	4604      	mov	r4, r0
 8015e44:	4804      	ldr	r0, [pc, #16]	@ (8015e58 <rmw_take_with_info+0xa4>)
 8015e46:	f7ff ff07 	bl	8015c58 <put_memory>
 8015e4a:	e7dd      	b.n	8015e08 <rmw_take_with_info+0x54>
 8015e4c:	200c      	movs	r0, #12
 8015e4e:	b009      	add	sp, #36	@ 0x24
 8015e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e52:	bf00      	nop
 8015e54:	080197c0 	.word	0x080197c0
 8015e58:	2000b0fc 	.word	0x2000b0fc

08015e5c <rmw_trigger_guard_condition>:
 8015e5c:	b160      	cbz	r0, 8015e78 <rmw_trigger_guard_condition+0x1c>
 8015e5e:	b510      	push	{r4, lr}
 8015e60:	4604      	mov	r4, r0
 8015e62:	6800      	ldr	r0, [r0, #0]
 8015e64:	f7f9 fa94 	bl	800f390 <is_uxrce_rmw_identifier_valid>
 8015e68:	b908      	cbnz	r0, 8015e6e <rmw_trigger_guard_condition+0x12>
 8015e6a:	2001      	movs	r0, #1
 8015e6c:	bd10      	pop	{r4, pc}
 8015e6e:	6863      	ldr	r3, [r4, #4]
 8015e70:	2201      	movs	r2, #1
 8015e72:	741a      	strb	r2, [r3, #16]
 8015e74:	2000      	movs	r0, #0
 8015e76:	bd10      	pop	{r4, pc}
 8015e78:	2001      	movs	r0, #1
 8015e7a:	4770      	bx	lr

08015e7c <rmw_wait>:
 8015e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015e80:	b089      	sub	sp, #36	@ 0x24
 8015e82:	4605      	mov	r5, r0
 8015e84:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8015e86:	460e      	mov	r6, r1
 8015e88:	4698      	mov	r8, r3
 8015e8a:	4691      	mov	r9, r2
 8015e8c:	2a00      	cmp	r2, #0
 8015e8e:	f000 810a 	beq.w	80160a6 <rmw_wait+0x22a>
 8015e92:	b16c      	cbz	r4, 8015eb0 <rmw_wait+0x34>
 8015e94:	4bae      	ldr	r3, [pc, #696]	@ (8016150 <rmw_wait+0x2d4>)
 8015e96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015e98:	af04      	add	r7, sp, #16
 8015e9a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8015e9e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015ea2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015ea6:	f7ff fd53 	bl	8015950 <rmw_time_equal>
 8015eaa:	2800      	cmp	r0, #0
 8015eac:	f000 8127 	beq.w	80160fe <rmw_wait+0x282>
 8015eb0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8015eb4:	f7f9 f8d4 	bl	800f060 <rmw_uxrce_clean_expired_static_input_buffer>
 8015eb8:	4ba6      	ldr	r3, [pc, #664]	@ (8016154 <rmw_wait+0x2d8>)
 8015eba:	681c      	ldr	r4, [r3, #0]
 8015ebc:	b14c      	cbz	r4, 8015ed2 <rmw_wait+0x56>
 8015ebe:	4623      	mov	r3, r4
 8015ec0:	2100      	movs	r1, #0
 8015ec2:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8015ec6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015eca:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d1f7      	bne.n	8015ec2 <rmw_wait+0x46>
 8015ed2:	f1b9 0f00 	cmp.w	r9, #0
 8015ed6:	d011      	beq.n	8015efc <rmw_wait+0x80>
 8015ed8:	f8d9 1000 	ldr.w	r1, [r9]
 8015edc:	b171      	cbz	r1, 8015efc <rmw_wait+0x80>
 8015ede:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	2001      	movs	r0, #1
 8015ee6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015eea:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015eec:	6912      	ldr	r2, [r2, #16]
 8015eee:	3301      	adds	r3, #1
 8015ef0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015ef4:	4299      	cmp	r1, r3
 8015ef6:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015efa:	d1f4      	bne.n	8015ee6 <rmw_wait+0x6a>
 8015efc:	f1b8 0f00 	cmp.w	r8, #0
 8015f00:	d011      	beq.n	8015f26 <rmw_wait+0xaa>
 8015f02:	f8d8 1000 	ldr.w	r1, [r8]
 8015f06:	b171      	cbz	r1, 8015f26 <rmw_wait+0xaa>
 8015f08:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	2001      	movs	r0, #1
 8015f10:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015f14:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015f16:	6912      	ldr	r2, [r2, #16]
 8015f18:	3301      	adds	r3, #1
 8015f1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015f1e:	4299      	cmp	r1, r3
 8015f20:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015f24:	d1f4      	bne.n	8015f10 <rmw_wait+0x94>
 8015f26:	b185      	cbz	r5, 8015f4a <rmw_wait+0xce>
 8015f28:	6829      	ldr	r1, [r5, #0]
 8015f2a:	b171      	cbz	r1, 8015f4a <rmw_wait+0xce>
 8015f2c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8015f30:	2300      	movs	r3, #0
 8015f32:	2001      	movs	r0, #1
 8015f34:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015f38:	6a12      	ldr	r2, [r2, #32]
 8015f3a:	6912      	ldr	r2, [r2, #16]
 8015f3c:	3301      	adds	r3, #1
 8015f3e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015f42:	4299      	cmp	r1, r3
 8015f44:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015f48:	d1f4      	bne.n	8015f34 <rmw_wait+0xb8>
 8015f4a:	b34c      	cbz	r4, 8015fa0 <rmw_wait+0x124>
 8015f4c:	4622      	mov	r2, r4
 8015f4e:	2300      	movs	r3, #0
 8015f50:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8015f54:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8015f58:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8015f5c:	440b      	add	r3, r1
 8015f5e:	b2db      	uxtb	r3, r3
 8015f60:	2a00      	cmp	r2, #0
 8015f62:	d1f5      	bne.n	8015f50 <rmw_wait+0xd4>
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	f000 8084 	beq.w	8016072 <rmw_wait+0x1f6>
 8015f6a:	1c7a      	adds	r2, r7, #1
 8015f6c:	d00d      	beq.n	8015f8a <rmw_wait+0x10e>
 8015f6e:	ee07 7a90 	vmov	s15, r7
 8015f72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015f76:	ee07 3a90 	vmov	s15, r3
 8015f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015f82:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8015f86:	ee17 7a90 	vmov	r7, s15
 8015f8a:	68a0      	ldr	r0, [r4, #8]
 8015f8c:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8015f90:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	f040 8090 	bne.w	80160ba <rmw_wait+0x23e>
 8015f9a:	6864      	ldr	r4, [r4, #4]
 8015f9c:	2c00      	cmp	r4, #0
 8015f9e:	d1f4      	bne.n	8015f8a <rmw_wait+0x10e>
 8015fa0:	f1b9 0f00 	cmp.w	r9, #0
 8015fa4:	f000 80bc 	beq.w	8016120 <rmw_wait+0x2a4>
 8015fa8:	f8d9 7000 	ldr.w	r7, [r9]
 8015fac:	2f00      	cmp	r7, #0
 8015fae:	f000 808e 	beq.w	80160ce <rmw_wait+0x252>
 8015fb2:	2400      	movs	r4, #0
 8015fb4:	4627      	mov	r7, r4
 8015fb6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015fba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015fbe:	f7f9 f829 	bl	800f014 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015fc2:	2800      	cmp	r0, #0
 8015fc4:	d05f      	beq.n	8016086 <rmw_wait+0x20a>
 8015fc6:	f8d9 3000 	ldr.w	r3, [r9]
 8015fca:	3401      	adds	r4, #1
 8015fcc:	42a3      	cmp	r3, r4
 8015fce:	f04f 0701 	mov.w	r7, #1
 8015fd2:	d8f0      	bhi.n	8015fb6 <rmw_wait+0x13a>
 8015fd4:	f1b8 0f00 	cmp.w	r8, #0
 8015fd8:	d012      	beq.n	8016000 <rmw_wait+0x184>
 8015fda:	f8d8 3000 	ldr.w	r3, [r8]
 8015fde:	b17b      	cbz	r3, 8016000 <rmw_wait+0x184>
 8015fe0:	2400      	movs	r4, #0
 8015fe2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015fe6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015fea:	f7f9 f813 	bl	800f014 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015fee:	2800      	cmp	r0, #0
 8015ff0:	d051      	beq.n	8016096 <rmw_wait+0x21a>
 8015ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8015ff6:	3401      	adds	r4, #1
 8015ff8:	42a3      	cmp	r3, r4
 8015ffa:	f04f 0701 	mov.w	r7, #1
 8015ffe:	d8f0      	bhi.n	8015fe2 <rmw_wait+0x166>
 8016000:	b1dd      	cbz	r5, 801603a <rmw_wait+0x1be>
 8016002:	682b      	ldr	r3, [r5, #0]
 8016004:	b1cb      	cbz	r3, 801603a <rmw_wait+0x1be>
 8016006:	2400      	movs	r4, #0
 8016008:	686b      	ldr	r3, [r5, #4]
 801600a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801600e:	f7f9 f801 	bl	800f014 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016012:	b158      	cbz	r0, 801602c <rmw_wait+0x1b0>
 8016014:	682b      	ldr	r3, [r5, #0]
 8016016:	3401      	adds	r4, #1
 8016018:	42a3      	cmp	r3, r4
 801601a:	d969      	bls.n	80160f0 <rmw_wait+0x274>
 801601c:	686b      	ldr	r3, [r5, #4]
 801601e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016022:	2701      	movs	r7, #1
 8016024:	f7f8 fff6 	bl	800f014 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016028:	2800      	cmp	r0, #0
 801602a:	d1f3      	bne.n	8016014 <rmw_wait+0x198>
 801602c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8016030:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016034:	3401      	adds	r4, #1
 8016036:	42a3      	cmp	r3, r4
 8016038:	d8e6      	bhi.n	8016008 <rmw_wait+0x18c>
 801603a:	b1a6      	cbz	r6, 8016066 <rmw_wait+0x1ea>
 801603c:	6834      	ldr	r4, [r6, #0]
 801603e:	b194      	cbz	r4, 8016066 <rmw_wait+0x1ea>
 8016040:	2300      	movs	r3, #0
 8016042:	461d      	mov	r5, r3
 8016044:	e004      	b.n	8016050 <rmw_wait+0x1d4>
 8016046:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801604a:	3301      	adds	r3, #1
 801604c:	42a3      	cmp	r3, r4
 801604e:	d00a      	beq.n	8016066 <rmw_wait+0x1ea>
 8016050:	6870      	ldr	r0, [r6, #4]
 8016052:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8016056:	7c0a      	ldrb	r2, [r1, #16]
 8016058:	2a00      	cmp	r2, #0
 801605a:	d0f4      	beq.n	8016046 <rmw_wait+0x1ca>
 801605c:	3301      	adds	r3, #1
 801605e:	42a3      	cmp	r3, r4
 8016060:	740d      	strb	r5, [r1, #16]
 8016062:	4617      	mov	r7, r2
 8016064:	d1f4      	bne.n	8016050 <rmw_wait+0x1d4>
 8016066:	2f00      	cmp	r7, #0
 8016068:	d03e      	beq.n	80160e8 <rmw_wait+0x26c>
 801606a:	2000      	movs	r0, #0
 801606c:	b009      	add	sp, #36	@ 0x24
 801606e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016072:	68a0      	ldr	r0, [r4, #8]
 8016074:	2100      	movs	r1, #0
 8016076:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801607a:	f7fa fa9b 	bl	80105b4 <uxr_run_session_timeout>
 801607e:	6864      	ldr	r4, [r4, #4]
 8016080:	2c00      	cmp	r4, #0
 8016082:	d1f6      	bne.n	8016072 <rmw_wait+0x1f6>
 8016084:	e78c      	b.n	8015fa0 <rmw_wait+0x124>
 8016086:	e9d9 3200 	ldrd	r3, r2, [r9]
 801608a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801608e:	3401      	adds	r4, #1
 8016090:	42a3      	cmp	r3, r4
 8016092:	d890      	bhi.n	8015fb6 <rmw_wait+0x13a>
 8016094:	e79e      	b.n	8015fd4 <rmw_wait+0x158>
 8016096:	e9d8 3200 	ldrd	r3, r2, [r8]
 801609a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801609e:	3401      	adds	r4, #1
 80160a0:	429c      	cmp	r4, r3
 80160a2:	d39e      	bcc.n	8015fe2 <rmw_wait+0x166>
 80160a4:	e7ac      	b.n	8016000 <rmw_wait+0x184>
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	f47f aef3 	bne.w	8015e92 <rmw_wait+0x16>
 80160ac:	2800      	cmp	r0, #0
 80160ae:	f47f aef0 	bne.w	8015e92 <rmw_wait+0x16>
 80160b2:	2900      	cmp	r1, #0
 80160b4:	f47f aeed 	bne.w	8015e92 <rmw_wait+0x16>
 80160b8:	e7d7      	b.n	801606a <rmw_wait+0x1ee>
 80160ba:	4639      	mov	r1, r7
 80160bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80160c0:	f7fa fa92 	bl	80105e8 <uxr_run_session_until_data>
 80160c4:	6864      	ldr	r4, [r4, #4]
 80160c6:	2c00      	cmp	r4, #0
 80160c8:	f47f af5f 	bne.w	8015f8a <rmw_wait+0x10e>
 80160cc:	e768      	b.n	8015fa0 <rmw_wait+0x124>
 80160ce:	f1b8 0f00 	cmp.w	r8, #0
 80160d2:	d032      	beq.n	801613a <rmw_wait+0x2be>
 80160d4:	f8d8 3000 	ldr.w	r3, [r8]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d181      	bne.n	8015fe0 <rmw_wait+0x164>
 80160dc:	461f      	mov	r7, r3
 80160de:	2d00      	cmp	r5, #0
 80160e0:	d18f      	bne.n	8016002 <rmw_wait+0x186>
 80160e2:	462f      	mov	r7, r5
 80160e4:	2e00      	cmp	r6, #0
 80160e6:	d1a9      	bne.n	801603c <rmw_wait+0x1c0>
 80160e8:	2002      	movs	r0, #2
 80160ea:	b009      	add	sp, #36	@ 0x24
 80160ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160f0:	2e00      	cmp	r6, #0
 80160f2:	d0ba      	beq.n	801606a <rmw_wait+0x1ee>
 80160f4:	6834      	ldr	r4, [r6, #0]
 80160f6:	2701      	movs	r7, #1
 80160f8:	2c00      	cmp	r4, #0
 80160fa:	d1a1      	bne.n	8016040 <rmw_wait+0x1c4>
 80160fc:	e7b5      	b.n	801606a <rmw_wait+0x1ee>
 80160fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016102:	f7ff fc79 	bl	80159f8 <rmw_time_total_nsec>
 8016106:	2300      	movs	r3, #0
 8016108:	4a13      	ldr	r2, [pc, #76]	@ (8016158 <rmw_wait+0x2dc>)
 801610a:	f7ea fafd 	bl	8000708 <__aeabi_uldivmod>
 801610e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8016112:	f171 0300 	sbcs.w	r3, r1, #0
 8016116:	4607      	mov	r7, r0
 8016118:	bfa8      	it	ge
 801611a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801611e:	e6c9      	b.n	8015eb4 <rmw_wait+0x38>
 8016120:	f1b8 0f00 	cmp.w	r8, #0
 8016124:	d009      	beq.n	801613a <rmw_wait+0x2be>
 8016126:	f8d8 3000 	ldr.w	r3, [r8]
 801612a:	464f      	mov	r7, r9
 801612c:	2b00      	cmp	r3, #0
 801612e:	f47f af57 	bne.w	8015fe0 <rmw_wait+0x164>
 8016132:	2d00      	cmp	r5, #0
 8016134:	f47f af65 	bne.w	8016002 <rmw_wait+0x186>
 8016138:	e7d3      	b.n	80160e2 <rmw_wait+0x266>
 801613a:	b17d      	cbz	r5, 801615c <rmw_wait+0x2e0>
 801613c:	682b      	ldr	r3, [r5, #0]
 801613e:	4647      	mov	r7, r8
 8016140:	2b00      	cmp	r3, #0
 8016142:	f47f af60 	bne.w	8016006 <rmw_wait+0x18a>
 8016146:	2e00      	cmp	r6, #0
 8016148:	f47f af78 	bne.w	801603c <rmw_wait+0x1c0>
 801614c:	e7cc      	b.n	80160e8 <rmw_wait+0x26c>
 801614e:	bf00      	nop
 8016150:	080187e0 	.word	0x080187e0
 8016154:	2000b0ec 	.word	0x2000b0ec
 8016158:	000f4240 	.word	0x000f4240
 801615c:	2e00      	cmp	r6, #0
 801615e:	d0c3      	beq.n	80160e8 <rmw_wait+0x26c>
 8016160:	6834      	ldr	r4, [r6, #0]
 8016162:	462f      	mov	r7, r5
 8016164:	2c00      	cmp	r4, #0
 8016166:	f47f af6b 	bne.w	8016040 <rmw_wait+0x1c4>
 801616a:	e7bd      	b.n	80160e8 <rmw_wait+0x26c>

0801616c <rmw_create_wait_set>:
 801616c:	b508      	push	{r3, lr}
 801616e:	4803      	ldr	r0, [pc, #12]	@ (801617c <rmw_create_wait_set+0x10>)
 8016170:	f7ff fd62 	bl	8015c38 <get_memory>
 8016174:	b108      	cbz	r0, 801617a <rmw_create_wait_set+0xe>
 8016176:	6880      	ldr	r0, [r0, #8]
 8016178:	3010      	adds	r0, #16
 801617a:	bd08      	pop	{r3, pc}
 801617c:	2000b12c 	.word	0x2000b12c

08016180 <rmw_destroy_wait_set>:
 8016180:	b508      	push	{r3, lr}
 8016182:	4b08      	ldr	r3, [pc, #32]	@ (80161a4 <rmw_destroy_wait_set+0x24>)
 8016184:	6819      	ldr	r1, [r3, #0]
 8016186:	b911      	cbnz	r1, 801618e <rmw_destroy_wait_set+0xe>
 8016188:	e00a      	b.n	80161a0 <rmw_destroy_wait_set+0x20>
 801618a:	6849      	ldr	r1, [r1, #4]
 801618c:	b141      	cbz	r1, 80161a0 <rmw_destroy_wait_set+0x20>
 801618e:	688b      	ldr	r3, [r1, #8]
 8016190:	3310      	adds	r3, #16
 8016192:	4298      	cmp	r0, r3
 8016194:	d1f9      	bne.n	801618a <rmw_destroy_wait_set+0xa>
 8016196:	4803      	ldr	r0, [pc, #12]	@ (80161a4 <rmw_destroy_wait_set+0x24>)
 8016198:	f7ff fd5e 	bl	8015c58 <put_memory>
 801619c:	2000      	movs	r0, #0
 801619e:	bd08      	pop	{r3, pc}
 80161a0:	2001      	movs	r0, #1
 80161a2:	bd08      	pop	{r3, pc}
 80161a4:	2000b12c 	.word	0x2000b12c

080161a8 <rmw_uros_epoch_nanos>:
 80161a8:	4b05      	ldr	r3, [pc, #20]	@ (80161c0 <rmw_uros_epoch_nanos+0x18>)
 80161aa:	681b      	ldr	r3, [r3, #0]
 80161ac:	b123      	cbz	r3, 80161b8 <rmw_uros_epoch_nanos+0x10>
 80161ae:	6898      	ldr	r0, [r3, #8]
 80161b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80161b4:	f7f9 be6e 	b.w	800fe94 <uxr_epoch_nanos>
 80161b8:	2000      	movs	r0, #0
 80161ba:	2100      	movs	r1, #0
 80161bc:	4770      	bx	lr
 80161be:	bf00      	nop
 80161c0:	2000b0ec 	.word	0x2000b0ec

080161c4 <ucdr_serialize_endian_array_char>:
 80161c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161c8:	4619      	mov	r1, r3
 80161ca:	461f      	mov	r7, r3
 80161cc:	4605      	mov	r5, r0
 80161ce:	4690      	mov	r8, r2
 80161d0:	f7f5 f97a 	bl	800b4c8 <ucdr_check_buffer_available_for>
 80161d4:	b9e0      	cbnz	r0, 8016210 <ucdr_serialize_endian_array_char+0x4c>
 80161d6:	463e      	mov	r6, r7
 80161d8:	e009      	b.n	80161ee <ucdr_serialize_endian_array_char+0x2a>
 80161da:	68a8      	ldr	r0, [r5, #8]
 80161dc:	f001 fbdd 	bl	801799a <memcpy>
 80161e0:	68ab      	ldr	r3, [r5, #8]
 80161e2:	6928      	ldr	r0, [r5, #16]
 80161e4:	4423      	add	r3, r4
 80161e6:	4420      	add	r0, r4
 80161e8:	1b36      	subs	r6, r6, r4
 80161ea:	60ab      	str	r3, [r5, #8]
 80161ec:	6128      	str	r0, [r5, #16]
 80161ee:	4631      	mov	r1, r6
 80161f0:	2201      	movs	r2, #1
 80161f2:	4628      	mov	r0, r5
 80161f4:	f7f5 f9f0 	bl	800b5d8 <ucdr_check_final_buffer_behavior_array>
 80161f8:	1bb9      	subs	r1, r7, r6
 80161fa:	4441      	add	r1, r8
 80161fc:	4604      	mov	r4, r0
 80161fe:	4602      	mov	r2, r0
 8016200:	2800      	cmp	r0, #0
 8016202:	d1ea      	bne.n	80161da <ucdr_serialize_endian_array_char+0x16>
 8016204:	2301      	movs	r3, #1
 8016206:	7da8      	ldrb	r0, [r5, #22]
 8016208:	756b      	strb	r3, [r5, #21]
 801620a:	4058      	eors	r0, r3
 801620c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016210:	463a      	mov	r2, r7
 8016212:	68a8      	ldr	r0, [r5, #8]
 8016214:	4641      	mov	r1, r8
 8016216:	f001 fbc0 	bl	801799a <memcpy>
 801621a:	68aa      	ldr	r2, [r5, #8]
 801621c:	692b      	ldr	r3, [r5, #16]
 801621e:	443a      	add	r2, r7
 8016220:	443b      	add	r3, r7
 8016222:	60aa      	str	r2, [r5, #8]
 8016224:	612b      	str	r3, [r5, #16]
 8016226:	e7ed      	b.n	8016204 <ucdr_serialize_endian_array_char+0x40>

08016228 <ucdr_deserialize_endian_array_char>:
 8016228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801622c:	4619      	mov	r1, r3
 801622e:	461f      	mov	r7, r3
 8016230:	4605      	mov	r5, r0
 8016232:	4690      	mov	r8, r2
 8016234:	f7f5 f948 	bl	800b4c8 <ucdr_check_buffer_available_for>
 8016238:	b9e0      	cbnz	r0, 8016274 <ucdr_deserialize_endian_array_char+0x4c>
 801623a:	463e      	mov	r6, r7
 801623c:	e009      	b.n	8016252 <ucdr_deserialize_endian_array_char+0x2a>
 801623e:	68a9      	ldr	r1, [r5, #8]
 8016240:	f001 fbab 	bl	801799a <memcpy>
 8016244:	68ab      	ldr	r3, [r5, #8]
 8016246:	6928      	ldr	r0, [r5, #16]
 8016248:	4423      	add	r3, r4
 801624a:	4420      	add	r0, r4
 801624c:	1b36      	subs	r6, r6, r4
 801624e:	60ab      	str	r3, [r5, #8]
 8016250:	6128      	str	r0, [r5, #16]
 8016252:	2201      	movs	r2, #1
 8016254:	4631      	mov	r1, r6
 8016256:	4628      	mov	r0, r5
 8016258:	f7f5 f9be 	bl	800b5d8 <ucdr_check_final_buffer_behavior_array>
 801625c:	4604      	mov	r4, r0
 801625e:	1bb8      	subs	r0, r7, r6
 8016260:	4440      	add	r0, r8
 8016262:	4622      	mov	r2, r4
 8016264:	2c00      	cmp	r4, #0
 8016266:	d1ea      	bne.n	801623e <ucdr_deserialize_endian_array_char+0x16>
 8016268:	2301      	movs	r3, #1
 801626a:	7da8      	ldrb	r0, [r5, #22]
 801626c:	756b      	strb	r3, [r5, #21]
 801626e:	4058      	eors	r0, r3
 8016270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016274:	463a      	mov	r2, r7
 8016276:	68a9      	ldr	r1, [r5, #8]
 8016278:	4640      	mov	r0, r8
 801627a:	f001 fb8e 	bl	801799a <memcpy>
 801627e:	68aa      	ldr	r2, [r5, #8]
 8016280:	692b      	ldr	r3, [r5, #16]
 8016282:	443a      	add	r2, r7
 8016284:	443b      	add	r3, r7
 8016286:	60aa      	str	r2, [r5, #8]
 8016288:	612b      	str	r3, [r5, #16]
 801628a:	e7ed      	b.n	8016268 <ucdr_deserialize_endian_array_char+0x40>

0801628c <ucdr_serialize_array_uint8_t>:
 801628c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016290:	4688      	mov	r8, r1
 8016292:	4611      	mov	r1, r2
 8016294:	4617      	mov	r7, r2
 8016296:	4605      	mov	r5, r0
 8016298:	f7f5 f916 	bl	800b4c8 <ucdr_check_buffer_available_for>
 801629c:	b9e0      	cbnz	r0, 80162d8 <ucdr_serialize_array_uint8_t+0x4c>
 801629e:	463e      	mov	r6, r7
 80162a0:	e009      	b.n	80162b6 <ucdr_serialize_array_uint8_t+0x2a>
 80162a2:	68a8      	ldr	r0, [r5, #8]
 80162a4:	f001 fb79 	bl	801799a <memcpy>
 80162a8:	68aa      	ldr	r2, [r5, #8]
 80162aa:	692b      	ldr	r3, [r5, #16]
 80162ac:	4422      	add	r2, r4
 80162ae:	4423      	add	r3, r4
 80162b0:	1b36      	subs	r6, r6, r4
 80162b2:	60aa      	str	r2, [r5, #8]
 80162b4:	612b      	str	r3, [r5, #16]
 80162b6:	4631      	mov	r1, r6
 80162b8:	2201      	movs	r2, #1
 80162ba:	4628      	mov	r0, r5
 80162bc:	f7f5 f98c 	bl	800b5d8 <ucdr_check_final_buffer_behavior_array>
 80162c0:	1bb9      	subs	r1, r7, r6
 80162c2:	4441      	add	r1, r8
 80162c4:	4604      	mov	r4, r0
 80162c6:	4602      	mov	r2, r0
 80162c8:	2800      	cmp	r0, #0
 80162ca:	d1ea      	bne.n	80162a2 <ucdr_serialize_array_uint8_t+0x16>
 80162cc:	2301      	movs	r3, #1
 80162ce:	7da8      	ldrb	r0, [r5, #22]
 80162d0:	756b      	strb	r3, [r5, #21]
 80162d2:	4058      	eors	r0, r3
 80162d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162d8:	463a      	mov	r2, r7
 80162da:	68a8      	ldr	r0, [r5, #8]
 80162dc:	4641      	mov	r1, r8
 80162de:	f001 fb5c 	bl	801799a <memcpy>
 80162e2:	68aa      	ldr	r2, [r5, #8]
 80162e4:	692b      	ldr	r3, [r5, #16]
 80162e6:	443a      	add	r2, r7
 80162e8:	443b      	add	r3, r7
 80162ea:	60aa      	str	r2, [r5, #8]
 80162ec:	612b      	str	r3, [r5, #16]
 80162ee:	e7ed      	b.n	80162cc <ucdr_serialize_array_uint8_t+0x40>

080162f0 <ucdr_serialize_endian_array_uint8_t>:
 80162f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162f4:	4619      	mov	r1, r3
 80162f6:	461f      	mov	r7, r3
 80162f8:	4605      	mov	r5, r0
 80162fa:	4690      	mov	r8, r2
 80162fc:	f7f5 f8e4 	bl	800b4c8 <ucdr_check_buffer_available_for>
 8016300:	b9e0      	cbnz	r0, 801633c <ucdr_serialize_endian_array_uint8_t+0x4c>
 8016302:	463e      	mov	r6, r7
 8016304:	e009      	b.n	801631a <ucdr_serialize_endian_array_uint8_t+0x2a>
 8016306:	68a8      	ldr	r0, [r5, #8]
 8016308:	f001 fb47 	bl	801799a <memcpy>
 801630c:	68ab      	ldr	r3, [r5, #8]
 801630e:	6928      	ldr	r0, [r5, #16]
 8016310:	4423      	add	r3, r4
 8016312:	4420      	add	r0, r4
 8016314:	1b36      	subs	r6, r6, r4
 8016316:	60ab      	str	r3, [r5, #8]
 8016318:	6128      	str	r0, [r5, #16]
 801631a:	4631      	mov	r1, r6
 801631c:	2201      	movs	r2, #1
 801631e:	4628      	mov	r0, r5
 8016320:	f7f5 f95a 	bl	800b5d8 <ucdr_check_final_buffer_behavior_array>
 8016324:	1bb9      	subs	r1, r7, r6
 8016326:	4441      	add	r1, r8
 8016328:	4604      	mov	r4, r0
 801632a:	4602      	mov	r2, r0
 801632c:	2800      	cmp	r0, #0
 801632e:	d1ea      	bne.n	8016306 <ucdr_serialize_endian_array_uint8_t+0x16>
 8016330:	2301      	movs	r3, #1
 8016332:	7da8      	ldrb	r0, [r5, #22]
 8016334:	756b      	strb	r3, [r5, #21]
 8016336:	4058      	eors	r0, r3
 8016338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801633c:	463a      	mov	r2, r7
 801633e:	68a8      	ldr	r0, [r5, #8]
 8016340:	4641      	mov	r1, r8
 8016342:	f001 fb2a 	bl	801799a <memcpy>
 8016346:	68aa      	ldr	r2, [r5, #8]
 8016348:	692b      	ldr	r3, [r5, #16]
 801634a:	443a      	add	r2, r7
 801634c:	443b      	add	r3, r7
 801634e:	60aa      	str	r2, [r5, #8]
 8016350:	612b      	str	r3, [r5, #16]
 8016352:	e7ed      	b.n	8016330 <ucdr_serialize_endian_array_uint8_t+0x40>

08016354 <ucdr_deserialize_array_uint8_t>:
 8016354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016358:	4688      	mov	r8, r1
 801635a:	4611      	mov	r1, r2
 801635c:	4617      	mov	r7, r2
 801635e:	4605      	mov	r5, r0
 8016360:	f7f5 f8b2 	bl	800b4c8 <ucdr_check_buffer_available_for>
 8016364:	b9e0      	cbnz	r0, 80163a0 <ucdr_deserialize_array_uint8_t+0x4c>
 8016366:	463e      	mov	r6, r7
 8016368:	e009      	b.n	801637e <ucdr_deserialize_array_uint8_t+0x2a>
 801636a:	68a9      	ldr	r1, [r5, #8]
 801636c:	f001 fb15 	bl	801799a <memcpy>
 8016370:	68aa      	ldr	r2, [r5, #8]
 8016372:	692b      	ldr	r3, [r5, #16]
 8016374:	4422      	add	r2, r4
 8016376:	4423      	add	r3, r4
 8016378:	1b36      	subs	r6, r6, r4
 801637a:	60aa      	str	r2, [r5, #8]
 801637c:	612b      	str	r3, [r5, #16]
 801637e:	2201      	movs	r2, #1
 8016380:	4631      	mov	r1, r6
 8016382:	4628      	mov	r0, r5
 8016384:	f7f5 f928 	bl	800b5d8 <ucdr_check_final_buffer_behavior_array>
 8016388:	4604      	mov	r4, r0
 801638a:	1bb8      	subs	r0, r7, r6
 801638c:	4440      	add	r0, r8
 801638e:	4622      	mov	r2, r4
 8016390:	2c00      	cmp	r4, #0
 8016392:	d1ea      	bne.n	801636a <ucdr_deserialize_array_uint8_t+0x16>
 8016394:	2301      	movs	r3, #1
 8016396:	7da8      	ldrb	r0, [r5, #22]
 8016398:	756b      	strb	r3, [r5, #21]
 801639a:	4058      	eors	r0, r3
 801639c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163a0:	463a      	mov	r2, r7
 80163a2:	68a9      	ldr	r1, [r5, #8]
 80163a4:	4640      	mov	r0, r8
 80163a6:	f001 faf8 	bl	801799a <memcpy>
 80163aa:	68aa      	ldr	r2, [r5, #8]
 80163ac:	692b      	ldr	r3, [r5, #16]
 80163ae:	443a      	add	r2, r7
 80163b0:	443b      	add	r3, r7
 80163b2:	60aa      	str	r2, [r5, #8]
 80163b4:	612b      	str	r3, [r5, #16]
 80163b6:	e7ed      	b.n	8016394 <ucdr_deserialize_array_uint8_t+0x40>

080163b8 <ucdr_deserialize_endian_array_uint8_t>:
 80163b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163bc:	4619      	mov	r1, r3
 80163be:	461f      	mov	r7, r3
 80163c0:	4605      	mov	r5, r0
 80163c2:	4690      	mov	r8, r2
 80163c4:	f7f5 f880 	bl	800b4c8 <ucdr_check_buffer_available_for>
 80163c8:	b9e0      	cbnz	r0, 8016404 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80163ca:	463e      	mov	r6, r7
 80163cc:	e009      	b.n	80163e2 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80163ce:	68a9      	ldr	r1, [r5, #8]
 80163d0:	f001 fae3 	bl	801799a <memcpy>
 80163d4:	68ab      	ldr	r3, [r5, #8]
 80163d6:	6928      	ldr	r0, [r5, #16]
 80163d8:	4423      	add	r3, r4
 80163da:	4420      	add	r0, r4
 80163dc:	1b36      	subs	r6, r6, r4
 80163de:	60ab      	str	r3, [r5, #8]
 80163e0:	6128      	str	r0, [r5, #16]
 80163e2:	2201      	movs	r2, #1
 80163e4:	4631      	mov	r1, r6
 80163e6:	4628      	mov	r0, r5
 80163e8:	f7f5 f8f6 	bl	800b5d8 <ucdr_check_final_buffer_behavior_array>
 80163ec:	4604      	mov	r4, r0
 80163ee:	1bb8      	subs	r0, r7, r6
 80163f0:	4440      	add	r0, r8
 80163f2:	4622      	mov	r2, r4
 80163f4:	2c00      	cmp	r4, #0
 80163f6:	d1ea      	bne.n	80163ce <ucdr_deserialize_endian_array_uint8_t+0x16>
 80163f8:	2301      	movs	r3, #1
 80163fa:	7da8      	ldrb	r0, [r5, #22]
 80163fc:	756b      	strb	r3, [r5, #21]
 80163fe:	4058      	eors	r0, r3
 8016400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016404:	463a      	mov	r2, r7
 8016406:	68a9      	ldr	r1, [r5, #8]
 8016408:	4640      	mov	r0, r8
 801640a:	f001 fac6 	bl	801799a <memcpy>
 801640e:	68aa      	ldr	r2, [r5, #8]
 8016410:	692b      	ldr	r3, [r5, #16]
 8016412:	443a      	add	r2, r7
 8016414:	443b      	add	r3, r7
 8016416:	60aa      	str	r2, [r5, #8]
 8016418:	612b      	str	r3, [r5, #16]
 801641a:	e7ed      	b.n	80163f8 <ucdr_deserialize_endian_array_uint8_t+0x40>

0801641c <ucdr_serialize_sequence_char>:
 801641c:	b570      	push	{r4, r5, r6, lr}
 801641e:	4615      	mov	r5, r2
 8016420:	460e      	mov	r6, r1
 8016422:	7d01      	ldrb	r1, [r0, #20]
 8016424:	4604      	mov	r4, r0
 8016426:	f7f4 fa0f 	bl	800a848 <ucdr_serialize_endian_uint32_t>
 801642a:	b90d      	cbnz	r5, 8016430 <ucdr_serialize_sequence_char+0x14>
 801642c:	2001      	movs	r0, #1
 801642e:	bd70      	pop	{r4, r5, r6, pc}
 8016430:	7d21      	ldrb	r1, [r4, #20]
 8016432:	462b      	mov	r3, r5
 8016434:	4632      	mov	r2, r6
 8016436:	4620      	mov	r0, r4
 8016438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801643c:	f7ff bec2 	b.w	80161c4 <ucdr_serialize_endian_array_char>

08016440 <ucdr_deserialize_sequence_char>:
 8016440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016444:	461d      	mov	r5, r3
 8016446:	4616      	mov	r6, r2
 8016448:	460f      	mov	r7, r1
 801644a:	461a      	mov	r2, r3
 801644c:	7d01      	ldrb	r1, [r0, #20]
 801644e:	4604      	mov	r4, r0
 8016450:	f7f4 fb22 	bl	800aa98 <ucdr_deserialize_endian_uint32_t>
 8016454:	682b      	ldr	r3, [r5, #0]
 8016456:	429e      	cmp	r6, r3
 8016458:	bf3c      	itt	cc
 801645a:	2201      	movcc	r2, #1
 801645c:	75a2      	strbcc	r2, [r4, #22]
 801645e:	b913      	cbnz	r3, 8016466 <ucdr_deserialize_sequence_char+0x26>
 8016460:	2001      	movs	r0, #1
 8016462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016466:	7d21      	ldrb	r1, [r4, #20]
 8016468:	463a      	mov	r2, r7
 801646a:	4620      	mov	r0, r4
 801646c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016470:	f7ff beda 	b.w	8016228 <ucdr_deserialize_endian_array_char>

08016474 <ucdr_serialize_sequence_uint8_t>:
 8016474:	b570      	push	{r4, r5, r6, lr}
 8016476:	4615      	mov	r5, r2
 8016478:	460e      	mov	r6, r1
 801647a:	7d01      	ldrb	r1, [r0, #20]
 801647c:	4604      	mov	r4, r0
 801647e:	f7f4 f9e3 	bl	800a848 <ucdr_serialize_endian_uint32_t>
 8016482:	b90d      	cbnz	r5, 8016488 <ucdr_serialize_sequence_uint8_t+0x14>
 8016484:	2001      	movs	r0, #1
 8016486:	bd70      	pop	{r4, r5, r6, pc}
 8016488:	7d21      	ldrb	r1, [r4, #20]
 801648a:	462b      	mov	r3, r5
 801648c:	4632      	mov	r2, r6
 801648e:	4620      	mov	r0, r4
 8016490:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016494:	f7ff bf2c 	b.w	80162f0 <ucdr_serialize_endian_array_uint8_t>

08016498 <ucdr_deserialize_sequence_uint8_t>:
 8016498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801649c:	461d      	mov	r5, r3
 801649e:	4616      	mov	r6, r2
 80164a0:	460f      	mov	r7, r1
 80164a2:	461a      	mov	r2, r3
 80164a4:	7d01      	ldrb	r1, [r0, #20]
 80164a6:	4604      	mov	r4, r0
 80164a8:	f7f4 faf6 	bl	800aa98 <ucdr_deserialize_endian_uint32_t>
 80164ac:	682b      	ldr	r3, [r5, #0]
 80164ae:	429e      	cmp	r6, r3
 80164b0:	bf3c      	itt	cc
 80164b2:	2201      	movcc	r2, #1
 80164b4:	75a2      	strbcc	r2, [r4, #22]
 80164b6:	b913      	cbnz	r3, 80164be <ucdr_deserialize_sequence_uint8_t+0x26>
 80164b8:	2001      	movs	r0, #1
 80164ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164be:	7d21      	ldrb	r1, [r4, #20]
 80164c0:	463a      	mov	r2, r7
 80164c2:	4620      	mov	r0, r4
 80164c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80164c8:	f7ff bf76 	b.w	80163b8 <ucdr_deserialize_endian_array_uint8_t>

080164cc <ucdr_serialize_string>:
 80164cc:	b510      	push	{r4, lr}
 80164ce:	b082      	sub	sp, #8
 80164d0:	4604      	mov	r4, r0
 80164d2:	4608      	mov	r0, r1
 80164d4:	9101      	str	r1, [sp, #4]
 80164d6:	f7e9 fead 	bl	8000234 <strlen>
 80164da:	9901      	ldr	r1, [sp, #4]
 80164dc:	1c42      	adds	r2, r0, #1
 80164de:	4620      	mov	r0, r4
 80164e0:	b002      	add	sp, #8
 80164e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80164e6:	f7ff bf99 	b.w	801641c <ucdr_serialize_sequence_char>
 80164ea:	bf00      	nop

080164ec <ucdr_deserialize_string>:
 80164ec:	b500      	push	{lr}
 80164ee:	b083      	sub	sp, #12
 80164f0:	ab01      	add	r3, sp, #4
 80164f2:	f7ff ffa5 	bl	8016440 <ucdr_deserialize_sequence_char>
 80164f6:	b003      	add	sp, #12
 80164f8:	f85d fb04 	ldr.w	pc, [sp], #4

080164fc <uxr_init_input_best_effort_stream>:
 80164fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016500:	8003      	strh	r3, [r0, #0]
 8016502:	4770      	bx	lr

08016504 <uxr_reset_input_best_effort_stream>:
 8016504:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016508:	8003      	strh	r3, [r0, #0]
 801650a:	4770      	bx	lr

0801650c <uxr_receive_best_effort_message>:
 801650c:	b538      	push	{r3, r4, r5, lr}
 801650e:	4604      	mov	r4, r0
 8016510:	8800      	ldrh	r0, [r0, #0]
 8016512:	460d      	mov	r5, r1
 8016514:	f000 fd42 	bl	8016f9c <uxr_seq_num_cmp>
 8016518:	4603      	mov	r3, r0
 801651a:	2b00      	cmp	r3, #0
 801651c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8016520:	bfb8      	it	lt
 8016522:	8025      	strhlt	r5, [r4, #0]
 8016524:	bd38      	pop	{r3, r4, r5, pc}
 8016526:	bf00      	nop

08016528 <on_full_input_buffer>:
 8016528:	b570      	push	{r4, r5, r6, lr}
 801652a:	4605      	mov	r5, r0
 801652c:	460c      	mov	r4, r1
 801652e:	682b      	ldr	r3, [r5, #0]
 8016530:	6809      	ldr	r1, [r1, #0]
 8016532:	8920      	ldrh	r0, [r4, #8]
 8016534:	6862      	ldr	r2, [r4, #4]
 8016536:	fbb2 f2f0 	udiv	r2, r2, r0
 801653a:	eba3 0c01 	sub.w	ip, r3, r1
 801653e:	fbbc fcf2 	udiv	ip, ip, r2
 8016542:	f10c 0c01 	add.w	ip, ip, #1
 8016546:	fa1f f38c 	uxth.w	r3, ip
 801654a:	fbb3 f6f0 	udiv	r6, r3, r0
 801654e:	fb00 3316 	mls	r3, r0, r6, r3
 8016552:	b29b      	uxth	r3, r3
 8016554:	fb02 f303 	mul.w	r3, r2, r3
 8016558:	1d18      	adds	r0, r3, #4
 801655a:	4408      	add	r0, r1
 801655c:	7d26      	ldrb	r6, [r4, #20]
 801655e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8016562:	b116      	cbz	r6, 801656a <on_full_input_buffer+0x42>
 8016564:	2600      	movs	r6, #0
 8016566:	f840 6c04 	str.w	r6, [r0, #-4]
 801656a:	2a03      	cmp	r2, #3
 801656c:	d801      	bhi.n	8016572 <on_full_input_buffer+0x4a>
 801656e:	2001      	movs	r0, #1
 8016570:	bd70      	pop	{r4, r5, r6, pc}
 8016572:	3308      	adds	r3, #8
 8016574:	4419      	add	r1, r3
 8016576:	4628      	mov	r0, r5
 8016578:	692b      	ldr	r3, [r5, #16]
 801657a:	3a04      	subs	r2, #4
 801657c:	f7f4 fff0 	bl	800b560 <ucdr_init_buffer_origin>
 8016580:	4628      	mov	r0, r5
 8016582:	4903      	ldr	r1, [pc, #12]	@ (8016590 <on_full_input_buffer+0x68>)
 8016584:	4622      	mov	r2, r4
 8016586:	f7f4 ffc7 	bl	800b518 <ucdr_set_on_full_buffer_callback>
 801658a:	2000      	movs	r0, #0
 801658c:	bd70      	pop	{r4, r5, r6, pc}
 801658e:	bf00      	nop
 8016590:	08016529 	.word	0x08016529

08016594 <uxr_init_input_reliable_stream>:
 8016594:	b500      	push	{lr}
 8016596:	e9c0 1200 	strd	r1, r2, [r0]
 801659a:	f04f 0e00 	mov.w	lr, #0
 801659e:	9a01      	ldr	r2, [sp, #4]
 80165a0:	8103      	strh	r3, [r0, #8]
 80165a2:	6102      	str	r2, [r0, #16]
 80165a4:	f880 e014 	strb.w	lr, [r0, #20]
 80165a8:	b1d3      	cbz	r3, 80165e0 <uxr_init_input_reliable_stream+0x4c>
 80165aa:	f8c1 e000 	str.w	lr, [r1]
 80165ae:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80165b2:	f1bc 0f01 	cmp.w	ip, #1
 80165b6:	d913      	bls.n	80165e0 <uxr_init_input_reliable_stream+0x4c>
 80165b8:	2301      	movs	r3, #1
 80165ba:	fbb3 f1fc 	udiv	r1, r3, ip
 80165be:	fb0c 3111 	mls	r1, ip, r1, r3
 80165c2:	b289      	uxth	r1, r1
 80165c4:	6842      	ldr	r2, [r0, #4]
 80165c6:	fbb2 f2fc 	udiv	r2, r2, ip
 80165ca:	fb01 f202 	mul.w	r2, r1, r2
 80165ce:	6801      	ldr	r1, [r0, #0]
 80165d0:	f841 e002 	str.w	lr, [r1, r2]
 80165d4:	3301      	adds	r3, #1
 80165d6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80165da:	b29b      	uxth	r3, r3
 80165dc:	459c      	cmp	ip, r3
 80165de:	d8ec      	bhi.n	80165ba <uxr_init_input_reliable_stream+0x26>
 80165e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80165e4:	60c3      	str	r3, [r0, #12]
 80165e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80165ea:	bf00      	nop

080165ec <uxr_reset_input_reliable_stream>:
 80165ec:	8901      	ldrh	r1, [r0, #8]
 80165ee:	b1e9      	cbz	r1, 801662c <uxr_reset_input_reliable_stream+0x40>
 80165f0:	f04f 0c00 	mov.w	ip, #0
 80165f4:	b500      	push	{lr}
 80165f6:	4663      	mov	r3, ip
 80165f8:	46e6      	mov	lr, ip
 80165fa:	fbb3 f2f1 	udiv	r2, r3, r1
 80165fe:	fb01 3312 	mls	r3, r1, r2, r3
 8016602:	b29b      	uxth	r3, r3
 8016604:	6842      	ldr	r2, [r0, #4]
 8016606:	fbb2 f2f1 	udiv	r2, r2, r1
 801660a:	fb02 f303 	mul.w	r3, r2, r3
 801660e:	6802      	ldr	r2, [r0, #0]
 8016610:	f842 e003 	str.w	lr, [r2, r3]
 8016614:	f10c 0c01 	add.w	ip, ip, #1
 8016618:	8901      	ldrh	r1, [r0, #8]
 801661a:	fa1f f38c 	uxth.w	r3, ip
 801661e:	4299      	cmp	r1, r3
 8016620:	d8eb      	bhi.n	80165fa <uxr_reset_input_reliable_stream+0xe>
 8016622:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016626:	60c3      	str	r3, [r0, #12]
 8016628:	f85d fb04 	ldr.w	pc, [sp], #4
 801662c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016630:	60c3      	str	r3, [r0, #12]
 8016632:	4770      	bx	lr

08016634 <uxr_receive_reliable_message>:
 8016634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016638:	4604      	mov	r4, r0
 801663a:	460d      	mov	r5, r1
 801663c:	8901      	ldrh	r1, [r0, #8]
 801663e:	8980      	ldrh	r0, [r0, #12]
 8016640:	4690      	mov	r8, r2
 8016642:	461f      	mov	r7, r3
 8016644:	f000 fca2 	bl	8016f8c <uxr_seq_num_add>
 8016648:	4629      	mov	r1, r5
 801664a:	4606      	mov	r6, r0
 801664c:	89a0      	ldrh	r0, [r4, #12]
 801664e:	f000 fca5 	bl	8016f9c <uxr_seq_num_cmp>
 8016652:	2800      	cmp	r0, #0
 8016654:	db0a      	blt.n	801666c <uxr_receive_reliable_message+0x38>
 8016656:	2600      	movs	r6, #0
 8016658:	89e0      	ldrh	r0, [r4, #14]
 801665a:	4629      	mov	r1, r5
 801665c:	f000 fc9e 	bl	8016f9c <uxr_seq_num_cmp>
 8016660:	2800      	cmp	r0, #0
 8016662:	da00      	bge.n	8016666 <uxr_receive_reliable_message+0x32>
 8016664:	81e5      	strh	r5, [r4, #14]
 8016666:	4630      	mov	r0, r6
 8016668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801666c:	4630      	mov	r0, r6
 801666e:	4629      	mov	r1, r5
 8016670:	f000 fc94 	bl	8016f9c <uxr_seq_num_cmp>
 8016674:	2800      	cmp	r0, #0
 8016676:	dbee      	blt.n	8016656 <uxr_receive_reliable_message+0x22>
 8016678:	6923      	ldr	r3, [r4, #16]
 801667a:	4640      	mov	r0, r8
 801667c:	4798      	blx	r3
 801667e:	2101      	movs	r1, #1
 8016680:	4681      	mov	r9, r0
 8016682:	89a0      	ldrh	r0, [r4, #12]
 8016684:	f000 fc82 	bl	8016f8c <uxr_seq_num_add>
 8016688:	f1b9 0f00 	cmp.w	r9, #0
 801668c:	d101      	bne.n	8016692 <uxr_receive_reliable_message+0x5e>
 801668e:	4285      	cmp	r5, r0
 8016690:	d047      	beq.n	8016722 <uxr_receive_reliable_message+0xee>
 8016692:	8922      	ldrh	r2, [r4, #8]
 8016694:	fbb5 f0f2 	udiv	r0, r5, r2
 8016698:	fb02 5010 	mls	r0, r2, r0, r5
 801669c:	b280      	uxth	r0, r0
 801669e:	6863      	ldr	r3, [r4, #4]
 80166a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80166a4:	fb00 f303 	mul.w	r3, r0, r3
 80166a8:	6820      	ldr	r0, [r4, #0]
 80166aa:	3304      	adds	r3, #4
 80166ac:	4418      	add	r0, r3
 80166ae:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d1cf      	bne.n	8016656 <uxr_receive_reliable_message+0x22>
 80166b6:	4641      	mov	r1, r8
 80166b8:	463a      	mov	r2, r7
 80166ba:	f001 f96e 	bl	801799a <memcpy>
 80166be:	8921      	ldrh	r1, [r4, #8]
 80166c0:	fbb5 f2f1 	udiv	r2, r5, r1
 80166c4:	fb01 5212 	mls	r2, r1, r2, r5
 80166c8:	b292      	uxth	r2, r2
 80166ca:	6863      	ldr	r3, [r4, #4]
 80166cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80166d0:	fb02 f303 	mul.w	r3, r2, r3
 80166d4:	6822      	ldr	r2, [r4, #0]
 80166d6:	50d7      	str	r7, [r2, r3]
 80166d8:	9a08      	ldr	r2, [sp, #32]
 80166da:	2301      	movs	r3, #1
 80166dc:	7013      	strb	r3, [r2, #0]
 80166de:	f1b9 0f00 	cmp.w	r9, #0
 80166e2:	d0b8      	beq.n	8016656 <uxr_receive_reliable_message+0x22>
 80166e4:	89a6      	ldrh	r6, [r4, #12]
 80166e6:	4630      	mov	r0, r6
 80166e8:	2101      	movs	r1, #1
 80166ea:	f000 fc4f 	bl	8016f8c <uxr_seq_num_add>
 80166ee:	8922      	ldrh	r2, [r4, #8]
 80166f0:	6863      	ldr	r3, [r4, #4]
 80166f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80166f6:	4606      	mov	r6, r0
 80166f8:	fbb0 f0f2 	udiv	r0, r0, r2
 80166fc:	fb02 6010 	mls	r0, r2, r0, r6
 8016700:	b280      	uxth	r0, r0
 8016702:	fb00 f303 	mul.w	r3, r0, r3
 8016706:	6820      	ldr	r0, [r4, #0]
 8016708:	3304      	adds	r3, #4
 801670a:	4418      	add	r0, r3
 801670c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016710:	2b00      	cmp	r3, #0
 8016712:	d0a0      	beq.n	8016656 <uxr_receive_reliable_message+0x22>
 8016714:	6923      	ldr	r3, [r4, #16]
 8016716:	4798      	blx	r3
 8016718:	2802      	cmp	r0, #2
 801671a:	d008      	beq.n	801672e <uxr_receive_reliable_message+0xfa>
 801671c:	2801      	cmp	r0, #1
 801671e:	d0e2      	beq.n	80166e6 <uxr_receive_reliable_message+0xb2>
 8016720:	e799      	b.n	8016656 <uxr_receive_reliable_message+0x22>
 8016722:	9b08      	ldr	r3, [sp, #32]
 8016724:	81a5      	strh	r5, [r4, #12]
 8016726:	2601      	movs	r6, #1
 8016728:	f883 9000 	strb.w	r9, [r3]
 801672c:	e794      	b.n	8016658 <uxr_receive_reliable_message+0x24>
 801672e:	2601      	movs	r6, #1
 8016730:	e792      	b.n	8016658 <uxr_receive_reliable_message+0x24>
 8016732:	bf00      	nop

08016734 <uxr_next_input_reliable_buffer_available>:
 8016734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016738:	4604      	mov	r4, r0
 801673a:	460f      	mov	r7, r1
 801673c:	8980      	ldrh	r0, [r0, #12]
 801673e:	2101      	movs	r1, #1
 8016740:	4690      	mov	r8, r2
 8016742:	f000 fc23 	bl	8016f8c <uxr_seq_num_add>
 8016746:	8922      	ldrh	r2, [r4, #8]
 8016748:	fbb0 f6f2 	udiv	r6, r0, r2
 801674c:	fb02 0616 	mls	r6, r2, r6, r0
 8016750:	b2b6      	uxth	r6, r6
 8016752:	6863      	ldr	r3, [r4, #4]
 8016754:	fbb3 f3f2 	udiv	r3, r3, r2
 8016758:	fb06 f303 	mul.w	r3, r6, r3
 801675c:	6826      	ldr	r6, [r4, #0]
 801675e:	3304      	adds	r3, #4
 8016760:	441e      	add	r6, r3
 8016762:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8016766:	f1b9 0f00 	cmp.w	r9, #0
 801676a:	d023      	beq.n	80167b4 <uxr_next_input_reliable_buffer_available+0x80>
 801676c:	6923      	ldr	r3, [r4, #16]
 801676e:	4605      	mov	r5, r0
 8016770:	4630      	mov	r0, r6
 8016772:	4798      	blx	r3
 8016774:	4682      	mov	sl, r0
 8016776:	b300      	cbz	r0, 80167ba <uxr_next_input_reliable_buffer_available+0x86>
 8016778:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801677c:	2101      	movs	r1, #1
 801677e:	4650      	mov	r0, sl
 8016780:	f000 fc04 	bl	8016f8c <uxr_seq_num_add>
 8016784:	8921      	ldrh	r1, [r4, #8]
 8016786:	fbb0 f2f1 	udiv	r2, r0, r1
 801678a:	4682      	mov	sl, r0
 801678c:	fb01 0212 	mls	r2, r1, r2, r0
 8016790:	e9d4 0300 	ldrd	r0, r3, [r4]
 8016794:	b292      	uxth	r2, r2
 8016796:	fbb3 f3f1 	udiv	r3, r3, r1
 801679a:	fb02 f303 	mul.w	r3, r2, r3
 801679e:	3304      	adds	r3, #4
 80167a0:	4418      	add	r0, r3
 80167a2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80167a6:	b12b      	cbz	r3, 80167b4 <uxr_next_input_reliable_buffer_available+0x80>
 80167a8:	6923      	ldr	r3, [r4, #16]
 80167aa:	4798      	blx	r3
 80167ac:	2802      	cmp	r0, #2
 80167ae:	d01b      	beq.n	80167e8 <uxr_next_input_reliable_buffer_available+0xb4>
 80167b0:	2801      	cmp	r0, #1
 80167b2:	d0e3      	beq.n	801677c <uxr_next_input_reliable_buffer_available+0x48>
 80167b4:	2000      	movs	r0, #0
 80167b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167ba:	464a      	mov	r2, r9
 80167bc:	4631      	mov	r1, r6
 80167be:	4638      	mov	r0, r7
 80167c0:	f7f4 fed6 	bl	800b570 <ucdr_init_buffer>
 80167c4:	8921      	ldrh	r1, [r4, #8]
 80167c6:	fbb5 f2f1 	udiv	r2, r5, r1
 80167ca:	fb01 5212 	mls	r2, r1, r2, r5
 80167ce:	b292      	uxth	r2, r2
 80167d0:	6863      	ldr	r3, [r4, #4]
 80167d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80167d6:	fb02 f303 	mul.w	r3, r2, r3
 80167da:	6822      	ldr	r2, [r4, #0]
 80167dc:	f842 a003 	str.w	sl, [r2, r3]
 80167e0:	2001      	movs	r0, #1
 80167e2:	81a5      	strh	r5, [r4, #12]
 80167e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167e8:	8920      	ldrh	r0, [r4, #8]
 80167ea:	fbb5 f3f0 	udiv	r3, r5, r0
 80167ee:	fb00 5513 	mls	r5, r0, r3, r5
 80167f2:	b2ad      	uxth	r5, r5
 80167f4:	6863      	ldr	r3, [r4, #4]
 80167f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80167fa:	fb03 f505 	mul.w	r5, r3, r5
 80167fe:	6823      	ldr	r3, [r4, #0]
 8016800:	2000      	movs	r0, #0
 8016802:	5158      	str	r0, [r3, r5]
 8016804:	eb06 0108 	add.w	r1, r6, r8
 8016808:	eba9 0208 	sub.w	r2, r9, r8
 801680c:	4638      	mov	r0, r7
 801680e:	f7f4 feaf 	bl	800b570 <ucdr_init_buffer>
 8016812:	4638      	mov	r0, r7
 8016814:	4903      	ldr	r1, [pc, #12]	@ (8016824 <uxr_next_input_reliable_buffer_available+0xf0>)
 8016816:	4622      	mov	r2, r4
 8016818:	f7f4 fe7e 	bl	800b518 <ucdr_set_on_full_buffer_callback>
 801681c:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8016820:	2001      	movs	r0, #1
 8016822:	e7c8      	b.n	80167b6 <uxr_next_input_reliable_buffer_available+0x82>
 8016824:	08016529 	.word	0x08016529

08016828 <uxr_process_heartbeat>:
 8016828:	b538      	push	{r3, r4, r5, lr}
 801682a:	4611      	mov	r1, r2
 801682c:	4604      	mov	r4, r0
 801682e:	89c0      	ldrh	r0, [r0, #14]
 8016830:	4615      	mov	r5, r2
 8016832:	f000 fbb3 	bl	8016f9c <uxr_seq_num_cmp>
 8016836:	2800      	cmp	r0, #0
 8016838:	bfb8      	it	lt
 801683a:	81e5      	strhlt	r5, [r4, #14]
 801683c:	bd38      	pop	{r3, r4, r5, pc}
 801683e:	bf00      	nop

08016840 <uxr_compute_acknack>:
 8016840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016844:	8903      	ldrh	r3, [r0, #8]
 8016846:	8985      	ldrh	r5, [r0, #12]
 8016848:	4604      	mov	r4, r0
 801684a:	460e      	mov	r6, r1
 801684c:	b1d3      	cbz	r3, 8016884 <uxr_compute_acknack+0x44>
 801684e:	4628      	mov	r0, r5
 8016850:	2701      	movs	r7, #1
 8016852:	e003      	b.n	801685c <uxr_compute_acknack+0x1c>
 8016854:	4567      	cmp	r7, ip
 8016856:	d215      	bcs.n	8016884 <uxr_compute_acknack+0x44>
 8016858:	89a0      	ldrh	r0, [r4, #12]
 801685a:	3701      	adds	r7, #1
 801685c:	b2b9      	uxth	r1, r7
 801685e:	f000 fb95 	bl	8016f8c <uxr_seq_num_add>
 8016862:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016866:	fbb0 f3fc 	udiv	r3, r0, ip
 801686a:	fb0c 0313 	mls	r3, ip, r3, r0
 801686e:	b29a      	uxth	r2, r3
 8016870:	e9d4 1300 	ldrd	r1, r3, [r4]
 8016874:	fbb3 f3fc 	udiv	r3, r3, ip
 8016878:	fb02 f303 	mul.w	r3, r2, r3
 801687c:	58cb      	ldr	r3, [r1, r3]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d1e8      	bne.n	8016854 <uxr_compute_acknack+0x14>
 8016882:	4605      	mov	r5, r0
 8016884:	8035      	strh	r5, [r6, #0]
 8016886:	2101      	movs	r1, #1
 8016888:	4628      	mov	r0, r5
 801688a:	89e7      	ldrh	r7, [r4, #14]
 801688c:	f000 fb82 	bl	8016f94 <uxr_seq_num_sub>
 8016890:	4601      	mov	r1, r0
 8016892:	4638      	mov	r0, r7
 8016894:	f000 fb7e 	bl	8016f94 <uxr_seq_num_sub>
 8016898:	4605      	mov	r5, r0
 801689a:	b318      	cbz	r0, 80168e4 <uxr_compute_acknack+0xa4>
 801689c:	f04f 0900 	mov.w	r9, #0
 80168a0:	464f      	mov	r7, r9
 80168a2:	f04f 0801 	mov.w	r8, #1
 80168a6:	fa1f f189 	uxth.w	r1, r9
 80168aa:	8830      	ldrh	r0, [r6, #0]
 80168ac:	f000 fb6e 	bl	8016f8c <uxr_seq_num_add>
 80168b0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80168b4:	fbb0 f3fc 	udiv	r3, r0, ip
 80168b8:	e9d4 1200 	ldrd	r1, r2, [r4]
 80168bc:	fb03 001c 	mls	r0, r3, ip, r0
 80168c0:	b283      	uxth	r3, r0
 80168c2:	fbb2 f2fc 	udiv	r2, r2, ip
 80168c6:	fb02 f303 	mul.w	r3, r2, r3
 80168ca:	fa08 f209 	lsl.w	r2, r8, r9
 80168ce:	58cb      	ldr	r3, [r1, r3]
 80168d0:	f109 0901 	add.w	r9, r9, #1
 80168d4:	b90b      	cbnz	r3, 80168da <uxr_compute_acknack+0x9a>
 80168d6:	4317      	orrs	r7, r2
 80168d8:	b2bf      	uxth	r7, r7
 80168da:	454d      	cmp	r5, r9
 80168dc:	d1e3      	bne.n	80168a6 <uxr_compute_acknack+0x66>
 80168de:	4638      	mov	r0, r7
 80168e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168e4:	4607      	mov	r7, r0
 80168e6:	4638      	mov	r0, r7
 80168e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080168ec <uxr_init_output_best_effort_stream>:
 80168ec:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80168f0:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80168f4:	6001      	str	r1, [r0, #0]
 80168f6:	7303      	strb	r3, [r0, #12]
 80168f8:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80168fc:	4770      	bx	lr
 80168fe:	bf00      	nop

08016900 <uxr_reset_output_best_effort_stream>:
 8016900:	7b02      	ldrb	r2, [r0, #12]
 8016902:	6042      	str	r2, [r0, #4]
 8016904:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016908:	81c3      	strh	r3, [r0, #14]
 801690a:	4770      	bx	lr

0801690c <uxr_prepare_best_effort_buffer_to_write>:
 801690c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801690e:	4604      	mov	r4, r0
 8016910:	b083      	sub	sp, #12
 8016912:	6840      	ldr	r0, [r0, #4]
 8016914:	460d      	mov	r5, r1
 8016916:	4616      	mov	r6, r2
 8016918:	f7fb f844 	bl	80119a4 <uxr_submessage_padding>
 801691c:	6863      	ldr	r3, [r4, #4]
 801691e:	4418      	add	r0, r3
 8016920:	68a3      	ldr	r3, [r4, #8]
 8016922:	1942      	adds	r2, r0, r5
 8016924:	4293      	cmp	r3, r2
 8016926:	bf2c      	ite	cs
 8016928:	2701      	movcs	r7, #1
 801692a:	2700      	movcc	r7, #0
 801692c:	d202      	bcs.n	8016934 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801692e:	4638      	mov	r0, r7
 8016930:	b003      	add	sp, #12
 8016932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016934:	9000      	str	r0, [sp, #0]
 8016936:	6821      	ldr	r1, [r4, #0]
 8016938:	4630      	mov	r0, r6
 801693a:	2300      	movs	r3, #0
 801693c:	f7f4 fe06 	bl	800b54c <ucdr_init_buffer_origin_offset>
 8016940:	6861      	ldr	r1, [r4, #4]
 8016942:	4638      	mov	r0, r7
 8016944:	4429      	add	r1, r5
 8016946:	6061      	str	r1, [r4, #4]
 8016948:	b003      	add	sp, #12
 801694a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801694c <uxr_prepare_best_effort_buffer_to_send>:
 801694c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016950:	4604      	mov	r4, r0
 8016952:	461d      	mov	r5, r3
 8016954:	6840      	ldr	r0, [r0, #4]
 8016956:	7b23      	ldrb	r3, [r4, #12]
 8016958:	4298      	cmp	r0, r3
 801695a:	bf8c      	ite	hi
 801695c:	2601      	movhi	r6, #1
 801695e:	2600      	movls	r6, #0
 8016960:	d802      	bhi.n	8016968 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8016962:	4630      	mov	r0, r6
 8016964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016968:	4688      	mov	r8, r1
 801696a:	89e0      	ldrh	r0, [r4, #14]
 801696c:	2101      	movs	r1, #1
 801696e:	4617      	mov	r7, r2
 8016970:	f000 fb0c 	bl	8016f8c <uxr_seq_num_add>
 8016974:	6823      	ldr	r3, [r4, #0]
 8016976:	81e0      	strh	r0, [r4, #14]
 8016978:	8028      	strh	r0, [r5, #0]
 801697a:	f8c8 3000 	str.w	r3, [r8]
 801697e:	6863      	ldr	r3, [r4, #4]
 8016980:	603b      	str	r3, [r7, #0]
 8016982:	7b23      	ldrb	r3, [r4, #12]
 8016984:	6063      	str	r3, [r4, #4]
 8016986:	4630      	mov	r0, r6
 8016988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801698c <on_full_output_buffer>:
 801698c:	b538      	push	{r3, r4, r5, lr}
 801698e:	6802      	ldr	r2, [r0, #0]
 8016990:	460c      	mov	r4, r1
 8016992:	6809      	ldr	r1, [r1, #0]
 8016994:	8923      	ldrh	r3, [r4, #8]
 8016996:	eba2 0c01 	sub.w	ip, r2, r1
 801699a:	6862      	ldr	r2, [r4, #4]
 801699c:	fbb2 f2f3 	udiv	r2, r2, r3
 80169a0:	fbbc fcf2 	udiv	ip, ip, r2
 80169a4:	f10c 0c01 	add.w	ip, ip, #1
 80169a8:	fa1f fc8c 	uxth.w	ip, ip
 80169ac:	fbbc fef3 	udiv	lr, ip, r3
 80169b0:	fb03 c31e 	mls	r3, r3, lr, ip
 80169b4:	b29b      	uxth	r3, r3
 80169b6:	fb02 f303 	mul.w	r3, r2, r3
 80169ba:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80169be:	58ca      	ldr	r2, [r1, r3]
 80169c0:	4463      	add	r3, ip
 80169c2:	eba2 020c 	sub.w	r2, r2, ip
 80169c6:	3308      	adds	r3, #8
 80169c8:	4605      	mov	r5, r0
 80169ca:	4419      	add	r1, r3
 80169cc:	3a04      	subs	r2, #4
 80169ce:	6903      	ldr	r3, [r0, #16]
 80169d0:	f7f4 fdc6 	bl	800b560 <ucdr_init_buffer_origin>
 80169d4:	4628      	mov	r0, r5
 80169d6:	4903      	ldr	r1, [pc, #12]	@ (80169e4 <on_full_output_buffer+0x58>)
 80169d8:	4622      	mov	r2, r4
 80169da:	f7f4 fd9d 	bl	800b518 <ucdr_set_on_full_buffer_callback>
 80169de:	2000      	movs	r0, #0
 80169e0:	bd38      	pop	{r3, r4, r5, pc}
 80169e2:	bf00      	nop
 80169e4:	0801698d 	.word	0x0801698d

080169e8 <uxr_init_output_reliable_stream>:
 80169e8:	b410      	push	{r4}
 80169ea:	f89d c004 	ldrb.w	ip, [sp, #4]
 80169ee:	8103      	strh	r3, [r0, #8]
 80169f0:	e9c0 1200 	strd	r1, r2, [r0]
 80169f4:	f880 c00c 	strb.w	ip, [r0, #12]
 80169f8:	b1d3      	cbz	r3, 8016a30 <uxr_init_output_reliable_stream+0x48>
 80169fa:	f8c1 c000 	str.w	ip, [r1]
 80169fe:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016a02:	f1bc 0f01 	cmp.w	ip, #1
 8016a06:	d913      	bls.n	8016a30 <uxr_init_output_reliable_stream+0x48>
 8016a08:	2301      	movs	r3, #1
 8016a0a:	fbb3 f1fc 	udiv	r1, r3, ip
 8016a0e:	fb0c 3111 	mls	r1, ip, r1, r3
 8016a12:	b289      	uxth	r1, r1
 8016a14:	6842      	ldr	r2, [r0, #4]
 8016a16:	6804      	ldr	r4, [r0, #0]
 8016a18:	fbb2 f2fc 	udiv	r2, r2, ip
 8016a1c:	fb01 f202 	mul.w	r2, r1, r2
 8016a20:	7b01      	ldrb	r1, [r0, #12]
 8016a22:	50a1      	str	r1, [r4, r2]
 8016a24:	3301      	adds	r3, #1
 8016a26:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016a2a:	b29b      	uxth	r3, r3
 8016a2c:	459c      	cmp	ip, r3
 8016a2e:	d8ec      	bhi.n	8016a0a <uxr_init_output_reliable_stream+0x22>
 8016a30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016a34:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016a38:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016a3c:	4905      	ldr	r1, [pc, #20]	@ (8016a54 <uxr_init_output_reliable_stream+0x6c>)
 8016a3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a42:	f8c0 100e 	str.w	r1, [r0, #14]
 8016a46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016a4a:	2300      	movs	r3, #0
 8016a4c:	8242      	strh	r2, [r0, #18]
 8016a4e:	8403      	strh	r3, [r0, #32]
 8016a50:	4770      	bx	lr
 8016a52:	bf00      	nop
 8016a54:	ffff0000 	.word	0xffff0000

08016a58 <uxr_reset_output_reliable_stream>:
 8016a58:	8901      	ldrh	r1, [r0, #8]
 8016a5a:	b1b1      	cbz	r1, 8016a8a <uxr_reset_output_reliable_stream+0x32>
 8016a5c:	f04f 0c00 	mov.w	ip, #0
 8016a60:	4663      	mov	r3, ip
 8016a62:	fbb3 f2f1 	udiv	r2, r3, r1
 8016a66:	fb01 3312 	mls	r3, r1, r2, r3
 8016a6a:	b29b      	uxth	r3, r3
 8016a6c:	6842      	ldr	r2, [r0, #4]
 8016a6e:	fbb2 f2f1 	udiv	r2, r2, r1
 8016a72:	6801      	ldr	r1, [r0, #0]
 8016a74:	fb02 f303 	mul.w	r3, r2, r3
 8016a78:	7b02      	ldrb	r2, [r0, #12]
 8016a7a:	50ca      	str	r2, [r1, r3]
 8016a7c:	f10c 0c01 	add.w	ip, ip, #1
 8016a80:	8901      	ldrh	r1, [r0, #8]
 8016a82:	fa1f f38c 	uxth.w	r3, ip
 8016a86:	4299      	cmp	r1, r3
 8016a88:	d8eb      	bhi.n	8016a62 <uxr_reset_output_reliable_stream+0xa>
 8016a8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016a8e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016a92:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016a96:	4904      	ldr	r1, [pc, #16]	@ (8016aa8 <uxr_reset_output_reliable_stream+0x50>)
 8016a98:	f8c0 100e 	str.w	r1, [r0, #14]
 8016a9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016aa0:	2300      	movs	r3, #0
 8016aa2:	8242      	strh	r2, [r0, #18]
 8016aa4:	8403      	strh	r3, [r0, #32]
 8016aa6:	4770      	bx	lr
 8016aa8:	ffff0000 	.word	0xffff0000

08016aac <uxr_prepare_reliable_buffer_to_write>:
 8016aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ab0:	4604      	mov	r4, r0
 8016ab2:	b091      	sub	sp, #68	@ 0x44
 8016ab4:	8900      	ldrh	r0, [r0, #8]
 8016ab6:	89e6      	ldrh	r6, [r4, #14]
 8016ab8:	6823      	ldr	r3, [r4, #0]
 8016aba:	9204      	str	r2, [sp, #16]
 8016abc:	fbb6 f2f0 	udiv	r2, r6, r0
 8016ac0:	fb00 6212 	mls	r2, r0, r2, r6
 8016ac4:	b292      	uxth	r2, r2
 8016ac6:	6865      	ldr	r5, [r4, #4]
 8016ac8:	fbb5 f5f0 	udiv	r5, r5, r0
 8016acc:	fb05 3202 	mla	r2, r5, r2, r3
 8016ad0:	3204      	adds	r2, #4
 8016ad2:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8016ad6:	f894 900c 	ldrb.w	r9, [r4, #12]
 8016ada:	9203      	str	r2, [sp, #12]
 8016adc:	468b      	mov	fp, r1
 8016ade:	1f2f      	subs	r7, r5, #4
 8016ae0:	2800      	cmp	r0, #0
 8016ae2:	f000 814c 	beq.w	8016d7e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8016ae6:	f04f 0c00 	mov.w	ip, #0
 8016aea:	46e2      	mov	sl, ip
 8016aec:	4661      	mov	r1, ip
 8016aee:	fbb1 f2f0 	udiv	r2, r1, r0
 8016af2:	fb00 1212 	mls	r2, r0, r2, r1
 8016af6:	b292      	uxth	r2, r2
 8016af8:	fb05 f202 	mul.w	r2, r5, r2
 8016afc:	f10c 0c01 	add.w	ip, ip, #1
 8016b00:	589a      	ldr	r2, [r3, r2]
 8016b02:	454a      	cmp	r2, r9
 8016b04:	bf08      	it	eq
 8016b06:	f10a 0a01 	addeq.w	sl, sl, #1
 8016b0a:	fa1f f18c 	uxth.w	r1, ip
 8016b0e:	bf08      	it	eq
 8016b10:	fa1f fa8a 	uxtheq.w	sl, sl
 8016b14:	4281      	cmp	r1, r0
 8016b16:	d3ea      	bcc.n	8016aee <uxr_prepare_reliable_buffer_to_write+0x42>
 8016b18:	4640      	mov	r0, r8
 8016b1a:	2104      	movs	r1, #4
 8016b1c:	f8cd a014 	str.w	sl, [sp, #20]
 8016b20:	f7f4 fd2a 	bl	800b578 <ucdr_alignment>
 8016b24:	4480      	add	r8, r0
 8016b26:	eb08 020b 	add.w	r2, r8, fp
 8016b2a:	42ba      	cmp	r2, r7
 8016b2c:	f240 80cd 	bls.w	8016cca <uxr_prepare_reliable_buffer_to_write+0x21e>
 8016b30:	7b22      	ldrb	r2, [r4, #12]
 8016b32:	445a      	add	r2, fp
 8016b34:	42ba      	cmp	r2, r7
 8016b36:	f240 80b5 	bls.w	8016ca4 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8016b3a:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8016b3e:	33fc      	adds	r3, #252	@ 0xfc
 8016b40:	b2ba      	uxth	r2, r7
 8016b42:	4413      	add	r3, r2
 8016b44:	b29b      	uxth	r3, r3
 8016b46:	fb0a f903 	mul.w	r9, sl, r3
 8016b4a:	45d9      	cmp	r9, fp
 8016b4c:	9305      	str	r3, [sp, #20]
 8016b4e:	9306      	str	r3, [sp, #24]
 8016b50:	f0c0 80b7 	bcc.w	8016cc2 <uxr_prepare_reliable_buffer_to_write+0x216>
 8016b54:	f108 0304 	add.w	r3, r8, #4
 8016b58:	42bb      	cmp	r3, r7
 8016b5a:	f080 80db 	bcs.w	8016d14 <uxr_prepare_reliable_buffer_to_write+0x268>
 8016b5e:	f1a2 0904 	sub.w	r9, r2, #4
 8016b62:	eba9 0908 	sub.w	r9, r9, r8
 8016b66:	9b05      	ldr	r3, [sp, #20]
 8016b68:	fa1f f989 	uxth.w	r9, r9
 8016b6c:	ebab 0b09 	sub.w	fp, fp, r9
 8016b70:	fbbb f2f3 	udiv	r2, fp, r3
 8016b74:	fb03 b312 	mls	r3, r3, r2, fp
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	f000 80c8 	beq.w	8016d0e <uxr_prepare_reliable_buffer_to_write+0x262>
 8016b7e:	3201      	adds	r2, #1
 8016b80:	b292      	uxth	r2, r2
 8016b82:	9306      	str	r3, [sp, #24]
 8016b84:	4552      	cmp	r2, sl
 8016b86:	f200 809c 	bhi.w	8016cc2 <uxr_prepare_reliable_buffer_to_write+0x216>
 8016b8a:	f10d 0b20 	add.w	fp, sp, #32
 8016b8e:	2a00      	cmp	r2, #0
 8016b90:	d042      	beq.n	8016c18 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8016b92:	f8cd 801c 	str.w	r8, [sp, #28]
 8016b96:	f04f 0a00 	mov.w	sl, #0
 8016b9a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016b9e:	9505      	str	r5, [sp, #20]
 8016ba0:	f10d 0b20 	add.w	fp, sp, #32
 8016ba4:	4615      	mov	r5, r2
 8016ba6:	e000      	b.n	8016baa <uxr_prepare_reliable_buffer_to_write+0xfe>
 8016ba8:	46c1      	mov	r9, r8
 8016baa:	8920      	ldrh	r0, [r4, #8]
 8016bac:	fbb6 f2f0 	udiv	r2, r6, r0
 8016bb0:	fb00 6112 	mls	r1, r0, r2, r6
 8016bb4:	b28a      	uxth	r2, r1
 8016bb6:	6863      	ldr	r3, [r4, #4]
 8016bb8:	fbb3 f1f0 	udiv	r1, r3, r0
 8016bbc:	6823      	ldr	r3, [r4, #0]
 8016bbe:	fb02 f101 	mul.w	r1, r2, r1
 8016bc2:	3104      	adds	r1, #4
 8016bc4:	4419      	add	r1, r3
 8016bc6:	4658      	mov	r0, fp
 8016bc8:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8016bcc:	9200      	str	r2, [sp, #0]
 8016bce:	2300      	movs	r3, #0
 8016bd0:	463a      	mov	r2, r7
 8016bd2:	f7f4 fcbb 	bl	800b54c <ucdr_init_buffer_origin_offset>
 8016bd6:	464a      	mov	r2, r9
 8016bd8:	2300      	movs	r3, #0
 8016bda:	210d      	movs	r1, #13
 8016bdc:	4658      	mov	r0, fp
 8016bde:	f7fa fea1 	bl	8011924 <uxr_buffer_submessage_header>
 8016be2:	8921      	ldrh	r1, [r4, #8]
 8016be4:	fbb6 f2f1 	udiv	r2, r6, r1
 8016be8:	fb01 6212 	mls	r2, r1, r2, r6
 8016bec:	b292      	uxth	r2, r2
 8016bee:	6863      	ldr	r3, [r4, #4]
 8016bf0:	fbb3 f3f1 	udiv	r3, r3, r1
 8016bf4:	fb02 f303 	mul.w	r3, r2, r3
 8016bf8:	6822      	ldr	r2, [r4, #0]
 8016bfa:	4630      	mov	r0, r6
 8016bfc:	50d7      	str	r7, [r2, r3]
 8016bfe:	2101      	movs	r1, #1
 8016c00:	f000 f9c4 	bl	8016f8c <uxr_seq_num_add>
 8016c04:	f10a 0a01 	add.w	sl, sl, #1
 8016c08:	fa1f f38a 	uxth.w	r3, sl
 8016c0c:	429d      	cmp	r5, r3
 8016c0e:	4606      	mov	r6, r0
 8016c10:	d8ca      	bhi.n	8016ba8 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8016c12:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8016c16:	9d05      	ldr	r5, [sp, #20]
 8016c18:	8920      	ldrh	r0, [r4, #8]
 8016c1a:	fbb6 f3f0 	udiv	r3, r6, r0
 8016c1e:	fb00 6313 	mls	r3, r0, r3, r6
 8016c22:	b299      	uxth	r1, r3
 8016c24:	6863      	ldr	r3, [r4, #4]
 8016c26:	fbb3 f3f0 	udiv	r3, r3, r0
 8016c2a:	fb01 f303 	mul.w	r3, r1, r3
 8016c2e:	6821      	ldr	r1, [r4, #0]
 8016c30:	3304      	adds	r3, #4
 8016c32:	4419      	add	r1, r3
 8016c34:	463a      	mov	r2, r7
 8016c36:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8016c3a:	9000      	str	r0, [sp, #0]
 8016c3c:	2300      	movs	r3, #0
 8016c3e:	4658      	mov	r0, fp
 8016c40:	f7f4 fc84 	bl	800b54c <ucdr_init_buffer_origin_offset>
 8016c44:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8016c48:	4658      	mov	r0, fp
 8016c4a:	fa1f f289 	uxth.w	r2, r9
 8016c4e:	2302      	movs	r3, #2
 8016c50:	210d      	movs	r1, #13
 8016c52:	f7fa fe67 	bl	8011924 <uxr_buffer_submessage_header>
 8016c56:	9b03      	ldr	r3, [sp, #12]
 8016c58:	8927      	ldrh	r7, [r4, #8]
 8016c5a:	7b20      	ldrb	r0, [r4, #12]
 8016c5c:	f108 0104 	add.w	r1, r8, #4
 8016c60:	440b      	add	r3, r1
 8016c62:	4619      	mov	r1, r3
 8016c64:	fbb6 f3f7 	udiv	r3, r6, r7
 8016c68:	fb07 6313 	mls	r3, r7, r3, r6
 8016c6c:	f1a5 0208 	sub.w	r2, r5, #8
 8016c70:	b29d      	uxth	r5, r3
 8016c72:	3004      	adds	r0, #4
 8016c74:	6863      	ldr	r3, [r4, #4]
 8016c76:	fbb3 f3f7 	udiv	r3, r3, r7
 8016c7a:	fb05 f303 	mul.w	r3, r5, r3
 8016c7e:	6825      	ldr	r5, [r4, #0]
 8016c80:	4448      	add	r0, r9
 8016c82:	50e8      	str	r0, [r5, r3]
 8016c84:	9d04      	ldr	r5, [sp, #16]
 8016c86:	eba2 0208 	sub.w	r2, r2, r8
 8016c8a:	4628      	mov	r0, r5
 8016c8c:	f7f4 fc70 	bl	800b570 <ucdr_init_buffer>
 8016c90:	4628      	mov	r0, r5
 8016c92:	493c      	ldr	r1, [pc, #240]	@ (8016d84 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8016c94:	4622      	mov	r2, r4
 8016c96:	f7f4 fc3f 	bl	800b518 <ucdr_set_on_full_buffer_callback>
 8016c9a:	2001      	movs	r0, #1
 8016c9c:	81e6      	strh	r6, [r4, #14]
 8016c9e:	b011      	add	sp, #68	@ 0x44
 8016ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ca4:	2101      	movs	r1, #1
 8016ca6:	89e0      	ldrh	r0, [r4, #14]
 8016ca8:	f000 f970 	bl	8016f8c <uxr_seq_num_add>
 8016cac:	8921      	ldrh	r1, [r4, #8]
 8016cae:	4605      	mov	r5, r0
 8016cb0:	8a60      	ldrh	r0, [r4, #18]
 8016cb2:	f000 f96b 	bl	8016f8c <uxr_seq_num_add>
 8016cb6:	4601      	mov	r1, r0
 8016cb8:	4628      	mov	r0, r5
 8016cba:	f000 f96f 	bl	8016f9c <uxr_seq_num_cmp>
 8016cbe:	2800      	cmp	r0, #0
 8016cc0:	dd42      	ble.n	8016d48 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8016cc2:	2000      	movs	r0, #0
 8016cc4:	b011      	add	sp, #68	@ 0x44
 8016cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cca:	8921      	ldrh	r1, [r4, #8]
 8016ccc:	8a60      	ldrh	r0, [r4, #18]
 8016cce:	9205      	str	r2, [sp, #20]
 8016cd0:	f000 f95c 	bl	8016f8c <uxr_seq_num_add>
 8016cd4:	4601      	mov	r1, r0
 8016cd6:	4630      	mov	r0, r6
 8016cd8:	f000 f960 	bl	8016f9c <uxr_seq_num_cmp>
 8016cdc:	2800      	cmp	r0, #0
 8016cde:	9a05      	ldr	r2, [sp, #20]
 8016ce0:	dcef      	bgt.n	8016cc2 <uxr_prepare_reliable_buffer_to_write+0x216>
 8016ce2:	8927      	ldrh	r7, [r4, #8]
 8016ce4:	fbb6 f3f7 	udiv	r3, r6, r7
 8016ce8:	fb07 6313 	mls	r3, r7, r3, r6
 8016cec:	b29d      	uxth	r5, r3
 8016cee:	6863      	ldr	r3, [r4, #4]
 8016cf0:	6824      	ldr	r4, [r4, #0]
 8016cf2:	fbb3 f3f7 	udiv	r3, r3, r7
 8016cf6:	fb05 f303 	mul.w	r3, r5, r3
 8016cfa:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8016cfe:	50e2      	str	r2, [r4, r3]
 8016d00:	2300      	movs	r3, #0
 8016d02:	f8cd 8000 	str.w	r8, [sp]
 8016d06:	f7f4 fc21 	bl	800b54c <ucdr_init_buffer_origin_offset>
 8016d0a:	2001      	movs	r0, #1
 8016d0c:	e7da      	b.n	8016cc4 <uxr_prepare_reliable_buffer_to_write+0x218>
 8016d0e:	b293      	uxth	r3, r2
 8016d10:	461a      	mov	r2, r3
 8016d12:	e737      	b.n	8016b84 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8016d14:	4630      	mov	r0, r6
 8016d16:	2101      	movs	r1, #1
 8016d18:	9207      	str	r2, [sp, #28]
 8016d1a:	f000 f937 	bl	8016f8c <uxr_seq_num_add>
 8016d1e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016d22:	fbb0 f1fc 	udiv	r1, r0, ip
 8016d26:	fb0c 0111 	mls	r1, ip, r1, r0
 8016d2a:	4606      	mov	r6, r0
 8016d2c:	b288      	uxth	r0, r1
 8016d2e:	6863      	ldr	r3, [r4, #4]
 8016d30:	fbb3 f1fc 	udiv	r1, r3, ip
 8016d34:	6823      	ldr	r3, [r4, #0]
 8016d36:	9a07      	ldr	r2, [sp, #28]
 8016d38:	fb00 f101 	mul.w	r1, r0, r1
 8016d3c:	3104      	adds	r1, #4
 8016d3e:	440b      	add	r3, r1
 8016d40:	9303      	str	r3, [sp, #12]
 8016d42:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8016d46:	e70a      	b.n	8016b5e <uxr_prepare_reliable_buffer_to_write+0xb2>
 8016d48:	8921      	ldrh	r1, [r4, #8]
 8016d4a:	fbb5 f3f1 	udiv	r3, r5, r1
 8016d4e:	fb01 5313 	mls	r3, r1, r3, r5
 8016d52:	b29a      	uxth	r2, r3
 8016d54:	6863      	ldr	r3, [r4, #4]
 8016d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8016d5a:	6821      	ldr	r1, [r4, #0]
 8016d5c:	9804      	ldr	r0, [sp, #16]
 8016d5e:	fb02 f303 	mul.w	r3, r2, r3
 8016d62:	3304      	adds	r3, #4
 8016d64:	7b22      	ldrb	r2, [r4, #12]
 8016d66:	4419      	add	r1, r3
 8016d68:	445a      	add	r2, fp
 8016d6a:	f841 2c04 	str.w	r2, [r1, #-4]
 8016d6e:	7b23      	ldrb	r3, [r4, #12]
 8016d70:	9300      	str	r3, [sp, #0]
 8016d72:	2300      	movs	r3, #0
 8016d74:	f7f4 fbea 	bl	800b54c <ucdr_init_buffer_origin_offset>
 8016d78:	81e5      	strh	r5, [r4, #14]
 8016d7a:	2001      	movs	r0, #1
 8016d7c:	e7a2      	b.n	8016cc4 <uxr_prepare_reliable_buffer_to_write+0x218>
 8016d7e:	4682      	mov	sl, r0
 8016d80:	e6ca      	b.n	8016b18 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8016d82:	bf00      	nop
 8016d84:	0801698d 	.word	0x0801698d

08016d88 <uxr_prepare_next_reliable_buffer_to_send>:
 8016d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d8a:	4604      	mov	r4, r0
 8016d8c:	460f      	mov	r7, r1
 8016d8e:	8a00      	ldrh	r0, [r0, #16]
 8016d90:	2101      	movs	r1, #1
 8016d92:	4616      	mov	r6, r2
 8016d94:	461d      	mov	r5, r3
 8016d96:	f000 f8f9 	bl	8016f8c <uxr_seq_num_add>
 8016d9a:	8028      	strh	r0, [r5, #0]
 8016d9c:	8922      	ldrh	r2, [r4, #8]
 8016d9e:	fbb0 f3f2 	udiv	r3, r0, r2
 8016da2:	fb02 0c13 	mls	ip, r2, r3, r0
 8016da6:	fa1f fc8c 	uxth.w	ip, ip
 8016daa:	6863      	ldr	r3, [r4, #4]
 8016dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8016db0:	fb0c fc03 	mul.w	ip, ip, r3
 8016db4:	6823      	ldr	r3, [r4, #0]
 8016db6:	89e1      	ldrh	r1, [r4, #14]
 8016db8:	f10c 0c04 	add.w	ip, ip, #4
 8016dbc:	4463      	add	r3, ip
 8016dbe:	603b      	str	r3, [r7, #0]
 8016dc0:	6823      	ldr	r3, [r4, #0]
 8016dc2:	449c      	add	ip, r3
 8016dc4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8016dc8:	6033      	str	r3, [r6, #0]
 8016dca:	f000 f8e7 	bl	8016f9c <uxr_seq_num_cmp>
 8016dce:	2800      	cmp	r0, #0
 8016dd0:	dd01      	ble.n	8016dd6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8016dd2:	2000      	movs	r0, #0
 8016dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dd6:	7b23      	ldrb	r3, [r4, #12]
 8016dd8:	6832      	ldr	r2, [r6, #0]
 8016dda:	429a      	cmp	r2, r3
 8016ddc:	d9f9      	bls.n	8016dd2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016dde:	8a61      	ldrh	r1, [r4, #18]
 8016de0:	8a20      	ldrh	r0, [r4, #16]
 8016de2:	f000 f8d7 	bl	8016f94 <uxr_seq_num_sub>
 8016de6:	8923      	ldrh	r3, [r4, #8]
 8016de8:	4283      	cmp	r3, r0
 8016dea:	d0f2      	beq.n	8016dd2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016dec:	8828      	ldrh	r0, [r5, #0]
 8016dee:	89e3      	ldrh	r3, [r4, #14]
 8016df0:	8220      	strh	r0, [r4, #16]
 8016df2:	4298      	cmp	r0, r3
 8016df4:	d001      	beq.n	8016dfa <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8016df6:	2001      	movs	r0, #1
 8016df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dfa:	2101      	movs	r1, #1
 8016dfc:	f000 f8c6 	bl	8016f8c <uxr_seq_num_add>
 8016e00:	81e0      	strh	r0, [r4, #14]
 8016e02:	2001      	movs	r0, #1
 8016e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e06:	bf00      	nop

08016e08 <uxr_update_output_stream_heartbeat_timestamp>:
 8016e08:	b570      	push	{r4, r5, r6, lr}
 8016e0a:	8a01      	ldrh	r1, [r0, #16]
 8016e0c:	4604      	mov	r4, r0
 8016e0e:	8a40      	ldrh	r0, [r0, #18]
 8016e10:	4615      	mov	r5, r2
 8016e12:	461e      	mov	r6, r3
 8016e14:	f000 f8c2 	bl	8016f9c <uxr_seq_num_cmp>
 8016e18:	2800      	cmp	r0, #0
 8016e1a:	db07      	blt.n	8016e2c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8016e1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016e20:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016e24:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8016e28:	2000      	movs	r0, #0
 8016e2a:	bd70      	pop	{r4, r5, r6, pc}
 8016e2c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016e30:	b940      	cbnz	r0, 8016e44 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8016e32:	2301      	movs	r3, #1
 8016e34:	f884 3020 	strb.w	r3, [r4, #32]
 8016e38:	3564      	adds	r5, #100	@ 0x64
 8016e3a:	f146 0600 	adc.w	r6, r6, #0
 8016e3e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8016e42:	bd70      	pop	{r4, r5, r6, pc}
 8016e44:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016e48:	4295      	cmp	r5, r2
 8016e4a:	eb76 0303 	sbcs.w	r3, r6, r3
 8016e4e:	bfa5      	ittet	ge
 8016e50:	3001      	addge	r0, #1
 8016e52:	f884 0020 	strbge.w	r0, [r4, #32]
 8016e56:	2000      	movlt	r0, #0
 8016e58:	2001      	movge	r0, #1
 8016e5a:	e7ed      	b.n	8016e38 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08016e5c <uxr_begin_output_nack_buffer_it>:
 8016e5c:	8a40      	ldrh	r0, [r0, #18]
 8016e5e:	4770      	bx	lr

08016e60 <uxr_next_reliable_nack_buffer_to_send>:
 8016e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e64:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8016e68:	b082      	sub	sp, #8
 8016e6a:	f1b8 0f00 	cmp.w	r8, #0
 8016e6e:	d011      	beq.n	8016e94 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8016e70:	4604      	mov	r4, r0
 8016e72:	8818      	ldrh	r0, [r3, #0]
 8016e74:	460e      	mov	r6, r1
 8016e76:	4617      	mov	r7, r2
 8016e78:	461d      	mov	r5, r3
 8016e7a:	2101      	movs	r1, #1
 8016e7c:	f000 f886 	bl	8016f8c <uxr_seq_num_add>
 8016e80:	8028      	strh	r0, [r5, #0]
 8016e82:	8a21      	ldrh	r1, [r4, #16]
 8016e84:	f000 f88a 	bl	8016f9c <uxr_seq_num_cmp>
 8016e88:	2800      	cmp	r0, #0
 8016e8a:	dd07      	ble.n	8016e9c <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8016e8c:	f04f 0800 	mov.w	r8, #0
 8016e90:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8016e94:	4640      	mov	r0, r8
 8016e96:	b002      	add	sp, #8
 8016e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e9c:	8921      	ldrh	r1, [r4, #8]
 8016e9e:	8828      	ldrh	r0, [r5, #0]
 8016ea0:	6823      	ldr	r3, [r4, #0]
 8016ea2:	fbb0 f2f1 	udiv	r2, r0, r1
 8016ea6:	fb01 0c12 	mls	ip, r1, r2, r0
 8016eaa:	fa1f f28c 	uxth.w	r2, ip
 8016eae:	9301      	str	r3, [sp, #4]
 8016eb0:	6863      	ldr	r3, [r4, #4]
 8016eb2:	fbb3 fcf1 	udiv	ip, r3, r1
 8016eb6:	9b01      	ldr	r3, [sp, #4]
 8016eb8:	fb02 fc0c 	mul.w	ip, r2, ip
 8016ebc:	f10c 0c04 	add.w	ip, ip, #4
 8016ec0:	4463      	add	r3, ip
 8016ec2:	6033      	str	r3, [r6, #0]
 8016ec4:	6823      	ldr	r3, [r4, #0]
 8016ec6:	4463      	add	r3, ip
 8016ec8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016ecc:	603b      	str	r3, [r7, #0]
 8016ece:	7b22      	ldrb	r2, [r4, #12]
 8016ed0:	429a      	cmp	r2, r3
 8016ed2:	d0d2      	beq.n	8016e7a <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8016ed4:	4640      	mov	r0, r8
 8016ed6:	b002      	add	sp, #8
 8016ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016edc <uxr_process_acknack>:
 8016edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ede:	4604      	mov	r4, r0
 8016ee0:	460e      	mov	r6, r1
 8016ee2:	4610      	mov	r0, r2
 8016ee4:	2101      	movs	r1, #1
 8016ee6:	f000 f855 	bl	8016f94 <uxr_seq_num_sub>
 8016eea:	8a61      	ldrh	r1, [r4, #18]
 8016eec:	f000 f852 	bl	8016f94 <uxr_seq_num_sub>
 8016ef0:	b1c0      	cbz	r0, 8016f24 <uxr_process_acknack+0x48>
 8016ef2:	4605      	mov	r5, r0
 8016ef4:	2700      	movs	r7, #0
 8016ef6:	2101      	movs	r1, #1
 8016ef8:	8a60      	ldrh	r0, [r4, #18]
 8016efa:	f000 f847 	bl	8016f8c <uxr_seq_num_add>
 8016efe:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016f02:	fbb0 f1fc 	udiv	r1, r0, ip
 8016f06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016f0a:	fb0c 0111 	mls	r1, ip, r1, r0
 8016f0e:	b289      	uxth	r1, r1
 8016f10:	3701      	adds	r7, #1
 8016f12:	fbb3 f3fc 	udiv	r3, r3, ip
 8016f16:	fb01 f303 	mul.w	r3, r1, r3
 8016f1a:	42bd      	cmp	r5, r7
 8016f1c:	7b21      	ldrb	r1, [r4, #12]
 8016f1e:	8260      	strh	r0, [r4, #18]
 8016f20:	50d1      	str	r1, [r2, r3]
 8016f22:	d1e8      	bne.n	8016ef6 <uxr_process_acknack+0x1a>
 8016f24:	3e00      	subs	r6, #0
 8016f26:	f04f 0300 	mov.w	r3, #0
 8016f2a:	bf18      	it	ne
 8016f2c:	2601      	movne	r6, #1
 8016f2e:	f884 3020 	strb.w	r3, [r4, #32]
 8016f32:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8016f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016f38 <uxr_is_output_up_to_date>:
 8016f38:	8a01      	ldrh	r1, [r0, #16]
 8016f3a:	8a40      	ldrh	r0, [r0, #18]
 8016f3c:	b508      	push	{r3, lr}
 8016f3e:	f000 f82d 	bl	8016f9c <uxr_seq_num_cmp>
 8016f42:	fab0 f080 	clz	r0, r0
 8016f46:	0940      	lsrs	r0, r0, #5
 8016f48:	bd08      	pop	{r3, pc}
 8016f4a:	bf00      	nop

08016f4c <get_available_free_slots>:
 8016f4c:	8902      	ldrh	r2, [r0, #8]
 8016f4e:	b1da      	cbz	r2, 8016f88 <get_available_free_slots+0x3c>
 8016f50:	b530      	push	{r4, r5, lr}
 8016f52:	2100      	movs	r1, #0
 8016f54:	6843      	ldr	r3, [r0, #4]
 8016f56:	6805      	ldr	r5, [r0, #0]
 8016f58:	7b04      	ldrb	r4, [r0, #12]
 8016f5a:	fbb3 fef2 	udiv	lr, r3, r2
 8016f5e:	4608      	mov	r0, r1
 8016f60:	460b      	mov	r3, r1
 8016f62:	fbb3 fcf2 	udiv	ip, r3, r2
 8016f66:	fb02 331c 	mls	r3, r2, ip, r3
 8016f6a:	b29b      	uxth	r3, r3
 8016f6c:	fb0e f303 	mul.w	r3, lr, r3
 8016f70:	3101      	adds	r1, #1
 8016f72:	f855 c003 	ldr.w	ip, [r5, r3]
 8016f76:	4564      	cmp	r4, ip
 8016f78:	bf08      	it	eq
 8016f7a:	3001      	addeq	r0, #1
 8016f7c:	b28b      	uxth	r3, r1
 8016f7e:	bf08      	it	eq
 8016f80:	b280      	uxtheq	r0, r0
 8016f82:	4293      	cmp	r3, r2
 8016f84:	d3ed      	bcc.n	8016f62 <get_available_free_slots+0x16>
 8016f86:	bd30      	pop	{r4, r5, pc}
 8016f88:	4610      	mov	r0, r2
 8016f8a:	4770      	bx	lr

08016f8c <uxr_seq_num_add>:
 8016f8c:	4408      	add	r0, r1
 8016f8e:	b280      	uxth	r0, r0
 8016f90:	4770      	bx	lr
 8016f92:	bf00      	nop

08016f94 <uxr_seq_num_sub>:
 8016f94:	1a40      	subs	r0, r0, r1
 8016f96:	b280      	uxth	r0, r0
 8016f98:	4770      	bx	lr
 8016f9a:	bf00      	nop

08016f9c <uxr_seq_num_cmp>:
 8016f9c:	4288      	cmp	r0, r1
 8016f9e:	d011      	beq.n	8016fc4 <uxr_seq_num_cmp+0x28>
 8016fa0:	d309      	bcc.n	8016fb6 <uxr_seq_num_cmp+0x1a>
 8016fa2:	4288      	cmp	r0, r1
 8016fa4:	d910      	bls.n	8016fc8 <uxr_seq_num_cmp+0x2c>
 8016fa6:	1a40      	subs	r0, r0, r1
 8016fa8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8016fac:	bfd4      	ite	le
 8016fae:	2001      	movle	r0, #1
 8016fb0:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8016fb4:	4770      	bx	lr
 8016fb6:	1a0b      	subs	r3, r1, r0
 8016fb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016fbc:	daf1      	bge.n	8016fa2 <uxr_seq_num_cmp+0x6>
 8016fbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016fc2:	4770      	bx	lr
 8016fc4:	2000      	movs	r0, #0
 8016fc6:	4770      	bx	lr
 8016fc8:	2001      	movs	r0, #1
 8016fca:	4770      	bx	lr

08016fcc <rcl_get_default_domain_id>:
 8016fcc:	b530      	push	{r4, r5, lr}
 8016fce:	b083      	sub	sp, #12
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	9300      	str	r3, [sp, #0]
 8016fd4:	b1d0      	cbz	r0, 801700c <rcl_get_default_domain_id+0x40>
 8016fd6:	4604      	mov	r4, r0
 8016fd8:	4669      	mov	r1, sp
 8016fda:	4815      	ldr	r0, [pc, #84]	@ (8017030 <rcl_get_default_domain_id+0x64>)
 8016fdc:	f7f6 f8f8 	bl	800d1d0 <rcutils_get_env>
 8016fe0:	4602      	mov	r2, r0
 8016fe2:	b110      	cbz	r0, 8016fea <rcl_get_default_domain_id+0x1e>
 8016fe4:	2001      	movs	r0, #1
 8016fe6:	b003      	add	sp, #12
 8016fe8:	bd30      	pop	{r4, r5, pc}
 8016fea:	9b00      	ldr	r3, [sp, #0]
 8016fec:	b18b      	cbz	r3, 8017012 <rcl_get_default_domain_id+0x46>
 8016fee:	7818      	ldrb	r0, [r3, #0]
 8016ff0:	2800      	cmp	r0, #0
 8016ff2:	d0f8      	beq.n	8016fe6 <rcl_get_default_domain_id+0x1a>
 8016ff4:	a901      	add	r1, sp, #4
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	9201      	str	r2, [sp, #4]
 8016ffa:	f000 fa4d 	bl	8017498 <strtoul>
 8016ffe:	4605      	mov	r5, r0
 8017000:	b150      	cbz	r0, 8017018 <rcl_get_default_domain_id+0x4c>
 8017002:	1c43      	adds	r3, r0, #1
 8017004:	d00d      	beq.n	8017022 <rcl_get_default_domain_id+0x56>
 8017006:	6025      	str	r5, [r4, #0]
 8017008:	2000      	movs	r0, #0
 801700a:	e7ec      	b.n	8016fe6 <rcl_get_default_domain_id+0x1a>
 801700c:	200b      	movs	r0, #11
 801700e:	b003      	add	sp, #12
 8017010:	bd30      	pop	{r4, r5, pc}
 8017012:	4618      	mov	r0, r3
 8017014:	b003      	add	sp, #12
 8017016:	bd30      	pop	{r4, r5, pc}
 8017018:	9b01      	ldr	r3, [sp, #4]
 801701a:	781b      	ldrb	r3, [r3, #0]
 801701c:	2b00      	cmp	r3, #0
 801701e:	d0f2      	beq.n	8017006 <rcl_get_default_domain_id+0x3a>
 8017020:	e7e0      	b.n	8016fe4 <rcl_get_default_domain_id+0x18>
 8017022:	f000 fc85 	bl	8017930 <__errno>
 8017026:	6803      	ldr	r3, [r0, #0]
 8017028:	2b22      	cmp	r3, #34	@ 0x22
 801702a:	d1ec      	bne.n	8017006 <rcl_get_default_domain_id+0x3a>
 801702c:	e7da      	b.n	8016fe4 <rcl_get_default_domain_id+0x18>
 801702e:	bf00      	nop
 8017030:	080197c4 	.word	0x080197c4

08017034 <calloc>:
 8017034:	4b02      	ldr	r3, [pc, #8]	@ (8017040 <calloc+0xc>)
 8017036:	460a      	mov	r2, r1
 8017038:	4601      	mov	r1, r0
 801703a:	6818      	ldr	r0, [r3, #0]
 801703c:	f000 b802 	b.w	8017044 <_calloc_r>
 8017040:	20000338 	.word	0x20000338

08017044 <_calloc_r>:
 8017044:	b570      	push	{r4, r5, r6, lr}
 8017046:	fba1 5402 	umull	r5, r4, r1, r2
 801704a:	b93c      	cbnz	r4, 801705c <_calloc_r+0x18>
 801704c:	4629      	mov	r1, r5
 801704e:	f000 f887 	bl	8017160 <_malloc_r>
 8017052:	4606      	mov	r6, r0
 8017054:	b928      	cbnz	r0, 8017062 <_calloc_r+0x1e>
 8017056:	2600      	movs	r6, #0
 8017058:	4630      	mov	r0, r6
 801705a:	bd70      	pop	{r4, r5, r6, pc}
 801705c:	220c      	movs	r2, #12
 801705e:	6002      	str	r2, [r0, #0]
 8017060:	e7f9      	b.n	8017056 <_calloc_r+0x12>
 8017062:	462a      	mov	r2, r5
 8017064:	4621      	mov	r1, r4
 8017066:	f000 fbcf 	bl	8017808 <memset>
 801706a:	e7f5      	b.n	8017058 <_calloc_r+0x14>

0801706c <getenv>:
 801706c:	b507      	push	{r0, r1, r2, lr}
 801706e:	4b04      	ldr	r3, [pc, #16]	@ (8017080 <getenv+0x14>)
 8017070:	4601      	mov	r1, r0
 8017072:	aa01      	add	r2, sp, #4
 8017074:	6818      	ldr	r0, [r3, #0]
 8017076:	f000 f805 	bl	8017084 <_findenv_r>
 801707a:	b003      	add	sp, #12
 801707c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017080:	20000338 	.word	0x20000338

08017084 <_findenv_r>:
 8017084:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017088:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80170f8 <_findenv_r+0x74>
 801708c:	4606      	mov	r6, r0
 801708e:	4689      	mov	r9, r1
 8017090:	4617      	mov	r7, r2
 8017092:	f000 fcaf 	bl	80179f4 <__env_lock>
 8017096:	f8da 4000 	ldr.w	r4, [sl]
 801709a:	b134      	cbz	r4, 80170aa <_findenv_r+0x26>
 801709c:	464b      	mov	r3, r9
 801709e:	4698      	mov	r8, r3
 80170a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80170a4:	b13a      	cbz	r2, 80170b6 <_findenv_r+0x32>
 80170a6:	2a3d      	cmp	r2, #61	@ 0x3d
 80170a8:	d1f9      	bne.n	801709e <_findenv_r+0x1a>
 80170aa:	4630      	mov	r0, r6
 80170ac:	f000 fca8 	bl	8017a00 <__env_unlock>
 80170b0:	2000      	movs	r0, #0
 80170b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170b6:	eba8 0809 	sub.w	r8, r8, r9
 80170ba:	46a3      	mov	fp, r4
 80170bc:	f854 0b04 	ldr.w	r0, [r4], #4
 80170c0:	2800      	cmp	r0, #0
 80170c2:	d0f2      	beq.n	80170aa <_findenv_r+0x26>
 80170c4:	4642      	mov	r2, r8
 80170c6:	4649      	mov	r1, r9
 80170c8:	f000 fbb3 	bl	8017832 <strncmp>
 80170cc:	2800      	cmp	r0, #0
 80170ce:	d1f4      	bne.n	80170ba <_findenv_r+0x36>
 80170d0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80170d4:	eb03 0508 	add.w	r5, r3, r8
 80170d8:	f813 3008 	ldrb.w	r3, [r3, r8]
 80170dc:	2b3d      	cmp	r3, #61	@ 0x3d
 80170de:	d1ec      	bne.n	80170ba <_findenv_r+0x36>
 80170e0:	f8da 3000 	ldr.w	r3, [sl]
 80170e4:	ebab 0303 	sub.w	r3, fp, r3
 80170e8:	109b      	asrs	r3, r3, #2
 80170ea:	4630      	mov	r0, r6
 80170ec:	603b      	str	r3, [r7, #0]
 80170ee:	f000 fc87 	bl	8017a00 <__env_unlock>
 80170f2:	1c68      	adds	r0, r5, #1
 80170f4:	e7dd      	b.n	80170b2 <_findenv_r+0x2e>
 80170f6:	bf00      	nop
 80170f8:	20000000 	.word	0x20000000

080170fc <malloc>:
 80170fc:	4b02      	ldr	r3, [pc, #8]	@ (8017108 <malloc+0xc>)
 80170fe:	4601      	mov	r1, r0
 8017100:	6818      	ldr	r0, [r3, #0]
 8017102:	f000 b82d 	b.w	8017160 <_malloc_r>
 8017106:	bf00      	nop
 8017108:	20000338 	.word	0x20000338

0801710c <free>:
 801710c:	4b02      	ldr	r3, [pc, #8]	@ (8017118 <free+0xc>)
 801710e:	4601      	mov	r1, r0
 8017110:	6818      	ldr	r0, [r3, #0]
 8017112:	f000 bc7b 	b.w	8017a0c <_free_r>
 8017116:	bf00      	nop
 8017118:	20000338 	.word	0x20000338

0801711c <sbrk_aligned>:
 801711c:	b570      	push	{r4, r5, r6, lr}
 801711e:	4e0f      	ldr	r6, [pc, #60]	@ (801715c <sbrk_aligned+0x40>)
 8017120:	460c      	mov	r4, r1
 8017122:	6831      	ldr	r1, [r6, #0]
 8017124:	4605      	mov	r5, r0
 8017126:	b911      	cbnz	r1, 801712e <sbrk_aligned+0x12>
 8017128:	f000 fbe0 	bl	80178ec <_sbrk_r>
 801712c:	6030      	str	r0, [r6, #0]
 801712e:	4621      	mov	r1, r4
 8017130:	4628      	mov	r0, r5
 8017132:	f000 fbdb 	bl	80178ec <_sbrk_r>
 8017136:	1c43      	adds	r3, r0, #1
 8017138:	d103      	bne.n	8017142 <sbrk_aligned+0x26>
 801713a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801713e:	4620      	mov	r0, r4
 8017140:	bd70      	pop	{r4, r5, r6, pc}
 8017142:	1cc4      	adds	r4, r0, #3
 8017144:	f024 0403 	bic.w	r4, r4, #3
 8017148:	42a0      	cmp	r0, r4
 801714a:	d0f8      	beq.n	801713e <sbrk_aligned+0x22>
 801714c:	1a21      	subs	r1, r4, r0
 801714e:	4628      	mov	r0, r5
 8017150:	f000 fbcc 	bl	80178ec <_sbrk_r>
 8017154:	3001      	adds	r0, #1
 8017156:	d1f2      	bne.n	801713e <sbrk_aligned+0x22>
 8017158:	e7ef      	b.n	801713a <sbrk_aligned+0x1e>
 801715a:	bf00      	nop
 801715c:	2000b1f8 	.word	0x2000b1f8

08017160 <_malloc_r>:
 8017160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017164:	1ccd      	adds	r5, r1, #3
 8017166:	f025 0503 	bic.w	r5, r5, #3
 801716a:	3508      	adds	r5, #8
 801716c:	2d0c      	cmp	r5, #12
 801716e:	bf38      	it	cc
 8017170:	250c      	movcc	r5, #12
 8017172:	2d00      	cmp	r5, #0
 8017174:	4606      	mov	r6, r0
 8017176:	db01      	blt.n	801717c <_malloc_r+0x1c>
 8017178:	42a9      	cmp	r1, r5
 801717a:	d904      	bls.n	8017186 <_malloc_r+0x26>
 801717c:	230c      	movs	r3, #12
 801717e:	6033      	str	r3, [r6, #0]
 8017180:	2000      	movs	r0, #0
 8017182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017186:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801725c <_malloc_r+0xfc>
 801718a:	f000 f869 	bl	8017260 <__malloc_lock>
 801718e:	f8d8 3000 	ldr.w	r3, [r8]
 8017192:	461c      	mov	r4, r3
 8017194:	bb44      	cbnz	r4, 80171e8 <_malloc_r+0x88>
 8017196:	4629      	mov	r1, r5
 8017198:	4630      	mov	r0, r6
 801719a:	f7ff ffbf 	bl	801711c <sbrk_aligned>
 801719e:	1c43      	adds	r3, r0, #1
 80171a0:	4604      	mov	r4, r0
 80171a2:	d158      	bne.n	8017256 <_malloc_r+0xf6>
 80171a4:	f8d8 4000 	ldr.w	r4, [r8]
 80171a8:	4627      	mov	r7, r4
 80171aa:	2f00      	cmp	r7, #0
 80171ac:	d143      	bne.n	8017236 <_malloc_r+0xd6>
 80171ae:	2c00      	cmp	r4, #0
 80171b0:	d04b      	beq.n	801724a <_malloc_r+0xea>
 80171b2:	6823      	ldr	r3, [r4, #0]
 80171b4:	4639      	mov	r1, r7
 80171b6:	4630      	mov	r0, r6
 80171b8:	eb04 0903 	add.w	r9, r4, r3
 80171bc:	f000 fb96 	bl	80178ec <_sbrk_r>
 80171c0:	4581      	cmp	r9, r0
 80171c2:	d142      	bne.n	801724a <_malloc_r+0xea>
 80171c4:	6821      	ldr	r1, [r4, #0]
 80171c6:	1a6d      	subs	r5, r5, r1
 80171c8:	4629      	mov	r1, r5
 80171ca:	4630      	mov	r0, r6
 80171cc:	f7ff ffa6 	bl	801711c <sbrk_aligned>
 80171d0:	3001      	adds	r0, #1
 80171d2:	d03a      	beq.n	801724a <_malloc_r+0xea>
 80171d4:	6823      	ldr	r3, [r4, #0]
 80171d6:	442b      	add	r3, r5
 80171d8:	6023      	str	r3, [r4, #0]
 80171da:	f8d8 3000 	ldr.w	r3, [r8]
 80171de:	685a      	ldr	r2, [r3, #4]
 80171e0:	bb62      	cbnz	r2, 801723c <_malloc_r+0xdc>
 80171e2:	f8c8 7000 	str.w	r7, [r8]
 80171e6:	e00f      	b.n	8017208 <_malloc_r+0xa8>
 80171e8:	6822      	ldr	r2, [r4, #0]
 80171ea:	1b52      	subs	r2, r2, r5
 80171ec:	d420      	bmi.n	8017230 <_malloc_r+0xd0>
 80171ee:	2a0b      	cmp	r2, #11
 80171f0:	d917      	bls.n	8017222 <_malloc_r+0xc2>
 80171f2:	1961      	adds	r1, r4, r5
 80171f4:	42a3      	cmp	r3, r4
 80171f6:	6025      	str	r5, [r4, #0]
 80171f8:	bf18      	it	ne
 80171fa:	6059      	strne	r1, [r3, #4]
 80171fc:	6863      	ldr	r3, [r4, #4]
 80171fe:	bf08      	it	eq
 8017200:	f8c8 1000 	streq.w	r1, [r8]
 8017204:	5162      	str	r2, [r4, r5]
 8017206:	604b      	str	r3, [r1, #4]
 8017208:	4630      	mov	r0, r6
 801720a:	f000 f82f 	bl	801726c <__malloc_unlock>
 801720e:	f104 000b 	add.w	r0, r4, #11
 8017212:	1d23      	adds	r3, r4, #4
 8017214:	f020 0007 	bic.w	r0, r0, #7
 8017218:	1ac2      	subs	r2, r0, r3
 801721a:	bf1c      	itt	ne
 801721c:	1a1b      	subne	r3, r3, r0
 801721e:	50a3      	strne	r3, [r4, r2]
 8017220:	e7af      	b.n	8017182 <_malloc_r+0x22>
 8017222:	6862      	ldr	r2, [r4, #4]
 8017224:	42a3      	cmp	r3, r4
 8017226:	bf0c      	ite	eq
 8017228:	f8c8 2000 	streq.w	r2, [r8]
 801722c:	605a      	strne	r2, [r3, #4]
 801722e:	e7eb      	b.n	8017208 <_malloc_r+0xa8>
 8017230:	4623      	mov	r3, r4
 8017232:	6864      	ldr	r4, [r4, #4]
 8017234:	e7ae      	b.n	8017194 <_malloc_r+0x34>
 8017236:	463c      	mov	r4, r7
 8017238:	687f      	ldr	r7, [r7, #4]
 801723a:	e7b6      	b.n	80171aa <_malloc_r+0x4a>
 801723c:	461a      	mov	r2, r3
 801723e:	685b      	ldr	r3, [r3, #4]
 8017240:	42a3      	cmp	r3, r4
 8017242:	d1fb      	bne.n	801723c <_malloc_r+0xdc>
 8017244:	2300      	movs	r3, #0
 8017246:	6053      	str	r3, [r2, #4]
 8017248:	e7de      	b.n	8017208 <_malloc_r+0xa8>
 801724a:	230c      	movs	r3, #12
 801724c:	6033      	str	r3, [r6, #0]
 801724e:	4630      	mov	r0, r6
 8017250:	f000 f80c 	bl	801726c <__malloc_unlock>
 8017254:	e794      	b.n	8017180 <_malloc_r+0x20>
 8017256:	6005      	str	r5, [r0, #0]
 8017258:	e7d6      	b.n	8017208 <_malloc_r+0xa8>
 801725a:	bf00      	nop
 801725c:	2000b1fc 	.word	0x2000b1fc

08017260 <__malloc_lock>:
 8017260:	4801      	ldr	r0, [pc, #4]	@ (8017268 <__malloc_lock+0x8>)
 8017262:	f000 bb90 	b.w	8017986 <__retarget_lock_acquire_recursive>
 8017266:	bf00      	nop
 8017268:	2000b341 	.word	0x2000b341

0801726c <__malloc_unlock>:
 801726c:	4801      	ldr	r0, [pc, #4]	@ (8017274 <__malloc_unlock+0x8>)
 801726e:	f000 bb8b 	b.w	8017988 <__retarget_lock_release_recursive>
 8017272:	bf00      	nop
 8017274:	2000b341 	.word	0x2000b341

08017278 <srand>:
 8017278:	b538      	push	{r3, r4, r5, lr}
 801727a:	4b10      	ldr	r3, [pc, #64]	@ (80172bc <srand+0x44>)
 801727c:	681d      	ldr	r5, [r3, #0]
 801727e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017280:	4604      	mov	r4, r0
 8017282:	b9b3      	cbnz	r3, 80172b2 <srand+0x3a>
 8017284:	2018      	movs	r0, #24
 8017286:	f7ff ff39 	bl	80170fc <malloc>
 801728a:	4602      	mov	r2, r0
 801728c:	6328      	str	r0, [r5, #48]	@ 0x30
 801728e:	b920      	cbnz	r0, 801729a <srand+0x22>
 8017290:	4b0b      	ldr	r3, [pc, #44]	@ (80172c0 <srand+0x48>)
 8017292:	480c      	ldr	r0, [pc, #48]	@ (80172c4 <srand+0x4c>)
 8017294:	2146      	movs	r1, #70	@ 0x46
 8017296:	f000 fb8f 	bl	80179b8 <__assert_func>
 801729a:	490b      	ldr	r1, [pc, #44]	@ (80172c8 <srand+0x50>)
 801729c:	4b0b      	ldr	r3, [pc, #44]	@ (80172cc <srand+0x54>)
 801729e:	e9c0 1300 	strd	r1, r3, [r0]
 80172a2:	4b0b      	ldr	r3, [pc, #44]	@ (80172d0 <srand+0x58>)
 80172a4:	6083      	str	r3, [r0, #8]
 80172a6:	230b      	movs	r3, #11
 80172a8:	8183      	strh	r3, [r0, #12]
 80172aa:	2100      	movs	r1, #0
 80172ac:	2001      	movs	r0, #1
 80172ae:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80172b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80172b4:	2200      	movs	r2, #0
 80172b6:	611c      	str	r4, [r3, #16]
 80172b8:	615a      	str	r2, [r3, #20]
 80172ba:	bd38      	pop	{r3, r4, r5, pc}
 80172bc:	20000338 	.word	0x20000338
 80172c0:	080197d2 	.word	0x080197d2
 80172c4:	080197e9 	.word	0x080197e9
 80172c8:	abcd330e 	.word	0xabcd330e
 80172cc:	e66d1234 	.word	0xe66d1234
 80172d0:	0005deec 	.word	0x0005deec

080172d4 <rand>:
 80172d4:	4b16      	ldr	r3, [pc, #88]	@ (8017330 <rand+0x5c>)
 80172d6:	b510      	push	{r4, lr}
 80172d8:	681c      	ldr	r4, [r3, #0]
 80172da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80172dc:	b9b3      	cbnz	r3, 801730c <rand+0x38>
 80172de:	2018      	movs	r0, #24
 80172e0:	f7ff ff0c 	bl	80170fc <malloc>
 80172e4:	4602      	mov	r2, r0
 80172e6:	6320      	str	r0, [r4, #48]	@ 0x30
 80172e8:	b920      	cbnz	r0, 80172f4 <rand+0x20>
 80172ea:	4b12      	ldr	r3, [pc, #72]	@ (8017334 <rand+0x60>)
 80172ec:	4812      	ldr	r0, [pc, #72]	@ (8017338 <rand+0x64>)
 80172ee:	2152      	movs	r1, #82	@ 0x52
 80172f0:	f000 fb62 	bl	80179b8 <__assert_func>
 80172f4:	4911      	ldr	r1, [pc, #68]	@ (801733c <rand+0x68>)
 80172f6:	4b12      	ldr	r3, [pc, #72]	@ (8017340 <rand+0x6c>)
 80172f8:	e9c0 1300 	strd	r1, r3, [r0]
 80172fc:	4b11      	ldr	r3, [pc, #68]	@ (8017344 <rand+0x70>)
 80172fe:	6083      	str	r3, [r0, #8]
 8017300:	230b      	movs	r3, #11
 8017302:	8183      	strh	r3, [r0, #12]
 8017304:	2100      	movs	r1, #0
 8017306:	2001      	movs	r0, #1
 8017308:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801730c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801730e:	480e      	ldr	r0, [pc, #56]	@ (8017348 <rand+0x74>)
 8017310:	690b      	ldr	r3, [r1, #16]
 8017312:	694c      	ldr	r4, [r1, #20]
 8017314:	4a0d      	ldr	r2, [pc, #52]	@ (801734c <rand+0x78>)
 8017316:	4358      	muls	r0, r3
 8017318:	fb02 0004 	mla	r0, r2, r4, r0
 801731c:	fba3 3202 	umull	r3, r2, r3, r2
 8017320:	3301      	adds	r3, #1
 8017322:	eb40 0002 	adc.w	r0, r0, r2
 8017326:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801732a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801732e:	bd10      	pop	{r4, pc}
 8017330:	20000338 	.word	0x20000338
 8017334:	080197d2 	.word	0x080197d2
 8017338:	080197e9 	.word	0x080197e9
 801733c:	abcd330e 	.word	0xabcd330e
 8017340:	e66d1234 	.word	0xe66d1234
 8017344:	0005deec 	.word	0x0005deec
 8017348:	5851f42d 	.word	0x5851f42d
 801734c:	4c957f2d 	.word	0x4c957f2d

08017350 <realloc>:
 8017350:	4b02      	ldr	r3, [pc, #8]	@ (801735c <realloc+0xc>)
 8017352:	460a      	mov	r2, r1
 8017354:	4601      	mov	r1, r0
 8017356:	6818      	ldr	r0, [r3, #0]
 8017358:	f000 b802 	b.w	8017360 <_realloc_r>
 801735c:	20000338 	.word	0x20000338

08017360 <_realloc_r>:
 8017360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017364:	4680      	mov	r8, r0
 8017366:	4615      	mov	r5, r2
 8017368:	460c      	mov	r4, r1
 801736a:	b921      	cbnz	r1, 8017376 <_realloc_r+0x16>
 801736c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017370:	4611      	mov	r1, r2
 8017372:	f7ff bef5 	b.w	8017160 <_malloc_r>
 8017376:	b92a      	cbnz	r2, 8017384 <_realloc_r+0x24>
 8017378:	f000 fb48 	bl	8017a0c <_free_r>
 801737c:	2400      	movs	r4, #0
 801737e:	4620      	mov	r0, r4
 8017380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017384:	f000 fb8c 	bl	8017aa0 <_malloc_usable_size_r>
 8017388:	4285      	cmp	r5, r0
 801738a:	4606      	mov	r6, r0
 801738c:	d802      	bhi.n	8017394 <_realloc_r+0x34>
 801738e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017392:	d8f4      	bhi.n	801737e <_realloc_r+0x1e>
 8017394:	4629      	mov	r1, r5
 8017396:	4640      	mov	r0, r8
 8017398:	f7ff fee2 	bl	8017160 <_malloc_r>
 801739c:	4607      	mov	r7, r0
 801739e:	2800      	cmp	r0, #0
 80173a0:	d0ec      	beq.n	801737c <_realloc_r+0x1c>
 80173a2:	42b5      	cmp	r5, r6
 80173a4:	462a      	mov	r2, r5
 80173a6:	4621      	mov	r1, r4
 80173a8:	bf28      	it	cs
 80173aa:	4632      	movcs	r2, r6
 80173ac:	f000 faf5 	bl	801799a <memcpy>
 80173b0:	4621      	mov	r1, r4
 80173b2:	4640      	mov	r0, r8
 80173b4:	f000 fb2a 	bl	8017a0c <_free_r>
 80173b8:	463c      	mov	r4, r7
 80173ba:	e7e0      	b.n	801737e <_realloc_r+0x1e>

080173bc <_strtoul_l.constprop.0>:
 80173bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80173c0:	4e34      	ldr	r6, [pc, #208]	@ (8017494 <_strtoul_l.constprop.0+0xd8>)
 80173c2:	4686      	mov	lr, r0
 80173c4:	460d      	mov	r5, r1
 80173c6:	4628      	mov	r0, r5
 80173c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80173cc:	5d37      	ldrb	r7, [r6, r4]
 80173ce:	f017 0708 	ands.w	r7, r7, #8
 80173d2:	d1f8      	bne.n	80173c6 <_strtoul_l.constprop.0+0xa>
 80173d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80173d6:	d12f      	bne.n	8017438 <_strtoul_l.constprop.0+0x7c>
 80173d8:	782c      	ldrb	r4, [r5, #0]
 80173da:	2701      	movs	r7, #1
 80173dc:	1c85      	adds	r5, r0, #2
 80173de:	f033 0010 	bics.w	r0, r3, #16
 80173e2:	d109      	bne.n	80173f8 <_strtoul_l.constprop.0+0x3c>
 80173e4:	2c30      	cmp	r4, #48	@ 0x30
 80173e6:	d12c      	bne.n	8017442 <_strtoul_l.constprop.0+0x86>
 80173e8:	7828      	ldrb	r0, [r5, #0]
 80173ea:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80173ee:	2858      	cmp	r0, #88	@ 0x58
 80173f0:	d127      	bne.n	8017442 <_strtoul_l.constprop.0+0x86>
 80173f2:	786c      	ldrb	r4, [r5, #1]
 80173f4:	2310      	movs	r3, #16
 80173f6:	3502      	adds	r5, #2
 80173f8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80173fc:	2600      	movs	r6, #0
 80173fe:	fbb8 f8f3 	udiv	r8, r8, r3
 8017402:	fb03 f908 	mul.w	r9, r3, r8
 8017406:	ea6f 0909 	mvn.w	r9, r9
 801740a:	4630      	mov	r0, r6
 801740c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017410:	f1bc 0f09 	cmp.w	ip, #9
 8017414:	d81c      	bhi.n	8017450 <_strtoul_l.constprop.0+0x94>
 8017416:	4664      	mov	r4, ip
 8017418:	42a3      	cmp	r3, r4
 801741a:	dd2a      	ble.n	8017472 <_strtoul_l.constprop.0+0xb6>
 801741c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017420:	d007      	beq.n	8017432 <_strtoul_l.constprop.0+0x76>
 8017422:	4580      	cmp	r8, r0
 8017424:	d322      	bcc.n	801746c <_strtoul_l.constprop.0+0xb0>
 8017426:	d101      	bne.n	801742c <_strtoul_l.constprop.0+0x70>
 8017428:	45a1      	cmp	r9, r4
 801742a:	db1f      	blt.n	801746c <_strtoul_l.constprop.0+0xb0>
 801742c:	fb00 4003 	mla	r0, r0, r3, r4
 8017430:	2601      	movs	r6, #1
 8017432:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017436:	e7e9      	b.n	801740c <_strtoul_l.constprop.0+0x50>
 8017438:	2c2b      	cmp	r4, #43	@ 0x2b
 801743a:	bf04      	itt	eq
 801743c:	782c      	ldrbeq	r4, [r5, #0]
 801743e:	1c85      	addeq	r5, r0, #2
 8017440:	e7cd      	b.n	80173de <_strtoul_l.constprop.0+0x22>
 8017442:	2b00      	cmp	r3, #0
 8017444:	d1d8      	bne.n	80173f8 <_strtoul_l.constprop.0+0x3c>
 8017446:	2c30      	cmp	r4, #48	@ 0x30
 8017448:	bf0c      	ite	eq
 801744a:	2308      	moveq	r3, #8
 801744c:	230a      	movne	r3, #10
 801744e:	e7d3      	b.n	80173f8 <_strtoul_l.constprop.0+0x3c>
 8017450:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8017454:	f1bc 0f19 	cmp.w	ip, #25
 8017458:	d801      	bhi.n	801745e <_strtoul_l.constprop.0+0xa2>
 801745a:	3c37      	subs	r4, #55	@ 0x37
 801745c:	e7dc      	b.n	8017418 <_strtoul_l.constprop.0+0x5c>
 801745e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8017462:	f1bc 0f19 	cmp.w	ip, #25
 8017466:	d804      	bhi.n	8017472 <_strtoul_l.constprop.0+0xb6>
 8017468:	3c57      	subs	r4, #87	@ 0x57
 801746a:	e7d5      	b.n	8017418 <_strtoul_l.constprop.0+0x5c>
 801746c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8017470:	e7df      	b.n	8017432 <_strtoul_l.constprop.0+0x76>
 8017472:	1c73      	adds	r3, r6, #1
 8017474:	d106      	bne.n	8017484 <_strtoul_l.constprop.0+0xc8>
 8017476:	2322      	movs	r3, #34	@ 0x22
 8017478:	f8ce 3000 	str.w	r3, [lr]
 801747c:	4630      	mov	r0, r6
 801747e:	b932      	cbnz	r2, 801748e <_strtoul_l.constprop.0+0xd2>
 8017480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017484:	b107      	cbz	r7, 8017488 <_strtoul_l.constprop.0+0xcc>
 8017486:	4240      	negs	r0, r0
 8017488:	2a00      	cmp	r2, #0
 801748a:	d0f9      	beq.n	8017480 <_strtoul_l.constprop.0+0xc4>
 801748c:	b106      	cbz	r6, 8017490 <_strtoul_l.constprop.0+0xd4>
 801748e:	1e69      	subs	r1, r5, #1
 8017490:	6011      	str	r1, [r2, #0]
 8017492:	e7f5      	b.n	8017480 <_strtoul_l.constprop.0+0xc4>
 8017494:	08019842 	.word	0x08019842

08017498 <strtoul>:
 8017498:	4613      	mov	r3, r2
 801749a:	460a      	mov	r2, r1
 801749c:	4601      	mov	r1, r0
 801749e:	4802      	ldr	r0, [pc, #8]	@ (80174a8 <strtoul+0x10>)
 80174a0:	6800      	ldr	r0, [r0, #0]
 80174a2:	f7ff bf8b 	b.w	80173bc <_strtoul_l.constprop.0>
 80174a6:	bf00      	nop
 80174a8:	20000338 	.word	0x20000338

080174ac <std>:
 80174ac:	2300      	movs	r3, #0
 80174ae:	b510      	push	{r4, lr}
 80174b0:	4604      	mov	r4, r0
 80174b2:	e9c0 3300 	strd	r3, r3, [r0]
 80174b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80174ba:	6083      	str	r3, [r0, #8]
 80174bc:	8181      	strh	r1, [r0, #12]
 80174be:	6643      	str	r3, [r0, #100]	@ 0x64
 80174c0:	81c2      	strh	r2, [r0, #14]
 80174c2:	6183      	str	r3, [r0, #24]
 80174c4:	4619      	mov	r1, r3
 80174c6:	2208      	movs	r2, #8
 80174c8:	305c      	adds	r0, #92	@ 0x5c
 80174ca:	f000 f99d 	bl	8017808 <memset>
 80174ce:	4b0d      	ldr	r3, [pc, #52]	@ (8017504 <std+0x58>)
 80174d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80174d2:	4b0d      	ldr	r3, [pc, #52]	@ (8017508 <std+0x5c>)
 80174d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80174d6:	4b0d      	ldr	r3, [pc, #52]	@ (801750c <std+0x60>)
 80174d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80174da:	4b0d      	ldr	r3, [pc, #52]	@ (8017510 <std+0x64>)
 80174dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80174de:	4b0d      	ldr	r3, [pc, #52]	@ (8017514 <std+0x68>)
 80174e0:	6224      	str	r4, [r4, #32]
 80174e2:	429c      	cmp	r4, r3
 80174e4:	d006      	beq.n	80174f4 <std+0x48>
 80174e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80174ea:	4294      	cmp	r4, r2
 80174ec:	d002      	beq.n	80174f4 <std+0x48>
 80174ee:	33d0      	adds	r3, #208	@ 0xd0
 80174f0:	429c      	cmp	r4, r3
 80174f2:	d105      	bne.n	8017500 <std+0x54>
 80174f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80174f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174fc:	f000 ba42 	b.w	8017984 <__retarget_lock_init_recursive>
 8017500:	bd10      	pop	{r4, pc}
 8017502:	bf00      	nop
 8017504:	080176bd 	.word	0x080176bd
 8017508:	080176df 	.word	0x080176df
 801750c:	08017717 	.word	0x08017717
 8017510:	0801773b 	.word	0x0801773b
 8017514:	2000b200 	.word	0x2000b200

08017518 <stdio_exit_handler>:
 8017518:	4a02      	ldr	r2, [pc, #8]	@ (8017524 <stdio_exit_handler+0xc>)
 801751a:	4903      	ldr	r1, [pc, #12]	@ (8017528 <stdio_exit_handler+0x10>)
 801751c:	4803      	ldr	r0, [pc, #12]	@ (801752c <stdio_exit_handler+0x14>)
 801751e:	f000 b869 	b.w	80175f4 <_fwalk_sglue>
 8017522:	bf00      	nop
 8017524:	2000032c 	.word	0x2000032c
 8017528:	08018409 	.word	0x08018409
 801752c:	2000033c 	.word	0x2000033c

08017530 <cleanup_stdio>:
 8017530:	6841      	ldr	r1, [r0, #4]
 8017532:	4b0c      	ldr	r3, [pc, #48]	@ (8017564 <cleanup_stdio+0x34>)
 8017534:	4299      	cmp	r1, r3
 8017536:	b510      	push	{r4, lr}
 8017538:	4604      	mov	r4, r0
 801753a:	d001      	beq.n	8017540 <cleanup_stdio+0x10>
 801753c:	f000 ff64 	bl	8018408 <_fflush_r>
 8017540:	68a1      	ldr	r1, [r4, #8]
 8017542:	4b09      	ldr	r3, [pc, #36]	@ (8017568 <cleanup_stdio+0x38>)
 8017544:	4299      	cmp	r1, r3
 8017546:	d002      	beq.n	801754e <cleanup_stdio+0x1e>
 8017548:	4620      	mov	r0, r4
 801754a:	f000 ff5d 	bl	8018408 <_fflush_r>
 801754e:	68e1      	ldr	r1, [r4, #12]
 8017550:	4b06      	ldr	r3, [pc, #24]	@ (801756c <cleanup_stdio+0x3c>)
 8017552:	4299      	cmp	r1, r3
 8017554:	d004      	beq.n	8017560 <cleanup_stdio+0x30>
 8017556:	4620      	mov	r0, r4
 8017558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801755c:	f000 bf54 	b.w	8018408 <_fflush_r>
 8017560:	bd10      	pop	{r4, pc}
 8017562:	bf00      	nop
 8017564:	2000b200 	.word	0x2000b200
 8017568:	2000b268 	.word	0x2000b268
 801756c:	2000b2d0 	.word	0x2000b2d0

08017570 <global_stdio_init.part.0>:
 8017570:	b510      	push	{r4, lr}
 8017572:	4b0b      	ldr	r3, [pc, #44]	@ (80175a0 <global_stdio_init.part.0+0x30>)
 8017574:	4c0b      	ldr	r4, [pc, #44]	@ (80175a4 <global_stdio_init.part.0+0x34>)
 8017576:	4a0c      	ldr	r2, [pc, #48]	@ (80175a8 <global_stdio_init.part.0+0x38>)
 8017578:	601a      	str	r2, [r3, #0]
 801757a:	4620      	mov	r0, r4
 801757c:	2200      	movs	r2, #0
 801757e:	2104      	movs	r1, #4
 8017580:	f7ff ff94 	bl	80174ac <std>
 8017584:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017588:	2201      	movs	r2, #1
 801758a:	2109      	movs	r1, #9
 801758c:	f7ff ff8e 	bl	80174ac <std>
 8017590:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017594:	2202      	movs	r2, #2
 8017596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801759a:	2112      	movs	r1, #18
 801759c:	f7ff bf86 	b.w	80174ac <std>
 80175a0:	2000b338 	.word	0x2000b338
 80175a4:	2000b200 	.word	0x2000b200
 80175a8:	08017519 	.word	0x08017519

080175ac <__sfp_lock_acquire>:
 80175ac:	4801      	ldr	r0, [pc, #4]	@ (80175b4 <__sfp_lock_acquire+0x8>)
 80175ae:	f000 b9ea 	b.w	8017986 <__retarget_lock_acquire_recursive>
 80175b2:	bf00      	nop
 80175b4:	2000b342 	.word	0x2000b342

080175b8 <__sfp_lock_release>:
 80175b8:	4801      	ldr	r0, [pc, #4]	@ (80175c0 <__sfp_lock_release+0x8>)
 80175ba:	f000 b9e5 	b.w	8017988 <__retarget_lock_release_recursive>
 80175be:	bf00      	nop
 80175c0:	2000b342 	.word	0x2000b342

080175c4 <__sinit>:
 80175c4:	b510      	push	{r4, lr}
 80175c6:	4604      	mov	r4, r0
 80175c8:	f7ff fff0 	bl	80175ac <__sfp_lock_acquire>
 80175cc:	6a23      	ldr	r3, [r4, #32]
 80175ce:	b11b      	cbz	r3, 80175d8 <__sinit+0x14>
 80175d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80175d4:	f7ff bff0 	b.w	80175b8 <__sfp_lock_release>
 80175d8:	4b04      	ldr	r3, [pc, #16]	@ (80175ec <__sinit+0x28>)
 80175da:	6223      	str	r3, [r4, #32]
 80175dc:	4b04      	ldr	r3, [pc, #16]	@ (80175f0 <__sinit+0x2c>)
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d1f5      	bne.n	80175d0 <__sinit+0xc>
 80175e4:	f7ff ffc4 	bl	8017570 <global_stdio_init.part.0>
 80175e8:	e7f2      	b.n	80175d0 <__sinit+0xc>
 80175ea:	bf00      	nop
 80175ec:	08017531 	.word	0x08017531
 80175f0:	2000b338 	.word	0x2000b338

080175f4 <_fwalk_sglue>:
 80175f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80175f8:	4607      	mov	r7, r0
 80175fa:	4688      	mov	r8, r1
 80175fc:	4614      	mov	r4, r2
 80175fe:	2600      	movs	r6, #0
 8017600:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017604:	f1b9 0901 	subs.w	r9, r9, #1
 8017608:	d505      	bpl.n	8017616 <_fwalk_sglue+0x22>
 801760a:	6824      	ldr	r4, [r4, #0]
 801760c:	2c00      	cmp	r4, #0
 801760e:	d1f7      	bne.n	8017600 <_fwalk_sglue+0xc>
 8017610:	4630      	mov	r0, r6
 8017612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017616:	89ab      	ldrh	r3, [r5, #12]
 8017618:	2b01      	cmp	r3, #1
 801761a:	d907      	bls.n	801762c <_fwalk_sglue+0x38>
 801761c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017620:	3301      	adds	r3, #1
 8017622:	d003      	beq.n	801762c <_fwalk_sglue+0x38>
 8017624:	4629      	mov	r1, r5
 8017626:	4638      	mov	r0, r7
 8017628:	47c0      	blx	r8
 801762a:	4306      	orrs	r6, r0
 801762c:	3568      	adds	r5, #104	@ 0x68
 801762e:	e7e9      	b.n	8017604 <_fwalk_sglue+0x10>

08017630 <iprintf>:
 8017630:	b40f      	push	{r0, r1, r2, r3}
 8017632:	b507      	push	{r0, r1, r2, lr}
 8017634:	4906      	ldr	r1, [pc, #24]	@ (8017650 <iprintf+0x20>)
 8017636:	ab04      	add	r3, sp, #16
 8017638:	6808      	ldr	r0, [r1, #0]
 801763a:	f853 2b04 	ldr.w	r2, [r3], #4
 801763e:	6881      	ldr	r1, [r0, #8]
 8017640:	9301      	str	r3, [sp, #4]
 8017642:	f000 fbb7 	bl	8017db4 <_vfiprintf_r>
 8017646:	b003      	add	sp, #12
 8017648:	f85d eb04 	ldr.w	lr, [sp], #4
 801764c:	b004      	add	sp, #16
 801764e:	4770      	bx	lr
 8017650:	20000338 	.word	0x20000338

08017654 <sniprintf>:
 8017654:	b40c      	push	{r2, r3}
 8017656:	b530      	push	{r4, r5, lr}
 8017658:	4b17      	ldr	r3, [pc, #92]	@ (80176b8 <sniprintf+0x64>)
 801765a:	1e0c      	subs	r4, r1, #0
 801765c:	681d      	ldr	r5, [r3, #0]
 801765e:	b09d      	sub	sp, #116	@ 0x74
 8017660:	da08      	bge.n	8017674 <sniprintf+0x20>
 8017662:	238b      	movs	r3, #139	@ 0x8b
 8017664:	602b      	str	r3, [r5, #0]
 8017666:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801766a:	b01d      	add	sp, #116	@ 0x74
 801766c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017670:	b002      	add	sp, #8
 8017672:	4770      	bx	lr
 8017674:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017678:	f8ad 3014 	strh.w	r3, [sp, #20]
 801767c:	bf14      	ite	ne
 801767e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017682:	4623      	moveq	r3, r4
 8017684:	9304      	str	r3, [sp, #16]
 8017686:	9307      	str	r3, [sp, #28]
 8017688:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801768c:	9002      	str	r0, [sp, #8]
 801768e:	9006      	str	r0, [sp, #24]
 8017690:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017694:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017696:	ab21      	add	r3, sp, #132	@ 0x84
 8017698:	a902      	add	r1, sp, #8
 801769a:	4628      	mov	r0, r5
 801769c:	9301      	str	r3, [sp, #4]
 801769e:	f000 fa63 	bl	8017b68 <_svfiprintf_r>
 80176a2:	1c43      	adds	r3, r0, #1
 80176a4:	bfbc      	itt	lt
 80176a6:	238b      	movlt	r3, #139	@ 0x8b
 80176a8:	602b      	strlt	r3, [r5, #0]
 80176aa:	2c00      	cmp	r4, #0
 80176ac:	d0dd      	beq.n	801766a <sniprintf+0x16>
 80176ae:	9b02      	ldr	r3, [sp, #8]
 80176b0:	2200      	movs	r2, #0
 80176b2:	701a      	strb	r2, [r3, #0]
 80176b4:	e7d9      	b.n	801766a <sniprintf+0x16>
 80176b6:	bf00      	nop
 80176b8:	20000338 	.word	0x20000338

080176bc <__sread>:
 80176bc:	b510      	push	{r4, lr}
 80176be:	460c      	mov	r4, r1
 80176c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176c4:	f000 f900 	bl	80178c8 <_read_r>
 80176c8:	2800      	cmp	r0, #0
 80176ca:	bfab      	itete	ge
 80176cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80176ce:	89a3      	ldrhlt	r3, [r4, #12]
 80176d0:	181b      	addge	r3, r3, r0
 80176d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80176d6:	bfac      	ite	ge
 80176d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80176da:	81a3      	strhlt	r3, [r4, #12]
 80176dc:	bd10      	pop	{r4, pc}

080176de <__swrite>:
 80176de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176e2:	461f      	mov	r7, r3
 80176e4:	898b      	ldrh	r3, [r1, #12]
 80176e6:	05db      	lsls	r3, r3, #23
 80176e8:	4605      	mov	r5, r0
 80176ea:	460c      	mov	r4, r1
 80176ec:	4616      	mov	r6, r2
 80176ee:	d505      	bpl.n	80176fc <__swrite+0x1e>
 80176f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176f4:	2302      	movs	r3, #2
 80176f6:	2200      	movs	r2, #0
 80176f8:	f000 f8d4 	bl	80178a4 <_lseek_r>
 80176fc:	89a3      	ldrh	r3, [r4, #12]
 80176fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017702:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017706:	81a3      	strh	r3, [r4, #12]
 8017708:	4632      	mov	r2, r6
 801770a:	463b      	mov	r3, r7
 801770c:	4628      	mov	r0, r5
 801770e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017712:	f000 b8fb 	b.w	801790c <_write_r>

08017716 <__sseek>:
 8017716:	b510      	push	{r4, lr}
 8017718:	460c      	mov	r4, r1
 801771a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801771e:	f000 f8c1 	bl	80178a4 <_lseek_r>
 8017722:	1c43      	adds	r3, r0, #1
 8017724:	89a3      	ldrh	r3, [r4, #12]
 8017726:	bf15      	itete	ne
 8017728:	6560      	strne	r0, [r4, #84]	@ 0x54
 801772a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801772e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017732:	81a3      	strheq	r3, [r4, #12]
 8017734:	bf18      	it	ne
 8017736:	81a3      	strhne	r3, [r4, #12]
 8017738:	bd10      	pop	{r4, pc}

0801773a <__sclose>:
 801773a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801773e:	f000 b8a1 	b.w	8017884 <_close_r>

08017742 <_vsniprintf_r>:
 8017742:	b530      	push	{r4, r5, lr}
 8017744:	4614      	mov	r4, r2
 8017746:	2c00      	cmp	r4, #0
 8017748:	b09b      	sub	sp, #108	@ 0x6c
 801774a:	4605      	mov	r5, r0
 801774c:	461a      	mov	r2, r3
 801774e:	da05      	bge.n	801775c <_vsniprintf_r+0x1a>
 8017750:	238b      	movs	r3, #139	@ 0x8b
 8017752:	6003      	str	r3, [r0, #0]
 8017754:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017758:	b01b      	add	sp, #108	@ 0x6c
 801775a:	bd30      	pop	{r4, r5, pc}
 801775c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017760:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017764:	bf14      	ite	ne
 8017766:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801776a:	4623      	moveq	r3, r4
 801776c:	9302      	str	r3, [sp, #8]
 801776e:	9305      	str	r3, [sp, #20]
 8017770:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017774:	9100      	str	r1, [sp, #0]
 8017776:	9104      	str	r1, [sp, #16]
 8017778:	f8ad 300e 	strh.w	r3, [sp, #14]
 801777c:	4669      	mov	r1, sp
 801777e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017780:	f000 f9f2 	bl	8017b68 <_svfiprintf_r>
 8017784:	1c43      	adds	r3, r0, #1
 8017786:	bfbc      	itt	lt
 8017788:	238b      	movlt	r3, #139	@ 0x8b
 801778a:	602b      	strlt	r3, [r5, #0]
 801778c:	2c00      	cmp	r4, #0
 801778e:	d0e3      	beq.n	8017758 <_vsniprintf_r+0x16>
 8017790:	9b00      	ldr	r3, [sp, #0]
 8017792:	2200      	movs	r2, #0
 8017794:	701a      	strb	r2, [r3, #0]
 8017796:	e7df      	b.n	8017758 <_vsniprintf_r+0x16>

08017798 <vsniprintf>:
 8017798:	b507      	push	{r0, r1, r2, lr}
 801779a:	9300      	str	r3, [sp, #0]
 801779c:	4613      	mov	r3, r2
 801779e:	460a      	mov	r2, r1
 80177a0:	4601      	mov	r1, r0
 80177a2:	4803      	ldr	r0, [pc, #12]	@ (80177b0 <vsniprintf+0x18>)
 80177a4:	6800      	ldr	r0, [r0, #0]
 80177a6:	f7ff ffcc 	bl	8017742 <_vsniprintf_r>
 80177aa:	b003      	add	sp, #12
 80177ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80177b0:	20000338 	.word	0x20000338

080177b4 <memcmp>:
 80177b4:	b510      	push	{r4, lr}
 80177b6:	3901      	subs	r1, #1
 80177b8:	4402      	add	r2, r0
 80177ba:	4290      	cmp	r0, r2
 80177bc:	d101      	bne.n	80177c2 <memcmp+0xe>
 80177be:	2000      	movs	r0, #0
 80177c0:	e005      	b.n	80177ce <memcmp+0x1a>
 80177c2:	7803      	ldrb	r3, [r0, #0]
 80177c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80177c8:	42a3      	cmp	r3, r4
 80177ca:	d001      	beq.n	80177d0 <memcmp+0x1c>
 80177cc:	1b18      	subs	r0, r3, r4
 80177ce:	bd10      	pop	{r4, pc}
 80177d0:	3001      	adds	r0, #1
 80177d2:	e7f2      	b.n	80177ba <memcmp+0x6>

080177d4 <memmove>:
 80177d4:	4288      	cmp	r0, r1
 80177d6:	b510      	push	{r4, lr}
 80177d8:	eb01 0402 	add.w	r4, r1, r2
 80177dc:	d902      	bls.n	80177e4 <memmove+0x10>
 80177de:	4284      	cmp	r4, r0
 80177e0:	4623      	mov	r3, r4
 80177e2:	d807      	bhi.n	80177f4 <memmove+0x20>
 80177e4:	1e43      	subs	r3, r0, #1
 80177e6:	42a1      	cmp	r1, r4
 80177e8:	d008      	beq.n	80177fc <memmove+0x28>
 80177ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80177ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80177f2:	e7f8      	b.n	80177e6 <memmove+0x12>
 80177f4:	4402      	add	r2, r0
 80177f6:	4601      	mov	r1, r0
 80177f8:	428a      	cmp	r2, r1
 80177fa:	d100      	bne.n	80177fe <memmove+0x2a>
 80177fc:	bd10      	pop	{r4, pc}
 80177fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017802:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017806:	e7f7      	b.n	80177f8 <memmove+0x24>

08017808 <memset>:
 8017808:	4402      	add	r2, r0
 801780a:	4603      	mov	r3, r0
 801780c:	4293      	cmp	r3, r2
 801780e:	d100      	bne.n	8017812 <memset+0xa>
 8017810:	4770      	bx	lr
 8017812:	f803 1b01 	strb.w	r1, [r3], #1
 8017816:	e7f9      	b.n	801780c <memset+0x4>

08017818 <strchr>:
 8017818:	b2c9      	uxtb	r1, r1
 801781a:	4603      	mov	r3, r0
 801781c:	4618      	mov	r0, r3
 801781e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017822:	b112      	cbz	r2, 801782a <strchr+0x12>
 8017824:	428a      	cmp	r2, r1
 8017826:	d1f9      	bne.n	801781c <strchr+0x4>
 8017828:	4770      	bx	lr
 801782a:	2900      	cmp	r1, #0
 801782c:	bf18      	it	ne
 801782e:	2000      	movne	r0, #0
 8017830:	4770      	bx	lr

08017832 <strncmp>:
 8017832:	b510      	push	{r4, lr}
 8017834:	b16a      	cbz	r2, 8017852 <strncmp+0x20>
 8017836:	3901      	subs	r1, #1
 8017838:	1884      	adds	r4, r0, r2
 801783a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801783e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017842:	429a      	cmp	r2, r3
 8017844:	d103      	bne.n	801784e <strncmp+0x1c>
 8017846:	42a0      	cmp	r0, r4
 8017848:	d001      	beq.n	801784e <strncmp+0x1c>
 801784a:	2a00      	cmp	r2, #0
 801784c:	d1f5      	bne.n	801783a <strncmp+0x8>
 801784e:	1ad0      	subs	r0, r2, r3
 8017850:	bd10      	pop	{r4, pc}
 8017852:	4610      	mov	r0, r2
 8017854:	e7fc      	b.n	8017850 <strncmp+0x1e>

08017856 <strstr>:
 8017856:	780a      	ldrb	r2, [r1, #0]
 8017858:	b570      	push	{r4, r5, r6, lr}
 801785a:	b96a      	cbnz	r2, 8017878 <strstr+0x22>
 801785c:	bd70      	pop	{r4, r5, r6, pc}
 801785e:	429a      	cmp	r2, r3
 8017860:	d109      	bne.n	8017876 <strstr+0x20>
 8017862:	460c      	mov	r4, r1
 8017864:	4605      	mov	r5, r0
 8017866:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801786a:	2b00      	cmp	r3, #0
 801786c:	d0f6      	beq.n	801785c <strstr+0x6>
 801786e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017872:	429e      	cmp	r6, r3
 8017874:	d0f7      	beq.n	8017866 <strstr+0x10>
 8017876:	3001      	adds	r0, #1
 8017878:	7803      	ldrb	r3, [r0, #0]
 801787a:	2b00      	cmp	r3, #0
 801787c:	d1ef      	bne.n	801785e <strstr+0x8>
 801787e:	4618      	mov	r0, r3
 8017880:	e7ec      	b.n	801785c <strstr+0x6>
	...

08017884 <_close_r>:
 8017884:	b538      	push	{r3, r4, r5, lr}
 8017886:	4d06      	ldr	r5, [pc, #24]	@ (80178a0 <_close_r+0x1c>)
 8017888:	2300      	movs	r3, #0
 801788a:	4604      	mov	r4, r0
 801788c:	4608      	mov	r0, r1
 801788e:	602b      	str	r3, [r5, #0]
 8017890:	f7ea f9f0 	bl	8001c74 <_close>
 8017894:	1c43      	adds	r3, r0, #1
 8017896:	d102      	bne.n	801789e <_close_r+0x1a>
 8017898:	682b      	ldr	r3, [r5, #0]
 801789a:	b103      	cbz	r3, 801789e <_close_r+0x1a>
 801789c:	6023      	str	r3, [r4, #0]
 801789e:	bd38      	pop	{r3, r4, r5, pc}
 80178a0:	2000b33c 	.word	0x2000b33c

080178a4 <_lseek_r>:
 80178a4:	b538      	push	{r3, r4, r5, lr}
 80178a6:	4d07      	ldr	r5, [pc, #28]	@ (80178c4 <_lseek_r+0x20>)
 80178a8:	4604      	mov	r4, r0
 80178aa:	4608      	mov	r0, r1
 80178ac:	4611      	mov	r1, r2
 80178ae:	2200      	movs	r2, #0
 80178b0:	602a      	str	r2, [r5, #0]
 80178b2:	461a      	mov	r2, r3
 80178b4:	f7ea fa05 	bl	8001cc2 <_lseek>
 80178b8:	1c43      	adds	r3, r0, #1
 80178ba:	d102      	bne.n	80178c2 <_lseek_r+0x1e>
 80178bc:	682b      	ldr	r3, [r5, #0]
 80178be:	b103      	cbz	r3, 80178c2 <_lseek_r+0x1e>
 80178c0:	6023      	str	r3, [r4, #0]
 80178c2:	bd38      	pop	{r3, r4, r5, pc}
 80178c4:	2000b33c 	.word	0x2000b33c

080178c8 <_read_r>:
 80178c8:	b538      	push	{r3, r4, r5, lr}
 80178ca:	4d07      	ldr	r5, [pc, #28]	@ (80178e8 <_read_r+0x20>)
 80178cc:	4604      	mov	r4, r0
 80178ce:	4608      	mov	r0, r1
 80178d0:	4611      	mov	r1, r2
 80178d2:	2200      	movs	r2, #0
 80178d4:	602a      	str	r2, [r5, #0]
 80178d6:	461a      	mov	r2, r3
 80178d8:	f7ea f993 	bl	8001c02 <_read>
 80178dc:	1c43      	adds	r3, r0, #1
 80178de:	d102      	bne.n	80178e6 <_read_r+0x1e>
 80178e0:	682b      	ldr	r3, [r5, #0]
 80178e2:	b103      	cbz	r3, 80178e6 <_read_r+0x1e>
 80178e4:	6023      	str	r3, [r4, #0]
 80178e6:	bd38      	pop	{r3, r4, r5, pc}
 80178e8:	2000b33c 	.word	0x2000b33c

080178ec <_sbrk_r>:
 80178ec:	b538      	push	{r3, r4, r5, lr}
 80178ee:	4d06      	ldr	r5, [pc, #24]	@ (8017908 <_sbrk_r+0x1c>)
 80178f0:	2300      	movs	r3, #0
 80178f2:	4604      	mov	r4, r0
 80178f4:	4608      	mov	r0, r1
 80178f6:	602b      	str	r3, [r5, #0]
 80178f8:	f7ea f9f0 	bl	8001cdc <_sbrk>
 80178fc:	1c43      	adds	r3, r0, #1
 80178fe:	d102      	bne.n	8017906 <_sbrk_r+0x1a>
 8017900:	682b      	ldr	r3, [r5, #0]
 8017902:	b103      	cbz	r3, 8017906 <_sbrk_r+0x1a>
 8017904:	6023      	str	r3, [r4, #0]
 8017906:	bd38      	pop	{r3, r4, r5, pc}
 8017908:	2000b33c 	.word	0x2000b33c

0801790c <_write_r>:
 801790c:	b538      	push	{r3, r4, r5, lr}
 801790e:	4d07      	ldr	r5, [pc, #28]	@ (801792c <_write_r+0x20>)
 8017910:	4604      	mov	r4, r0
 8017912:	4608      	mov	r0, r1
 8017914:	4611      	mov	r1, r2
 8017916:	2200      	movs	r2, #0
 8017918:	602a      	str	r2, [r5, #0]
 801791a:	461a      	mov	r2, r3
 801791c:	f7ea f98e 	bl	8001c3c <_write>
 8017920:	1c43      	adds	r3, r0, #1
 8017922:	d102      	bne.n	801792a <_write_r+0x1e>
 8017924:	682b      	ldr	r3, [r5, #0]
 8017926:	b103      	cbz	r3, 801792a <_write_r+0x1e>
 8017928:	6023      	str	r3, [r4, #0]
 801792a:	bd38      	pop	{r3, r4, r5, pc}
 801792c:	2000b33c 	.word	0x2000b33c

08017930 <__errno>:
 8017930:	4b01      	ldr	r3, [pc, #4]	@ (8017938 <__errno+0x8>)
 8017932:	6818      	ldr	r0, [r3, #0]
 8017934:	4770      	bx	lr
 8017936:	bf00      	nop
 8017938:	20000338 	.word	0x20000338

0801793c <__libc_init_array>:
 801793c:	b570      	push	{r4, r5, r6, lr}
 801793e:	4d0d      	ldr	r5, [pc, #52]	@ (8017974 <__libc_init_array+0x38>)
 8017940:	4c0d      	ldr	r4, [pc, #52]	@ (8017978 <__libc_init_array+0x3c>)
 8017942:	1b64      	subs	r4, r4, r5
 8017944:	10a4      	asrs	r4, r4, #2
 8017946:	2600      	movs	r6, #0
 8017948:	42a6      	cmp	r6, r4
 801794a:	d109      	bne.n	8017960 <__libc_init_array+0x24>
 801794c:	4d0b      	ldr	r5, [pc, #44]	@ (801797c <__libc_init_array+0x40>)
 801794e:	4c0c      	ldr	r4, [pc, #48]	@ (8017980 <__libc_init_array+0x44>)
 8017950:	f000 fef8 	bl	8018744 <_init>
 8017954:	1b64      	subs	r4, r4, r5
 8017956:	10a4      	asrs	r4, r4, #2
 8017958:	2600      	movs	r6, #0
 801795a:	42a6      	cmp	r6, r4
 801795c:	d105      	bne.n	801796a <__libc_init_array+0x2e>
 801795e:	bd70      	pop	{r4, r5, r6, pc}
 8017960:	f855 3b04 	ldr.w	r3, [r5], #4
 8017964:	4798      	blx	r3
 8017966:	3601      	adds	r6, #1
 8017968:	e7ee      	b.n	8017948 <__libc_init_array+0xc>
 801796a:	f855 3b04 	ldr.w	r3, [r5], #4
 801796e:	4798      	blx	r3
 8017970:	3601      	adds	r6, #1
 8017972:	e7f2      	b.n	801795a <__libc_init_array+0x1e>
 8017974:	080199bc 	.word	0x080199bc
 8017978:	080199bc 	.word	0x080199bc
 801797c:	080199bc 	.word	0x080199bc
 8017980:	080199c8 	.word	0x080199c8

08017984 <__retarget_lock_init_recursive>:
 8017984:	4770      	bx	lr

08017986 <__retarget_lock_acquire_recursive>:
 8017986:	4770      	bx	lr

08017988 <__retarget_lock_release_recursive>:
 8017988:	4770      	bx	lr

0801798a <strcpy>:
 801798a:	4603      	mov	r3, r0
 801798c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017990:	f803 2b01 	strb.w	r2, [r3], #1
 8017994:	2a00      	cmp	r2, #0
 8017996:	d1f9      	bne.n	801798c <strcpy+0x2>
 8017998:	4770      	bx	lr

0801799a <memcpy>:
 801799a:	440a      	add	r2, r1
 801799c:	4291      	cmp	r1, r2
 801799e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80179a2:	d100      	bne.n	80179a6 <memcpy+0xc>
 80179a4:	4770      	bx	lr
 80179a6:	b510      	push	{r4, lr}
 80179a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80179ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80179b0:	4291      	cmp	r1, r2
 80179b2:	d1f9      	bne.n	80179a8 <memcpy+0xe>
 80179b4:	bd10      	pop	{r4, pc}
	...

080179b8 <__assert_func>:
 80179b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80179ba:	4614      	mov	r4, r2
 80179bc:	461a      	mov	r2, r3
 80179be:	4b09      	ldr	r3, [pc, #36]	@ (80179e4 <__assert_func+0x2c>)
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	4605      	mov	r5, r0
 80179c4:	68d8      	ldr	r0, [r3, #12]
 80179c6:	b954      	cbnz	r4, 80179de <__assert_func+0x26>
 80179c8:	4b07      	ldr	r3, [pc, #28]	@ (80179e8 <__assert_func+0x30>)
 80179ca:	461c      	mov	r4, r3
 80179cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80179d0:	9100      	str	r1, [sp, #0]
 80179d2:	462b      	mov	r3, r5
 80179d4:	4905      	ldr	r1, [pc, #20]	@ (80179ec <__assert_func+0x34>)
 80179d6:	f000 fd3f 	bl	8018458 <fiprintf>
 80179da:	f000 fde3 	bl	80185a4 <abort>
 80179de:	4b04      	ldr	r3, [pc, #16]	@ (80179f0 <__assert_func+0x38>)
 80179e0:	e7f4      	b.n	80179cc <__assert_func+0x14>
 80179e2:	bf00      	nop
 80179e4:	20000338 	.word	0x20000338
 80179e8:	0801997d 	.word	0x0801997d
 80179ec:	0801994f 	.word	0x0801994f
 80179f0:	08019942 	.word	0x08019942

080179f4 <__env_lock>:
 80179f4:	4801      	ldr	r0, [pc, #4]	@ (80179fc <__env_lock+0x8>)
 80179f6:	f7ff bfc6 	b.w	8017986 <__retarget_lock_acquire_recursive>
 80179fa:	bf00      	nop
 80179fc:	2000b340 	.word	0x2000b340

08017a00 <__env_unlock>:
 8017a00:	4801      	ldr	r0, [pc, #4]	@ (8017a08 <__env_unlock+0x8>)
 8017a02:	f7ff bfc1 	b.w	8017988 <__retarget_lock_release_recursive>
 8017a06:	bf00      	nop
 8017a08:	2000b340 	.word	0x2000b340

08017a0c <_free_r>:
 8017a0c:	b538      	push	{r3, r4, r5, lr}
 8017a0e:	4605      	mov	r5, r0
 8017a10:	2900      	cmp	r1, #0
 8017a12:	d041      	beq.n	8017a98 <_free_r+0x8c>
 8017a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a18:	1f0c      	subs	r4, r1, #4
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	bfb8      	it	lt
 8017a1e:	18e4      	addlt	r4, r4, r3
 8017a20:	f7ff fc1e 	bl	8017260 <__malloc_lock>
 8017a24:	4a1d      	ldr	r2, [pc, #116]	@ (8017a9c <_free_r+0x90>)
 8017a26:	6813      	ldr	r3, [r2, #0]
 8017a28:	b933      	cbnz	r3, 8017a38 <_free_r+0x2c>
 8017a2a:	6063      	str	r3, [r4, #4]
 8017a2c:	6014      	str	r4, [r2, #0]
 8017a2e:	4628      	mov	r0, r5
 8017a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017a34:	f7ff bc1a 	b.w	801726c <__malloc_unlock>
 8017a38:	42a3      	cmp	r3, r4
 8017a3a:	d908      	bls.n	8017a4e <_free_r+0x42>
 8017a3c:	6820      	ldr	r0, [r4, #0]
 8017a3e:	1821      	adds	r1, r4, r0
 8017a40:	428b      	cmp	r3, r1
 8017a42:	bf01      	itttt	eq
 8017a44:	6819      	ldreq	r1, [r3, #0]
 8017a46:	685b      	ldreq	r3, [r3, #4]
 8017a48:	1809      	addeq	r1, r1, r0
 8017a4a:	6021      	streq	r1, [r4, #0]
 8017a4c:	e7ed      	b.n	8017a2a <_free_r+0x1e>
 8017a4e:	461a      	mov	r2, r3
 8017a50:	685b      	ldr	r3, [r3, #4]
 8017a52:	b10b      	cbz	r3, 8017a58 <_free_r+0x4c>
 8017a54:	42a3      	cmp	r3, r4
 8017a56:	d9fa      	bls.n	8017a4e <_free_r+0x42>
 8017a58:	6811      	ldr	r1, [r2, #0]
 8017a5a:	1850      	adds	r0, r2, r1
 8017a5c:	42a0      	cmp	r0, r4
 8017a5e:	d10b      	bne.n	8017a78 <_free_r+0x6c>
 8017a60:	6820      	ldr	r0, [r4, #0]
 8017a62:	4401      	add	r1, r0
 8017a64:	1850      	adds	r0, r2, r1
 8017a66:	4283      	cmp	r3, r0
 8017a68:	6011      	str	r1, [r2, #0]
 8017a6a:	d1e0      	bne.n	8017a2e <_free_r+0x22>
 8017a6c:	6818      	ldr	r0, [r3, #0]
 8017a6e:	685b      	ldr	r3, [r3, #4]
 8017a70:	6053      	str	r3, [r2, #4]
 8017a72:	4408      	add	r0, r1
 8017a74:	6010      	str	r0, [r2, #0]
 8017a76:	e7da      	b.n	8017a2e <_free_r+0x22>
 8017a78:	d902      	bls.n	8017a80 <_free_r+0x74>
 8017a7a:	230c      	movs	r3, #12
 8017a7c:	602b      	str	r3, [r5, #0]
 8017a7e:	e7d6      	b.n	8017a2e <_free_r+0x22>
 8017a80:	6820      	ldr	r0, [r4, #0]
 8017a82:	1821      	adds	r1, r4, r0
 8017a84:	428b      	cmp	r3, r1
 8017a86:	bf04      	itt	eq
 8017a88:	6819      	ldreq	r1, [r3, #0]
 8017a8a:	685b      	ldreq	r3, [r3, #4]
 8017a8c:	6063      	str	r3, [r4, #4]
 8017a8e:	bf04      	itt	eq
 8017a90:	1809      	addeq	r1, r1, r0
 8017a92:	6021      	streq	r1, [r4, #0]
 8017a94:	6054      	str	r4, [r2, #4]
 8017a96:	e7ca      	b.n	8017a2e <_free_r+0x22>
 8017a98:	bd38      	pop	{r3, r4, r5, pc}
 8017a9a:	bf00      	nop
 8017a9c:	2000b1fc 	.word	0x2000b1fc

08017aa0 <_malloc_usable_size_r>:
 8017aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017aa4:	1f18      	subs	r0, r3, #4
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	bfbc      	itt	lt
 8017aaa:	580b      	ldrlt	r3, [r1, r0]
 8017aac:	18c0      	addlt	r0, r0, r3
 8017aae:	4770      	bx	lr

08017ab0 <__ssputs_r>:
 8017ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ab4:	688e      	ldr	r6, [r1, #8]
 8017ab6:	461f      	mov	r7, r3
 8017ab8:	42be      	cmp	r6, r7
 8017aba:	680b      	ldr	r3, [r1, #0]
 8017abc:	4682      	mov	sl, r0
 8017abe:	460c      	mov	r4, r1
 8017ac0:	4690      	mov	r8, r2
 8017ac2:	d82d      	bhi.n	8017b20 <__ssputs_r+0x70>
 8017ac4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017ac8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017acc:	d026      	beq.n	8017b1c <__ssputs_r+0x6c>
 8017ace:	6965      	ldr	r5, [r4, #20]
 8017ad0:	6909      	ldr	r1, [r1, #16]
 8017ad2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017ad6:	eba3 0901 	sub.w	r9, r3, r1
 8017ada:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017ade:	1c7b      	adds	r3, r7, #1
 8017ae0:	444b      	add	r3, r9
 8017ae2:	106d      	asrs	r5, r5, #1
 8017ae4:	429d      	cmp	r5, r3
 8017ae6:	bf38      	it	cc
 8017ae8:	461d      	movcc	r5, r3
 8017aea:	0553      	lsls	r3, r2, #21
 8017aec:	d527      	bpl.n	8017b3e <__ssputs_r+0x8e>
 8017aee:	4629      	mov	r1, r5
 8017af0:	f7ff fb36 	bl	8017160 <_malloc_r>
 8017af4:	4606      	mov	r6, r0
 8017af6:	b360      	cbz	r0, 8017b52 <__ssputs_r+0xa2>
 8017af8:	6921      	ldr	r1, [r4, #16]
 8017afa:	464a      	mov	r2, r9
 8017afc:	f7ff ff4d 	bl	801799a <memcpy>
 8017b00:	89a3      	ldrh	r3, [r4, #12]
 8017b02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017b0a:	81a3      	strh	r3, [r4, #12]
 8017b0c:	6126      	str	r6, [r4, #16]
 8017b0e:	6165      	str	r5, [r4, #20]
 8017b10:	444e      	add	r6, r9
 8017b12:	eba5 0509 	sub.w	r5, r5, r9
 8017b16:	6026      	str	r6, [r4, #0]
 8017b18:	60a5      	str	r5, [r4, #8]
 8017b1a:	463e      	mov	r6, r7
 8017b1c:	42be      	cmp	r6, r7
 8017b1e:	d900      	bls.n	8017b22 <__ssputs_r+0x72>
 8017b20:	463e      	mov	r6, r7
 8017b22:	6820      	ldr	r0, [r4, #0]
 8017b24:	4632      	mov	r2, r6
 8017b26:	4641      	mov	r1, r8
 8017b28:	f7ff fe54 	bl	80177d4 <memmove>
 8017b2c:	68a3      	ldr	r3, [r4, #8]
 8017b2e:	1b9b      	subs	r3, r3, r6
 8017b30:	60a3      	str	r3, [r4, #8]
 8017b32:	6823      	ldr	r3, [r4, #0]
 8017b34:	4433      	add	r3, r6
 8017b36:	6023      	str	r3, [r4, #0]
 8017b38:	2000      	movs	r0, #0
 8017b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b3e:	462a      	mov	r2, r5
 8017b40:	f7ff fc0e 	bl	8017360 <_realloc_r>
 8017b44:	4606      	mov	r6, r0
 8017b46:	2800      	cmp	r0, #0
 8017b48:	d1e0      	bne.n	8017b0c <__ssputs_r+0x5c>
 8017b4a:	6921      	ldr	r1, [r4, #16]
 8017b4c:	4650      	mov	r0, sl
 8017b4e:	f7ff ff5d 	bl	8017a0c <_free_r>
 8017b52:	230c      	movs	r3, #12
 8017b54:	f8ca 3000 	str.w	r3, [sl]
 8017b58:	89a3      	ldrh	r3, [r4, #12]
 8017b5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b5e:	81a3      	strh	r3, [r4, #12]
 8017b60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017b64:	e7e9      	b.n	8017b3a <__ssputs_r+0x8a>
	...

08017b68 <_svfiprintf_r>:
 8017b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b6c:	4698      	mov	r8, r3
 8017b6e:	898b      	ldrh	r3, [r1, #12]
 8017b70:	061b      	lsls	r3, r3, #24
 8017b72:	b09d      	sub	sp, #116	@ 0x74
 8017b74:	4607      	mov	r7, r0
 8017b76:	460d      	mov	r5, r1
 8017b78:	4614      	mov	r4, r2
 8017b7a:	d510      	bpl.n	8017b9e <_svfiprintf_r+0x36>
 8017b7c:	690b      	ldr	r3, [r1, #16]
 8017b7e:	b973      	cbnz	r3, 8017b9e <_svfiprintf_r+0x36>
 8017b80:	2140      	movs	r1, #64	@ 0x40
 8017b82:	f7ff faed 	bl	8017160 <_malloc_r>
 8017b86:	6028      	str	r0, [r5, #0]
 8017b88:	6128      	str	r0, [r5, #16]
 8017b8a:	b930      	cbnz	r0, 8017b9a <_svfiprintf_r+0x32>
 8017b8c:	230c      	movs	r3, #12
 8017b8e:	603b      	str	r3, [r7, #0]
 8017b90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017b94:	b01d      	add	sp, #116	@ 0x74
 8017b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b9a:	2340      	movs	r3, #64	@ 0x40
 8017b9c:	616b      	str	r3, [r5, #20]
 8017b9e:	2300      	movs	r3, #0
 8017ba0:	9309      	str	r3, [sp, #36]	@ 0x24
 8017ba2:	2320      	movs	r3, #32
 8017ba4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017ba8:	f8cd 800c 	str.w	r8, [sp, #12]
 8017bac:	2330      	movs	r3, #48	@ 0x30
 8017bae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017d4c <_svfiprintf_r+0x1e4>
 8017bb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017bb6:	f04f 0901 	mov.w	r9, #1
 8017bba:	4623      	mov	r3, r4
 8017bbc:	469a      	mov	sl, r3
 8017bbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017bc2:	b10a      	cbz	r2, 8017bc8 <_svfiprintf_r+0x60>
 8017bc4:	2a25      	cmp	r2, #37	@ 0x25
 8017bc6:	d1f9      	bne.n	8017bbc <_svfiprintf_r+0x54>
 8017bc8:	ebba 0b04 	subs.w	fp, sl, r4
 8017bcc:	d00b      	beq.n	8017be6 <_svfiprintf_r+0x7e>
 8017bce:	465b      	mov	r3, fp
 8017bd0:	4622      	mov	r2, r4
 8017bd2:	4629      	mov	r1, r5
 8017bd4:	4638      	mov	r0, r7
 8017bd6:	f7ff ff6b 	bl	8017ab0 <__ssputs_r>
 8017bda:	3001      	adds	r0, #1
 8017bdc:	f000 80a7 	beq.w	8017d2e <_svfiprintf_r+0x1c6>
 8017be0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017be2:	445a      	add	r2, fp
 8017be4:	9209      	str	r2, [sp, #36]	@ 0x24
 8017be6:	f89a 3000 	ldrb.w	r3, [sl]
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	f000 809f 	beq.w	8017d2e <_svfiprintf_r+0x1c6>
 8017bf0:	2300      	movs	r3, #0
 8017bf2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017bf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017bfa:	f10a 0a01 	add.w	sl, sl, #1
 8017bfe:	9304      	str	r3, [sp, #16]
 8017c00:	9307      	str	r3, [sp, #28]
 8017c02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017c06:	931a      	str	r3, [sp, #104]	@ 0x68
 8017c08:	4654      	mov	r4, sl
 8017c0a:	2205      	movs	r2, #5
 8017c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c10:	484e      	ldr	r0, [pc, #312]	@ (8017d4c <_svfiprintf_r+0x1e4>)
 8017c12:	f7e8 fb1d 	bl	8000250 <memchr>
 8017c16:	9a04      	ldr	r2, [sp, #16]
 8017c18:	b9d8      	cbnz	r0, 8017c52 <_svfiprintf_r+0xea>
 8017c1a:	06d0      	lsls	r0, r2, #27
 8017c1c:	bf44      	itt	mi
 8017c1e:	2320      	movmi	r3, #32
 8017c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017c24:	0711      	lsls	r1, r2, #28
 8017c26:	bf44      	itt	mi
 8017c28:	232b      	movmi	r3, #43	@ 0x2b
 8017c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8017c32:	2b2a      	cmp	r3, #42	@ 0x2a
 8017c34:	d015      	beq.n	8017c62 <_svfiprintf_r+0xfa>
 8017c36:	9a07      	ldr	r2, [sp, #28]
 8017c38:	4654      	mov	r4, sl
 8017c3a:	2000      	movs	r0, #0
 8017c3c:	f04f 0c0a 	mov.w	ip, #10
 8017c40:	4621      	mov	r1, r4
 8017c42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017c46:	3b30      	subs	r3, #48	@ 0x30
 8017c48:	2b09      	cmp	r3, #9
 8017c4a:	d94b      	bls.n	8017ce4 <_svfiprintf_r+0x17c>
 8017c4c:	b1b0      	cbz	r0, 8017c7c <_svfiprintf_r+0x114>
 8017c4e:	9207      	str	r2, [sp, #28]
 8017c50:	e014      	b.n	8017c7c <_svfiprintf_r+0x114>
 8017c52:	eba0 0308 	sub.w	r3, r0, r8
 8017c56:	fa09 f303 	lsl.w	r3, r9, r3
 8017c5a:	4313      	orrs	r3, r2
 8017c5c:	9304      	str	r3, [sp, #16]
 8017c5e:	46a2      	mov	sl, r4
 8017c60:	e7d2      	b.n	8017c08 <_svfiprintf_r+0xa0>
 8017c62:	9b03      	ldr	r3, [sp, #12]
 8017c64:	1d19      	adds	r1, r3, #4
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	9103      	str	r1, [sp, #12]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	bfbb      	ittet	lt
 8017c6e:	425b      	neglt	r3, r3
 8017c70:	f042 0202 	orrlt.w	r2, r2, #2
 8017c74:	9307      	strge	r3, [sp, #28]
 8017c76:	9307      	strlt	r3, [sp, #28]
 8017c78:	bfb8      	it	lt
 8017c7a:	9204      	strlt	r2, [sp, #16]
 8017c7c:	7823      	ldrb	r3, [r4, #0]
 8017c7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8017c80:	d10a      	bne.n	8017c98 <_svfiprintf_r+0x130>
 8017c82:	7863      	ldrb	r3, [r4, #1]
 8017c84:	2b2a      	cmp	r3, #42	@ 0x2a
 8017c86:	d132      	bne.n	8017cee <_svfiprintf_r+0x186>
 8017c88:	9b03      	ldr	r3, [sp, #12]
 8017c8a:	1d1a      	adds	r2, r3, #4
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	9203      	str	r2, [sp, #12]
 8017c90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017c94:	3402      	adds	r4, #2
 8017c96:	9305      	str	r3, [sp, #20]
 8017c98:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017d5c <_svfiprintf_r+0x1f4>
 8017c9c:	7821      	ldrb	r1, [r4, #0]
 8017c9e:	2203      	movs	r2, #3
 8017ca0:	4650      	mov	r0, sl
 8017ca2:	f7e8 fad5 	bl	8000250 <memchr>
 8017ca6:	b138      	cbz	r0, 8017cb8 <_svfiprintf_r+0x150>
 8017ca8:	9b04      	ldr	r3, [sp, #16]
 8017caa:	eba0 000a 	sub.w	r0, r0, sl
 8017cae:	2240      	movs	r2, #64	@ 0x40
 8017cb0:	4082      	lsls	r2, r0
 8017cb2:	4313      	orrs	r3, r2
 8017cb4:	3401      	adds	r4, #1
 8017cb6:	9304      	str	r3, [sp, #16]
 8017cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017cbc:	4824      	ldr	r0, [pc, #144]	@ (8017d50 <_svfiprintf_r+0x1e8>)
 8017cbe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017cc2:	2206      	movs	r2, #6
 8017cc4:	f7e8 fac4 	bl	8000250 <memchr>
 8017cc8:	2800      	cmp	r0, #0
 8017cca:	d036      	beq.n	8017d3a <_svfiprintf_r+0x1d2>
 8017ccc:	4b21      	ldr	r3, [pc, #132]	@ (8017d54 <_svfiprintf_r+0x1ec>)
 8017cce:	bb1b      	cbnz	r3, 8017d18 <_svfiprintf_r+0x1b0>
 8017cd0:	9b03      	ldr	r3, [sp, #12]
 8017cd2:	3307      	adds	r3, #7
 8017cd4:	f023 0307 	bic.w	r3, r3, #7
 8017cd8:	3308      	adds	r3, #8
 8017cda:	9303      	str	r3, [sp, #12]
 8017cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017cde:	4433      	add	r3, r6
 8017ce0:	9309      	str	r3, [sp, #36]	@ 0x24
 8017ce2:	e76a      	b.n	8017bba <_svfiprintf_r+0x52>
 8017ce4:	fb0c 3202 	mla	r2, ip, r2, r3
 8017ce8:	460c      	mov	r4, r1
 8017cea:	2001      	movs	r0, #1
 8017cec:	e7a8      	b.n	8017c40 <_svfiprintf_r+0xd8>
 8017cee:	2300      	movs	r3, #0
 8017cf0:	3401      	adds	r4, #1
 8017cf2:	9305      	str	r3, [sp, #20]
 8017cf4:	4619      	mov	r1, r3
 8017cf6:	f04f 0c0a 	mov.w	ip, #10
 8017cfa:	4620      	mov	r0, r4
 8017cfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017d00:	3a30      	subs	r2, #48	@ 0x30
 8017d02:	2a09      	cmp	r2, #9
 8017d04:	d903      	bls.n	8017d0e <_svfiprintf_r+0x1a6>
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d0c6      	beq.n	8017c98 <_svfiprintf_r+0x130>
 8017d0a:	9105      	str	r1, [sp, #20]
 8017d0c:	e7c4      	b.n	8017c98 <_svfiprintf_r+0x130>
 8017d0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017d12:	4604      	mov	r4, r0
 8017d14:	2301      	movs	r3, #1
 8017d16:	e7f0      	b.n	8017cfa <_svfiprintf_r+0x192>
 8017d18:	ab03      	add	r3, sp, #12
 8017d1a:	9300      	str	r3, [sp, #0]
 8017d1c:	462a      	mov	r2, r5
 8017d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8017d58 <_svfiprintf_r+0x1f0>)
 8017d20:	a904      	add	r1, sp, #16
 8017d22:	4638      	mov	r0, r7
 8017d24:	f3af 8000 	nop.w
 8017d28:	1c42      	adds	r2, r0, #1
 8017d2a:	4606      	mov	r6, r0
 8017d2c:	d1d6      	bne.n	8017cdc <_svfiprintf_r+0x174>
 8017d2e:	89ab      	ldrh	r3, [r5, #12]
 8017d30:	065b      	lsls	r3, r3, #25
 8017d32:	f53f af2d 	bmi.w	8017b90 <_svfiprintf_r+0x28>
 8017d36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017d38:	e72c      	b.n	8017b94 <_svfiprintf_r+0x2c>
 8017d3a:	ab03      	add	r3, sp, #12
 8017d3c:	9300      	str	r3, [sp, #0]
 8017d3e:	462a      	mov	r2, r5
 8017d40:	4b05      	ldr	r3, [pc, #20]	@ (8017d58 <_svfiprintf_r+0x1f0>)
 8017d42:	a904      	add	r1, sp, #16
 8017d44:	4638      	mov	r0, r7
 8017d46:	f000 f9bb 	bl	80180c0 <_printf_i>
 8017d4a:	e7ed      	b.n	8017d28 <_svfiprintf_r+0x1c0>
 8017d4c:	0801997e 	.word	0x0801997e
 8017d50:	08019988 	.word	0x08019988
 8017d54:	00000000 	.word	0x00000000
 8017d58:	08017ab1 	.word	0x08017ab1
 8017d5c:	08019984 	.word	0x08019984

08017d60 <__sfputc_r>:
 8017d60:	6893      	ldr	r3, [r2, #8]
 8017d62:	3b01      	subs	r3, #1
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	b410      	push	{r4}
 8017d68:	6093      	str	r3, [r2, #8]
 8017d6a:	da08      	bge.n	8017d7e <__sfputc_r+0x1e>
 8017d6c:	6994      	ldr	r4, [r2, #24]
 8017d6e:	42a3      	cmp	r3, r4
 8017d70:	db01      	blt.n	8017d76 <__sfputc_r+0x16>
 8017d72:	290a      	cmp	r1, #10
 8017d74:	d103      	bne.n	8017d7e <__sfputc_r+0x1e>
 8017d76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d7a:	f000 bb7f 	b.w	801847c <__swbuf_r>
 8017d7e:	6813      	ldr	r3, [r2, #0]
 8017d80:	1c58      	adds	r0, r3, #1
 8017d82:	6010      	str	r0, [r2, #0]
 8017d84:	7019      	strb	r1, [r3, #0]
 8017d86:	4608      	mov	r0, r1
 8017d88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d8c:	4770      	bx	lr

08017d8e <__sfputs_r>:
 8017d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d90:	4606      	mov	r6, r0
 8017d92:	460f      	mov	r7, r1
 8017d94:	4614      	mov	r4, r2
 8017d96:	18d5      	adds	r5, r2, r3
 8017d98:	42ac      	cmp	r4, r5
 8017d9a:	d101      	bne.n	8017da0 <__sfputs_r+0x12>
 8017d9c:	2000      	movs	r0, #0
 8017d9e:	e007      	b.n	8017db0 <__sfputs_r+0x22>
 8017da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017da4:	463a      	mov	r2, r7
 8017da6:	4630      	mov	r0, r6
 8017da8:	f7ff ffda 	bl	8017d60 <__sfputc_r>
 8017dac:	1c43      	adds	r3, r0, #1
 8017dae:	d1f3      	bne.n	8017d98 <__sfputs_r+0xa>
 8017db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017db4 <_vfiprintf_r>:
 8017db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017db8:	460d      	mov	r5, r1
 8017dba:	b09d      	sub	sp, #116	@ 0x74
 8017dbc:	4614      	mov	r4, r2
 8017dbe:	4698      	mov	r8, r3
 8017dc0:	4606      	mov	r6, r0
 8017dc2:	b118      	cbz	r0, 8017dcc <_vfiprintf_r+0x18>
 8017dc4:	6a03      	ldr	r3, [r0, #32]
 8017dc6:	b90b      	cbnz	r3, 8017dcc <_vfiprintf_r+0x18>
 8017dc8:	f7ff fbfc 	bl	80175c4 <__sinit>
 8017dcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017dce:	07d9      	lsls	r1, r3, #31
 8017dd0:	d405      	bmi.n	8017dde <_vfiprintf_r+0x2a>
 8017dd2:	89ab      	ldrh	r3, [r5, #12]
 8017dd4:	059a      	lsls	r2, r3, #22
 8017dd6:	d402      	bmi.n	8017dde <_vfiprintf_r+0x2a>
 8017dd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017dda:	f7ff fdd4 	bl	8017986 <__retarget_lock_acquire_recursive>
 8017dde:	89ab      	ldrh	r3, [r5, #12]
 8017de0:	071b      	lsls	r3, r3, #28
 8017de2:	d501      	bpl.n	8017de8 <_vfiprintf_r+0x34>
 8017de4:	692b      	ldr	r3, [r5, #16]
 8017de6:	b99b      	cbnz	r3, 8017e10 <_vfiprintf_r+0x5c>
 8017de8:	4629      	mov	r1, r5
 8017dea:	4630      	mov	r0, r6
 8017dec:	f000 fb84 	bl	80184f8 <__swsetup_r>
 8017df0:	b170      	cbz	r0, 8017e10 <_vfiprintf_r+0x5c>
 8017df2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017df4:	07dc      	lsls	r4, r3, #31
 8017df6:	d504      	bpl.n	8017e02 <_vfiprintf_r+0x4e>
 8017df8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017dfc:	b01d      	add	sp, #116	@ 0x74
 8017dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e02:	89ab      	ldrh	r3, [r5, #12]
 8017e04:	0598      	lsls	r0, r3, #22
 8017e06:	d4f7      	bmi.n	8017df8 <_vfiprintf_r+0x44>
 8017e08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017e0a:	f7ff fdbd 	bl	8017988 <__retarget_lock_release_recursive>
 8017e0e:	e7f3      	b.n	8017df8 <_vfiprintf_r+0x44>
 8017e10:	2300      	movs	r3, #0
 8017e12:	9309      	str	r3, [sp, #36]	@ 0x24
 8017e14:	2320      	movs	r3, #32
 8017e16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017e1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8017e1e:	2330      	movs	r3, #48	@ 0x30
 8017e20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017fd0 <_vfiprintf_r+0x21c>
 8017e24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017e28:	f04f 0901 	mov.w	r9, #1
 8017e2c:	4623      	mov	r3, r4
 8017e2e:	469a      	mov	sl, r3
 8017e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e34:	b10a      	cbz	r2, 8017e3a <_vfiprintf_r+0x86>
 8017e36:	2a25      	cmp	r2, #37	@ 0x25
 8017e38:	d1f9      	bne.n	8017e2e <_vfiprintf_r+0x7a>
 8017e3a:	ebba 0b04 	subs.w	fp, sl, r4
 8017e3e:	d00b      	beq.n	8017e58 <_vfiprintf_r+0xa4>
 8017e40:	465b      	mov	r3, fp
 8017e42:	4622      	mov	r2, r4
 8017e44:	4629      	mov	r1, r5
 8017e46:	4630      	mov	r0, r6
 8017e48:	f7ff ffa1 	bl	8017d8e <__sfputs_r>
 8017e4c:	3001      	adds	r0, #1
 8017e4e:	f000 80a7 	beq.w	8017fa0 <_vfiprintf_r+0x1ec>
 8017e52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017e54:	445a      	add	r2, fp
 8017e56:	9209      	str	r2, [sp, #36]	@ 0x24
 8017e58:	f89a 3000 	ldrb.w	r3, [sl]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	f000 809f 	beq.w	8017fa0 <_vfiprintf_r+0x1ec>
 8017e62:	2300      	movs	r3, #0
 8017e64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017e6c:	f10a 0a01 	add.w	sl, sl, #1
 8017e70:	9304      	str	r3, [sp, #16]
 8017e72:	9307      	str	r3, [sp, #28]
 8017e74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017e78:	931a      	str	r3, [sp, #104]	@ 0x68
 8017e7a:	4654      	mov	r4, sl
 8017e7c:	2205      	movs	r2, #5
 8017e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e82:	4853      	ldr	r0, [pc, #332]	@ (8017fd0 <_vfiprintf_r+0x21c>)
 8017e84:	f7e8 f9e4 	bl	8000250 <memchr>
 8017e88:	9a04      	ldr	r2, [sp, #16]
 8017e8a:	b9d8      	cbnz	r0, 8017ec4 <_vfiprintf_r+0x110>
 8017e8c:	06d1      	lsls	r1, r2, #27
 8017e8e:	bf44      	itt	mi
 8017e90:	2320      	movmi	r3, #32
 8017e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017e96:	0713      	lsls	r3, r2, #28
 8017e98:	bf44      	itt	mi
 8017e9a:	232b      	movmi	r3, #43	@ 0x2b
 8017e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8017ea4:	2b2a      	cmp	r3, #42	@ 0x2a
 8017ea6:	d015      	beq.n	8017ed4 <_vfiprintf_r+0x120>
 8017ea8:	9a07      	ldr	r2, [sp, #28]
 8017eaa:	4654      	mov	r4, sl
 8017eac:	2000      	movs	r0, #0
 8017eae:	f04f 0c0a 	mov.w	ip, #10
 8017eb2:	4621      	mov	r1, r4
 8017eb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017eb8:	3b30      	subs	r3, #48	@ 0x30
 8017eba:	2b09      	cmp	r3, #9
 8017ebc:	d94b      	bls.n	8017f56 <_vfiprintf_r+0x1a2>
 8017ebe:	b1b0      	cbz	r0, 8017eee <_vfiprintf_r+0x13a>
 8017ec0:	9207      	str	r2, [sp, #28]
 8017ec2:	e014      	b.n	8017eee <_vfiprintf_r+0x13a>
 8017ec4:	eba0 0308 	sub.w	r3, r0, r8
 8017ec8:	fa09 f303 	lsl.w	r3, r9, r3
 8017ecc:	4313      	orrs	r3, r2
 8017ece:	9304      	str	r3, [sp, #16]
 8017ed0:	46a2      	mov	sl, r4
 8017ed2:	e7d2      	b.n	8017e7a <_vfiprintf_r+0xc6>
 8017ed4:	9b03      	ldr	r3, [sp, #12]
 8017ed6:	1d19      	adds	r1, r3, #4
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	9103      	str	r1, [sp, #12]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	bfbb      	ittet	lt
 8017ee0:	425b      	neglt	r3, r3
 8017ee2:	f042 0202 	orrlt.w	r2, r2, #2
 8017ee6:	9307      	strge	r3, [sp, #28]
 8017ee8:	9307      	strlt	r3, [sp, #28]
 8017eea:	bfb8      	it	lt
 8017eec:	9204      	strlt	r2, [sp, #16]
 8017eee:	7823      	ldrb	r3, [r4, #0]
 8017ef0:	2b2e      	cmp	r3, #46	@ 0x2e
 8017ef2:	d10a      	bne.n	8017f0a <_vfiprintf_r+0x156>
 8017ef4:	7863      	ldrb	r3, [r4, #1]
 8017ef6:	2b2a      	cmp	r3, #42	@ 0x2a
 8017ef8:	d132      	bne.n	8017f60 <_vfiprintf_r+0x1ac>
 8017efa:	9b03      	ldr	r3, [sp, #12]
 8017efc:	1d1a      	adds	r2, r3, #4
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	9203      	str	r2, [sp, #12]
 8017f02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017f06:	3402      	adds	r4, #2
 8017f08:	9305      	str	r3, [sp, #20]
 8017f0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017fe0 <_vfiprintf_r+0x22c>
 8017f0e:	7821      	ldrb	r1, [r4, #0]
 8017f10:	2203      	movs	r2, #3
 8017f12:	4650      	mov	r0, sl
 8017f14:	f7e8 f99c 	bl	8000250 <memchr>
 8017f18:	b138      	cbz	r0, 8017f2a <_vfiprintf_r+0x176>
 8017f1a:	9b04      	ldr	r3, [sp, #16]
 8017f1c:	eba0 000a 	sub.w	r0, r0, sl
 8017f20:	2240      	movs	r2, #64	@ 0x40
 8017f22:	4082      	lsls	r2, r0
 8017f24:	4313      	orrs	r3, r2
 8017f26:	3401      	adds	r4, #1
 8017f28:	9304      	str	r3, [sp, #16]
 8017f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f2e:	4829      	ldr	r0, [pc, #164]	@ (8017fd4 <_vfiprintf_r+0x220>)
 8017f30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017f34:	2206      	movs	r2, #6
 8017f36:	f7e8 f98b 	bl	8000250 <memchr>
 8017f3a:	2800      	cmp	r0, #0
 8017f3c:	d03f      	beq.n	8017fbe <_vfiprintf_r+0x20a>
 8017f3e:	4b26      	ldr	r3, [pc, #152]	@ (8017fd8 <_vfiprintf_r+0x224>)
 8017f40:	bb1b      	cbnz	r3, 8017f8a <_vfiprintf_r+0x1d6>
 8017f42:	9b03      	ldr	r3, [sp, #12]
 8017f44:	3307      	adds	r3, #7
 8017f46:	f023 0307 	bic.w	r3, r3, #7
 8017f4a:	3308      	adds	r3, #8
 8017f4c:	9303      	str	r3, [sp, #12]
 8017f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f50:	443b      	add	r3, r7
 8017f52:	9309      	str	r3, [sp, #36]	@ 0x24
 8017f54:	e76a      	b.n	8017e2c <_vfiprintf_r+0x78>
 8017f56:	fb0c 3202 	mla	r2, ip, r2, r3
 8017f5a:	460c      	mov	r4, r1
 8017f5c:	2001      	movs	r0, #1
 8017f5e:	e7a8      	b.n	8017eb2 <_vfiprintf_r+0xfe>
 8017f60:	2300      	movs	r3, #0
 8017f62:	3401      	adds	r4, #1
 8017f64:	9305      	str	r3, [sp, #20]
 8017f66:	4619      	mov	r1, r3
 8017f68:	f04f 0c0a 	mov.w	ip, #10
 8017f6c:	4620      	mov	r0, r4
 8017f6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f72:	3a30      	subs	r2, #48	@ 0x30
 8017f74:	2a09      	cmp	r2, #9
 8017f76:	d903      	bls.n	8017f80 <_vfiprintf_r+0x1cc>
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d0c6      	beq.n	8017f0a <_vfiprintf_r+0x156>
 8017f7c:	9105      	str	r1, [sp, #20]
 8017f7e:	e7c4      	b.n	8017f0a <_vfiprintf_r+0x156>
 8017f80:	fb0c 2101 	mla	r1, ip, r1, r2
 8017f84:	4604      	mov	r4, r0
 8017f86:	2301      	movs	r3, #1
 8017f88:	e7f0      	b.n	8017f6c <_vfiprintf_r+0x1b8>
 8017f8a:	ab03      	add	r3, sp, #12
 8017f8c:	9300      	str	r3, [sp, #0]
 8017f8e:	462a      	mov	r2, r5
 8017f90:	4b12      	ldr	r3, [pc, #72]	@ (8017fdc <_vfiprintf_r+0x228>)
 8017f92:	a904      	add	r1, sp, #16
 8017f94:	4630      	mov	r0, r6
 8017f96:	f3af 8000 	nop.w
 8017f9a:	4607      	mov	r7, r0
 8017f9c:	1c78      	adds	r0, r7, #1
 8017f9e:	d1d6      	bne.n	8017f4e <_vfiprintf_r+0x19a>
 8017fa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017fa2:	07d9      	lsls	r1, r3, #31
 8017fa4:	d405      	bmi.n	8017fb2 <_vfiprintf_r+0x1fe>
 8017fa6:	89ab      	ldrh	r3, [r5, #12]
 8017fa8:	059a      	lsls	r2, r3, #22
 8017faa:	d402      	bmi.n	8017fb2 <_vfiprintf_r+0x1fe>
 8017fac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017fae:	f7ff fceb 	bl	8017988 <__retarget_lock_release_recursive>
 8017fb2:	89ab      	ldrh	r3, [r5, #12]
 8017fb4:	065b      	lsls	r3, r3, #25
 8017fb6:	f53f af1f 	bmi.w	8017df8 <_vfiprintf_r+0x44>
 8017fba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017fbc:	e71e      	b.n	8017dfc <_vfiprintf_r+0x48>
 8017fbe:	ab03      	add	r3, sp, #12
 8017fc0:	9300      	str	r3, [sp, #0]
 8017fc2:	462a      	mov	r2, r5
 8017fc4:	4b05      	ldr	r3, [pc, #20]	@ (8017fdc <_vfiprintf_r+0x228>)
 8017fc6:	a904      	add	r1, sp, #16
 8017fc8:	4630      	mov	r0, r6
 8017fca:	f000 f879 	bl	80180c0 <_printf_i>
 8017fce:	e7e4      	b.n	8017f9a <_vfiprintf_r+0x1e6>
 8017fd0:	0801997e 	.word	0x0801997e
 8017fd4:	08019988 	.word	0x08019988
 8017fd8:	00000000 	.word	0x00000000
 8017fdc:	08017d8f 	.word	0x08017d8f
 8017fe0:	08019984 	.word	0x08019984

08017fe4 <_printf_common>:
 8017fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fe8:	4616      	mov	r6, r2
 8017fea:	4698      	mov	r8, r3
 8017fec:	688a      	ldr	r2, [r1, #8]
 8017fee:	690b      	ldr	r3, [r1, #16]
 8017ff0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017ff4:	4293      	cmp	r3, r2
 8017ff6:	bfb8      	it	lt
 8017ff8:	4613      	movlt	r3, r2
 8017ffa:	6033      	str	r3, [r6, #0]
 8017ffc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018000:	4607      	mov	r7, r0
 8018002:	460c      	mov	r4, r1
 8018004:	b10a      	cbz	r2, 801800a <_printf_common+0x26>
 8018006:	3301      	adds	r3, #1
 8018008:	6033      	str	r3, [r6, #0]
 801800a:	6823      	ldr	r3, [r4, #0]
 801800c:	0699      	lsls	r1, r3, #26
 801800e:	bf42      	ittt	mi
 8018010:	6833      	ldrmi	r3, [r6, #0]
 8018012:	3302      	addmi	r3, #2
 8018014:	6033      	strmi	r3, [r6, #0]
 8018016:	6825      	ldr	r5, [r4, #0]
 8018018:	f015 0506 	ands.w	r5, r5, #6
 801801c:	d106      	bne.n	801802c <_printf_common+0x48>
 801801e:	f104 0a19 	add.w	sl, r4, #25
 8018022:	68e3      	ldr	r3, [r4, #12]
 8018024:	6832      	ldr	r2, [r6, #0]
 8018026:	1a9b      	subs	r3, r3, r2
 8018028:	42ab      	cmp	r3, r5
 801802a:	dc26      	bgt.n	801807a <_printf_common+0x96>
 801802c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018030:	6822      	ldr	r2, [r4, #0]
 8018032:	3b00      	subs	r3, #0
 8018034:	bf18      	it	ne
 8018036:	2301      	movne	r3, #1
 8018038:	0692      	lsls	r2, r2, #26
 801803a:	d42b      	bmi.n	8018094 <_printf_common+0xb0>
 801803c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018040:	4641      	mov	r1, r8
 8018042:	4638      	mov	r0, r7
 8018044:	47c8      	blx	r9
 8018046:	3001      	adds	r0, #1
 8018048:	d01e      	beq.n	8018088 <_printf_common+0xa4>
 801804a:	6823      	ldr	r3, [r4, #0]
 801804c:	6922      	ldr	r2, [r4, #16]
 801804e:	f003 0306 	and.w	r3, r3, #6
 8018052:	2b04      	cmp	r3, #4
 8018054:	bf02      	ittt	eq
 8018056:	68e5      	ldreq	r5, [r4, #12]
 8018058:	6833      	ldreq	r3, [r6, #0]
 801805a:	1aed      	subeq	r5, r5, r3
 801805c:	68a3      	ldr	r3, [r4, #8]
 801805e:	bf0c      	ite	eq
 8018060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018064:	2500      	movne	r5, #0
 8018066:	4293      	cmp	r3, r2
 8018068:	bfc4      	itt	gt
 801806a:	1a9b      	subgt	r3, r3, r2
 801806c:	18ed      	addgt	r5, r5, r3
 801806e:	2600      	movs	r6, #0
 8018070:	341a      	adds	r4, #26
 8018072:	42b5      	cmp	r5, r6
 8018074:	d11a      	bne.n	80180ac <_printf_common+0xc8>
 8018076:	2000      	movs	r0, #0
 8018078:	e008      	b.n	801808c <_printf_common+0xa8>
 801807a:	2301      	movs	r3, #1
 801807c:	4652      	mov	r2, sl
 801807e:	4641      	mov	r1, r8
 8018080:	4638      	mov	r0, r7
 8018082:	47c8      	blx	r9
 8018084:	3001      	adds	r0, #1
 8018086:	d103      	bne.n	8018090 <_printf_common+0xac>
 8018088:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801808c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018090:	3501      	adds	r5, #1
 8018092:	e7c6      	b.n	8018022 <_printf_common+0x3e>
 8018094:	18e1      	adds	r1, r4, r3
 8018096:	1c5a      	adds	r2, r3, #1
 8018098:	2030      	movs	r0, #48	@ 0x30
 801809a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801809e:	4422      	add	r2, r4
 80180a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80180a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80180a8:	3302      	adds	r3, #2
 80180aa:	e7c7      	b.n	801803c <_printf_common+0x58>
 80180ac:	2301      	movs	r3, #1
 80180ae:	4622      	mov	r2, r4
 80180b0:	4641      	mov	r1, r8
 80180b2:	4638      	mov	r0, r7
 80180b4:	47c8      	blx	r9
 80180b6:	3001      	adds	r0, #1
 80180b8:	d0e6      	beq.n	8018088 <_printf_common+0xa4>
 80180ba:	3601      	adds	r6, #1
 80180bc:	e7d9      	b.n	8018072 <_printf_common+0x8e>
	...

080180c0 <_printf_i>:
 80180c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80180c4:	7e0f      	ldrb	r7, [r1, #24]
 80180c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80180c8:	2f78      	cmp	r7, #120	@ 0x78
 80180ca:	4691      	mov	r9, r2
 80180cc:	4680      	mov	r8, r0
 80180ce:	460c      	mov	r4, r1
 80180d0:	469a      	mov	sl, r3
 80180d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80180d6:	d807      	bhi.n	80180e8 <_printf_i+0x28>
 80180d8:	2f62      	cmp	r7, #98	@ 0x62
 80180da:	d80a      	bhi.n	80180f2 <_printf_i+0x32>
 80180dc:	2f00      	cmp	r7, #0
 80180de:	f000 80d2 	beq.w	8018286 <_printf_i+0x1c6>
 80180e2:	2f58      	cmp	r7, #88	@ 0x58
 80180e4:	f000 80b9 	beq.w	801825a <_printf_i+0x19a>
 80180e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80180ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80180f0:	e03a      	b.n	8018168 <_printf_i+0xa8>
 80180f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80180f6:	2b15      	cmp	r3, #21
 80180f8:	d8f6      	bhi.n	80180e8 <_printf_i+0x28>
 80180fa:	a101      	add	r1, pc, #4	@ (adr r1, 8018100 <_printf_i+0x40>)
 80180fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018100:	08018159 	.word	0x08018159
 8018104:	0801816d 	.word	0x0801816d
 8018108:	080180e9 	.word	0x080180e9
 801810c:	080180e9 	.word	0x080180e9
 8018110:	080180e9 	.word	0x080180e9
 8018114:	080180e9 	.word	0x080180e9
 8018118:	0801816d 	.word	0x0801816d
 801811c:	080180e9 	.word	0x080180e9
 8018120:	080180e9 	.word	0x080180e9
 8018124:	080180e9 	.word	0x080180e9
 8018128:	080180e9 	.word	0x080180e9
 801812c:	0801826d 	.word	0x0801826d
 8018130:	08018197 	.word	0x08018197
 8018134:	08018227 	.word	0x08018227
 8018138:	080180e9 	.word	0x080180e9
 801813c:	080180e9 	.word	0x080180e9
 8018140:	0801828f 	.word	0x0801828f
 8018144:	080180e9 	.word	0x080180e9
 8018148:	08018197 	.word	0x08018197
 801814c:	080180e9 	.word	0x080180e9
 8018150:	080180e9 	.word	0x080180e9
 8018154:	0801822f 	.word	0x0801822f
 8018158:	6833      	ldr	r3, [r6, #0]
 801815a:	1d1a      	adds	r2, r3, #4
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	6032      	str	r2, [r6, #0]
 8018160:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018164:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018168:	2301      	movs	r3, #1
 801816a:	e09d      	b.n	80182a8 <_printf_i+0x1e8>
 801816c:	6833      	ldr	r3, [r6, #0]
 801816e:	6820      	ldr	r0, [r4, #0]
 8018170:	1d19      	adds	r1, r3, #4
 8018172:	6031      	str	r1, [r6, #0]
 8018174:	0606      	lsls	r6, r0, #24
 8018176:	d501      	bpl.n	801817c <_printf_i+0xbc>
 8018178:	681d      	ldr	r5, [r3, #0]
 801817a:	e003      	b.n	8018184 <_printf_i+0xc4>
 801817c:	0645      	lsls	r5, r0, #25
 801817e:	d5fb      	bpl.n	8018178 <_printf_i+0xb8>
 8018180:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018184:	2d00      	cmp	r5, #0
 8018186:	da03      	bge.n	8018190 <_printf_i+0xd0>
 8018188:	232d      	movs	r3, #45	@ 0x2d
 801818a:	426d      	negs	r5, r5
 801818c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018190:	4859      	ldr	r0, [pc, #356]	@ (80182f8 <_printf_i+0x238>)
 8018192:	230a      	movs	r3, #10
 8018194:	e011      	b.n	80181ba <_printf_i+0xfa>
 8018196:	6821      	ldr	r1, [r4, #0]
 8018198:	6833      	ldr	r3, [r6, #0]
 801819a:	0608      	lsls	r0, r1, #24
 801819c:	f853 5b04 	ldr.w	r5, [r3], #4
 80181a0:	d402      	bmi.n	80181a8 <_printf_i+0xe8>
 80181a2:	0649      	lsls	r1, r1, #25
 80181a4:	bf48      	it	mi
 80181a6:	b2ad      	uxthmi	r5, r5
 80181a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80181aa:	4853      	ldr	r0, [pc, #332]	@ (80182f8 <_printf_i+0x238>)
 80181ac:	6033      	str	r3, [r6, #0]
 80181ae:	bf14      	ite	ne
 80181b0:	230a      	movne	r3, #10
 80181b2:	2308      	moveq	r3, #8
 80181b4:	2100      	movs	r1, #0
 80181b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80181ba:	6866      	ldr	r6, [r4, #4]
 80181bc:	60a6      	str	r6, [r4, #8]
 80181be:	2e00      	cmp	r6, #0
 80181c0:	bfa2      	ittt	ge
 80181c2:	6821      	ldrge	r1, [r4, #0]
 80181c4:	f021 0104 	bicge.w	r1, r1, #4
 80181c8:	6021      	strge	r1, [r4, #0]
 80181ca:	b90d      	cbnz	r5, 80181d0 <_printf_i+0x110>
 80181cc:	2e00      	cmp	r6, #0
 80181ce:	d04b      	beq.n	8018268 <_printf_i+0x1a8>
 80181d0:	4616      	mov	r6, r2
 80181d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80181d6:	fb03 5711 	mls	r7, r3, r1, r5
 80181da:	5dc7      	ldrb	r7, [r0, r7]
 80181dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80181e0:	462f      	mov	r7, r5
 80181e2:	42bb      	cmp	r3, r7
 80181e4:	460d      	mov	r5, r1
 80181e6:	d9f4      	bls.n	80181d2 <_printf_i+0x112>
 80181e8:	2b08      	cmp	r3, #8
 80181ea:	d10b      	bne.n	8018204 <_printf_i+0x144>
 80181ec:	6823      	ldr	r3, [r4, #0]
 80181ee:	07df      	lsls	r7, r3, #31
 80181f0:	d508      	bpl.n	8018204 <_printf_i+0x144>
 80181f2:	6923      	ldr	r3, [r4, #16]
 80181f4:	6861      	ldr	r1, [r4, #4]
 80181f6:	4299      	cmp	r1, r3
 80181f8:	bfde      	ittt	le
 80181fa:	2330      	movle	r3, #48	@ 0x30
 80181fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018200:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8018204:	1b92      	subs	r2, r2, r6
 8018206:	6122      	str	r2, [r4, #16]
 8018208:	f8cd a000 	str.w	sl, [sp]
 801820c:	464b      	mov	r3, r9
 801820e:	aa03      	add	r2, sp, #12
 8018210:	4621      	mov	r1, r4
 8018212:	4640      	mov	r0, r8
 8018214:	f7ff fee6 	bl	8017fe4 <_printf_common>
 8018218:	3001      	adds	r0, #1
 801821a:	d14a      	bne.n	80182b2 <_printf_i+0x1f2>
 801821c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018220:	b004      	add	sp, #16
 8018222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018226:	6823      	ldr	r3, [r4, #0]
 8018228:	f043 0320 	orr.w	r3, r3, #32
 801822c:	6023      	str	r3, [r4, #0]
 801822e:	4833      	ldr	r0, [pc, #204]	@ (80182fc <_printf_i+0x23c>)
 8018230:	2778      	movs	r7, #120	@ 0x78
 8018232:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018236:	6823      	ldr	r3, [r4, #0]
 8018238:	6831      	ldr	r1, [r6, #0]
 801823a:	061f      	lsls	r7, r3, #24
 801823c:	f851 5b04 	ldr.w	r5, [r1], #4
 8018240:	d402      	bmi.n	8018248 <_printf_i+0x188>
 8018242:	065f      	lsls	r7, r3, #25
 8018244:	bf48      	it	mi
 8018246:	b2ad      	uxthmi	r5, r5
 8018248:	6031      	str	r1, [r6, #0]
 801824a:	07d9      	lsls	r1, r3, #31
 801824c:	bf44      	itt	mi
 801824e:	f043 0320 	orrmi.w	r3, r3, #32
 8018252:	6023      	strmi	r3, [r4, #0]
 8018254:	b11d      	cbz	r5, 801825e <_printf_i+0x19e>
 8018256:	2310      	movs	r3, #16
 8018258:	e7ac      	b.n	80181b4 <_printf_i+0xf4>
 801825a:	4827      	ldr	r0, [pc, #156]	@ (80182f8 <_printf_i+0x238>)
 801825c:	e7e9      	b.n	8018232 <_printf_i+0x172>
 801825e:	6823      	ldr	r3, [r4, #0]
 8018260:	f023 0320 	bic.w	r3, r3, #32
 8018264:	6023      	str	r3, [r4, #0]
 8018266:	e7f6      	b.n	8018256 <_printf_i+0x196>
 8018268:	4616      	mov	r6, r2
 801826a:	e7bd      	b.n	80181e8 <_printf_i+0x128>
 801826c:	6833      	ldr	r3, [r6, #0]
 801826e:	6825      	ldr	r5, [r4, #0]
 8018270:	6961      	ldr	r1, [r4, #20]
 8018272:	1d18      	adds	r0, r3, #4
 8018274:	6030      	str	r0, [r6, #0]
 8018276:	062e      	lsls	r6, r5, #24
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	d501      	bpl.n	8018280 <_printf_i+0x1c0>
 801827c:	6019      	str	r1, [r3, #0]
 801827e:	e002      	b.n	8018286 <_printf_i+0x1c6>
 8018280:	0668      	lsls	r0, r5, #25
 8018282:	d5fb      	bpl.n	801827c <_printf_i+0x1bc>
 8018284:	8019      	strh	r1, [r3, #0]
 8018286:	2300      	movs	r3, #0
 8018288:	6123      	str	r3, [r4, #16]
 801828a:	4616      	mov	r6, r2
 801828c:	e7bc      	b.n	8018208 <_printf_i+0x148>
 801828e:	6833      	ldr	r3, [r6, #0]
 8018290:	1d1a      	adds	r2, r3, #4
 8018292:	6032      	str	r2, [r6, #0]
 8018294:	681e      	ldr	r6, [r3, #0]
 8018296:	6862      	ldr	r2, [r4, #4]
 8018298:	2100      	movs	r1, #0
 801829a:	4630      	mov	r0, r6
 801829c:	f7e7 ffd8 	bl	8000250 <memchr>
 80182a0:	b108      	cbz	r0, 80182a6 <_printf_i+0x1e6>
 80182a2:	1b80      	subs	r0, r0, r6
 80182a4:	6060      	str	r0, [r4, #4]
 80182a6:	6863      	ldr	r3, [r4, #4]
 80182a8:	6123      	str	r3, [r4, #16]
 80182aa:	2300      	movs	r3, #0
 80182ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80182b0:	e7aa      	b.n	8018208 <_printf_i+0x148>
 80182b2:	6923      	ldr	r3, [r4, #16]
 80182b4:	4632      	mov	r2, r6
 80182b6:	4649      	mov	r1, r9
 80182b8:	4640      	mov	r0, r8
 80182ba:	47d0      	blx	sl
 80182bc:	3001      	adds	r0, #1
 80182be:	d0ad      	beq.n	801821c <_printf_i+0x15c>
 80182c0:	6823      	ldr	r3, [r4, #0]
 80182c2:	079b      	lsls	r3, r3, #30
 80182c4:	d413      	bmi.n	80182ee <_printf_i+0x22e>
 80182c6:	68e0      	ldr	r0, [r4, #12]
 80182c8:	9b03      	ldr	r3, [sp, #12]
 80182ca:	4298      	cmp	r0, r3
 80182cc:	bfb8      	it	lt
 80182ce:	4618      	movlt	r0, r3
 80182d0:	e7a6      	b.n	8018220 <_printf_i+0x160>
 80182d2:	2301      	movs	r3, #1
 80182d4:	4632      	mov	r2, r6
 80182d6:	4649      	mov	r1, r9
 80182d8:	4640      	mov	r0, r8
 80182da:	47d0      	blx	sl
 80182dc:	3001      	adds	r0, #1
 80182de:	d09d      	beq.n	801821c <_printf_i+0x15c>
 80182e0:	3501      	adds	r5, #1
 80182e2:	68e3      	ldr	r3, [r4, #12]
 80182e4:	9903      	ldr	r1, [sp, #12]
 80182e6:	1a5b      	subs	r3, r3, r1
 80182e8:	42ab      	cmp	r3, r5
 80182ea:	dcf2      	bgt.n	80182d2 <_printf_i+0x212>
 80182ec:	e7eb      	b.n	80182c6 <_printf_i+0x206>
 80182ee:	2500      	movs	r5, #0
 80182f0:	f104 0619 	add.w	r6, r4, #25
 80182f4:	e7f5      	b.n	80182e2 <_printf_i+0x222>
 80182f6:	bf00      	nop
 80182f8:	0801998f 	.word	0x0801998f
 80182fc:	080199a0 	.word	0x080199a0

08018300 <__sflush_r>:
 8018300:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018308:	0716      	lsls	r6, r2, #28
 801830a:	4605      	mov	r5, r0
 801830c:	460c      	mov	r4, r1
 801830e:	d454      	bmi.n	80183ba <__sflush_r+0xba>
 8018310:	684b      	ldr	r3, [r1, #4]
 8018312:	2b00      	cmp	r3, #0
 8018314:	dc02      	bgt.n	801831c <__sflush_r+0x1c>
 8018316:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018318:	2b00      	cmp	r3, #0
 801831a:	dd48      	ble.n	80183ae <__sflush_r+0xae>
 801831c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801831e:	2e00      	cmp	r6, #0
 8018320:	d045      	beq.n	80183ae <__sflush_r+0xae>
 8018322:	2300      	movs	r3, #0
 8018324:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018328:	682f      	ldr	r7, [r5, #0]
 801832a:	6a21      	ldr	r1, [r4, #32]
 801832c:	602b      	str	r3, [r5, #0]
 801832e:	d030      	beq.n	8018392 <__sflush_r+0x92>
 8018330:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018332:	89a3      	ldrh	r3, [r4, #12]
 8018334:	0759      	lsls	r1, r3, #29
 8018336:	d505      	bpl.n	8018344 <__sflush_r+0x44>
 8018338:	6863      	ldr	r3, [r4, #4]
 801833a:	1ad2      	subs	r2, r2, r3
 801833c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801833e:	b10b      	cbz	r3, 8018344 <__sflush_r+0x44>
 8018340:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018342:	1ad2      	subs	r2, r2, r3
 8018344:	2300      	movs	r3, #0
 8018346:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018348:	6a21      	ldr	r1, [r4, #32]
 801834a:	4628      	mov	r0, r5
 801834c:	47b0      	blx	r6
 801834e:	1c43      	adds	r3, r0, #1
 8018350:	89a3      	ldrh	r3, [r4, #12]
 8018352:	d106      	bne.n	8018362 <__sflush_r+0x62>
 8018354:	6829      	ldr	r1, [r5, #0]
 8018356:	291d      	cmp	r1, #29
 8018358:	d82b      	bhi.n	80183b2 <__sflush_r+0xb2>
 801835a:	4a2a      	ldr	r2, [pc, #168]	@ (8018404 <__sflush_r+0x104>)
 801835c:	410a      	asrs	r2, r1
 801835e:	07d6      	lsls	r6, r2, #31
 8018360:	d427      	bmi.n	80183b2 <__sflush_r+0xb2>
 8018362:	2200      	movs	r2, #0
 8018364:	6062      	str	r2, [r4, #4]
 8018366:	04d9      	lsls	r1, r3, #19
 8018368:	6922      	ldr	r2, [r4, #16]
 801836a:	6022      	str	r2, [r4, #0]
 801836c:	d504      	bpl.n	8018378 <__sflush_r+0x78>
 801836e:	1c42      	adds	r2, r0, #1
 8018370:	d101      	bne.n	8018376 <__sflush_r+0x76>
 8018372:	682b      	ldr	r3, [r5, #0]
 8018374:	b903      	cbnz	r3, 8018378 <__sflush_r+0x78>
 8018376:	6560      	str	r0, [r4, #84]	@ 0x54
 8018378:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801837a:	602f      	str	r7, [r5, #0]
 801837c:	b1b9      	cbz	r1, 80183ae <__sflush_r+0xae>
 801837e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018382:	4299      	cmp	r1, r3
 8018384:	d002      	beq.n	801838c <__sflush_r+0x8c>
 8018386:	4628      	mov	r0, r5
 8018388:	f7ff fb40 	bl	8017a0c <_free_r>
 801838c:	2300      	movs	r3, #0
 801838e:	6363      	str	r3, [r4, #52]	@ 0x34
 8018390:	e00d      	b.n	80183ae <__sflush_r+0xae>
 8018392:	2301      	movs	r3, #1
 8018394:	4628      	mov	r0, r5
 8018396:	47b0      	blx	r6
 8018398:	4602      	mov	r2, r0
 801839a:	1c50      	adds	r0, r2, #1
 801839c:	d1c9      	bne.n	8018332 <__sflush_r+0x32>
 801839e:	682b      	ldr	r3, [r5, #0]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d0c6      	beq.n	8018332 <__sflush_r+0x32>
 80183a4:	2b1d      	cmp	r3, #29
 80183a6:	d001      	beq.n	80183ac <__sflush_r+0xac>
 80183a8:	2b16      	cmp	r3, #22
 80183aa:	d11e      	bne.n	80183ea <__sflush_r+0xea>
 80183ac:	602f      	str	r7, [r5, #0]
 80183ae:	2000      	movs	r0, #0
 80183b0:	e022      	b.n	80183f8 <__sflush_r+0xf8>
 80183b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80183b6:	b21b      	sxth	r3, r3
 80183b8:	e01b      	b.n	80183f2 <__sflush_r+0xf2>
 80183ba:	690f      	ldr	r7, [r1, #16]
 80183bc:	2f00      	cmp	r7, #0
 80183be:	d0f6      	beq.n	80183ae <__sflush_r+0xae>
 80183c0:	0793      	lsls	r3, r2, #30
 80183c2:	680e      	ldr	r6, [r1, #0]
 80183c4:	bf08      	it	eq
 80183c6:	694b      	ldreq	r3, [r1, #20]
 80183c8:	600f      	str	r7, [r1, #0]
 80183ca:	bf18      	it	ne
 80183cc:	2300      	movne	r3, #0
 80183ce:	eba6 0807 	sub.w	r8, r6, r7
 80183d2:	608b      	str	r3, [r1, #8]
 80183d4:	f1b8 0f00 	cmp.w	r8, #0
 80183d8:	dde9      	ble.n	80183ae <__sflush_r+0xae>
 80183da:	6a21      	ldr	r1, [r4, #32]
 80183dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80183de:	4643      	mov	r3, r8
 80183e0:	463a      	mov	r2, r7
 80183e2:	4628      	mov	r0, r5
 80183e4:	47b0      	blx	r6
 80183e6:	2800      	cmp	r0, #0
 80183e8:	dc08      	bgt.n	80183fc <__sflush_r+0xfc>
 80183ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80183f2:	81a3      	strh	r3, [r4, #12]
 80183f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80183f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183fc:	4407      	add	r7, r0
 80183fe:	eba8 0800 	sub.w	r8, r8, r0
 8018402:	e7e7      	b.n	80183d4 <__sflush_r+0xd4>
 8018404:	dfbffffe 	.word	0xdfbffffe

08018408 <_fflush_r>:
 8018408:	b538      	push	{r3, r4, r5, lr}
 801840a:	690b      	ldr	r3, [r1, #16]
 801840c:	4605      	mov	r5, r0
 801840e:	460c      	mov	r4, r1
 8018410:	b913      	cbnz	r3, 8018418 <_fflush_r+0x10>
 8018412:	2500      	movs	r5, #0
 8018414:	4628      	mov	r0, r5
 8018416:	bd38      	pop	{r3, r4, r5, pc}
 8018418:	b118      	cbz	r0, 8018422 <_fflush_r+0x1a>
 801841a:	6a03      	ldr	r3, [r0, #32]
 801841c:	b90b      	cbnz	r3, 8018422 <_fflush_r+0x1a>
 801841e:	f7ff f8d1 	bl	80175c4 <__sinit>
 8018422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018426:	2b00      	cmp	r3, #0
 8018428:	d0f3      	beq.n	8018412 <_fflush_r+0xa>
 801842a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801842c:	07d0      	lsls	r0, r2, #31
 801842e:	d404      	bmi.n	801843a <_fflush_r+0x32>
 8018430:	0599      	lsls	r1, r3, #22
 8018432:	d402      	bmi.n	801843a <_fflush_r+0x32>
 8018434:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018436:	f7ff faa6 	bl	8017986 <__retarget_lock_acquire_recursive>
 801843a:	4628      	mov	r0, r5
 801843c:	4621      	mov	r1, r4
 801843e:	f7ff ff5f 	bl	8018300 <__sflush_r>
 8018442:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018444:	07da      	lsls	r2, r3, #31
 8018446:	4605      	mov	r5, r0
 8018448:	d4e4      	bmi.n	8018414 <_fflush_r+0xc>
 801844a:	89a3      	ldrh	r3, [r4, #12]
 801844c:	059b      	lsls	r3, r3, #22
 801844e:	d4e1      	bmi.n	8018414 <_fflush_r+0xc>
 8018450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018452:	f7ff fa99 	bl	8017988 <__retarget_lock_release_recursive>
 8018456:	e7dd      	b.n	8018414 <_fflush_r+0xc>

08018458 <fiprintf>:
 8018458:	b40e      	push	{r1, r2, r3}
 801845a:	b503      	push	{r0, r1, lr}
 801845c:	4601      	mov	r1, r0
 801845e:	ab03      	add	r3, sp, #12
 8018460:	4805      	ldr	r0, [pc, #20]	@ (8018478 <fiprintf+0x20>)
 8018462:	f853 2b04 	ldr.w	r2, [r3], #4
 8018466:	6800      	ldr	r0, [r0, #0]
 8018468:	9301      	str	r3, [sp, #4]
 801846a:	f7ff fca3 	bl	8017db4 <_vfiprintf_r>
 801846e:	b002      	add	sp, #8
 8018470:	f85d eb04 	ldr.w	lr, [sp], #4
 8018474:	b003      	add	sp, #12
 8018476:	4770      	bx	lr
 8018478:	20000338 	.word	0x20000338

0801847c <__swbuf_r>:
 801847c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801847e:	460e      	mov	r6, r1
 8018480:	4614      	mov	r4, r2
 8018482:	4605      	mov	r5, r0
 8018484:	b118      	cbz	r0, 801848e <__swbuf_r+0x12>
 8018486:	6a03      	ldr	r3, [r0, #32]
 8018488:	b90b      	cbnz	r3, 801848e <__swbuf_r+0x12>
 801848a:	f7ff f89b 	bl	80175c4 <__sinit>
 801848e:	69a3      	ldr	r3, [r4, #24]
 8018490:	60a3      	str	r3, [r4, #8]
 8018492:	89a3      	ldrh	r3, [r4, #12]
 8018494:	071a      	lsls	r2, r3, #28
 8018496:	d501      	bpl.n	801849c <__swbuf_r+0x20>
 8018498:	6923      	ldr	r3, [r4, #16]
 801849a:	b943      	cbnz	r3, 80184ae <__swbuf_r+0x32>
 801849c:	4621      	mov	r1, r4
 801849e:	4628      	mov	r0, r5
 80184a0:	f000 f82a 	bl	80184f8 <__swsetup_r>
 80184a4:	b118      	cbz	r0, 80184ae <__swbuf_r+0x32>
 80184a6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80184aa:	4638      	mov	r0, r7
 80184ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80184ae:	6823      	ldr	r3, [r4, #0]
 80184b0:	6922      	ldr	r2, [r4, #16]
 80184b2:	1a98      	subs	r0, r3, r2
 80184b4:	6963      	ldr	r3, [r4, #20]
 80184b6:	b2f6      	uxtb	r6, r6
 80184b8:	4283      	cmp	r3, r0
 80184ba:	4637      	mov	r7, r6
 80184bc:	dc05      	bgt.n	80184ca <__swbuf_r+0x4e>
 80184be:	4621      	mov	r1, r4
 80184c0:	4628      	mov	r0, r5
 80184c2:	f7ff ffa1 	bl	8018408 <_fflush_r>
 80184c6:	2800      	cmp	r0, #0
 80184c8:	d1ed      	bne.n	80184a6 <__swbuf_r+0x2a>
 80184ca:	68a3      	ldr	r3, [r4, #8]
 80184cc:	3b01      	subs	r3, #1
 80184ce:	60a3      	str	r3, [r4, #8]
 80184d0:	6823      	ldr	r3, [r4, #0]
 80184d2:	1c5a      	adds	r2, r3, #1
 80184d4:	6022      	str	r2, [r4, #0]
 80184d6:	701e      	strb	r6, [r3, #0]
 80184d8:	6962      	ldr	r2, [r4, #20]
 80184da:	1c43      	adds	r3, r0, #1
 80184dc:	429a      	cmp	r2, r3
 80184de:	d004      	beq.n	80184ea <__swbuf_r+0x6e>
 80184e0:	89a3      	ldrh	r3, [r4, #12]
 80184e2:	07db      	lsls	r3, r3, #31
 80184e4:	d5e1      	bpl.n	80184aa <__swbuf_r+0x2e>
 80184e6:	2e0a      	cmp	r6, #10
 80184e8:	d1df      	bne.n	80184aa <__swbuf_r+0x2e>
 80184ea:	4621      	mov	r1, r4
 80184ec:	4628      	mov	r0, r5
 80184ee:	f7ff ff8b 	bl	8018408 <_fflush_r>
 80184f2:	2800      	cmp	r0, #0
 80184f4:	d0d9      	beq.n	80184aa <__swbuf_r+0x2e>
 80184f6:	e7d6      	b.n	80184a6 <__swbuf_r+0x2a>

080184f8 <__swsetup_r>:
 80184f8:	b538      	push	{r3, r4, r5, lr}
 80184fa:	4b29      	ldr	r3, [pc, #164]	@ (80185a0 <__swsetup_r+0xa8>)
 80184fc:	4605      	mov	r5, r0
 80184fe:	6818      	ldr	r0, [r3, #0]
 8018500:	460c      	mov	r4, r1
 8018502:	b118      	cbz	r0, 801850c <__swsetup_r+0x14>
 8018504:	6a03      	ldr	r3, [r0, #32]
 8018506:	b90b      	cbnz	r3, 801850c <__swsetup_r+0x14>
 8018508:	f7ff f85c 	bl	80175c4 <__sinit>
 801850c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018510:	0719      	lsls	r1, r3, #28
 8018512:	d422      	bmi.n	801855a <__swsetup_r+0x62>
 8018514:	06da      	lsls	r2, r3, #27
 8018516:	d407      	bmi.n	8018528 <__swsetup_r+0x30>
 8018518:	2209      	movs	r2, #9
 801851a:	602a      	str	r2, [r5, #0]
 801851c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018520:	81a3      	strh	r3, [r4, #12]
 8018522:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018526:	e033      	b.n	8018590 <__swsetup_r+0x98>
 8018528:	0758      	lsls	r0, r3, #29
 801852a:	d512      	bpl.n	8018552 <__swsetup_r+0x5a>
 801852c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801852e:	b141      	cbz	r1, 8018542 <__swsetup_r+0x4a>
 8018530:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018534:	4299      	cmp	r1, r3
 8018536:	d002      	beq.n	801853e <__swsetup_r+0x46>
 8018538:	4628      	mov	r0, r5
 801853a:	f7ff fa67 	bl	8017a0c <_free_r>
 801853e:	2300      	movs	r3, #0
 8018540:	6363      	str	r3, [r4, #52]	@ 0x34
 8018542:	89a3      	ldrh	r3, [r4, #12]
 8018544:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018548:	81a3      	strh	r3, [r4, #12]
 801854a:	2300      	movs	r3, #0
 801854c:	6063      	str	r3, [r4, #4]
 801854e:	6923      	ldr	r3, [r4, #16]
 8018550:	6023      	str	r3, [r4, #0]
 8018552:	89a3      	ldrh	r3, [r4, #12]
 8018554:	f043 0308 	orr.w	r3, r3, #8
 8018558:	81a3      	strh	r3, [r4, #12]
 801855a:	6923      	ldr	r3, [r4, #16]
 801855c:	b94b      	cbnz	r3, 8018572 <__swsetup_r+0x7a>
 801855e:	89a3      	ldrh	r3, [r4, #12]
 8018560:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018568:	d003      	beq.n	8018572 <__swsetup_r+0x7a>
 801856a:	4621      	mov	r1, r4
 801856c:	4628      	mov	r0, r5
 801856e:	f000 f846 	bl	80185fe <__smakebuf_r>
 8018572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018576:	f013 0201 	ands.w	r2, r3, #1
 801857a:	d00a      	beq.n	8018592 <__swsetup_r+0x9a>
 801857c:	2200      	movs	r2, #0
 801857e:	60a2      	str	r2, [r4, #8]
 8018580:	6962      	ldr	r2, [r4, #20]
 8018582:	4252      	negs	r2, r2
 8018584:	61a2      	str	r2, [r4, #24]
 8018586:	6922      	ldr	r2, [r4, #16]
 8018588:	b942      	cbnz	r2, 801859c <__swsetup_r+0xa4>
 801858a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801858e:	d1c5      	bne.n	801851c <__swsetup_r+0x24>
 8018590:	bd38      	pop	{r3, r4, r5, pc}
 8018592:	0799      	lsls	r1, r3, #30
 8018594:	bf58      	it	pl
 8018596:	6962      	ldrpl	r2, [r4, #20]
 8018598:	60a2      	str	r2, [r4, #8]
 801859a:	e7f4      	b.n	8018586 <__swsetup_r+0x8e>
 801859c:	2000      	movs	r0, #0
 801859e:	e7f7      	b.n	8018590 <__swsetup_r+0x98>
 80185a0:	20000338 	.word	0x20000338

080185a4 <abort>:
 80185a4:	b508      	push	{r3, lr}
 80185a6:	2006      	movs	r0, #6
 80185a8:	f000 f88e 	bl	80186c8 <raise>
 80185ac:	2001      	movs	r0, #1
 80185ae:	f7e9 fb1d 	bl	8001bec <_exit>

080185b2 <__swhatbuf_r>:
 80185b2:	b570      	push	{r4, r5, r6, lr}
 80185b4:	460c      	mov	r4, r1
 80185b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80185ba:	2900      	cmp	r1, #0
 80185bc:	b096      	sub	sp, #88	@ 0x58
 80185be:	4615      	mov	r5, r2
 80185c0:	461e      	mov	r6, r3
 80185c2:	da0d      	bge.n	80185e0 <__swhatbuf_r+0x2e>
 80185c4:	89a3      	ldrh	r3, [r4, #12]
 80185c6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80185ca:	f04f 0100 	mov.w	r1, #0
 80185ce:	bf14      	ite	ne
 80185d0:	2340      	movne	r3, #64	@ 0x40
 80185d2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80185d6:	2000      	movs	r0, #0
 80185d8:	6031      	str	r1, [r6, #0]
 80185da:	602b      	str	r3, [r5, #0]
 80185dc:	b016      	add	sp, #88	@ 0x58
 80185de:	bd70      	pop	{r4, r5, r6, pc}
 80185e0:	466a      	mov	r2, sp
 80185e2:	f000 f879 	bl	80186d8 <_fstat_r>
 80185e6:	2800      	cmp	r0, #0
 80185e8:	dbec      	blt.n	80185c4 <__swhatbuf_r+0x12>
 80185ea:	9901      	ldr	r1, [sp, #4]
 80185ec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80185f0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80185f4:	4259      	negs	r1, r3
 80185f6:	4159      	adcs	r1, r3
 80185f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80185fc:	e7eb      	b.n	80185d6 <__swhatbuf_r+0x24>

080185fe <__smakebuf_r>:
 80185fe:	898b      	ldrh	r3, [r1, #12]
 8018600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018602:	079d      	lsls	r5, r3, #30
 8018604:	4606      	mov	r6, r0
 8018606:	460c      	mov	r4, r1
 8018608:	d507      	bpl.n	801861a <__smakebuf_r+0x1c>
 801860a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801860e:	6023      	str	r3, [r4, #0]
 8018610:	6123      	str	r3, [r4, #16]
 8018612:	2301      	movs	r3, #1
 8018614:	6163      	str	r3, [r4, #20]
 8018616:	b003      	add	sp, #12
 8018618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801861a:	ab01      	add	r3, sp, #4
 801861c:	466a      	mov	r2, sp
 801861e:	f7ff ffc8 	bl	80185b2 <__swhatbuf_r>
 8018622:	9f00      	ldr	r7, [sp, #0]
 8018624:	4605      	mov	r5, r0
 8018626:	4639      	mov	r1, r7
 8018628:	4630      	mov	r0, r6
 801862a:	f7fe fd99 	bl	8017160 <_malloc_r>
 801862e:	b948      	cbnz	r0, 8018644 <__smakebuf_r+0x46>
 8018630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018634:	059a      	lsls	r2, r3, #22
 8018636:	d4ee      	bmi.n	8018616 <__smakebuf_r+0x18>
 8018638:	f023 0303 	bic.w	r3, r3, #3
 801863c:	f043 0302 	orr.w	r3, r3, #2
 8018640:	81a3      	strh	r3, [r4, #12]
 8018642:	e7e2      	b.n	801860a <__smakebuf_r+0xc>
 8018644:	89a3      	ldrh	r3, [r4, #12]
 8018646:	6020      	str	r0, [r4, #0]
 8018648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801864c:	81a3      	strh	r3, [r4, #12]
 801864e:	9b01      	ldr	r3, [sp, #4]
 8018650:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018654:	b15b      	cbz	r3, 801866e <__smakebuf_r+0x70>
 8018656:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801865a:	4630      	mov	r0, r6
 801865c:	f000 f84e 	bl	80186fc <_isatty_r>
 8018660:	b128      	cbz	r0, 801866e <__smakebuf_r+0x70>
 8018662:	89a3      	ldrh	r3, [r4, #12]
 8018664:	f023 0303 	bic.w	r3, r3, #3
 8018668:	f043 0301 	orr.w	r3, r3, #1
 801866c:	81a3      	strh	r3, [r4, #12]
 801866e:	89a3      	ldrh	r3, [r4, #12]
 8018670:	431d      	orrs	r5, r3
 8018672:	81a5      	strh	r5, [r4, #12]
 8018674:	e7cf      	b.n	8018616 <__smakebuf_r+0x18>

08018676 <_raise_r>:
 8018676:	291f      	cmp	r1, #31
 8018678:	b538      	push	{r3, r4, r5, lr}
 801867a:	4605      	mov	r5, r0
 801867c:	460c      	mov	r4, r1
 801867e:	d904      	bls.n	801868a <_raise_r+0x14>
 8018680:	2316      	movs	r3, #22
 8018682:	6003      	str	r3, [r0, #0]
 8018684:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018688:	bd38      	pop	{r3, r4, r5, pc}
 801868a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801868c:	b112      	cbz	r2, 8018694 <_raise_r+0x1e>
 801868e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018692:	b94b      	cbnz	r3, 80186a8 <_raise_r+0x32>
 8018694:	4628      	mov	r0, r5
 8018696:	f000 f853 	bl	8018740 <_getpid_r>
 801869a:	4622      	mov	r2, r4
 801869c:	4601      	mov	r1, r0
 801869e:	4628      	mov	r0, r5
 80186a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80186a4:	f000 b83a 	b.w	801871c <_kill_r>
 80186a8:	2b01      	cmp	r3, #1
 80186aa:	d00a      	beq.n	80186c2 <_raise_r+0x4c>
 80186ac:	1c59      	adds	r1, r3, #1
 80186ae:	d103      	bne.n	80186b8 <_raise_r+0x42>
 80186b0:	2316      	movs	r3, #22
 80186b2:	6003      	str	r3, [r0, #0]
 80186b4:	2001      	movs	r0, #1
 80186b6:	e7e7      	b.n	8018688 <_raise_r+0x12>
 80186b8:	2100      	movs	r1, #0
 80186ba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80186be:	4620      	mov	r0, r4
 80186c0:	4798      	blx	r3
 80186c2:	2000      	movs	r0, #0
 80186c4:	e7e0      	b.n	8018688 <_raise_r+0x12>
	...

080186c8 <raise>:
 80186c8:	4b02      	ldr	r3, [pc, #8]	@ (80186d4 <raise+0xc>)
 80186ca:	4601      	mov	r1, r0
 80186cc:	6818      	ldr	r0, [r3, #0]
 80186ce:	f7ff bfd2 	b.w	8018676 <_raise_r>
 80186d2:	bf00      	nop
 80186d4:	20000338 	.word	0x20000338

080186d8 <_fstat_r>:
 80186d8:	b538      	push	{r3, r4, r5, lr}
 80186da:	4d07      	ldr	r5, [pc, #28]	@ (80186f8 <_fstat_r+0x20>)
 80186dc:	2300      	movs	r3, #0
 80186de:	4604      	mov	r4, r0
 80186e0:	4608      	mov	r0, r1
 80186e2:	4611      	mov	r1, r2
 80186e4:	602b      	str	r3, [r5, #0]
 80186e6:	f7e9 fad1 	bl	8001c8c <_fstat>
 80186ea:	1c43      	adds	r3, r0, #1
 80186ec:	d102      	bne.n	80186f4 <_fstat_r+0x1c>
 80186ee:	682b      	ldr	r3, [r5, #0]
 80186f0:	b103      	cbz	r3, 80186f4 <_fstat_r+0x1c>
 80186f2:	6023      	str	r3, [r4, #0]
 80186f4:	bd38      	pop	{r3, r4, r5, pc}
 80186f6:	bf00      	nop
 80186f8:	2000b33c 	.word	0x2000b33c

080186fc <_isatty_r>:
 80186fc:	b538      	push	{r3, r4, r5, lr}
 80186fe:	4d06      	ldr	r5, [pc, #24]	@ (8018718 <_isatty_r+0x1c>)
 8018700:	2300      	movs	r3, #0
 8018702:	4604      	mov	r4, r0
 8018704:	4608      	mov	r0, r1
 8018706:	602b      	str	r3, [r5, #0]
 8018708:	f7e9 fad0 	bl	8001cac <_isatty>
 801870c:	1c43      	adds	r3, r0, #1
 801870e:	d102      	bne.n	8018716 <_isatty_r+0x1a>
 8018710:	682b      	ldr	r3, [r5, #0]
 8018712:	b103      	cbz	r3, 8018716 <_isatty_r+0x1a>
 8018714:	6023      	str	r3, [r4, #0]
 8018716:	bd38      	pop	{r3, r4, r5, pc}
 8018718:	2000b33c 	.word	0x2000b33c

0801871c <_kill_r>:
 801871c:	b538      	push	{r3, r4, r5, lr}
 801871e:	4d07      	ldr	r5, [pc, #28]	@ (801873c <_kill_r+0x20>)
 8018720:	2300      	movs	r3, #0
 8018722:	4604      	mov	r4, r0
 8018724:	4608      	mov	r0, r1
 8018726:	4611      	mov	r1, r2
 8018728:	602b      	str	r3, [r5, #0]
 801872a:	f7e9 fa4f 	bl	8001bcc <_kill>
 801872e:	1c43      	adds	r3, r0, #1
 8018730:	d102      	bne.n	8018738 <_kill_r+0x1c>
 8018732:	682b      	ldr	r3, [r5, #0]
 8018734:	b103      	cbz	r3, 8018738 <_kill_r+0x1c>
 8018736:	6023      	str	r3, [r4, #0]
 8018738:	bd38      	pop	{r3, r4, r5, pc}
 801873a:	bf00      	nop
 801873c:	2000b33c 	.word	0x2000b33c

08018740 <_getpid_r>:
 8018740:	f7e9 ba3c 	b.w	8001bbc <_getpid>

08018744 <_init>:
 8018744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018746:	bf00      	nop
 8018748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801874a:	bc08      	pop	{r3}
 801874c:	469e      	mov	lr, r3
 801874e:	4770      	bx	lr

08018750 <_fini>:
 8018750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018752:	bf00      	nop
 8018754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018756:	bc08      	pop	{r3}
 8018758:	469e      	mov	lr, r3
 801875a:	4770      	bx	lr
